{
	"info": {
		"_postman_id": "8b036770-67ff-4e5c-b72d-a745e8519b68",
		"name": "OSS-API-Tests-old",
		"description": "##Author - Sridevi Miriyala\n\n##Description:\nThis section includes testing of the behavior of the API end points including Headers and body params testing for positive and negative paths.\n\nBased on API Definition.docx updated on 2018-03-13 Version 1.0. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Mojaloop-API",
			"item": [
				{
					"name": "participants",
					"item": [
						{
							"name": "/MSISDN/ID - Moved to New collection",
							"item": [
								{
									"name": "GET - ParticipantsByTypeAndID",
									"item": [
										{
											"name": "202",
											"item": [
												{
													"name": "202 - Accepted (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "bac0f077-5073-42a5-a99b-d0c17675fc34",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"",
																	"//Check data on payer side",
																	"// setTimeout(function () {",
																	"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       ",
																	"//       if(response.responseSize !== 0) { ",
																	"           ",
																	"//       //Checking headers",
																	"//         var headers = response.json().headers;",
																	"//         pm.test(\"payerfsp fspiop-source is switch\", function () {",
																	"//             pm.expect(headers['fspiop-source']).to.eql('switch');",
																	"//         });",
																	"        ",
																	"//         pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"//             pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"//         });",
																	"        ",
																	"//         pm.test(\"payerfsp content-type should be application/vnd.interoperability.participants+json;version=1.0\", function () {",
																	"//             pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.participants+json;version=1.0');",
																	"//         });",
																	"        ",
																	"//         pm.test(\"payerfsp accept is empty\", function () {",
																	"//             pm.expect(headers['accept']).to.eql(undefined);",
																	"//         });",
																	"        ",
																	"        ",
																	"        ",
																	"//         // //Validate protected header inside Signature",
																	"//         // var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"//         // var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"//         // console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"        ",
																	"//         // // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"//         // //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
																	"//         // // });",
																	"        ",
																	"//         // pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"//         //     pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"//         // });",
																	"//         // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /participants/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
																	"//         //     pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/participants/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
																	"//         // });",
																	"        ",
																	"",
																	"//         // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"//         //     pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"//         // });",
																	"//         // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be switch\", function () {",
																	"//         //     pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('switch');",
																	"//         // });",
																	"//         // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"//         //     pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"//         // });",
																	"//         // pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"//         //     pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"//         // });",
																	"       ",
																	"//         pm.test(\"payerfsp fspiop-uri to be /parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
																	"//             pm.expect(headers['fspiop-uri']).to.eql('/parties/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
																	"//         });",
																	"        ",
																	"//         pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"//             pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"//         });",
																	"        ",
																	"//         //Checking data",
																	"//         var jsonData = response.json().data;",
																	"//       pm.test(\"Expected fspid is payeefsp \", function () {",
																	"//           pm.expect(jsonData.fspId).to.eql(pm.variables.get(\"payeefsp\"));",
																	"//         });",
																	"        ",
																	"        ",
																	"//       } else {",
																	"//           pm.test(\"Parties FAILED - payerFSP\", function () {",
																	"//             throw new Error('Did not receive response');",
																	"//           });",
																	"           ",
																	"//       }",
																	"      ",
																	"//     });",
																	"// }, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "98c77267-e33c-45ee-b19b-527cd1855bfd",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "content-type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															},
															{
																"key": "date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "fspiop-source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "x-forwarded-for",
																"value": "",
																"type": "text",
																"disabled": true
															},
															{
																"key": "fspiop-destination",
																"value": "",
																"type": "text",
																"disabled": true
															},
															{
																"key": "fspiop-encryption",
																"value": "",
																"type": "text",
																"disabled": true
															},
															{
																"key": "fspiop-signature",
																"value": "{{fspiop-signature}}",
																"type": "text"
															},
															{
																"key": "fspiop-uri",
																"value": "/participants/MSISDN/{{pathfinderMSISDN}}",
																"type": "text"
															},
															{
																"key": "fspiop-http-method",
																"value": "GET",
																"type": "text"
															},
															{
																"key": "content-length",
																"value": "",
																"type": "text",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nURI param: MSISDN\n"
													},
													"response": []
												},
												{
													"name": "202 - Accepted (BUG) Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "dbe46b93-22a3-482d-83b3-d6abd44022d1",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"",
																	"// //Check data on payer side",
																	"// setTimeout(function () {",
																	"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       ",
																	"//       if(response.responseSize !== 0) { ",
																	"           ",
																	"//       //Checking headers",
																	"//         var headers = response.json().headers;",
																	"//         pm.test(\"payerfsp fspiop-source is switch\", function () {",
																	"//             pm.expect(headers['fspiop-source']).to.eql('switch');",
																	"//         });",
																	"        ",
																	"//         pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"//             pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"//         });",
																	"        ",
																	"//         pm.test(\"payerfsp content-type should be application/vnd.interoperability.participants+json;version=1.0\", function () {",
																	"//             pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.participants+json;version=1.0');",
																	"//         });",
																	"        ",
																	"//         pm.test(\"payerfsp accept is empty\", function () {",
																	"//             pm.expect(headers['accept']).to.eql(undefined);",
																	"//         });",
																	"        ",
																	"        ",
																	"        ",
																	"//         // //Validate protected header inside Signature",
																	"//         // var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"//         // var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"//         // console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"        ",
																	"//         // // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"//         // //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
																	"//         // // });",
																	"        ",
																	"//         // pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"//         //     pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"//         // });",
																	"//         // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /participants/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
																	"//         //     pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/participants/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
																	"//         // });",
																	"        ",
																	"",
																	"//         // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"//         //     pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"//         // });",
																	"//         // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be switch\", function () {",
																	"//         //     pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('switch');",
																	"//         // });",
																	"//         // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"//         //     pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"//         // });",
																	"//         // pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"//         //     pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"//         // });",
																	"       ",
																	"//         pm.test(\"payerfsp fspiop-uri to be /parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
																	"//             pm.expect(headers['fspiop-uri']).to.eql('/parties/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
																	"//         });",
																	"        ",
																	"//         pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"//             pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"//         });",
																	"        ",
																	"//         //Checking data",
																	"//         var jsonData = response.json().data;",
																	"//       pm.test(\"Expected fspid is payeefsp \", function () {",
																	"//           pm.expect(jsonData.fspId).to.eql(pm.variables.get(\"payeefsp\"));",
																	"//         });",
																	"        ",
																	"        ",
																	"//       } else {",
																	"//           pm.test(\"Parties FAILED - payerFSP\", function () {",
																	"//             throw new Error('Did not receive response');",
																	"//           });",
																	"           ",
																	"//       }",
																	"      ",
																	"//     });",
																	"// }, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "351be868-6e35-4a82-afaf-5e618196e7d3",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "content-type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															},
															{
																"key": "date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "fspiop-source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "x-forwarded-for",
																"value": "",
																"type": "text",
																"disabled": true
															},
															{
																"key": "fspiop-destination",
																"value": "",
																"type": "text",
																"disabled": true
															},
															{
																"key": "fspiop-encryption",
																"value": "",
																"type": "text",
																"disabled": true
															},
															{
																"key": "fspiop-signature",
																"value": "{{fspiop-signature}}",
																"type": "text"
															},
															{
																"key": "fspiop-uri",
																"value": "/participants/MSISDN/{{pathfinderMSISDN}}",
																"type": "text"
															},
															{
																"key": "fspiop-http-method",
																"value": "GET",
																"type": "text"
															},
															{
																"key": "content-length",
																"value": "",
																"type": "text",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}?currency=USD",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															],
															"query": [
																{
																	"key": "currency",
																	"value": "USD"
																}
															]
														},
														"description": "Author: Sridevi Miriyala\n\nURI param: MSISDN\n"
													},
													"response": []
												},
												{
													"name": "202 - Accepted - Ignore query Parameter",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "de191c3e-95b4-4a67-9bf1-4ead3ac0395f",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "5d71dbf6-5d33-4397-8b99-d274d3050141",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "content-type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															},
															{
																"key": "date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "fspiop-source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "x-forwarded-for",
																"value": "",
																"type": "text",
																"disabled": true
															},
															{
																"key": "fspiop-destination",
																"value": "",
																"type": "text",
																"disabled": true
															},
															{
																"key": "fspiop-encryption",
																"value": "",
																"type": "text",
																"disabled": true
															},
															{
																"key": "fspiop-signature",
																"value": "{{fspiop-signature}}",
																"type": "text"
															},
															{
																"key": "fspiop-uri",
																"value": "/participants/MSISDN/{{pathfinderMSISDN}}",
																"type": "text"
															},
															{
																"key": "fspiop-http-method",
																"value": "GET",
																"type": "text"
															},
															{
																"key": "content-length",
																"value": "",
																"type": "text",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}?xyz&amount&123",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															],
															"query": [
																{
																	"key": "xyz",
																	"value": null
																},
																{
																	"key": "amount",
																	"value": null
																},
																{
																	"key": "123",
																	"value": null
																}
															]
														},
														"description": "Author: Sridevi Miriyala\n\nURI param: MSISDN\n"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "400",
											"item": [
												{
													"name": "400 - 3101 - Invalid Type - Path Parameter",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "098e2ec9-b824-4707-8e6c-8dc4dc7ecb48",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "f324e75a-325e-4081-964e-6c822b3ad991",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Malformed syntax - 'Type' URI path parameter\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax - \\'Type\\' URI path parameter');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3101\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/XYZ/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"XYZ",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - 3101 - Malformed Header - Invalid content type",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "5b229858-ef7d-4f58-b427-ae5880410446",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b0510b68-69a9-4827-9512-080f2848fb99",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Malformed syntax - Invalid accept header\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax - Invalid accept header');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3101\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "xyz"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "404 - 3002 - Missing Mandatory ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "210a7764-9ede-4765-a2f1-eb939802aed2",
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Missing mandatory ID - Unknown URI - Not Found\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unknown URI - Not Found');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3002\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3002');",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "3fa917bf-02d8-456c-86e9-cebe3247da78",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"pm.variables.set('participantDateHeader', (new Date()).toUTCString());",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - 3102 - Missing Mandatory Headers",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "8887ad7a-c846-4dd3-b06d-f6d5696300b6",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Missing mandatory element - date is required\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element - date is required');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3102\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "fa79e039-165a-4fdd-8e16-e9ed3ed1e969",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"pm.variables.set('participantDateHeader', (new Date()).toUTCString());",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "POST - ParticipantsByTypeAndID",
									"item": [
										{
											"name": "202",
											"item": [
												{
													"name": "202 - Created",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "fe83cfa9-f2a7-4650-88d6-7f7f658a817f",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"{{payeefsp}}\",\n\t\"currency\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "400",
											"item": [
												{
													"name": "400 - Missing Date header Missing  - 3102",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ec380854-762a-4665-addc-e8ade08a47d8",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Missing mandatory element - date is required\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element - date is required');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3102\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text",
																"disabled": true
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"{{payeefsp}}\",\n\t\"currency\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - Malformed Type - xyz - 3101",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "500d9e64-e555-4078-b4da-c94c0b0ba043",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Missing mandatory element - date is required\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax - \\'Type\\' URI path parameter');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3101\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"{{payeefsp}}\",\n\t\"currency\": \"{{currency}}\",\n\t\"currency1\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/xyz/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"xyz",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - fsiop header missing - 3102",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "362b33d7-a41a-48df-9ebc-c290610107dd",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Missing mandatory element - fspiop-source is required\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element - fspiop-source is required');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3102\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text",
																"disabled": true
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"{{payeefsp}}\",\n\t\"currency\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - Missing content type - 3102",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "364f6d4f-acd7-42eb-99ac-bc44a1d3872d",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Missing mandatory element - fspiop-source is required\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element - content-type is required');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3102\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"{{payeefsp}}\",\n\t\"currency\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - Malformed Syntax - accept header - 3101",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "d8c2b446-2d46-45ec-9f06-017a882ba5d8",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Malformed syntax - Invalid accept header\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax - Invalid accept header');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3101\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text",
																"disabled": true
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"{{payeefsp}}\",\n\t\"currency\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "406 - Invalid content type  - version -3001",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "242aca85-78e3-4afa-b995-6615b94c9fd7",
																"exec": [
																	"pm.test(\"Status code is 406\", function () {",
																	"    pm.response.to.have.status(406);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Unacceptable version requested\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unacceptable version requested');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3001\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3001');",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.1",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"{{payeefsp}}\",\n\t\"currency\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - Malformed - 3101 - Invalid Accept Header",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "8fdf6820-158b-4468-8986-dfdcef26d35e",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Malformed syntax - Invalid accept header\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax - Invalid accept header');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3101\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+xml;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"{{payeefsp}}\",\n\t\"currency\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - Invalid content type - xml",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "1c4f6254-e3d7-4e26-9457-c8a7125ca69d",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Malformed syntax - Invalid content-type header\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax - Invalid content-type header');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3101\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+xml;version=1.0",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"{{payeefsp}}\",\n\t\"currency\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - Malformed - 3101 - Invalid FSPID > 32 char",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "37108046-cc5c-43c1-b256-4b7da0c51d4c",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Malformed syntax - fspId length must be less than or equal to 32 characters long\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3101\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"123456789012345678901234567890123\",\n\t\"currency\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - Malformed Type - 3101 - Invalid FSPID - 0 in data",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "29960ec6-90a6-4d86-9c59-6191dfed8793",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Missing mandatory element  - fspId is not allowed to be empty\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3102\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"\",\n\t\"currency\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - Malformed Type - 3101/3 - extra elements in currency - BUG",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "cbb932ed-0bbc-4745-a1a8-c37021ab0cd2",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Malformed syntax - CurrencyEnum\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3101\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"{{payeefsp}}\",\n\t\"currency\": \"{{currency}},GBP\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "DEL - ParticipantsByTypeAndID ( NOT IMPLEMENTED )",
									"item": [],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "PUT - ParticipantsByTypeAndID ( NOT IMPLEMENTED )",
									"item": [
										{
											"name": "200",
											"item": [
												{
													"name": "200 - Accepted (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "457bd726-ec56-4f5d-bfce-b360a659f2de",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "563c34ab-3c06-4e30-832b-3aaf7d67b4cb",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "accept",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "content-type",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															},
															{
																"key": "date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "fspiop-source",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "x-forwarded-for",
																"type": "text",
																"value": "",
																"disabled": true
															},
															{
																"key": "fspiop-destination",
																"type": "text",
																"value": "",
																"disabled": true
															},
															{
																"key": "fspiop-encryption",
																"type": "text",
																"value": "",
																"disabled": true
															},
															{
																"key": "fspiop-signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "fspiop-uri",
																"type": "text",
																"value": "/participants/MSISDN/{{pathfinderMSISDN}}"
															},
															{
																"key": "fspiop-http-method",
																"type": "text",
																"value": "GET"
															},
															{
																"key": "content-length",
																"type": "text",
																"value": "",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"fspId\":\"testfsp\"}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nURI param: MSISDN\n"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c41d478d-4937-46be-895e-1e659447f031",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "38278e40-0b59-46f9-ac9b-574db6d60d4f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "/BUSINESS/ID - Not validated",
							"item": [
								{
									"name": "GET - ParticipantsByTypeAndID",
									"item": [
										{
											"name": "202",
											"item": [
												{
													"name": "202 - Accepted (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "9bfdcb8b-b5c8-4398-8427-d83ac7e8dc37",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"",
																	"//Check data on payer side",
																	"// setTimeout(function () {",
																	"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       ",
																	"//       if(response.responseSize !== 0) { ",
																	"           ",
																	"//       //Checking headers",
																	"//         var headers = response.json().headers;",
																	"//         pm.test(\"payerfsp fspiop-source is switch\", function () {",
																	"//             pm.expect(headers['fspiop-source']).to.eql('switch');",
																	"//         });",
																	"        ",
																	"//         pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"//             pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"//         });",
																	"        ",
																	"//         pm.test(\"payerfsp content-type should be application/vnd.interoperability.participants+json;version=1.0\", function () {",
																	"//             pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.participants+json;version=1.0');",
																	"//         });",
																	"        ",
																	"//         pm.test(\"payerfsp accept is empty\", function () {",
																	"//             pm.expect(headers['accept']).to.eql(undefined);",
																	"//         });",
																	"        ",
																	"        ",
																	"        ",
																	"//         // //Validate protected header inside Signature",
																	"//         // var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"//         // var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"//         // console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"        ",
																	"//         // // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"//         // //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
																	"//         // // });",
																	"        ",
																	"//         // pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"//         //     pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"//         // });",
																	"//         // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /participants/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
																	"//         //     pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/participants/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
																	"//         // });",
																	"        ",
																	"",
																	"//         // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"//         //     pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"//         // });",
																	"//         // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be switch\", function () {",
																	"//         //     pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('switch');",
																	"//         // });",
																	"//         // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"//         //     pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"//         // });",
																	"//         // pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"//         //     pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"//         // });",
																	"       ",
																	"//         pm.test(\"payerfsp fspiop-uri to be /parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
																	"//             pm.expect(headers['fspiop-uri']).to.eql('/parties/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
																	"//         });",
																	"        ",
																	"//         pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"//             pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"//         });",
																	"        ",
																	"//         //Checking data",
																	"//         var jsonData = response.json().data;",
																	"//       pm.test(\"Expected fspid is payeefsp \", function () {",
																	"//           pm.expect(jsonData.fspId).to.eql(pm.variables.get(\"payeefsp\"));",
																	"//         });",
																	"        ",
																	"        ",
																	"//       } else {",
																	"//           pm.test(\"Parties FAILED - payerFSP\", function () {",
																	"//             throw new Error('Did not receive response');",
																	"//           });",
																	"           ",
																	"//       }",
																	"      ",
																	"//     });",
																	"// }, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "f7015dac-7435-4cce-b752-61469a29cf2c",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "content-type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															},
															{
																"key": "date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "fspiop-source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "x-forwarded-for",
																"value": "",
																"type": "text",
																"disabled": true
															},
															{
																"key": "fspiop-destination",
																"value": "",
																"type": "text",
																"disabled": true
															},
															{
																"key": "fspiop-encryption",
																"value": "",
																"type": "text",
																"disabled": true
															},
															{
																"key": "fspiop-signature",
																"value": "{{fspiop-signature}}",
																"type": "text"
															},
															{
																"key": "fspiop-uri",
																"value": "/participants/MSISDN/{{pathfinderMSISDN}}",
																"type": "text"
															},
															{
																"key": "fspiop-http-method",
																"value": "GET",
																"type": "text"
															},
															{
																"key": "content-length",
																"value": "",
																"type": "text",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/BUSINESS/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"BUSINESS",
																"{{pathfinderMSISDN}}"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nURI param: MSISDN\n"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "400",
											"item": [
												{
													"name": "400 - 3101 - Malformed Type (BUG)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "edbfcc73-5a27-4fe7-a6b0-92000403c7e7",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "eccebbe6-33a1-45e9-9b72-a707cd4ce623",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Error message is expected as response.\", function () {",
																	"           pm.expect(response.json().errorInformation.errorCode).to.eql('3101');",
																	"           pm.expect(response.json().errorInformation.errorDescription).to.eql('Malformed Type');",
																	"        });",
																	"    });",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payerfsp}}"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/XYZ/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"XYZ",
																"{{pathfinderMSISDN}}"
															]
														},
														"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
													},
													"response": []
												},
												{
													"name": "400 - 3101 - Malformed Header (BUG)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "a0b1cc32-9c7e-4aac-ad7c-cb924e4cd7dc",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "352043a0-6d9e-436e-a391-11bed6af66af",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Error message is expected as response.\", function () {",
																	"           pm.expect(response.json().errorInformation.errorCode).to.eql('3101');",
																	"           pm.expect(response.json().errorInformation.errorDescription).to.eql('Malformed Type');",
																	"        });",
																	"    });",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "xyz"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/BUSINESS/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"BUSINESS",
																"{{pathfinderMSISDN}}"
															]
														},
														"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
													},
													"response": []
												},
												{
													"name": "404 - 3102 - Missing Mandatory ID (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "8bd56102-2355-4bf9-846d-5808984fc388",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.expect(response.json().errorInformation.errorCode).to.eql('3101');",
																	"      pm.expect(response.json().errorInformation.errorDescription).to.eql('Malformed Type');",
																	"       ",
																	"    });",
																	"}, 1000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c6d9fab8-3e21-4fb5-a8b6-2c63417ada3b",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"pm.variables.set('participantDateHeader', (new Date()).toUTCString());",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/BUSINESS/",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"BUSINESS",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - 3102 - Missing Mandatory Headers (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "83ac8490-eb04-45a4-9d91-476d0c804fa3",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Error message is expected as response.\", function () {",
																	"           pm.expect(response.json().errorInformation.errorCode).to.eql('3102');",
																	"           pm.expect(response.json().errorInformation.errorDescription).to.eql('Missing Date Header');",
																	"        });",
																	"        ",
																	"      ",
																	"    });",
																	"}, 1000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "17bcae3a-e50b-4d13-bd39-2b69d5d189b3",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"pm.variables.set('participantDateHeader', (new Date()).toUTCString());",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/BUSINESS/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"BUSINESS",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "POST - ParticipantsByTypeAndID",
									"item": [
										{
											"name": "201",
											"item": [
												{
													"name": "201 - Created",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "40fcaf70-71df-4163-b95f-94888f46639b",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"{{payeefsp}}\",\n\t\"currency\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/BUSINESS/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"BUSINESS",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "400",
											"item": [
												{
													"name": "400 - 3101 - Malformed BUSINESS (BUG)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "970995f7-ec3c-4c2e-a240-0c7b786eb265",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "f67f4100-7dda-4bf4-bfee-27e5d27bc8a2",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Error message is expected as response.\", function () {",
																	"           pm.expect(response.json().errorInformation.errorCode).to.eql('3101');",
																	"           pm.expect(response.json().errorInformation.errorDescription).to.eql('Malformed MSISDN');",
																	"        });",
																	"    });",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/BUSINESS/@3456!",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"BUSINESS",
																"@3456!"
															]
														},
														"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "DEL - ParticipantsByTypeAndID ( NOT IMPLEMENTED )",
									"item": [],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "PUT - ParticipantsByTypeAndID",
									"item": [
										{
											"name": "200",
											"item": [
												{
													"name": "200 - Accepted (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "3c75d06c-9609-45c4-bde5-28b885d690ff",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "caaff57d-c923-495d-bccc-ef2fc81fdc44",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "accept",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "content-type",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															},
															{
																"key": "date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "fspiop-source",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "x-forwarded-for",
																"type": "text",
																"value": "",
																"disabled": true
															},
															{
																"key": "fspiop-destination",
																"type": "text",
																"value": "",
																"disabled": true
															},
															{
																"key": "fspiop-encryption",
																"type": "text",
																"value": "",
																"disabled": true
															},
															{
																"key": "fspiop-signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "fspiop-uri",
																"type": "text",
																"value": "/participants/MSISDN/{{pathfinderMSISDN}}"
															},
															{
																"key": "fspiop-http-method",
																"type": "text",
																"value": "GET"
															},
															{
																"key": "content-length",
																"type": "text",
																"value": "",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"fspId\":\"testfsp\"}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nURI param: MSISDN\n"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f3bf3fbf-a431-4ae4-b881-e24cca861081",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0c8662d7-18df-421e-b016-ac23e0739f6d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "POST Participants Bulk",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8274024f-86a5-4312-a76c-8fb8d4960114",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c7c67c3d-1349-4f61-bb6c-0dc5975b22a1",
										"exec": [
											"var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('bulkRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.participants+json;version=1",
										"type": "text"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "",
										"type": "text"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{fsp_mockfsp01_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.participants+json;version=1.0",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"requestId\": \"{{bulkRequestId}}\",\n\t\"partyList\":\n\t  [ {\n\t    \"partyIdType\": \"MSISDN\",\n\t    \"partyIdentifier\": \"00319875638746\",\n\t    \"fspId\": \"payerfsp\"\n\t  },\n\t  {\n\t    \"partyIdType\": \"BUSINESS\",\n\t    \"partyIdentifier\": \"00419875689759\",\n\t    \"fspId\": \"payeefsp\"\n\t  } ],\n\t  \"currency\": \"USD\"\n}"
								},
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
									],
									"path": [
										"participants"
									]
								}
							},
							"response": []
						}
					],
					"description": "Author: Sridevi Miriyala\n\nFolder for participants.\nParticipant is a FSP.\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "68280218-4880-42ab-946d-8edeca50c7fe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3647f0a2-58af-40c8-b3f9-0efeec282e26",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "parties",
					"item": [
						{
							"name": "/MSISDN/ID",
							"item": [
								{
									"name": "GET - PartiesByTypeAndID",
									"item": [
										{
											"name": "202",
											"item": [
												{
													"name": "202 - Accepted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "60be638b-4ce1-4023-bf10-cd5db3840cdd",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"//Check data on payee side",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.environment.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       ",
																	"       if(response.responseSize !== 0) { ",
																	"       //Checking headers",
																	"        var headers = response.json().headers;",
																	"        pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
																	"            pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
																	"        });",
																	"        ",
																	"        pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
																	"            pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
																	"        });",
																	"        ",
																	"        pm.test(\"payeefsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"        });",
																	"        ",
																	"        //pm.test(\"payeefsp accept should be application/vnd.interoperability.parties+json;version=1\", function () {",
																	"        //    pm.expect(headers['accept']).to.eql('should be application/vnd.interoperability.parties+json;version=1');",
																	"        //});",
																	"        ",
																	"        ",
																	"        ",
																	"        //Validate protected header inside Signature",
																	"        var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"        var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"        console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"        ",
																	"        pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"            pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"        });",
																	"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties\", function () {",
																	"            pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties');",
																	"        });",
																	"        ",
																	"",
																	"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be GET\", function () {",
																	"            pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('GET');",
																	"        });",
																	"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be Payerfsp\", function () {",
																	"            pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payerfsp');",
																	"        });",
																	"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payeefsp\", function () {",
																	"            pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payeefsp');",
																	"        });",
																	"        pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"            pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"        });",
																	"       ",
																	"        pm.test(\"payeefsp FSPIOP-URI to be /parties\", function () {",
																	"            pm.expect(headers['fspiop-uri']).to.eql('/parties');",
																	"        });",
																	"        ",
																	"        pm.test(\"payeefsp fspiop-http-method is GET\", function () {",
																	"            pm.expect(headers['fspiop-http-method']).to.eql('GET');",
																	"        });",
																	"        ",
																	"        ",
																	"        ",
																	"       } else {",
																	"           pm.test(\"Parties FAILED - payeeFSP\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           ",
																	"       }",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	"//Check data on payer side",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       ",
																	"      if(response.responseSize !== 0) { ",
																	"      //Checking headers",
																	"        var headers = response.json().headers;",
																	"        pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"            pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
																	"        });",
																	"        ",
																	"        pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"            pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"        });",
																	"        ",
																	"        pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"        });",
																	"        ",
																	"        pm.test(\"payerfsp accept is empty\", function () {",
																	"            pm.expect(headers['accept']).to.eql(undefined);",
																	"        });",
																	"        ",
																	"        ",
																	"        ",
																	"        //Validate protected header inside Signature",
																	"        var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"        var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"        console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"        ",
																	"        // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"        //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
																	"        // });",
																	"        ",
																	"        pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"            pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"        });",
																	"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
																	"            pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
																	"        });",
																	"        ",
																	"",
																	"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"            pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"        });",
																	"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"            pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
																	"        });",
																	"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"            pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"        });",
																	"        pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"            pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"        });",
																	"       ",
																	"        //pm.test(\"payerfsp FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
																	"        //    pm.expect(headers['fspiop-uri']).to.eql('/parties/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
																	"        //});",
																	"        ",
																	"        pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"            pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"        });",
																	"        ",
																	"        //Checking data",
																	"        var jsonData = response.json().data;",
																	"      pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"          pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"        });",
																	"        pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"          pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"        });",
																	"        pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"          pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"        });  ",
																	"        ",
																	"      } else {",
																	"          pm.test(\"Parties FAILED - payerFSP\", function () {",
																	"            throw new Error('Did not receive response');",
																	"          });",
																	"           ",
																	"      }",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "5c1a268d-d07e-4bd5-81d4-152ed21120fe",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"pm.variables.set('expectedFullName', 'Siabelo Maroka');",
																	"pm.variables.set('expectedFirstName', 'Siabelo');",
																	"pm.variables.set('expectedLastName', 'Maroka');",
																	"pm.variables.set('expectedDOB', '3/3/1973');",
																	"",
																	"var requestData = {",
																	"    \"party\": {",
																	"        \"partyIdInfo\": {",
																	"            \"partyIdType\": \"MSISDN\",",
																	"            \"partyIdentifier\": \"17039811907\",",
																	"            \"fspId\": \"payeefsp\"",
																	"        },",
																	"        \"name\": \"Siabelo Maroka\",",
																	"        \"personalInfo\": {",
																	"            \"complexName\": {",
																	"                \"firstName\": \"Siabelo\",",
																	"                \"lastName\": \"Maroka\"",
																	"            },",
																	"            \"dateOfBirth\": \"3/3/1973\"",
																	"        }",
																	"    }",
																	"}",
																	"",
																	"const addUserRequest = {",
																	"  url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"),",
																	"  method: 'POST',",
																	"  headers: {",
																	"        \"content-type\": \"application/json\",",
																	"        },",
																	"  body: JSON.stringify(requestData)",
																	"};",
																	"pm.sendRequest(addUserRequest, function (err, res) {",
																	"  console.log(err ? err : res);",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "400 - Error Code",
											"item": [
												{
													"name": "400 - 3101 - Malformed MSISDN",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "584dd7af-0c82-4046-bc0d-d0992c79456f",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "804711d4-145c-47ad-b8d0-112b02dc7432",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/@3456!",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"@3456!"
															]
														},
														"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
													},
													"response": []
												},
												{
													"name": "400 - 3101 - Malformed Type (BUG)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "9225856c-93c1-41cb-a7bf-8395fd36bed7",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "5f99abfa-e587-4ff3-8adc-587b0bd65b66",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Error message is expected as response.\", function () {",
																	"           pm.expect(response.json().errorCode).to.eql('3101');",
																	"           pm.expect(response.json().errorDescription).to.eql('Malformed Type');",
																	"        });",
																	"    });",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0;",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/XYZ/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"XYZ",
																"{{pathfinderMSISDN}}"
															]
														},
														"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
													},
													"response": []
												},
												{
													"name": "400 - 3101 - Malformed Header (BUG)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "473f8eff-03db-4b46-8813-00f333d77544",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "c7c3ccdb-7116-494e-b285-72c0cac5b1e4",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Error message is expected as response.\", function () {",
																	"           pm.expect(response.json().errorCode).to.eql('3101');",
																	"           pm.expect(response.json().errorDescription).to.eql('Malformed MSISDN');",
																	"        });",
																	"    });",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "xyz"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{hub_operator}}"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0;",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														},
														"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
													},
													"response": []
												},
												{
													"name": "404 - 3102 - Missing Mandatory ID (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "da71192f-5521-4162-b877-ac95ff28f33c",
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Expected receiver fspId is: \"+pm.variables.get(\"expectedFspId\"), function () {",
																	"           pm.expect(response.json().party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFspId\"));",
																	"        });",
																	"        ",
																	"      ",
																	"    });",
																	"}, 1000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "b2da7844-db92-452b-91f8-8802a5867aed",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"pm.variables.set('participantDateHeader', (new Date()).toUTCString());",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"MSISDN",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - 3102 - Missing Mandatory Headers (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "5da30abc-e689-410f-afc6-f7f25ceec133",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Error message is expected as response.\", function () {",
																	"           pm.expect(response.json().errorCode).to.eql('3102');",
																	"           pm.expect(response.json().errorDescription).to.eql('Missing Date Header');",
																	"        });",
																	"        ",
																	"      ",
																	"    });",
																	"}, 1000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "5634696c-933a-4ac9-9c66-5b2753337c20",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"pm.variables.set('participantDateHeader', (new Date()).toUTCString());",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "PUT - PartiesByTypeAndID",
									"item": [
										{
											"name": "200",
											"item": [
												{
													"name": "200 - Valid Request",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "45a23ce7-e18f-4171-97ac-bec118e91474",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1",
																"disabled": true
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payeefsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"party\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"MSISDN\",\n            \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n            \"fspId\": \"{{payeefsp}}\"\n        },\n        \"name\": \"{{fullName}}\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"dateOfBirth\": \"{{dob}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/17855501914",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"17855501914"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "400",
											"item": [
												{
													"name": "Invalid Accept Header ( BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ac36996f-9994-4c80-9ee0-1dcf6973f37e",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payeefsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"party\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"MSISDN\",\n            \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n            \"fspId\": \"{{payeefsp}}\"\n        },\n        \"name\": \"{{fullName}}\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"dateOfBirth\": \"{{dob}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/17855501914",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"17855501914"
															]
														}
													},
													"response": []
												},
												{
													"name": "Missing Content-TYpe (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "7116516f-0224-4960-aeba-87736ecd4482",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"pm.test(\"statusCode is 400\", function () {",
																	"    pm.expect(jsonData.statusCode).to.eql(400);",
																	"});",
																	"",
																	"pm.test(\"errorDescription is Invalid request payload input\", function () {",
																	"    pm.expect(jsonData.message.errorInformation.errorDescription).to.eql('Invalid request payload input');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payeefsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1.0",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"party\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"MSISDN\",\n            \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n            \"fspId\": \"{{payeefsp}}\"\n        },\n        \"name\": \"{{fullName}}\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"dateOfBirth\": \"{{dob}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/17855501914",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"17855501914"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "PUT - PartiesByTypeAndIDError",
									"item": [
										{
											"name": "200",
											"item": [
												{
													"name": "200 - Valid Request (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ebeed539-754a-4c61-a495-0c7a2cfb036a",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payeefsp}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"errorInformation\": {\n    \"errorCode\": \"3204\",\n    \"errorDescription\": \"Party with the provided identifier, identifier type, and optional sub id or type was not found.\",\n    \"extensionList\": [\n      {\n        \"key\": \"MSISDN\",\n        \"value\": \"17855501914\"\n      }\n    ]\n  }\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/17855501914/error",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"17855501914",
																"error"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "400",
											"item": [
												{
													"name": "Missing Content-Type (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "a687164c-cb4f-4a0a-905a-ad60aa3be34d",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"pm.test(\"statusCode is 400\", function () {",
																	"    pm.expect(jsonData.statusCode).to.eql(400);",
																	"});",
																	"",
																	"pm.test(\"errorDescription is Invalid request payload input\", function () {",
																	"    pm.expect(jsonData.message.errorInformation.errorDescription).to.eql('Invalid request payload input');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payeefsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1.0",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"errorInformation\": {\n    \"errorCode\": \"3204\",\n    \"errorDescription\": \"Party with the provided identifier, identifier type, and optional sub id or type was not found.\",\n    \"extensionList\": [\n      {\n        \"key\": \"MSISDN\",\n        \"value\": \"17855501914\"\n      }\n    ]\n  }\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/17855501914/error",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"17855501914",
																"error"
															]
														}
													},
													"response": []
												},
												{
													"name": "Invalid Accept Header",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "e4d819bf-c71e-476b-9f4a-8b24543024a0",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"pm.test(\"statusCode is 400\", function () {",
																	"    pm.expect(jsonData.statusCode).to.eql(400);",
																	"});",
																	"",
																	"pm.test(\"errorDescription is Invalid request payload input\", function () {",
																	"    pm.expect(jsonData.message.errorInformation.errorDescription).to.eql('Invalid request payload input');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payeefsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"errorInformation\": {\n    \"errorCode\": \"3204\",\n    \"errorDescription\": \"Party with the provided identifier, identifier type, and optional sub id or type was not found.\",\n    \"extensionList\": [\n      {\n        \"key\": \"MSISDN\",\n        \"value\": \"17855501914\"\n      }\n    ]\n  }\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/17855501914/error",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"17855501914",
																"error"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "79109ee8-3f86-4fc5-8d5d-e753139fdeca",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6d52734d-98f9-4f85-98bb-de0fb0c0e50e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "/BUSINESS/ID",
							"item": [
								{
									"name": "GET - PartiesByTypeAndID",
									"item": [
										{
											"name": "202",
											"item": [
												{
													"name": "202 - Accepted (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "f9363824-f63d-4a01-9087-8b6b89d6f1e4",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"//Check data on payee side",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.environment.get(\"merchantId\"), function (err, response) {",
																	"       ",
																	"       if(response.responseSize !== 0) { ",
																	"       //Checking headers",
																	"        // var headers = response.json().headers;",
																	"        // pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
																	"        //     pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
																	"        // });",
																	"        ",
																	"        // pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
																	"        //     pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
																	"        // });",
																	"        ",
																	"        // pm.test(\"payeefsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"        //     pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"        // });",
																	"        ",
																	"        // //pm.test(\"payeefsp accept should be application/vnd.interoperability.parties+json;version=1\", function () {",
																	"        // //    pm.expect(headers['accept']).to.eql('should be application/vnd.interoperability.parties+json;version=1');",
																	"        // //});",
																	"        ",
																	"        ",
																	"        ",
																	"        // //Validate protected header inside Signature",
																	"        // var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"        // var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"        // console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"        ",
																	"        // pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"        //     pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"        // });",
																	"        // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties\", function () {",
																	"        //     pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties');",
																	"        // });",
																	"        ",
																	"",
																	"        // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be GET\", function () {",
																	"        //     pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('GET');",
																	"        // });",
																	"        // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be Payerfsp\", function () {",
																	"        //     pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payerfsp');",
																	"        // });",
																	"        // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payeefsp\", function () {",
																	"        //     pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payeefsp');",
																	"        // });",
																	"        // pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"        //     pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"        // });",
																	"       ",
																	"        // pm.test(\"payeefsp FSPIOP-URI to be /parties\", function () {",
																	"        //     pm.expect(headers['fspiop-uri']).to.eql('/parties');",
																	"        // });",
																	"        ",
																	"        // pm.test(\"payeefsp fspiop-http-method is GET\", function () {",
																	"        //     pm.expect(headers['fspiop-http-method']).to.eql('GET');",
																	"        // });",
																	"        ",
																	"        ",
																	"        ",
																	"       } else {",
																	"           pm.test(\"Parties FAILED - payeeFSP\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           ",
																	"       }",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	"//Check data on payer side",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       ",
																	"      if(response.responseSize !== 0) { ",
																	"      //Checking headers",
																	"        var headers = response.json().headers;",
																	"        pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"            pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
																	"        });",
																	"        ",
																	"        pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"            pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"        });",
																	"        ",
																	"        pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"        });",
																	"        ",
																	"        pm.test(\"payerfsp accept is empty\", function () {",
																	"            pm.expect(headers['accept']).to.eql(undefined);",
																	"        });",
																	"        ",
																	"        ",
																	"        ",
																	"        //Validate protected header inside Signature",
																	"        var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"        var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"        console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"        ",
																	"        // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"        //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
																	"        // });",
																	"        ",
																	"        pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"            pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"        });",
																	"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
																	"            pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
																	"        });",
																	"        ",
																	"",
																	"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"            pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"        });",
																	"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"            pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
																	"        });",
																	"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"            pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"        });",
																	"        pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"            pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"        });",
																	"       ",
																	"        //pm.test(\"payerfsp FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
																	"        //    pm.expect(headers['fspiop-uri']).to.eql('/parties/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
																	"        //});",
																	"        ",
																	"        pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"            pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"        });",
																	"        ",
																	"        //Checking data",
																	"        var jsonData = response.json().data;",
																	"      pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"          pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"        });",
																	"        pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"          pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"        });",
																	"        pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"          pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"        });  ",
																	"        ",
																	"      } else {",
																	"          pm.test(\"Parties FAILED - payerFSP\", function () {",
																	"            throw new Error('Did not receive response');",
																	"          });",
																	"           ",
																	"      }",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c9eb7e35-98cf-4c68-bdbd-c52851132350",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"pm.variables.set('expectedFullName', 'MerchantFirst MerchantLast');",
																	"pm.variables.set('expectedFirstName', 'MerchantFirst');",
																	"pm.variables.set('expectedLastName', 'MerchantLast');",
																	"pm.variables.set('expectedDOB', '2010-10-10');",
																	"",
																	"var requestData = {",
																	"    \"party\": {",
																	"        \"partyIdInfo\": {",
																	"            \"partyIdType\": \"BUSINESS\",",
																	"            \"partyIdentifier\": \"{{merchantID}}\",",
																	"            \"fspId\": \"payeefsp\"",
																	"        },",
																	"        \"name\": \"MerchantFirst MerchantLast\",",
																	"        \"personalInfo\": {",
																	"            \"complexName\": {",
																	"                \"firstName\": \"MerchantFirst\",",
																	"                \"lastName\": \"MerchantLast\"",
																	"            },",
																	"            \"dateOfBirth\": \"2010-10-10\"",
																	"        }",
																	"    }",
																	"}",
																	"",
																	"const addUserRequest = {",
																	"  url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/parties/BUSINESS/\"+pm.environment.get(\"merchantId\"),",
																	"  method: 'POST',",
																	"  headers: {",
																	"        \"content-type\": \"application/json\",",
																	"        },",
																	"  body: JSON.stringify(requestData)",
																	"};",
																	"pm.sendRequest(addUserRequest, function (err, res) {",
																	"  console.log(err ? err : res);",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/BUSINESS/{{merchantId}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"BUSINESS",
																"{{merchantId}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "400",
											"item": [
												{
													"name": "400 - 3101 - Malformed MSISDN",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "29a0a590-6d73-45f3-82bf-b10da840ae0f",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "6f5c87c3-a2b6-4a78-9e35-972b8fa18fb1",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/BUSINESS/@3456!",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"BUSINESS",
																"@3456!"
															]
														},
														"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
													},
													"response": []
												},
												{
													"name": "400 - 3101 - Malformed Type (BUG)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "f1db9f72-d070-4306-bcbf-7b8cd8112a56",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b8c355ec-b2bf-4cca-872b-b9dafc5cd115",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Error message is expected as response.\", function () {",
																	"           pm.expect(response.json().errorCode).to.eql('3101');",
																	"           pm.expect(response.json().errorDescription).to.eql('Malformed Type');",
																	"        });",
																	"    });",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0;",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/XYZ/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"XYZ",
																"{{pathfinderMSISDN}}"
															]
														},
														"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
													},
													"response": []
												},
												{
													"name": "400 - 3101 - Malformed Header (BUG)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "184c4c0b-83f2-4fb2-b7e6-b62b380f5243",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "0cfcc94e-b528-4165-b06f-6697db8c8155",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Error message is expected as response.\", function () {",
																	"           pm.expect(response.json().errorCode).to.eql('3101');",
																	"           pm.expect(response.json().errorDescription).to.eql('Malformed MSISDN');",
																	"        });",
																	"    });",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "xyz"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0;",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/BUSINESS/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"BUSINESS",
																"{{pathfinderMSISDN}}"
															]
														},
														"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
													},
													"response": []
												},
												{
													"name": "404 - 3102 - Missing Mandatory ID (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "e002feb0-1037-4c68-b0f3-a34bf97d628e",
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Expected receiver fspId is: \"+pm.variables.get(\"expectedFspId\"), function () {",
																	"           pm.expect(response.json().party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFspId\"));",
																	"        });",
																	"        ",
																	"      ",
																	"    });",
																	"}, 1000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "ff9073f5-0c95-4088-a7c7-3bcaa524321e",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"pm.variables.set('participantDateHeader', (new Date()).toUTCString());",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/BUSINESS/",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"BUSINESS",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - 3102 - Missing Mandatory Headers (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "3b6a4f61-993d-42fd-83fe-668789ea7bd3",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Error message is expected as response.\", function () {",
																	"           pm.expect(response.json().errorCode).to.eql('3102');",
																	"           pm.expect(response.json().errorDescription).to.eql('Missing Date Header');",
																	"        });",
																	"        ",
																	"      ",
																	"    });",
																	"}, 1000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "e3e0898e-6390-4b3d-89db-de88d791c336",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"pm.variables.set('participantDateHeader', (new Date()).toUTCString());",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/BUSINESS/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"BUSINESS",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "3107 - Missing mandatory extension parameter",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/BUSINESS/{{receiverMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"BUSINESS",
																"{{receiverMSISDN}}"
															]
														},
														"description": "Scheme-mandatory extension parameter was missing."
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "PUT - PartiesByTypeAndID",
									"item": [
										{
											"name": "200",
											"item": [
												{
													"name": "200 - Valid Request",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ad3be8e0-9bd6-433b-80b7-249ef36cd35d",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1",
																"disabled": true
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payeefsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"party\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"MSISDN\",\n            \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n            \"fspId\": \"{{payeefsp}}\"\n        },\n        \"name\": \"{{fullName}}\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"dateOfBirth\": \"{{dob}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/BUSINESS/17855501914",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"BUSINESS",
																"17855501914"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "400",
											"item": [
												{
													"name": "Invalid Accept Header ( BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6b0a17b9-d36a-4222-862b-269506f3abfe",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payeefsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"party\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"MSISDN\",\n            \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n            \"fspId\": \"{{payeefsp}}\"\n        },\n        \"name\": \"{{fullName}}\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"dateOfBirth\": \"{{dob}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/BUSINESS/17855501914",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"BUSINESS",
																"17855501914"
															]
														}
													},
													"response": []
												},
												{
													"name": "Missing Content-TYpe (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "7849239f-5c26-4cc6-a0e5-a3b12d57dfdf",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"pm.test(\"statusCode is 400\", function () {",
																	"    pm.expect(jsonData.statusCode).to.eql(400);",
																	"});",
																	"",
																	"pm.test(\"errorDescription is Invalid request payload input\", function () {",
																	"    pm.expect(jsonData.message.errorInformation.errorDescription).to.eql('Invalid request payload input');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payeefsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1.0",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"party\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"MSISDN\",\n            \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n            \"fspId\": \"{{payeefsp}}\"\n        },\n        \"name\": \"{{fullName}}\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"dateOfBirth\": \"{{dob}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/BUSINESS/17855501914",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"BUSINESS",
																"17855501914"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "PUT - PartiesByTypeAndIDError",
									"item": [
										{
											"name": "200",
											"item": [
												{
													"name": "200 - Valid Request (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ae9b4772-e618-44db-8503-f50a353bae2d",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payeefsp}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"errorInformation\": {\n    \"errorCode\": \"3204\",\n    \"errorDescription\": \"Party with the provided identifier, identifier type, and optional sub id or type was not found.\",\n    \"extensionList\": [\n      {\n        \"key\": \"MSISDN\",\n        \"value\": \"17855501914\"\n      }\n    ]\n  }\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/BUSINESS/17855501914/error",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"BUSINESS",
																"17855501914",
																"error"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "400",
											"item": [
												{
													"name": "Missing Content-Type (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "f0536c85-6107-45ac-9e74-7adcef45f49e",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"pm.test(\"statusCode is 400\", function () {",
																	"    pm.expect(jsonData.statusCode).to.eql(400);",
																	"});",
																	"",
																	"pm.test(\"errorDescription is Invalid request payload input\", function () {",
																	"    pm.expect(jsonData.message.errorInformation.errorDescription).to.eql('Invalid request payload input');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payeefsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1.0",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"errorInformation\": {\n    \"errorCode\": \"3204\",\n    \"errorDescription\": \"Party with the provided identifier, identifier type, and optional sub id or type was not found.\",\n    \"extensionList\": [\n      {\n        \"key\": \"MSISDN\",\n        \"value\": \"17855501914\"\n      }\n    ]\n  }\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/BUSINESS/17855501914/error",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"BUSINESS",
																"17855501914",
																"error"
															]
														}
													},
													"response": []
												},
												{
													"name": "Invalid Accept Header",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "13fd2fab-5499-47e0-9528-e74f4ef5c10e",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"pm.test(\"statusCode is 400\", function () {",
																	"    pm.expect(jsonData.statusCode).to.eql(400);",
																	"});",
																	"",
																	"pm.test(\"errorDescription is Invalid request payload input\", function () {",
																	"    pm.expect(jsonData.message.errorInformation.errorDescription).to.eql('Invalid request payload input');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payeefsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"errorInformation\": {\n    \"errorCode\": \"3204\",\n    \"errorDescription\": \"Party with the provided identifier, identifier type, and optional sub id or type was not found.\",\n    \"extensionList\": [\n      {\n        \"key\": \"MSISDN\",\n        \"value\": \"17855501914\"\n      }\n    ]\n  }\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/BUSINESS/17855501914/error",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"BUSINESS",
																"17855501914",
																"error"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Folder for parties",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1f362ad4-0fa2-4149-a88d-d5d932f6abae",
								"type": "text/javascript",
								"exec": [
									"// var requestData = {",
									"//     \"party\": {",
									"//         \"partyIdInfo\": {",
									"//             \"partyIdType\": \"MSISDN\",",
									"//             \"partyIdentifier\": \"17039811907\",",
									"//             \"fspId\": \"payeefsp\"",
									"//         },",
									"//         \"name\": \"Siabelo Maroka\",",
									"//         \"personalInfo\": {",
									"//             \"complexName\": {",
									"//                 \"firstName\": \"Siabelo\",",
									"//                 \"lastName\": \"Maroka\"",
									"//             },",
									"//             \"dateOfBirth\": \"3/3/1973\"",
									"//         }",
									"//     }",
									"// }",
									"",
									"// const addUserRequest = {",
									"//   url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"),",
									"//   method: 'POST',",
									"//   headers: {",
									"//         \"content-type\": \"application/json\",",
									"//         },",
									"//   json: requestData",
									"// };",
									"// pm.sendRequest(addUserRequest, function (err, res) {",
									"//   console.log(err ? err : res.json());",
									"// });"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7293d96d-e6eb-443f-9e1b-cb4e81df9299",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "quotes",
					"item": [
						{
							"name": "quotes",
							"item": [
								{
									"name": "GET - Moved to New Collection",
									"item": [
										{
											"name": "Send Quote",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "dc931850-9e18-4635-8aa3-7a4f97c0c9c5",
														"exec": [
															" ",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"",
															"",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "611f6f59-f335-4cc7-8be5-e6b4ed19b755",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0",
														"type": "text"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\" ,\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "QuotesByID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7d9db816-47f4-4cd5-93bc-63d30d35abfd",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"     if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response transfer amount is valid\", function () {",
															"         //  pm.expect(response.json().ilpPacket).not.equal(null);",
															"             pm.expect(response.json().transferAmount.amount).to.eql('15');",
															"          // pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           //pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}",
														"type": "text"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId2}}",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes",
														"{{quoteId2}}"
													]
												},
												"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
											},
											"response": []
										},
										{
											"name": "400-Missing Date header",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f0263033-9245-4ed0-8945-590e63c55a2e",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payeefsp}}"
													}
												],
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId2}}",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes",
														"{{quoteId2}}"
													]
												},
												"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
											},
											"response": []
										},
										{
											"name": "400-Missing FSPIOP-Source header",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "79dd61ef-eb42-4ed4-9777-2c7b61138dd1",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															"/*setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response transfer amount is valid\", function () {",
															"        ",
															"             pm.expect(response.json().transferAmount.amount).to.eql('15');",
															"          ",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           ",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);*/"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payeefsp}}"
													}
												],
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId2}}",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes",
														"{{quoteId2}}"
													]
												},
												"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
											},
											"response": []
										},
										{
											"name": "400- Missing Accept header",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9e00d929-672b-4128-9efc-a0fbe4ef6bd8",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															"/*setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response transfer amount is valid\", function () {",
															"        ",
															"             pm.expect(response.json().transferAmount.amount).to.eql('15');",
															"         ",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"          ",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);*/"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payeefsp}}"
													}
												],
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId2}}",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes",
														"{{quoteId2}}"
													]
												},
												"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
											},
											"response": []
										},
										{
											"name": "404-No ID in the URI",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8a584453-1124-42b1-9d79-c5388a12c4c6",
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															" var jsonData = pm.response.json();",
															"",
															"pm.test(\"Error code is 3002\", function () {",
															"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3002');",
															"});",
															"",
															"pm.test(\"Error Description is Unknown URI - Not Found\", function () {",
															"    pm.expect(jsonData.errorInformation.errorDescription).to.include(\"Unknown URI - Not Found\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payeefsp}}"
													}
												],
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes/",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes",
														""
													]
												},
												"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
											},
											"response": []
										},
										{
											"name": "400- Malformed ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "630e7b77-ed60-45fd-964d-663c077a68f5",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"            ",
															"pm.test(\"Check Malformed ID - 000000\", function () {",
															"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
															"});            ",
															"            ",
															"pm.test(\"Check Error code 3101\", function () {",
															"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payeefsp}}"
													}
												],
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes/000000",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes",
														"000000"
													]
												},
												"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
											},
											"response": []
										},
										{
											"name": "400-Malformed ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7fc2f57f-44df-40f1-b665-9d80837e5491",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"            ",
															"pm.test(\"Check Malformed ID - 482f5eb4-67b6-####-9737-c77b0@$4706c\", function () {",
															"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
															"});            ",
															"            ",
															"pm.test(\"Check Error code 3101\", function () {",
															"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payeefsp}}"
													}
												],
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes/482f5eb4-67b6-####-9737-c77b0@$4706c",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes",
														"482f5eb4-67b6-"
													],
													"hash": "###-9737-c77b0@$4706c"
												},
												"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
											},
											"response": []
										},
										{
											"name": "202- Non-existent ID-1178",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3ade617c-cc61-4d0a-9fba-369a7d3bb257",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"// FROM API Spec: 3205 - Quote ID not found -\tProvided Quote ID was not found in the server.",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/482f5ea4-67b6-431a-9737-c77b0123706d\", function (err, response) {",
															"     if(response.responseSize === 0) {",
															"       ",
															"       pm.test(\"Response condition is null\", function () {",
															"           pm.expect(response.responseSize).equal(0);",
															"       });",
															"      ",
															"        ",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('received response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payeefsp}}"
													}
												],
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes/482f5ea4-67b6-431a-9737-c77b0123706d",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes",
														"482f5ea4-67b6-431a-9737-c77b0123706d"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0eee749f-292a-4eba-bd2f-1b1c504e64a3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "76bb2a88-fb4f-4e6d-b66b-69358e15b3eb",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "POST",
									"item": [
										{
											"name": "Validated - Moved to New Collection",
											"item": [
												{
													"name": "RC 400 - EC 3102 Missing mandatory element -  empty quote id",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c4300a47-5265-48d1-93eb-70bfaf8c63b2",
																"exec": [
																	" ",
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.environment.set('quoteId2', generatedUUID);",
																	"",
																	"",
																	"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "5c5c39dd-bead-410e-b4b5-72cccf7d45da",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Missing mandatory element - QuoteId\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3102\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payeefsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"quoteId\": \"\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\" ,\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "RC 406 - EC 3001 - Unacceptable version",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "4c76eebb-728e-4317-aff7-7bf523d3da7f",
																"exec": [
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.environment.set('quoteId2', generatedUUID);",
																	"}",
																	"",
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
																	"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "2dc2674d-c7a5-4958-9e6f-fbc0a6b97654",
																"exec": [
																	"pm.test(\"Status code is 406\", function () {",
																	"    pm.response.to.have.status(406);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Unacceptable version requested\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unacceptable version requested');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3001\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3001');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=5000"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=5000.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payeefsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														},
														"description": "Expected should be this:\r\n{\r\n    \"errorInformation\": {\r\n        \"errorCode\": \"3001\",\r\n        \"errorDescription\": \"The Client requested an unsupported version, see extension list for supported version(s).\",\r\n        \"extensionList\": [\r\n            { \"key\": \"1\", \"value\": \"0\" },\r\n            { \"key\": \"2\", \"value\": \"1\" },\r\n            { \"key\": \"4\", \"value\": \"2\" }\r\n        ]\r\n    }\r\n}"
													},
													"response": []
												},
												{
													"name": "RC 400 - EC 3101 Malformed QuoteId",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "95162cdf-8b3b-41b4-8a20-072c8c1fe728",
																"exec": [
																	"",
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.environment.set('quoteId2', generatedUUID);",
																	"",
																	"",
																	"",
																	"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "037cd031-6dbd-4677-93b1-76c815399e2b",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Malformed syntax - Quote ID\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3101\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																	"});",
																	"",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payeefsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"quoteId\": \"@123#59\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"17\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														},
														"description": "This is the log at simulators: I see 2 error msgs in which one is appropriate \" invalid guid format quoteID\" but the other is abt transfer expirty date.. which I do not understand.\n\n[d1741-simulator-85448cd97d-jbc74] 2019-08-29T21:28:51.026Z - info: L1p-Trace-Id=undefined - Method: post Path: /payeefsp/quotes Query: {} \n[d1741-simulator-85448cd97d-jbc74] 2019-08-29T21:28:51.026Z - info: L1p-Trace-Id=undefined - Headers: {\"host\":\"dev1-simulator.mojaloop.live\",\"connection\":\"close\",\"x-request-id\":\"b3c628cbc0b801c12e0901d6a4db76b4\",\"x-real-ip\":\"10.1.2.185\",\"x-forwarded-for\":\"10.1.2.185\",\"x-forwarded-host\":\"dev1-simulator.mojaloop.live\",\"x-forwarded-port\":\"80\",\"x-forwarded-proto\":\"http\",\"x-original-uri\":\"/payeefsp/quotes\",\"x-scheme\":\"http\",\"content-length\":\"546\",\"content-type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"date\":\"Thu, 29 Aug 2019 21:28:51 GMT\",\"fspiop-source\":\"payerfsp\",\"fspiop-destination\":\"payeefsp\",\"accept\":\"application/vnd.interoperability.quotes+json;version=1\",\"user-agent\":\"node-fetch/1.0 (+https://github.com/bitinn/node-fetch)\",\"accept-encoding\":\"gzip,deflate\"} \n[d1741-simulator-85448cd97d-jbc74] 2019-08-29T21:28:51.029Z - info: L1p-Trace-Id=undefined - Response: ValidationError: child \"@ Quote Id must be in a valid GUID format. @\" fails because [\"@ Quote Id must be in a valid GUID format. @\" must be a valid GUID] \n[d1741-simulator-85448cd97d-jbc74] 2019-08-29T21:28:51.044Z - info: L1p-Trace-Id=undefined - Method: put Path: /payerfsp/quotes/@123 Query: {} \n[d1741-simulator-85448cd97d-jbc74] 2019-08-29T21:28:51.045Z - info: L1p-Trace-Id=undefined - Headers: {\"host\":\"dev1-simulator.mojaloop.live\",\"connection\":\"close\",\"x-request-id\":\"368abe999b812644e001df12752be5f8\",\"x-real-ip\":\"10.1.2.185\",\"x-forwarded-for\":\"10.1.2.185\",\"x-forwarded-host\":\"dev1-simulator.mojaloop.live\",\"x-forwarded-port\":\"80\",\"x-forwarded-proto\":\"http\",\"x-original-uri\":\"/payerfsp/quotes/@123\",\"x-scheme\":\"http\",\"content-length\":\"1727\",\"content-type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"date\":\"Thu, 29 Aug 2019 21:28:51 GMT\",\"fspiop-source\":\"switch\",\"fspiop-destination\":\"payerfsp\",\"fspiop-http-method\":\"PUT\",\"user-agent\":\"axios/0.19.0\"} \n[d1741-simulator-85448cd97d-jbc74] 2019-08-29T21:28:51.048Z - info: L1p-Trace-Id=undefined - Response: ValidationError: child \"@ A valid transfer expiry date must be supplied. @\" fails because [\"@ A valid transfer expiry date must be supplied. @\" is required]"
													},
													"response": []
												},
												{
													"name": "RC 400 - EC 3101 Malformed TransactionId",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2836df8f-6931-4d87-a0f5-4ad0063b66e1",
																"exec": [
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.environment.set('quoteId2', generatedUUID);",
																	"}",
																	"",
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
																	"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "19098dca-696b-4371-a7df-3bb34e309a5b",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Malformed syntax - Transaction ID\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3101\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payeefsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"@123\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"17\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "RC 400 - Error 3101 Malformed Syntax - invalid payeePartyIdType",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "d3565e2f-0c3b-45e2-a135-7968baa623b8",
																"exec": [
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.environment.set('quoteId2', generatedUUID);",
																	"}",
																	"",
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
																	"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "a09fe8b9-80bf-4939-8d8f-a2f2a1aec8f9",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Malformed syntax - PayeePartyIdTypeEnum\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('PartyIdTypeEnum');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3101\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payeefsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"CELLNM\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"17\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "RC 400 - Error 3101 Malformed Syntax - invalid payerPartyIdType",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "df565320-1998-4471-97b1-eb23e6efbd69",
																"exec": [
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.environment.set('quoteId2', generatedUUID);",
																	"}",
																	"",
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
																	"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "54840990-a7fb-456a-93e5-68b13e0089a1",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Malformed syntax - PayerPartyIdTypeEnum\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('PartyIdTypeEnum');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3101\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payeefsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"CELLSD\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"19\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "RC 400 - Error 3102 Missing mandatory element - QuoteId",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1a214226-d3d3-4ad0-82bc-57ef729f1c15",
																"exec": [
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.environment.set('quoteId2', generatedUUID);",
																	"}",
																	"",
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
																	"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "cd910472-9bc1-4b6c-af42-84583e9a310d",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Missing mandatory element - QuoteID\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3102\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
																	"});",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payeefsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"17\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "RC 400 - Error 3102 Missing mandatory element - TransactionId",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "7f7e05fa-1a63-49c4-8876-3327da62bcf3",
																"exec": [
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.environment.set('quoteId2', generatedUUID);",
																	"}",
																	"",
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
																	"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "8f015ab8-6ee6-49c1-920e-869c153c26ce",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Missing mandatory element - TransactionID\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3102\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
																	"});",
																	"",
																	"",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payeefsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"17\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "RC 400 - Error 3102 Missing mandatory element - payeePartyIdType",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "bf289c20-b0c4-41ed-8d80-527cf64f7f1c",
																"exec": [
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.environment.set('quoteId2', generatedUUID);",
																	"}",
																	"",
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
																	"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "77d6c3bd-33ce-416f-82b2-247ce288c177",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Missing mandatory element - PartyIdTypeEnum\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3102\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
																	"});",
																	"",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payeefsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n     \n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"17\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "RC 400 - Error 3102 Missing mandatory element - payeePartyIdentifier",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2b38993a-8ba5-42f4-8041-d9dd2af91ea4",
																"exec": [
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.environment.set('quoteId2', generatedUUID);",
																	"}",
																	"",
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
																	"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "44896322-9093-4d23-ab07-c110a28700d4",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Missing mandatory element - PartyIdTypeEnum\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3102\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
																	"});",
																	"",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payeefsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"18\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "RC 400 - Error 3102 Missing mandatory element - payerPartyIdType",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c034caf3-1eaf-4e15-a267-0746b4defbcb",
																"exec": [
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.environment.set('quoteId2', generatedUUID);",
																	"}",
																	"",
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
																	"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "2345d688-2946-49d4-a748-7c069c055f0a",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Missing mandatory element - PartyIdTypeEnum\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3102\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
																	"});",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payeefsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n     \n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"19\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "RC 400 - Error 3102 Missing mandatory element - payerPartyIdentifier",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "ad65abe3-28bc-4710-95c6-00eaa0ece4a2",
																"exec": [
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.environment.set('quoteId2', generatedUUID);",
																	"}",
																	"",
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
																	"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "ab26b9fa-2879-4915-879a-94002069b6ef",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Missing mandatory element - PartyIdTypeEnum\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3102\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payeefsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n     \n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"19\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3f756ae4-7d3b-4461-83ce-f71927991aee",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5c24aeed-0486-4af0-a39c-35beb9c574a7",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Check_RC 400 - Error 3106 Modified request - payeePartyIdType - Quote1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "464c93a3-18fc-4df8-bd6d-7f0f85f5d7d6",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId3', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f75297e6-9a65-4074-abcf-2758e0098b52",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId3}}\",\n  \"transactionId\": \"{{quoteId3}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n     \n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"17\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check_RC 400 - Error 3106 Modified request - payeePartyIdType - Quote2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "80011979-c997-4412-a681-82c9dfea241d",
														"exec": [
															"",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7c7fbe7f-0f72-422f-b043-bc52b6027fdc",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId3}}\",\n  \"transactionId\": \"{{quoteId3}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"14\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "RC 400 - Error 3100 Destination fsp not supported",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a98611a6-446e-48b0-ac5b-9d8163d4e006",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e9f7b2c6-7c83-40fd-a88b-a128b1ef1600",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"      var jsonData = response.json().data.errorInformation;",
															"            ",
															"        pm.test(\"Check Generic validation error - Unsupported participant\", function (){",
															"            pm.expect(jsonData.errorDescription).to.include('Unsupported participan');",
															"        });            ",
															"            ",
															"        pm.test(\"Check Error code 3100\", function () {",
															"            pm.expect(jsonData.errorCode).to.eql('3100');",
															"        });",
															"       ",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"blah\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"USD\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "check_RC 400 - Error 3204 Party not found",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4d44b302-89cc-451e-8add-f1f0bef2ea5e",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "04e2252e-27fb-4f86-9a17-05b0d94d4be5",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															"",
															"",
															"",
															"",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"7777777777\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid Required fields - all fields empty",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5ab5fcaa-dc47-475d-ad93-78c07d233966",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "fb6a0aa9-c288-4f9c-a506-8ccd2827773f",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"            ",
															"pm.test(\"Check Malformed syntax - PartyIdTypeEnum\", function () {",
															"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
															"});            ",
															"            ",
															"pm.test(\"Check Error code 3101\", function () {",
															"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"\",\n  \"transactionId\": \"\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"\",\n      \"partyIdentifier\": \"\",\n      \"fspId\": \"\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"\",\n      \"partyIdentifier\": \"\",\n      \"fspId\": \"\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "RC 202 - Error 5101 Rejected quote by Payee - Invalid txn type",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2d306dc7-5d43-40cc-8f84-6ebe1b56e66e",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7e6f342b-3ee6-4c52-9e4a-5315afd3eb04",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"    //   var jsonData = response.json().errorinformation();",
															"            ",
															"    //     pm.test(\"Check Missing mandatory element - Destination fsp not found\", function (){",
															"    //         pm.expect(jsonData.errorInformation.errorDescription).to.include('Unsupported participan');",
															"    //     });            ",
															"            ",
															"    //     pm.test(\"Check Error code 3100\", function () {",
															"    //         pm.expect(jsonData.errorInformation.errorCode).to.eql('3100');",
															"    //     });",
															"       ",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"16\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"DEPOSITxx\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "RC 202 - Error 5106 Unsupported currency",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4b398e17-a265-4f6b-9ad5-0cd1267c40de",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "84303e29-34e2-4297-91a8-432a3fd49eac",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"/*setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);*/",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"HNL\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sending Duplicate Quote ID within expiricy time - Quote1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "202b7dd2-d83c-42fb-9565-ba980b8f052e",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   ",
															"}",
															"",
															"pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9d569794-fa3c-45a9-b8aa-bd7088c1a004",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\",\n  \"expiration\": \"{{quoteExpDate}}\" \n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sending Duplicate Quote ID within expiricy time - Quote2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "30f2e380-bea6-418a-b853-318a7e2dd6b3",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId2', generatedUUID);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1a872e1a-e219-4258-b0b7-8b3cff1409b6",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{transactionId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"18\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sending Duplicate Quote ID after expiricy time - Quote1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "bc52c273-80a2-4887-9a97-e746d72c4dda",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   ",
															"}",
															"",
															"pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 100));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5e49125d-8d27-4941-ba70-074df7e9386c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 5000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\",\n  \"expiration\": \"{{quoteExpDate}}\" \n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sending Duplicate Quote ID after expiricy time - Quote2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "58f93998-9791-4d6f-80bc-55a315920347",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId2', generatedUUID);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1dbf9ccb-6940-4f02-b12c-8cd25447ccf4",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{transactionId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"18\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Quote with empty currency (BUG)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4ae86ab8-ab1b-4bfa-9712-7f4c0065bde8",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   ",
															"}",
															"",
															"pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d13af5aa-5fae-4677-ad3e-16fe81ad270a",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n  \n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Quote with negative amount (BUG)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b00fd01b-2475-4b82-9de1-8ef1457c95c0",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   ",
															"}",
															"",
															"pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2d906de8-dcbe-47e1-b05d-f53854299577",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"-15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n  \n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sending  Quote with Decimal amount",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "cea2286e-d016-497b-8030-5637e0946b5e",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   ",
															"}",
															"",
															"pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ea8bf390-a8bb-41c4-b165-534fe375c4d0",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15.35\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n  \n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sending  Quote with zero amount",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d121fd60-d649-41e9-93aa-8ba13f01a56c",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   ",
															"}",
															"",
															"pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9ddaeb31-8127-40e3-81cc-cccdd90cb86b",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"0\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n  \n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sending Duplicate Quote ID - Same MSISDN - Quote1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1af2f6c3-8519-428b-ae0d-0c7ada47f751",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   ",
															"}",
															"",
															"pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7c88fe70-57e5-4b60-8bb7-dc8e3e6a2dcf",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"11\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n  \n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sending Duplicate Quote ID - Same MSISDN - Quote2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3e8a581d-6aec-4800-a0b7-883034b5343c",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId2', generatedUUID);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "fcc909e0-cd24-4835-bb95-3745e57b7570",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{transactionId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"12\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sending Duplicate Quote ID - Different MSISDN - Quote1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f414e7dd-feb9-42c1-a585-225e1b556540",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   ",
															"}",
															"",
															"pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "502ca75e-1b43-4af0-ba72-28a35b1a4cb6",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"11\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n  \n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sending Duplicate Quote ID - Different MSISDN - Quote2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "61710920-4740-4cd1-b9d2-3a02b8373a7f",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId2', generatedUUID);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2f7045ce-b734-4ba8-8d38-8f034e7c1f05",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{transactionId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22506144035\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"12\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sending Quote - Amount Type Recieve",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "30ebf120-b004-477b-a90c-d13695b655ef",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   ",
															"}",
															"",
															"pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "20ed1034-1f15-4b05-b9cf-5049e4aec8cf",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"RECEIVE\",\n  \"amount\": {\n    \"amount\": \"11\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n  \n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "RC 400 - EC 3102 Missing mandatory element - empty transaction id ",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f232e990-1c3d-4673-bb11-74167a68f1d7",
														"exec": [
															" ",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"",
															"",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "20f2af86-efa2-4d96-a009-af47f8214437",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"            ",
															"pm.test(\"Check Missing mandatory element - TransactionId\", function () {",
															"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
															"});            ",
															"            ",
															"pm.test(\"Check Error code 3102\", function () {",
															"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0",
														"type": "text"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\" ,\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "PUT",
									"item": [
										{
											"name": "Quotes ID do not match between POST/PUT",
											"item": [
												{
													"name": "Sending Quote - quote ID not matching",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "53190782-1e29-4e72-9769-f275ae6562d8",
																"exec": [
																	"",
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.environment.set('quoteId2', generatedUUID);",
																	"",
																	"",
																	"",
																	"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
																	"   ",
																	"",
																	"pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "d359df0f-2245-4c98-b00d-02f1d73fe99b",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
																	"// });",
																	"",
																	"",
																	"/*setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
																	"      if(response !== null) {",
																	"          console.log(response.json());",
																	"       pm.test(\"Response ilpPacket is not null\", function () {",
																	"           pm.expect(response.json().ilpPacket).not.equal(null);",
																	"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
																	"       });",
																	"       ",
																	"       pm.test(\"Response condition is not null\", function () {",
																	"           pm.expect(response.json().condition).not.equal(null);",
																	"           pm.environment.set(\"condition2\", response.json().condition);",
																	"       });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 3000);*/",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "noresponsepayeefsp"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"noresponsepayeefsp\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"11\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n  \n}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Sending Quote - quote ID not matching",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "ae7e1f13-4e6e-4e9a-a5af-06f33a903d5b",
																"exec": [
																	"",
																	"",
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
																	"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
																	"   ",
																	"}",
																	"",
																	"//pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "19d39630-255d-4d3a-8f29-c6d4c6a0f1ac",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
																	"// });",
																	"",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
																	"      if(response !== null) {",
																	"          console.log(response.json());",
																	"       pm.test(\"Response ilpPacket is not null\", function () {",
																	"           pm.expect(response.json().ilpPacket).not.equal(null);",
																	"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
																	"       });",
																	"       ",
																	"       pm.test(\"Response condition is not null\", function () {",
																	"           pm.expect(response.json().condition).not.equal(null);",
																	"           pm.environment.set(\"condition2\", response.json().condition);",
																	"       });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 5000);",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1",
																"disabled": true
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "noresponsepayeefsp"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payerfsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{ \n   \"transferAmount\": { \n   \"amount\": \"11\",   \n   \"currency\": \"XOF\" },\n   \"payeeReceiveAmount\": {  \n   \"amount\": \"11\",   \n   \"currency\": \"XOF\"   }, \n   \"expiration\": \"{{quoteExpDate}}\",\n   \"ilpPacket\": \"{{ilpPacket}}\",\n   \"condition\": \"{{condition}}\" } "
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes/7c23e80c-d078-4077-8263-2c047876fcf6",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes",
																"7c23e80c-d078-4077-8263-2c047876fcf6"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Missing IlpPacket in PUT call",
											"item": [
												{
													"name": "Sending Quote - Missing IlpPacket",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "765c29b0-516a-4a21-b9cd-de52ec4a4964",
																"exec": [
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.environment.set('quoteId3', generatedUUID);",
																	"}",
																	"",
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
																	"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
																	"   ",
																	"}",
																	"",
																	"pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 60000));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b2bb2115-8830-4658-8f8e-5ea89baf3d15",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
																	"// });",
																	"",
																	"",
																	"/*setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
																	"      if(response !== null) {",
																	"          console.log(response.json());",
																	"       pm.test(\"Response ilpPacket is not null\", function () {",
																	"           pm.expect(response.json().ilpPacket).not.equal(null);",
																	"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
																	"       });",
																	"       ",
																	"       pm.test(\"Response condition is not null\", function () {",
																	"           pm.expect(response.json().condition).not.equal(null);",
																	"           pm.environment.set(\"condition2\", response.json().condition);",
																	"       });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 3000);*/",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "noresponsepayeefsp"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"quoteId\": \"{{quoteId3}}\",\n  \"transactionId\": \"{{quoteId3}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"noresponsepayeefsp\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"11\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n  \n}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Sending Quote - Missing IlpPacket",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "d921a544-3fdd-4934-a539-e3e693e7cd78",
																"exec": [
																	"",
																	"",
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
																	"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
																	"   ",
																	"}",
																	"",
																	"//pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "e8390b05-569a-408a-bebb-3c71f0c4515b",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Error message is expected as response.\", function () {",
																	"           var jsonData = pm.response.json();",
																	"           console.log(jsonData.message);",
																	"          // pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																	"           pm.expect(jsonData.message).to.include('[\\\"ilpPacket\\\" is required]');",
																	"        });",
																	"        ",
																	"        ",
																	"        ",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
																	"// });",
																	"",
																	"",
																	"/*setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId3\"), function (err, response) {",
																	"      if(response !== null) {",
																	"          console.log(response.json());",
																	"       pm.test(\"Response ilpPacket is not null\", function () {",
																	"           pm.expect(response.json().ilpPacket).not.equal(null);",
																	"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
																	"       });",
																	"       ",
																	"       pm.test(\"Response condition is not null\", function () {",
																	"           pm.expect(response.json().condition).not.equal(null);",
																	"           pm.environment.set(\"condition2\", response.json().condition);",
																	"       });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 5000);*/",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1",
																"disabled": true
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "noresponsepayeefsp"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payerfsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{ \n   \"transferAmount\": { \n   \"amount\": \"11\",   \n   \"currency\": \"XOF\" },\n   \"payeeReceiveAmount\": {  \n   \"amount\": \"11\",   \n   \"currency\": \"XOF\"   }, \n   \"expiration\": \"{{quoteExpDate}}\",\n   \"condition\": \"{{condition}}\" } "
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId3}}",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes",
																"{{quoteId3}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Missing condition in PUT call",
											"item": [
												{
													"name": "Sending Quote - Missing condition",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "23ceda8f-1343-47ef-b51c-e510d1e9eab7",
																"exec": [
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.environment.set('quoteId4', generatedUUID);",
																	"}",
																	"",
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
																	"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
																	"   ",
																	"}",
																	"",
																	"pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 60000));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "c0f36d5d-3d9d-4ac3-9663-2eef6a523dc7",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
																	"// });",
																	"",
																	"",
																	"/*setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
																	"      if(response !== null) {",
																	"          console.log(response.json());",
																	"       pm.test(\"Response ilpPacket is not null\", function () {",
																	"           pm.expect(response.json().ilpPacket).not.equal(null);",
																	"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
																	"       });",
																	"       ",
																	"       pm.test(\"Response condition is not null\", function () {",
																	"           pm.expect(response.json().condition).not.equal(null);",
																	"           pm.environment.set(\"condition2\", response.json().condition);",
																	"       });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 3000);*/",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "noresponsepayeefsp"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"quoteId\": \"{{quoteId4}}\",\n  \"transactionId\": \"{{quoteId4}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"noresponsepayeefsp\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"11\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n  \n}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Sending Quote - Missing condition",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "a1b629de-9da6-468b-8013-8432da9050eb",
																"exec": [
																	"",
																	"",
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
																	"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
																	"   ",
																	"}",
																	"",
																	"//pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "ccc96ea6-73da-4918-997d-284ac121dc07",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"",
																	"pm.test(\"Error message is expected as response.\", function () {",
																	"           var jsonData = pm.response.json();",
																	"           console.log(jsonData.message);",
																	"          // pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																	"           pm.expect(jsonData.message).to.include('[\\\"condition\\\" is required]');",
																	"        });",
																	"        ",
																	"        ",
																	"        ",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
																	"// });",
																	"",
																	"",
																	"/*setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId4\"), function (err, response) {",
																	"      if(response !== null) {",
																	"          console.log(response.json());",
																	"       pm.test(\"Response ilpPacket is not null\", function () {",
																	"           pm.expect(response.json().ilpPacket).not.equal(null);",
																	"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
																	"       });",
																	"       ",
																	"       pm.test(\"Response condition is not null\", function () {",
																	"           pm.expect(response.json().condition).not.equal(null);",
																	"           pm.environment.set(\"condition2\", response.json().condition);",
																	"       });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 5000);*/",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1",
																"disabled": true
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "noresponsepayeefsp"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payerfsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{ \n   \"transferAmount\": { \n   \"amount\": \"11\",   \n   \"currency\": \"XOF\" },\n   \"payeeReceiveAmount\": {  \n   \"amount\": \"11\",   \n   \"currency\": \"XOF\"   }, \n   \"expiration\": \"{{quoteExpDate}}\",\n   \"ilpPacket\": \"{{ilpPacket}}\"\n    } "
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId4}}",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes",
																"{{quoteId4}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"description": "Folder for quotes",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "QuotesByIDAndError",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "Date",
										"value": "{{Date}}"
									},
									{
										"key": "X-Forwarded-For",
										"value": "{{X-Forwarded-For}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{FSPIOP-Source}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{FSPIOP-Destination}}"
									},
									{
										"key": "FSPIOP-Encryption",
										"value": "{{FSPIOP-Encryption}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{FSPIOP-Signature}}"
									},
									{
										"key": "FSPIOP-URI",
										"value": "{{FSPIOP-URI}}"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "{{FSPIOP-HTTP-Method}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
									"host": [
										"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
									],
									"path": [
										"quotes"
									]
								},
								"description": "If the server is unable to find or create a quote, or some other processing error occurs, the error callback PUT /quotes/<ID>/error is used. The <ID> in the URI should contain the quoteId that was used for the creation of the quote, or the <ID> that was used in the GET /quotes/<ID>."
							},
							"response": []
						},
						{
							"name": "QuotesByID",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "Date",
										"value": "{{Date}}"
									},
									{
										"key": "X-Forwarded-For",
										"value": "{{X-Forwarded-For}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{FSPIOP-Source}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{FSPIOP-Destination}}"
									},
									{
										"key": "FSPIOP-Encryption",
										"value": "{{FSPIOP-Encryption}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{FSPIOP-Signature}}"
									},
									{
										"key": "FSPIOP-URI",
										"value": "{{FSPIOP-URI}}"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "{{FSPIOP-HTTP-Method}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								},
								"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
							},
							"response": []
						},
						{
							"name": "QuotesByID",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								},
								"description": "The callback PUT /quotes/<ID> is used to inform the client of a requested or created quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote, or the <ID> that was used in the GET /quotes/<ID>GET /quotes/<ID>."
							},
							"response": []
						},
						{
							"name": "Send Quote",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "92e01220-ed7e-42b5-a000-9ec40145ca0c",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.variables.set('quoteId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3fcffc0f-7982-4c2e-be6a-6e70db3e2ef2",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
											"// });",
											"",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"      if(response !== null) {",
											"          console.log(response.json());",
											"       pm.test(\"Response ilpPacket is not null\", function () {",
											"           pm.expect(response.json().ilpPacket).not.equal(null);",
											"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
											"       });",
											"       ",
											"       pm.test(\"Response condition is not null\", function () {",
											"           pm.expect(response.json().condition).not.equal(null);",
											"           pm.environment.set(\"condition\", response.json().condition);",
											"       });",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"           postman.setNextRequest(null);",
											"      }",
											"       ",
											"   });",
											"}, 3000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-SOurce",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"100\",\n    \"currency\": \"USD\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						}
					],
					"description": "Folder for quotes",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "transfers",
					"item": [
						{
							"name": "GET - TransfersByID",
							"item": [
								{
									"name": "Positive Test Cases",
									"item": [
										{
											"name": "GET transfer - COMMITTED",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e6ffca1a-8163-45ae-bb1d-995bbd960a51",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c50d846-162f-4775-96af-efbd664491c7",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"get_transfer_ID\"), function (err, response) {",
															"          if(response !== null) {",
															"              var jsonData = response.json().data;",
															"              var headers = response.json().headers;",
															"              ",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"              pm.test(\"fspiop-source is switch\", function () {",
															"                pm.expect(headers['fspiop-source']).to.eql('switch');",
															"              });",
															"              pm.test(\"fspiop-destination is payerfsp\", function () {",
															"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 3000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{get_transfer_ID}}",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{get_transfer_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET transfer - Error when FSP is not involved in the transfer",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "815b64dc-a16c-4dcf-a5e7-7e762b8bffdf",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3fb01b37-e986-40f6-8448-d18dc4d5188b",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/callbacks/\"+pm.variables.get(\"get_transfer_ID\"), function (err, response) {",
															"          if(response !== null) {",
															"              var jsonData = response.json().data;",
															"              var headers = response.json().headers;",
															"              ",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"              pm.test(\"fspiop-source is switch\", function () {",
															"                pm.expect(headers['fspiop-source']).to.eql('switch');",
															"              });",
															"              pm.test(\"fspiop-destination is payerfsp\", function () {",
															"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 3000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{testfsp1}}",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{get_transfer_ID}}",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{get_transfer_ID}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative Test Cases",
									"item": [
										{
											"name": "400 - 3101 -  MissingAcceptHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6f66f95e-fae9-43f8-b4fc-cf8398bce7dc",
														"exec": [
															"pm.environment.set('dateHeader', (new Date()).toUTCString());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.participants+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													}
												],
												"url": {
													"raw": "{{HOST_ML_API_ADAPTER}}{{BASE_ML_API}}/transfers/4c6cbc7a-b694-4c01-8dcb-ebe56c61c295",
													"host": [
														"{{HOST_ML_API_ADAPTER}}{{BASE_ML_API}}"
													],
													"path": [
														"transfers",
														"4c6cbc7a-b694-4c01-8dcb-ebe56c61c295"
													]
												},
												"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
											},
											"response": []
										},
										{
											"name": "404 -  Missing ID in the URI",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "232f3a2a-f053-4916-990d-003741a66246",
														"exec": [
															"pm.environment.set('dateHeader', (new Date()).toUTCString());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.participants+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													}
												],
												"url": {
													"raw": "{{HOST_ML_API_ADAPTER}}{{BASE_ML_API}}/transfers/",
													"host": [
														"{{HOST_ML_API_ADAPTER}}{{BASE_ML_API}}"
													],
													"path": [
														"transfers",
														""
													]
												},
												"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
											},
											"response": []
										},
										{
											"name": "200 - 3208 - TransferId not found",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8ef15bc7-fcc2-4f64-88ae-5f8cca18f6d4",
														"exec": [
															"pm.environment.set('dateHeader', (new Date()).toUTCString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e26072b4-b077-4d55-97bf-219e34964f3b",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"get_transfer_ID\"), function (err, response) {",
															"          if(response !== null) {",
															"              var jsonData = response.json().data;",
															"              var headers = response.json().headers;",
															"              ",
															"              pm.test(\"Error Code is 3208\", function () {",
															"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3208');",
															"              });",
															"              pm.test(\"Error msg is Provided Transfer ID was not found on the server.\", function () {",
															"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Provided Transfer ID was not found on the server.');",
															"              });",
															"              pm.test(\"fspiop-source is switch\", function () {",
															"                pm.expect(headers['fspiop-source']).to.eql('switch');",
															"              });",
															"              pm.test(\"fspiop-destination is payerfsp\", function () {",
															"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 3000)",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.participants+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													}
												],
												"url": {
													"raw": "{{HOST_ML_API_ADAPTER}}{{BASE_ML_API}}/transfers/f31515ef-2159-4c4c-acdb-b34e44f640cd",
													"host": [
														"{{HOST_ML_API_ADAPTER}}{{BASE_ML_API}}"
													],
													"path": [
														"transfers",
														"f31515ef-2159-4c4c-acdb-b34e44f640cd"
													]
												},
												"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer.\n\nTake a new UUID which does not exist in DB.i.e valid format but shd not exist in DB.\nor\nchange (not remove) one letter or digit from a transfer ID that exists in DB."
											},
											"response": []
										},
										{
											"name": "400 - 3101 -  InvalidTransferId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "629c6ade-011b-4e22-a4f5-0eb2d463917d",
														"exec": [
															"pm.environment.set('dateHeader', (new Date()).toUTCString());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.participants+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													}
												],
												"url": {
													"raw": "{{HOST_ML_API_ADAPTER}}{{BASE_ML_API}}/transfers/blah",
													"host": [
														"{{HOST_ML_API_ADAPTER}}{{BASE_ML_API}}"
													],
													"path": [
														"transfers",
														"blah"
													]
												},
												"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer.\n\nRemove one or more letters or digits from the actual transfer Id that exists to make invalid transferID."
											},
											"response": [
												{
													"name": "400 - 3101 -  InvalidTransferId- ML",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															}
														],
														"url": {
															"raw": "{{HOST_ML_API_ADAPTER}}{{BASE_ML_API}}/transfers/blah",
															"host": [
																"{{HOST_ML_API_ADAPTER}}{{BASE_ML_API}}"
															],
															"path": [
																"transfers",
																"blah"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Server",
															"value": "nginx/1.13.8"
														},
														{
															"key": "Date",
															"value": "Mon, 10 Dec 2018 04:28:00 GMT"
														},
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "Content-Length",
															"value": "181"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "cache-control",
															"value": "no-cache"
														}
													],
													"cookie": [],
													"body": "{\n    \"errorInformation\": {\n        \"errorCode\": 400,\n        \"errorDescription\": \"Bad Request\",\n        \"extentionList\": {\n            \"extention\": [\n                {\n                    \"key\": \"joiValidationError\",\n                    \"value\": \"Supply a valid transfer Id to continue\"\n                }\n            ]\n        }\n    }\n}"
												}
											]
										}
									],
									"description": "Author: Sridevi Miriyala",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c7bf190e-fe1d-4d60-b0e8-4c37f13d424a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7a4bb746-77b0-484e-928c-9d92e563f993",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"description": "Author: Sridevi Miriyala\n\nDescription: GET /transfers / {ID} is used to retrieve the status of the previously sent transfer.\nThis is implemented to support P2P transfers at the moment.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cf1a4724-b0b6-408d-983d-4d221c78bf82",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "42610123-34c6-4a71-90f3-b0a8231187b8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "POST - Transfers",
							"item": [
								{
									"name": "Currency value as per spec",
									"item": [
										{
											"name": "202 -  Currency 5",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3ea527ae-90e8-4b46-9cbc-666babd7bd5b",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "8cd4e217-4e72-42df-88a2-24f51423504a",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "abc"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{abc}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"5\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 -  Currency 5.0",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a86b0815-ed54-41f9-bb36-bb98e5b57995",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6d05f440-1f76-47ae-aab4-7733acb8c5d5",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"5.0\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 -  Currency 5.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "13d78467-33ab-405d-aebe-30776b627c50",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a58561b1-afc7-4b01-9723-b30bc7c75d07",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"5.\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 -  Currency 5.00",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "29b42bdb-356c-44c6-ba28-9b7d9e27fbc6",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2a1c7ef5-84a1-4c49-9d0b-83e5358793a7",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"5.00\",\n    \"currency\": \"XYZ\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "202 -  Currency 5.5",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c7f0605e-6850-4fd0-8488-938f6c19e2a6",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "24d7731f-1496-42e7-aa7b-a39a85f1b802",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"5.5\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 -  Currency 5.50",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ca4bbec9-453b-4565-b9df-29f02c2a1cf6",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7ffa8f81-c854-41a9-8038-78624841c952",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"5.50\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "202 -  Currency 5.5555",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "62b6875f-0b8e-4fb6-9972-75eadede91d8",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "8e1d723c-16e7-4dc1-9520-5e0afd333d88",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "abc"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{abc}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"5.5555\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": [
												{
													"name": "202 -  Currency 5.5555 - ML",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "abc"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payeefsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{abc}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"5.5555\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Server",
															"value": "nginx/1.13.8"
														},
														{
															"key": "Date",
															"value": "Mon, 10 Dec 2018 05:36:32 GMT"
														},
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "Content-Length",
															"value": "74"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "cache-control",
															"value": "no-cache"
														}
													],
													"cookie": [],
													"body": "{\n    \"id\": \"InternalServerError\",\n    \"message\": \"An internal server error occurred\"\n}"
												}
											]
										},
										{
											"name": "400 -  Currency 5.55555",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "095b4172-7f08-421d-880d-0b43a42c7999",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "34cedfed-df06-43de-8895-67e7e4f3a8ea",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"5.55555\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "202 -  Currency 555555555555555555",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "47d10b1b-279c-42a7-853c-f1277f731252",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ca7eb6a7-4e58-4601-b0fe-e70d610d8d8f",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"555555555555555555\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 -  Currency 5555555555555555555",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "cabf2b70-8f3d-48dc-91ae-5babda859a6a",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7e25806c-71a7-4b46-a286-a70db34a1a74",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"5555555555555555555\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 -  Currency -5.5",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8cedfa6a-7d0f-4622-a937-cee0665ae2c8",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "cd6e5643-6e5c-4a80-929e-d14b788703ac",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"-5.5\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "202 -  Currency 0.5",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "83197b29-9979-440d-b9ef-128142bcfca2",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "75f2885a-4386-42d2-8a94-07a88e68363d",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"0.5\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 -  Currency .5",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f5a6ed7f-7bf5-42c0-bec3-32395fbf67f9",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1a422f2a-4038-4aaa-9a6f-d8b85fb423fe",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \".5\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 -  Currency 00.5",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6404935f-7a55-43c2-87d9-d16947b8f6c0",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "13516796-4195-43f1-a78f-14b0b4c1f1f5",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"00.5\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "202 -  Currency 0",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9ae689ad-b94d-4597-9ab0-246ba79ec25b",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c19832a3-2ab5-47f4-8732-3621dda44c08",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"0\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										}
									],
									"description": "Author: Sridevi Miriyala\n\nTested for different values of currency as per the API spec table 33.\nEx:\n5 \n5.0\n5.\n5.00\n5.5\n5.50\n5.5555\n5.55555\n555555555555555555\n5555555555555555555\n-5.5\n0.5\n00.5\n0\n",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9847babf-cf39-49fa-9110-84ed3e6d0a79",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1664504a-c24d-42d6-9977-2f3a5785511f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "202 - OK",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3faafa13-c056-48b3-a863-f1af9852d8cb",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transfer_ID', generatedUUID);",
													" pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))  ",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2bf45650-d74d-47f2-8601-51463436546e",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// pm.test(\"Check that Content-Type is present\", function () {",
													"//     pm.response.to.have.header(\"Content-Type\");",
													"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
													"// });",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
													"          if(response !== null) {",
													"              var jsonData = response.json();",
													"              pm.test(\"Response transfer_ID is same as the request transfer_ID\", function () {",
													"                pm.expect(jsonData.transfer_ID).to.eql(pm.variables.get('transfer_ID'));",
													"              });",
													"              pm.test(\"Response status is COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"              });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 2300)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Invalid transfer Expiration",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4ff340d7-4a05-4392-9196-191f0f855400",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d7da33ee-aa15-44c5-9004-25914e9e40d6",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"00:00:00\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Missing transfer expiration",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e541d013-df68-43ee-b6d5-948cf7acaa81",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fbac4b32-fe97-464e-a845-33a83fb835c5",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Unknown Currency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "79569971-32c2-4453-9a74-f73f61e0df3a",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bc81703f-334c-4428-a43f-654b6cd5bc33",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"XYZ\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Empty Currency - ERROR MSG not appropriate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3ecdc1fa-6538-46ea-ae0b-ecaf39fa32a7",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "07235953-fe65-4503-aa74-510718e243fc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"5\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Missing URI param (/transfers)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4f395352-673d-479e-bf6c-e2cc1a7029b0",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4d39ae0e-74c3-4b84-ad8c-cae402ed96c7",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Missing Host name in URI (BUG)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "72d015d9-b212-4b7e-ba0b-aa099a03c90f",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b7a92b76-983f-4219-affd-fe4896c04a08",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": [
										{
											"name": "404 - Missing Host name in URI (BUG)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"_postman_previewlanguage": "Text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "400 - Missing Transfer ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "54cf944e-dd83-4d00-8257-aa104b6fe2e4",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "174a6e7b-6f0b-4873-86de-114b6ec131dc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Invalid Transfer ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7739ebd4-d587-405d-bad1-999f1db4dcd0",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "53eb01ec-825f-4b87-8212-d7b90d52456c",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"fc259b48-b6f2-41d5-ad1d-bde07a63e\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Missing FSPIOP-Destination Header(BUG)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7aa4078d-bad5-4661-acff-62068d9105e1",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f1f56596-6e07-43ab-adeb-d62d16f1ed86",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Missing FSPIOP-Source Header",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fa57fe48-2ab8-4e3d-81df-b3416ae68748",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "76ca77be-dfba-41e3-8d4c-e2212fb63a5d",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - invalid FSPIOP-Source Header -  blah (bug)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e1fe3ea1-978c-4f26-aa02-c5d7739b95b7",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1469e72f-6224-4b49-b484-364b63ff4b54",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "blah"
											},
											{
												"key": "FSPIOP-Source",
												"value": "blah"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"blah\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Invalid Date Header",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c69f4c4a-a0bf-4a9a-b6e9-4fef6141ee89",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dc4e1636-c2d6-4b9e-997d-5df424ada32d",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "2018-12-10"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Missing Date Header",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7f63588e-ed56-462c-81d2-e6dbcbccca4f",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "323aaa95-c6e3-4878-affd-098cb01f28ee",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Invalid Content Type Header",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bb86c4de-596f-4e14-8320-a81439b29824",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a9eb1436-b771-4f07-abbf-b4872ea6f7db",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// pm.test(\"Check that Content-Type is present\", function () {",
													"//     pm.response.to.have.header(\"Content-Type\");",
													"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
													"// });",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transferId\"), function (err, response) {",
													"          if(response !== null) {",
													"              var jsonData = response.json();",
													"              pm.test(\"Response transferId is same as the request transferId\", function () {",
													"                pm.expect(jsonData.transferId).to.eql(pm.variables.get('transferId'));",
													"              });",
													"              pm.test(\"Response status is COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"              });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 2300)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Invalid Accept Header",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "655a04a7-b4e6-4384-bc0b-77f73d5e23b0",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8997e0e2-267a-4511-ba6f-e90c27802fde",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// pm.test(\"Check that Content-Type is present\", function () {",
													"//     pm.response.to.have.header(\"Content-Type\");",
													"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
													"// });",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transferId\"), function (err, response) {",
													"          if(response !== null) {",
													"              var jsonData = response.json();",
													"              pm.test(\"Response transferId is same as the request transferId\", function () {",
													"                pm.expect(jsonData.transferId).to.eql(pm.variables.get('transferId'));",
													"              });",
													"              pm.test(\"Response status is COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"              });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 2300)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Missing Content Type Header",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "889fc9c2-ae74-419b-aa08-80de159f7ca5",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "685e91f2-dae4-4e17-8d26-0dbaf1e838d6",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Missing Accept Header",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d0cc248f-8d66-4d4c-8667-d042ba37be97",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "88d6d286-0174-454d-b008-e476131b1912",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "PUT - TransfersByID",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "TransfersByIDPut",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1e4557d1-53a2-4b11-a020-e8d10619216b",
														"exec": [
															"pm.variables.set(\"completedTimestamp\",new Date().toISOString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2a9da6b4-4004-4717-9b14-2740a61698c8",
														"exec": [
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payeefsp}}",
														"type": "text"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payerfsp}}",
														"type": "text"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}"
													]
												},
												"description": "The callback PUT /transfers/<ID> is used to inform the client of a requested or created transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer, or the <ID> that was used in the GET /transfers/<ID>."
											},
											"response": []
										},
										{
											"name": "TransfersABORTWithoutFulfillment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "93c79780-cf1b-4d84-bf67-cc6c42a623e8",
														"exec": [
															"pm.variables.set(\"completedTimestamp\",new Date().toISOString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "121cc195-ada4-4459-9dd2-e98a19eadef0",
														"exec": [
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{payeefsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"ABORTED\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}"
													]
												},
												"description": "The callback PUT /transfers/<ID> is used to inform the client of a requested or created transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer, or the <ID> that was used in the GET /transfers/<ID>."
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "400 - Exrta transferId in body",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6e3df30f-d8f7-47e8-8c34-5ed6eb93ead7",
														"exec": [
															"pm.variables.set(\"completedTimestamp\",new Date().toISOString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b4661180-3f1f-405b-9381-a5fca18cc540",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"errorCode should be 400\", function () {",
															"    pm.expect(jsonData.errorInformation.errorCode).to.eql(400);",
															"  });",
															"  ",
															"pm.test(\"errorDescription should be Bad Request\", function () {",
															"    pm.expect(jsonData.errorInformation.errorDescription).to.eql('Bad Request');",
															"  });",
															"  ",
															"pm.test(\"transferId should be part of error description\", function () {",
															"    pm.expect(jsonData.errorInformation.extensionList.extension[0].value).to.include('transferId');",
															"  });",
															" "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{payeefsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\":\"{{transfer_ID}}\",\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "TransfersReject",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9131f208-b9f9-4749-b840-9da548149c11",
														"exec": [
															"pm.variables.set(\"completedTimestamp\",new Date().toISOString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e0076fd3-d9c3-43c2-bb81-12344ec96cac",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"errorCode should be 400\", function () {",
															"    pm.expect(jsonData.errorInformation.errorCode).to.eql(400);",
															"  });",
															"  ",
															"pm.test(\"errorDescription should be Bad Request\", function () {",
															"    pm.expect(jsonData.errorInformation.errorDescription).to.eql('Bad Request');",
															"  });",
															"  ",
															"pm.test(\"transferId should be part of error description\", function () {",
															"    pm.expect(jsonData.errorInformation.extensionList.extension[0].value).to.include('transferId');",
															"  });",
															" "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{payeefsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\":\"{{transfer_ID}}\",\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9ea56671-c1b4-4530-9c6e-c80b4e7ca043",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f257de0e-9ee1-427f-98ff-ffa7e036f037",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "PUT - TransfersByIDError",
							"item": [
								{
									"name": "TransfersByIDAndError",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c186c34b-d56c-4a62-86e1-66e20854ec6d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{dateHeader}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payeefsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payerfsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"errorInformation\": {\n\t\t\"errorCode\": \"5101\",\n\t\t\"errorDescription\": \"Payee transaction limit reached\",\n\t\t\"extensionList\": {\n\t\t\t\"extension\": [{\n\t\t\t\t\"key\": \"errorDetail\",\n\t\t\t\t\"value\": \"This is an abort extension\"\n\t\t\t}]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}/error",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers",
												"{{transfer_ID}}",
												"error"
											]
										},
										"description": "If the server is unable to find or create a transfer, or another processing error occurs, the error callback PUT /transfers/<ID>/error is used. The <ID> in the URI should contain the transferId that was used for the creation of the transfer, or the <ID> that was used in the GET /transfers/<ID>."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a78a9629-bc2d-44de-a69d-76859e72378b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "99148089-3299-4ded-bb4a-4e5af32afde0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Folder for transfers",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "bulkTransfers ( NO IMPLEMENTATION )",
					"item": [
						{
							"name": "BulkTransferByID",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "{{Accept}}"
									}
								],
								"url": {
									"raw": "http://fsp/bulkTransfers/:ID",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"bulkTransfers",
										":ID"
									],
									"variable": [
										{
											"key": "ID"
										}
									]
								},
								"description": "The HTTP request GET /bulkTransfers/<ID> is used to get information regarding an earlier created or requested bulk transfer. The <ID> in the URI should contain the bulkTransferId that was used for the creation of the bulk transfer."
							},
							"response": []
						},
						{
							"name": "BulkTransfersByIDPut",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://fsp/bulkTransfers/:ID",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"bulkTransfers",
										":ID"
									],
									"variable": [
										{
											"key": "ID"
										}
									]
								},
								"description": "The callback PUT /bulkTransfers/<ID> is used to inform the client of a requested or created bulk transfer. The <ID> in the URI should contain the bulkTransferId that was used for the creation of the bulk transfer (POST /bulkTransfers), or the <ID> that was used in the GET /bulkTransfers/<ID>."
							},
							"response": []
						},
						{
							"name": "BulkTransfers",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "{{Accept}}"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "Date",
										"value": "{{Date}}"
									},
									{
										"key": "X-Forwarded-For",
										"value": "{{X-Forwarded-For}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{FSPIOP-Source}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{FSPIOP-Destination}}"
									},
									{
										"key": "FSPIOP-Encryption",
										"value": "{{FSPIOP-Encryption}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{FSPIOP-Signature}}"
									},
									{
										"key": "FSPIOP-URI",
										"value": "{{FSPIOP-URI}}"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "{{FSPIOP-HTTP-Method}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://fsp/bulkTransfers",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"bulkTransfers"
									]
								},
								"description": "The HTTP request POST /bulkTransfers is used to request the creation of a bulk transfer in the server."
							},
							"response": []
						},
						{
							"name": "BulkTransfersErrorByID",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "Date",
										"value": "{{Date}}"
									},
									{
										"key": "X-Forwarded-For",
										"value": "{{X-Forwarded-For}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{FSPIOP-Source}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{FSPIOP-Destination}}"
									},
									{
										"key": "FSPIOP-Encryption",
										"value": "{{FSPIOP-Encryption}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{FSPIOP-Signature}}"
									},
									{
										"key": "FSPIOP-URI",
										"value": "{{FSPIOP-URI}}"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "{{FSPIOP-HTTP-Method}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://fsp/bulkTransfers/:ID/error",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"bulkTransfers",
										":ID",
										"error"
									],
									"variable": [
										{
											"key": "ID",
											"value": "{{ID}}"
										}
									]
								},
								"description": "If the server is unable to find or create a bulk transfer, or another processing error occurs, the error callback PUT /bulkTransfers/<ID>/error is used. The <ID> in the URI should contain the bulkTransferId that was used for the creation of the bulk transfer (POST /bulkTransfers), or the <ID> that was used in the GET /bulkTransfers/<ID>."
							},
							"response": []
						}
					],
					"description": "Folder for bulkTransfers",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "transactionRequests ( NO IMPLEMENTATION )",
					"item": [
						{
							"name": "TransactionRequestsErrorByID",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "Date",
										"value": "{{Date}}"
									},
									{
										"key": "X-Forwarded-For",
										"value": "{{X-Forwarded-For}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{FSPIOP-Source}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{FSPIOP-Destination}}"
									},
									{
										"key": "FSPIOP-Encryption",
										"value": "{{FSPIOP-Encryption}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{FSPIOP-Signature}}"
									},
									{
										"key": "FSPIOP-URI",
										"value": "{{FSPIOP-URI}}"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "{{FSPIOP-HTTP-Method}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://fsp/transactionRequests/:ID/error",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"transactionRequests",
										":ID",
										"error"
									],
									"variable": [
										{
											"key": "ID",
											"value": "{{ID}}"
										}
									]
								},
								"description": "If the server is unable to find or create a transaction request, or another processing error occurs, the error callback PUT /transactionRequests/<ID>/error is used. The <ID> in the URI should contain the transactionRequestId that was used for the creation of the transaction request, or the <ID> that was used in the GET /transactionRequests/<ID>."
							},
							"response": []
						},
						{
							"name": "TransactionRequestsByID",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "{{Accept}}"
									}
								],
								"url": {
									"raw": "http://fsp/transactionRequests/:ID",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"transactionRequests",
										":ID"
									],
									"variable": [
										{
											"key": "ID"
										}
									]
								},
								"description": "The HTTP request GET /transactionRequests/<ID> is used to get information regarding an earlier created or requested transaction request. The <ID> in the URI should contain the transactionRequestId that was used for the creation of the transaction request."
							},
							"response": []
						},
						{
							"name": "TransactionRequestsByID",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://fsp/transactionRequests/:ID",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"transactionRequests",
										":ID"
									],
									"variable": [
										{
											"key": "ID"
										}
									]
								},
								"description": "The callback PUT /transactionRequests/<ID> is used to inform the client of a requested or created transaction request. The <ID> in the URI should contain the transactionRequestId that was used for the creation of the transaction request, or the <ID> that was used in the GET /transactionRequests/<ID>."
							},
							"response": []
						},
						{
							"name": "TransactionRequests",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "{{Accept}}"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "Date",
										"value": "{{Date}}"
									},
									{
										"key": "X-Forwarded-For",
										"value": "{{X-Forwarded-For}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{FSPIOP-Source}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{FSPIOP-Destination}}"
									},
									{
										"key": "FSPIOP-Encryption",
										"value": "{{FSPIOP-Encryption}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{FSPIOP-Signature}}"
									},
									{
										"key": "FSPIOP-URI",
										"value": "{{FSPIOP-URI}}"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "{{FSPIOP-HTTP-Method}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://fsp/transactionRequests",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"transactionRequests"
									]
								},
								"description": "The HTTP request POST /transactionRequests is used to request the creation of a transaction request for the provided financial transaction in the server."
							},
							"response": []
						}
					],
					"description": "Folder for transactionRequests",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "transactions ( NO IMPLEMENTATION )",
					"item": [
						{
							"name": "TransactionsByID",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "{{Accept}}"
									}
								],
								"url": {
									"raw": "http://fsp/transactions/:ID",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"transactions",
										":ID"
									],
									"variable": [
										{
											"key": "ID"
										}
									]
								},
								"description": "The HTTP request GET /transactions/<ID> is used to get transaction information regarding a financial transaction created earlier. The <ID> in the URI should contain the transactionId that was used for the creation of the quote, as the transaction is created as part of another process (the transfer process)."
							},
							"response": []
						},
						{
							"name": "TransactionsByID",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://fsp/transactions/:ID",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"transactions",
										":ID"
									],
									"variable": [
										{
											"key": "ID"
										}
									]
								},
								"description": "The callback PUT /transactions/<ID> is used to inform the client of a requested transaction. The <ID> in the URI should contain the <ID> that was used in the GET /transactions/<ID>."
							},
							"response": []
						},
						{
							"name": "TransactionsErrorByID",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "Date",
										"value": "{{Date}}"
									},
									{
										"key": "X-Forwarded-For",
										"value": "{{X-Forwarded-For}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{FSPIOP-Source}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{FSPIOP-Destination}}"
									},
									{
										"key": "FSPIOP-Encryption",
										"value": "{{FSPIOP-Encryption}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{FSPIOP-Signature}}"
									},
									{
										"key": "FSPIOP-URI",
										"value": "{{FSPIOP-URI}}"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "{{FSPIOP-HTTP-Method}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://fsp/transactions/:ID/error",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"transactions",
										":ID",
										"error"
									],
									"variable": [
										{
											"key": "ID",
											"value": "{{ID}}"
										}
									]
								},
								"description": "If the server is unable to find or create a transaction, or another processing error occurs, the error callback PUT /transactions/<ID>/error is used. The <ID> in the URI should contain the <ID> that was used in the GET /transactions/<ID>."
							},
							"response": []
						}
					],
					"description": "Folder for transactions",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "authorizations ( NO IMPLEMENTATION )",
					"item": [
						{
							"name": "AuthorizationsByID",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "{{Accept}}"
									}
								],
								"url": {
									"raw": "http://fsp/authorizations/:ID",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"authorizations",
										":ID"
									],
									"variable": [
										{
											"key": "ID"
										}
									]
								},
								"description": "The HTTP request GET /authorizations/<ID> is used to request the Payer to enter the applicable credentials in the Payee FSP system. The <ID> in the URI should contain the transactionRequestID, received from the POST /transactionRequests service earlier in the process. This request requires a query string to be included in the URI, with the following key-value pairs - authenticationType=<Type>, where <Type> value is a valid authentication type from the enumeration AuthenticationType. retriesLeft==<NrOfRetries>, where <NrOfRetries> is the number of retries left before the financial transaction is rejected. <NrOfRetries> must be expressed in the form of the data type Integer. retriesLeft=1 means that this is the last retry before the financial transaction is rejected. amount=<Amount>, where <Amount> is the transaction amount that will be withdrawn from the Payer’s account. <Amount> must be expressed in the form of the data type Amount. currency=<Currency>, where <Currency> is the transaction currency for the amount that will be withdrawn from the Payer’s account. The <Currency> value must be expressed in the form of the enumeration CurrencyCode. An example URI containing all the required key-value pairs in the query string is the following - GET /authorization/3d492671-b7af-4f3f-88de-76169b1bdf88?authenticationType=OTP&retriesLeft=2&amount=102&currency=USD"
							},
							"response": []
						},
						{
							"name": "AuthorizationsByID",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://fsp/authorizations/:ID",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"authorizations",
										":ID"
									],
									"variable": [
										{
											"key": "ID"
										}
									]
								},
								"description": "The callback PUT /authorizations/<ID> is used to inform the client of the result of a previously-requested authorization. The <ID> in the URI should contain the <ID> that was used in the GET /authorizations/<ID>."
							},
							"response": []
						},
						{
							"name": "AuthorizationsByIDAndError",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "Date",
										"value": "{{Date}}"
									},
									{
										"key": "X-Forwarded-For",
										"value": "{{X-Forwarded-For}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{FSPIOP-Source}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{FSPIOP-Destination}}"
									},
									{
										"key": "FSPIOP-Encryption",
										"value": "{{FSPIOP-Encryption}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{FSPIOP-Signature}}"
									},
									{
										"key": "FSPIOP-URI",
										"value": "{{FSPIOP-URI}}"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "{{FSPIOP-HTTP-Method}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://fsp/authorizations/:ID/error",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"authorizations",
										":ID",
										"error"
									],
									"variable": [
										{
											"key": "ID",
											"value": "{{ID}}"
										}
									]
								},
								"description": "If the server is unable to find the transaction request, or another processing error occurs, the error callback PUT /authorizations/<ID>/error is used. The <ID> in the URI should contain the <ID> that was used in the GET /authorizations/<ID>."
							},
							"response": []
						}
					],
					"description": "Folder for authorizations",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala\n\nMojaloop API mainly consists of Participants, Parties, Quotes and Transfers endpoints.\nBulk transfers, transaction requests, transactions, Authorizations, Bulk quotes etc are yet to implement.\n\nThis collection includes the negative test cases of the the four endpoints that validates Headers and Input params.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "10176cd7-187e-4642-b29b-4edd868a398e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2de215fd-8e14-4212-ba97-562aa5600c8d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "bulkQuotes ( NO IMPLEMENTATION )",
			"item": [
				{
					"name": "BulkQuotesErrorByID",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Content-Length",
								"value": "{{Content-Length}}"
							},
							{
								"key": "Content-Type",
								"value": "{{Content-Type}}"
							},
							{
								"key": "Date",
								"value": "{{Date}}"
							},
							{
								"key": "X-Forwarded-For",
								"value": "{{X-Forwarded-For}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{FSPIOP-Source}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{FSPIOP-Destination}}"
							},
							{
								"key": "FSPIOP-Encryption",
								"value": "{{FSPIOP-Encryption}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{FSPIOP-Signature}}"
							},
							{
								"key": "FSPIOP-URI",
								"value": "{{FSPIOP-URI}}"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "{{FSPIOP-HTTP-Method}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://fsp/bulkQuotes/:ID/error",
							"protocol": "http",
							"host": [
								"fsp"
							],
							"path": [
								"bulkQuotes",
								":ID",
								"error"
							],
							"variable": [
								{
									"key": "ID",
									"value": "{{ID}}"
								}
							]
						},
						"description": "If the server is unable to find or create a bulk quote, or another processing error occurs, the error callback PUT /bulkQuotes/<ID>/error is used. The <ID> in the URI should contain the bulkQuoteId that was used for the creation of the bulk quote, or the <ID> that was used in the GET /bulkQuotes/<ID>."
					},
					"response": []
				},
				{
					"name": "BulkQuotesByID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "{{Accept}}"
							}
						],
						"url": {
							"raw": "http://fsp/bulkQuotes/:ID",
							"protocol": "http",
							"host": [
								"fsp"
							],
							"path": [
								"bulkQuotes",
								":ID"
							],
							"variable": [
								{
									"key": "ID"
								}
							]
						},
						"description": "The HTTP request GET /bulkQuotes/<ID> is used to get information regarding an earlier created or requested bulk quote. The <ID> in the URI should contain the bulkQuoteId that was used for the creation of the bulk quote."
					},
					"response": []
				},
				{
					"name": "BulkQuotesByID",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Content-Length",
								"value": "{{Content-Length}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://fsp/bulkQuotes/:ID",
							"protocol": "http",
							"host": [
								"fsp"
							],
							"path": [
								"bulkQuotes",
								":ID"
							],
							"variable": [
								{
									"key": "ID"
								}
							]
						},
						"description": "The callback PUT /bulkQuotes/<ID> is used to inform the client of a requested or created bulk quote. The <ID> in the URI should contain the bulkQuoteId that was used for the creation of the bulk quote, or the <ID> that was used in the GET /bulkQuotes/<ID>."
					},
					"response": []
				},
				{
					"name": "BulkQuotes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "{{Accept}}"
							},
							{
								"key": "Content-Length",
								"value": "{{Content-Length}}"
							},
							{
								"key": "Content-Type",
								"value": "{{Content-Type}}"
							},
							{
								"key": "Date",
								"value": "{{Date}}"
							},
							{
								"key": "X-Forwarded-For",
								"value": "{{X-Forwarded-For}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{FSPIOP-Source}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{FSPIOP-Destination}}"
							},
							{
								"key": "FSPIOP-Encryption",
								"value": "{{FSPIOP-Encryption}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{FSPIOP-Signature}}"
							},
							{
								"key": "FSPIOP-URI",
								"value": "{{FSPIOP-URI}}"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "{{FSPIOP-HTTP-Method}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://fsp/bulkQuotes",
							"protocol": "http",
							"host": [
								"fsp"
							],
							"path": [
								"bulkQuotes"
							]
						},
						"description": "The HTTP request POST /bulkQuotes is used to request the creation of a bulk quote for the provided financial transactions in the server."
					},
					"response": []
				}
			],
			"description": "Folder for bulkQuotes",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Admin-API",
			"item": [
				{
					"name": "participants",
					"item": [
						{
							"name": "Get participants List",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Participant",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"payerfsp\",\n  \"currency\": \"XOF\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Participant - Duplicate account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06e39c97-62b1-4fb7-90ff-d8835183f5b3",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{payerfsp}}\",\n  \"currency\": \"XOF\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants"
									]
								}
							},
							"response": []
						},
						{
							"name": "400-Add Participant - With new currency that HUB recon does not exist",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"payer10\",\n  \"currency\": \"A#\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Participant",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "163e65a2-40a5-4ab0-9a5f-094156ed0148",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"isActive\": false\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Get Participant",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}"
									]
								}
							},
							"response": [
								{
									"name": "Get Participant",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{participant}}",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{participant}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "251",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 22 Aug 2018 15:25:18 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "nginx/1.13.8",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "accept-ranges",
											"value": "bytes",
											"name": "accept-ranges",
											"description": "Content-Types that are acceptable"
										},
										{
											"key": "cache-control",
											"value": "no-cache",
											"name": "cache-control",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										}
									],
									"cookie": [],
									"body": "{\"name\":\"testfsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/testfsp\",\"created\":\"2018-08-22T08:16:50.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/testfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]}"
								}
							]
						},
						{
							"name": "3. 404 - Get Participant - that does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67aea5d4-748c-4e39-aeb5-d9bbeb70591f",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/xyz",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"xyz"
									]
								}
							},
							"response": [
								{
									"name": "Get Participant",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{participant}}",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{participant}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "251",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 22 Aug 2018 15:25:18 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "nginx/1.13.8",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "accept-ranges",
											"value": "bytes",
											"name": "accept-ranges",
											"description": "Content-Types that are acceptable"
										},
										{
											"key": "cache-control",
											"value": "no-cache",
											"name": "cache-control",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										}
									],
									"cookie": [],
									"body": "{\"name\":\"testfsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/testfsp\",\"created\":\"2018-08-22T08:16:50.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/testfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "participants/{id}/accounts",
					"item": [
						{
							"name": "Add Hub Account-HUB_RECONCILIATION",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"HUB_RECONCILIATION\",\n  \"currency\": \"XOF\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/Hub/accounts",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"Hub",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Hub Account-HUB_MULTILATERAL_SETTLEMENT",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"HUB_MULTILATERAL_SETTLEMENT\",\n  \"currency\": \"XOF\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/Hub/accounts",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"Hub",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Get Participant Accounts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "feb62b8f-2df6-4e1d-ac7a-c74ed696e541",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "hub_operator",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payeefsp}}/accounts",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payeefsp}}",
										"accounts"
									]
								}
							},
							"response": [
								{
									"name": "Get Participant",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{participant}}",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{participant}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "251",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 22 Aug 2018 15:25:18 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "nginx/1.13.8",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "accept-ranges",
											"value": "bytes",
											"name": "accept-ranges",
											"description": "Content-Types that are acceptable"
										},
										{
											"key": "cache-control",
											"value": "no-cache",
											"name": "cache-control",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										}
									],
									"cookie": [],
									"body": "{\"name\":\"testfsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/testfsp\",\"created\":\"2018-08-22T08:16:50.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/testfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]}"
								}
							]
						},
						{
							"name": "Update Participant Account (Active/Inactive)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7c8e0c9-7c37-49ae-9d08-c31e1ecec1dd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "FSPIOP-Source",
										"value": "hub_operator",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"isActive\": false\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payeefsp}}/accounts/14",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payeefsp}}",
										"accounts",
										"14"
									]
								},
								"description": "Setting \"isAvtive\" to false, the participant account will be disabled for further transactions. How ever this enables the settlements to go through if any transfers happen before the participant's account is set inactive."
							},
							"response": []
						},
						{
							"name": "3. Get Hub Account",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/Hub/accounts",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"Hub",
										"accounts"
									]
								}
							},
							"response": [
								{
									"name": "Get Participant",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{participant}}",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{participant}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "251",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 22 Aug 2018 15:25:18 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "nginx/1.13.8",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "accept-ranges",
											"value": "bytes",
											"name": "accept-ranges",
											"description": "Content-Types that are acceptable"
										},
										{
											"key": "cache-control",
											"value": "no-cache",
											"name": "cache-control",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										}
									],
									"cookie": [],
									"body": "{\"name\":\"testfsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/testfsp\",\"created\":\"2018-08-22T08:16:50.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/testfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]}"
								}
							]
						},
						{
							"name": "3. Get Participant Accounts - non exist party - BUG",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de751151-e6d0-4a79-ac5e-2d2c1f873128",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/xyz/accounts",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"xyz",
										"accounts"
									]
								}
							},
							"response": [
								{
									"name": "Get Participant",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{participant}}",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{participant}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "251",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 22 Aug 2018 15:25:18 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "nginx/1.13.8",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "accept-ranges",
											"value": "bytes",
											"name": "accept-ranges",
											"description": "Content-Types that are acceptable"
										},
										{
											"key": "cache-control",
											"value": "no-cache",
											"name": "cache-control",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										}
									],
									"cookie": [],
									"body": "{\"name\":\"testfsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/testfsp\",\"created\":\"2018-08-22T08:16:50.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/testfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]}"
								}
							]
						},
						{
							"name": "Record Funds In - payerfsp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "82b7ca72-df8b-4934-97f7-85a053279977",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUBOPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{hub_operator}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"7e6b03b1-0e9a-4267-bfa4-cfce0e5f359c\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsIn\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": 5000,\n    \"currency\": \"USD\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "RecordFundsIn-1127 ",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"transferId\": \"523ec634-ef48-6575-a6a0-ded2955b8305\",\n\t\"externalReference\": \"abc123\",\n\t\"action\": \"recordFundsIn\",\n\t\"amount\": {\n\t\t\"amount\": 50.0000,\n\t\t\"currency\": \"USD\"\n\t\t\n\t},\n\t\"reason\": \"Reason for in flow of funds\",\n\t\"extensionList\": {\n\t\t\"extension\": [\n\t\t\t{\n\t\t\t\t\"key\": \"extKey1\",\n\t\t\t\t\"value\": \"extValue1\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"key\": \"extKey2\",\n\t\t\t\t\"value\": \"extValue2\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{fspName}}/accounts/{{settlementAccountId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{fspName}}",
										"accounts",
										"{{settlementAccountId}}"
									]
								},
								"description": "Author: Sridevi Miriyala\n\n\nDeposit Submitted via a Secure PostMan request \n* DFSP Settlement Ledger updated \n* DFSP Settlement Ledger matches bank Settlement Account Balance \n* Hub Reconciliation updated \n\nA DFSP cannot process a deposit"
							},
							"response": []
						},
						{
							"name": "RecordFundsIn-1127 - Invalid Transfer ID - 400",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"transferId\": \"blah\",\n\t\"externalReference\": \"abc123\",\n\t\"action\": \"recordFundsIn\",\n\t\"amount\": {\n\t\t\"amount\": 50.0000,\n\t\t\"currency\": \"USD\"\n\t\t\n\t},\n\t\"reason\": \"Reason for in flow of funds\",\n\t\"extensionList\": {\n\t\t\"extension\": [\n\t\t\t{\n\t\t\t\t\"key\": \"extKey1\",\n\t\t\t\t\"value\": \"extValue1\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"key\": \"extKey2\",\n\t\t\t\t\"value\": \"extValue2\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{fspName}}/accounts/{{settlementAccountId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{fspName}}",
										"accounts",
										"{{settlementAccountId}}"
									]
								},
								"description": "Author: Sridevi Miriyala\n\n\nDeposit Submitted via a Secure PostMan request \n* DFSP Settlement Ledger updated \n* DFSP Settlement Ledger matches bank Settlement Account Balance \n* Hub Reconciliation updated \n\nA DFSP cannot process a deposit"
							},
							"response": []
						},
						{
							"name": "RecordFundsOutPrepare - payerfsp -1128",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "36e21244-9294-4989-a930-13c10ec7a0a9",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('fundsOutPrepareTransferId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"transferId\": \"{{fundsOutPrepareTransferId}}\",\n\t\"externalReference\": \"def456\",\n\t\"action\": \"recordFundsOutPrepare\",\n\t\"amount\": {\n\t\t\"amount\": 50,\n\t\t\"currency\": \"USD\"\n\t\t\n\t},\n\t\"reason\": \"Reason for out flow of funds\",\n\t\"extensionList\": {\n\t\t\"extension\": [\n\t\t\t{\n\t\t\t\t\"key\": \"extKey1\",\n\t\t\t\t\"value\": \"extValue1\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"key\": \"extKey2\",\n\t\t\t\t\"value\": \"extValue2\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}"
									]
								},
								"description": "Author: Sridevi Miriyala\n\n\nAcceptance Criteria:\n\nWithdrawal Reservation Submitted via a Secure PostMan request via WSO2 \n* DFSP Settlement Ledger record created \n\nA DFSP cannot process a withdrawal"
							},
							"response": []
						},
						{
							"name": "RecordFundsOutPrepare-Exceed - 1128",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c1c12009-ce4f-4c07-8566-038b810b771c",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('fundsOutPrepareTransferId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"transferId\": \"{{fundsOutPrepareTransferId}}\",\n\t\"externalReference\": \"def456\",\n\t\"action\": \"recordFundsOutPrepare\",\n\t\"amount\": {\n\t\t\"amount\": 60,\n\t\t\"currency\": \"USD\"\n\t\t\n\t},\n\t\"reason\": \"Reason for out flow of funds\",\n\t\"extensionList\": {\n\t\t\"extension\": [\n\t\t\t{\n\t\t\t\t\"key\": \"extKey1\",\n\t\t\t\t\"value\": \"extValue1\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"key\": \"extKey2\",\n\t\t\t\t\"value\": \"extValue2\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{fspName}}/accounts/{{payerfspSettlementAccountId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{fspName}}",
										"accounts",
										"{{payerfspSettlementAccountId}}"
									]
								},
								"description": "Author: Sridevi Miriyala"
							},
							"response": []
						},
						{
							"name": "RecordFundsOutCommit - 1129",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "271c1520-2b07-4da9-bf4e-f7f754e1dba2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"action\": \"recordFundsOutCommit\",\n\t\"reason\": \"Reason for out flow of funds\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}/transfers/{{fundsOutPrepareTransferId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}",
										"transfers",
										"{{fundsOutPrepareTransferId}}"
									]
								},
								"description": "Author: Sridevi Miriyala\n\nWithdrawal Reservation Submitted via a Secure PostMan request via WSO2 \n* DFSP Settlement Ledger updated \n* DFSP Settlement Ledger matches bank Settlement Account Balance \n* Hub Reconciliation updated \n\nA DFSP cannot process a withdrawal"
							},
							"response": []
						},
						{
							"name": "RecordFundsOutAbort - 1130",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"action\": \"recordFundsOutAbort\",\n\t\"reason\": \"Reason for abort\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}/transfers/{{fundsOutPrepareTransferId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}",
										"transfers",
										"{{fundsOutPrepareTransferId}}"
									]
								},
								"description": "Aurhor: Sridevi Miriyala\n\nWithdrawal Reservation Aborted via a Secure PostMan request via WSO2 \n* DFSP Settlement Ledger updated with a reversal record \n* DFSP Settlement Ledger matches bank Settlement Account Balance \n\nA DFSP cannot process a withdrawal"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2aba1bce-c6ed-4b16-99d6-733b71cdbfa2",
								"type": "text/javascript",
								"exec": [
									"var url = pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+\"/participants/\"+ pm.environment.get(\"payerfsp\")+\"/accounts\";",
									"const payerfspGetStatusRequest = {",
									"  url,",
									"  method: 'GET',",
									"  header: {",
									"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"      \"Content-Type\": \"application/json\"",
									"  }",
									"};",
									"",
									"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
									"    var jsonData = response.json()",
									"    for(var i in jsonData) {",
									"        if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
									"            pm.environment.set(\"payerfspSettlementAccountId\", jsonData[i].id);",
									"        }",
									"    }",
									"    ",
									"});",
									"",
									"url = pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+\"/participants/\"+ pm.environment.get(\"payeefsp\")+\"/accounts\";",
									"const payeefspGetStatusRequest = {",
									"  url,",
									"  method: 'GET',",
									"  header: {",
									"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"      \"Content-Type\": \"application/json\"",
									"  }",
									"};",
									"pm.sendRequest(payeefspGetStatusRequest, function (err, response) {",
									"    var jsonData = response.json()",
									"    for(var i in jsonData) {",
									"        if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
									"            pm.environment.set(\"payeefspSettlementAccountId\", jsonData[i].id);",
									"        }",
									"    }",
									"    ",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5c40a1b1-6c54-443a-b883-ab16ffba7272",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "participants/{id}/endpoints",
					"item": [
						{
							"name": "9. Set Endpoint-FSPIOP_CALLBACK_URL_TRANSFER_PUT",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"FSPIOP_CALLBACK_URL_TRANSFER_ERROR\",\n  \"value\": \"http://ec2-18-130-80-55.eu-west-2.compute.amazonaws.com:8444/payerfsp/transfers/{{transferId}}/error\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payerfsp/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"payerfsp",
										"endpoints"
									]
								},
								"description": "Generated from a curl request: \ncurl -i -X POST     http://test-central-ledger.mojaloop.test/admin/participants/testfsp2/initialPositionAndLimits     -H 'Cache-Control: no-cache'     -H 'Content-Type: application/json'     -d '{\n    \\\"currency\\\": \\\"USD\\\",\n    \\\"limit\\\": {\n      \\\"type\\\": \\\"NET_DEBIT_CAP\\\",\n      \\\"value\\\": 1000\n    },\n    \\\"initialPosition\\\": 0\n  }'"
							},
							"response": [
								{
									"name": "2. Create Initial Position and Limits",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Cache-Control",
												"value": "no-cache"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"currency\": \"USD\",\n    \"limit\": {\n      \"type\": \"NET_DEBIT_CAP\",\n      \"value\": 1000\n    },\n    \"initialPosition\": 0\n  }"
										},
										"url": {
											"raw": "http://test-central-ledger.mojaloop.live/admin/participants/testfsp/initialPositionAndLimits",
											"protocol": "http",
											"host": [
												"test-central-ledger",
												"mojaloop",
												"live"
											],
											"path": [
												"admin",
												"participants",
												"testfsp",
												"initialPositionAndLimits"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Hub Endpoint-NET_DEBIT_CAP_THRESHOLD_BREACH_EMAIL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f2e257e-21c0-42d2-abcd-ef9f0904a020",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"NET_DEBIT_CAP_THRESHOLD_BREACH_EMAIL\",\n  \"value\": \"sridevi.miriyala@modusbox.com\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/Hub/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"Hub",
										"endpoints"
									]
								},
								"description": "Generated from a curl request: \ncurl -i -X POST     http://test-central-ledger.mojaloop.test/admin/participants/testfsp2/initialPositionAndLimits     -H 'Cache-Control: no-cache'     -H 'Content-Type: application/json'     -d '{\n    \\\"currency\\\": \\\"USD\\\",\n    \\\"limit\\\": {\n      \\\"type\\\": \\\"NET_DEBIT_CAP\\\",\n      \\\"value\\\": 1000\n    },\n    \\\"initialPosition\\\": 0\n  }'"
							},
							"response": [
								{
									"name": "2. Create Initial Position and Limits",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Cache-Control",
												"value": "no-cache"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"currency\": \"USD\",\n    \"limit\": {\n      \"type\": \"NET_DEBIT_CAP\",\n      \"value\": 1000\n    },\n    \"initialPosition\": 0\n  }"
										},
										"url": {
											"raw": "http://test-central-ledger.mojaloop.live/admin/participants/testfsp/initialPositionAndLimits",
											"protocol": "http",
											"host": [
												"test-central-ledger",
												"mojaloop",
												"live"
											],
											"path": [
												"admin",
												"participants",
												"testfsp",
												"initialPositionAndLimits"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "DFSP Endpoint-NET_DEBIT_CAP_THRESHOLD_BREACH_EMAIL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f8fadd8-063a-45cd-8c33-61a445ff5cd1",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"NET_DEBIT_CAP_THRESHOLD_BREACH_EMAIL\",\n  \"value\": \"sridevi.miriyala@modusbox.com\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payerfsp/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"payerfsp",
										"endpoints"
									]
								},
								"description": "Generated from a curl request: \ncurl -i -X POST     http://test-central-ledger.mojaloop.test/admin/participants/testfsp2/initialPositionAndLimits     -H 'Cache-Control: no-cache'     -H 'Content-Type: application/json'     -d '{\n    \\\"currency\\\": \\\"USD\\\",\n    \\\"limit\\\": {\n      \\\"type\\\": \\\"NET_DEBIT_CAP\\\",\n      \\\"value\\\": 1000\n    },\n    \\\"initialPosition\\\": 0\n  }'"
							},
							"response": [
								{
									"name": "2. Create Initial Position and Limits",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Cache-Control",
												"value": "no-cache"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"currency\": \"USD\",\n    \"limit\": {\n      \"type\": \"NET_DEBIT_CAP\",\n      \"value\": 1000\n    },\n    \"initialPosition\": 0\n  }"
										},
										"url": {
											"raw": "http://test-central-ledger.mojaloop.live/admin/participants/testfsp/initialPositionAndLimits",
											"protocol": "http",
											"host": [
												"test-central-ledger",
												"mojaloop",
												"live"
											],
											"path": [
												"admin",
												"participants",
												"testfsp",
												"initialPositionAndLimits"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "9. Set Endpoint-NET_DEBIT_CAP_ADJUSTMENT_EMAIL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8db66ba-df5f-4692-802b-1b6f48208d5b",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"NET_DEBIT_CAP_ADJUSTMENT_EMAIL\",\n  \"value\": \"sridevi.miriyala@modusbox.com\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payerfsp/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"payerfsp",
										"endpoints"
									]
								},
								"description": "Generated from a curl request: \ncurl -i -X POST     http://test-central-ledger.mojaloop.test/admin/participants/testfsp2/initialPositionAndLimits     -H 'Cache-Control: no-cache'     -H 'Content-Type: application/json'     -d '{\n    \\\"currency\\\": \\\"USD\\\",\n    \\\"limit\\\": {\n      \\\"type\\\": \\\"NET_DEBIT_CAP\\\",\n      \\\"value\\\": 1000\n    },\n    \\\"initialPosition\\\": 0\n  }'"
							},
							"response": [
								{
									"name": "2. Create Initial Position and Limits",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Cache-Control",
												"value": "no-cache"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"currency\": \"USD\",\n    \"limit\": {\n      \"type\": \"NET_DEBIT_CAP\",\n      \"value\": 1000\n    },\n    \"initialPosition\": 0\n  }"
										},
										"url": {
											"raw": "http://test-central-ledger.mojaloop.live/admin/participants/testfsp/initialPositionAndLimits",
											"protocol": "http",
											"host": [
												"test-central-ledger",
												"mojaloop",
												"live"
											],
											"path": [
												"admin",
												"participants",
												"testfsp",
												"initialPositionAndLimits"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Hub Set Endpoint-NET_DEBIT_CAP_ADJUSTMENT_EMAIL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8fdd3fa2-eb7d-494c-b2df-456d1befbe12",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"NET_DEBIT_CAP_ADJUSTMENT_EMAIL\",\n  \"value\": \"sridevi.miriyala@modusbox.com\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/hub/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"hub",
										"endpoints"
									]
								},
								"description": "Generated from a curl request: \ncurl -i -X POST     http://test-central-ledger.mojaloop.test/admin/participants/testfsp2/initialPositionAndLimits     -H 'Cache-Control: no-cache'     -H 'Content-Type: application/json'     -d '{\n    \\\"currency\\\": \\\"USD\\\",\n    \\\"limit\\\": {\n      \\\"type\\\": \\\"NET_DEBIT_CAP\\\",\n      \\\"value\\\": 1000\n    },\n    \\\"initialPosition\\\": 0\n  }'"
							},
							"response": [
								{
									"name": "2. Create Initial Position and Limits",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Cache-Control",
												"value": "no-cache"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"currency\": \"USD\",\n    \"limit\": {\n      \"type\": \"NET_DEBIT_CAP\",\n      \"value\": 1000\n    },\n    \"initialPosition\": 0\n  }"
										},
										"url": {
											"raw": "http://test-central-ledger.mojaloop.live/admin/participants/testfsp/initialPositionAndLimits",
											"protocol": "http",
											"host": [
												"test-central-ledger",
												"mojaloop",
												"live"
											],
											"path": [
												"admin",
												"participants",
												"testfsp",
												"initialPositionAndLimits"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Set Endpoint-SETTLEMENT_TRANSFER_POSITION_CHANGE_EMAIL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4541b103-e06c-4637-893f-5d9a90a59ebc",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"SETTLEMENT_TRANSFER_POSITION_CHANGE_EMAIL\",\n  \"value\": \"sridevi.miriyala@modusbox.com\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"endpoints"
									]
								},
								"description": "Generated from a curl request: \ncurl -i -X POST     http://test-central-ledger.mojaloop.test/admin/participants/testfsp2/initialPositionAndLimits     -H 'Cache-Control: no-cache'     -H 'Content-Type: application/json'     -d '{\n    \\\"currency\\\": \\\"USD\\\",\n    \\\"limit\\\": {\n      \\\"type\\\": \\\"NET_DEBIT_CAP\\\",\n      \\\"value\\\": 1000\n    },\n    \\\"initialPosition\\\": 0\n  }'"
							},
							"response": [
								{
									"name": "2. Create Initial Position and Limits",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Cache-Control",
												"value": "no-cache"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"currency\": \"USD\",\n    \"limit\": {\n      \"type\": \"NET_DEBIT_CAP\",\n      \"value\": 1000\n    },\n    \"initialPosition\": 0\n  }"
										},
										"url": {
											"raw": "http://test-central-ledger.mojaloop.live/admin/participants/testfsp/initialPositionAndLimits",
											"protocol": "http",
											"host": [
												"test-central-ledger",
												"mojaloop",
												"live"
											],
											"path": [
												"admin",
												"participants",
												"testfsp",
												"initialPositionAndLimits"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Hub Set Endpoint-SETTLEMENT_TRANSFER_POSITION_CHANGE_EMAIL",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"SETTLEMENT_TRANSFER_POSITION_CHANGE_EMAIL\",\n  \"value\": \"sridevi.miriyala@modusbox.com\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/hub/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"hub",
										"endpoints"
									]
								},
								"description": "Generated from a curl request: \ncurl -i -X POST     http://test-central-ledger.mojaloop.test/admin/participants/testfsp2/initialPositionAndLimits     -H 'Cache-Control: no-cache'     -H 'Content-Type: application/json'     -d '{\n    \\\"currency\\\": \\\"USD\\\",\n    \\\"limit\\\": {\n      \\\"type\\\": \\\"NET_DEBIT_CAP\\\",\n      \\\"value\\\": 1000\n    },\n    \\\"initialPosition\\\": 0\n  }'"
							},
							"response": [
								{
									"name": "2. Create Initial Position and Limits",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Cache-Control",
												"value": "no-cache"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"currency\": \"USD\",\n    \"limit\": {\n      \"type\": \"NET_DEBIT_CAP\",\n      \"value\": 1000\n    },\n    \"initialPosition\": 0\n  }"
										},
										"url": {
											"raw": "http://test-central-ledger.mojaloop.live/admin/participants/testfsp/initialPositionAndLimits",
											"protocol": "http",
											"host": [
												"test-central-ledger",
												"mojaloop",
												"live"
											],
											"path": [
												"admin",
												"participants",
												"testfsp",
												"initialPositionAndLimits"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "11. Get Endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "acb13411-85d4-4251-a215-1239cf2d994e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payerfsp/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"payerfsp",
										"endpoints"
									]
								},
								"description": "Generated from a curl request: \ncurl -i -X POST     http://test-central-ledger.mojaloop.test/admin/participants/testfsp2/initialPositionAndLimits     -H 'Cache-Control: no-cache'     -H 'Content-Type: application/json'     -d '{\n    \\\"currency\\\": \\\"USD\\\",\n    \\\"limit\\\": {\n      \\\"type\\\": \\\"NET_DEBIT_CAP\\\",\n      \\\"value\\\": 1000\n    },\n    \\\"initialPosition\\\": 0\n  }'"
							},
							"response": [
								{
									"name": "2. Create Initial Position and Limits",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Cache-Control",
												"value": "no-cache"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"currency\": \"USD\",\n    \"limit\": {\n      \"type\": \"NET_DEBIT_CAP\",\n      \"value\": 1000\n    },\n    \"initialPosition\": 0\n  }"
										},
										"url": {
											"raw": "http://test-central-ledger.mojaloop.live/admin/participants/testfsp/initialPositionAndLimits",
											"protocol": "http",
											"host": [
												"test-central-ledger",
												"mojaloop",
												"live"
											],
											"path": [
												"admin",
												"participants",
												"testfsp",
												"initialPositionAndLimits"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Set callback endpoint for Transfer - 400- bad request",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"FSPIOP_CALLBACK_URL_TRANSFER\",\n  \"value\": \"http://ec2-18-130-80-55.eu-west-2.compute.amazonaws.com:8444/payeefsp/transfers\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payeefsp/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"payeefsp",
										"endpoints"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "participants/{id}/positions",
					"item": [
						{
							"name": "Get payerfsp position",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4862156b-7d0d-4e64-86cc-4a8f5a2f0e68",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.variables.set(\"payerfspPositionBeforeTransfer\", jsonData[0].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "400-Get payerfsp position - non existent payer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98359055-70f2-45bc-bfa2-d4815ff3805e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.variables.set(\"payerfspPositionBeforeTransfer\", jsonData[0].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP -Source",
										"value": "{{payerfsp}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/abc/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"abc",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "404-Get payerfsp position - missing id in uri",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c427a951-e77f-4ae7-8124-3583cdbbf78c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.variables.set(\"payerfspPositionBeforeTransfer\", jsonData[0].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get payeefsp position",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e25078f-bcaa-43cd-946c-84cca38dd3e0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.variables.set(\"payerfspPositionBeforeTransfer\", jsonData[0].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payeefsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payeefsp}}",
										"positions"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "net_debit_cap",
					"item": [
						{
							"name": "POST - initialPositionAndLimits",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94c9251a-acec-4680-9dc0-b1f67ec110ff",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"currency\": \"XOF\",\n  \"limit\": {\n    \"type\": \"NET_DEBIT_CAP\",\n    \"value\": 1000\n  },\n  \"initialPosition\": 0\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/initialPositionAndLimits",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"initialPositionAndLimits"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT - limits - 647 - 786 - 1726",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26275675-0bce-406f-81a2-3f713b01edda",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP -Source",
										"value": "{{payerfsp}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"currency\": \"USD\",\n  \"limit\": {\n    \"alarmPercentage\": 10,\n    \"type\": \"NET_DEBIT_CAP\",\n    \"value\": 5000000\n  }\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/limits",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"limits"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT - limits - 647 - 786 - 1726 Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79bd2442-a509-40c3-87b1-12f09dc0f83d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP -Source",
										"value": "{{payerfsp}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"currency\": \"USD\",\n  \"limit\": {\n    \"alarmPercentage\": 10,\n    \"type\": \"NET_DEBIT_CAP\",\n    \"value\": 9500\n  }\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/limits",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"limits"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get - limits",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c38c3af-0539-4914-87fd-b39267aaf364",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payerfsp/limits",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"payerfsp",
										"limits"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get - limits - All FSPs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e94b44f-d9b6-4c25-9c2f-038633b7cb72",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/limits?currency=USD&type=NET_DEBIT_CAP",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"limits"
									],
									"query": [
										{
											"key": "currency",
											"value": "USD"
										},
										{
											"key": "type",
											"value": "NET_DEBIT_CAP"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get - limits - 400 - Bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a5faf64-783a-4d17-8c00-74bf72a80bbb",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}}/participants/blah/limits",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}}"
									],
									"path": [
										"participants",
										"blah",
										"limits"
									]
								},
								"description": "Trying to query GET /limits of a participant that does not exist.\nIn the URI, given the participant \"blah\""
							},
							"response": []
						},
						{
							"name": "GET -limits - missing URI param - 404 - Not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28902441-942e-4028-9332-5215457e7ddc",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payerfsp/",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"payerfsp",
										""
									]
								},
								"description": "Incorrect URI provided to simulate the behavior for 404- NOtfound.\nlimits in the URI is missing here."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "metrics",
					"item": [
						{
							"name": "{{HOST_CENTRAL_LEDGER}}/metrics",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76bea497-99ce-4839-a5bd-959b2a94fd45",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/metrics",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"metrics"
									]
								},
								"description": "This is more related to Prometheus/Grafana monitoring dashboards. "
							},
							"response": []
						},
						{
							"name": "Health",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a6253a92-9c7b-4550-a40d-399563e40d86",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/health",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": [
								{
									"name": "Get Participants List",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 22 Aug 2018 15:25:57 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "nginx/1.13.8",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked",
											"name": "Transfer-Encoding",
											"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
										},
										{
											"key": "cache-control",
											"value": "no-cache",
											"name": "cache-control",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"key": "content-encoding",
											"value": "gzip",
											"name": "content-encoding",
											"description": "The type of encoding used on the data."
										},
										{
											"key": "vary",
											"value": "accept-encoding",
											"name": "vary",
											"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
										}
									],
									"cookie": [],
									"body": "[{\"name\":\"payeefsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/payeefsp\",\"created\":\"2018-08-21T15:57:06.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/payeefsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]},{\"name\":\"payerfsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/payerfsp\",\"created\":\"2018-08-21T15:57:06.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/payerfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]},{\"name\":\"test2fsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/test2fsp\",\"created\":\"2018-08-22T11:12:54.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/test2fsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]},{\"name\":\"test3fsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/test3fsp\",\"created\":\"2018-08-22T11:13:40.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/test3fsp\"},\"currencies\":[{\"currency\":\"INR\",\"isActive\":1}]},{\"name\":\"testfsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/testfsp\",\"created\":\"2018-08-22T08:16:50.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/testfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]},{\"name\":\"testfsp2\",\"id\":\"test-central-ledger.mojaloop.test/participants/testfsp2\",\"created\":\"2018-08-22T08:18:10.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/testfsp2\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]}]"
								}
							]
						},
						{
							"name": "enums",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/enums",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"enums"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author : Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8e5cc06b-821a-4af2-abab-09cdb7fbe264",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9b3e3176-2210-48cc-a1d4-72baae0385f2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Settlements-API",
			"item": [
				{
					"name": "settlementWindows",
					"item": [
						{
							"name": "getSettlementWindowById",
							"item": [
								{
									"name": "200 - ValidRequest - 643c",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7f5d3f17-439d-4fef-a361-5db419ba3c56",
												"exec": [
													"//Input Variables",
													"pm.variables.set(\"iptSettlementWindowId\",\"2\");",
													"",
													"//Expected Ouput values",
													"pm.variables.set(\"optSettlementWindowId\",2);",
													"pm.variables.set(\"optSettlementWindowState\",\"PENDING_SETTLEMENT\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3241da77-9139-4913-b56a-523dacea1796",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Expected Settlement Window Id should be: \"+pm.variables.get(\"optSettlementWindowId\"), function () {",
													"    pm.expect(jsonData.settlementWindowId).to.eql(pm.variables.get(\"optSettlementWindowId\"));",
													"});",
													"",
													"pm.test(\"Expected Settlement State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.state).to.eql(pm.variables.get(\"optSettlementWindowState\"));",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP -Source",
												"value": "{{payerfsp}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{iptSettlementWindowId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows",
												"{{iptSettlementWindowId}}"
											]
										},
										"description": "Happy path test"
									},
									"response": []
								},
								{
									"name": "400 - Bad Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "38290a4d-3b0a-4efc-87de-394a0a9f9c74",
												"exec": [
													"//Input Variables",
													"pm.variables.set(\"iptSettlementWindowId\",\"0\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3c2d78cc-fe57-4e56-a46f-9747d63aa6f4",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"Status Code should be 404\", function () {",
													"    pm.expect(jsonData.statusCode).to.eql(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP -Source",
												"value": "{{payerfsp}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{iptSettlementWindowId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows",
												"{{iptSettlementWindowId}}"
											]
										},
										"description": "Happy path test"
									},
									"response": []
								},
								{
									"name": "401 - Authorization Missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6aa84180-8510-422f-887d-f98d597e0b16",
												"exec": [
													"//Input Variables",
													"pm.variables.set(\"iptSettlementWindowId\",\"-1\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ef5b5bcb-437b-4a6e-a5f7-956ef8173e60",
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"Status Code should be 401\", function () {",
													"    pm.expect(jsonData.statusCode).to.eql(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/1",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows",
												"1"
											]
										},
										"description": "Happy path test"
									},
									"response": []
								},
								{
									"name": "404 - No Data Found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "52ebc7f1-3f7e-447a-9954-3eecb0e4d634",
												"exec": [
													"//Input Variables",
													"pm.variables.set(\"iptSettlementWindowId\",\"-1\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "771001fb-d2cb-416a-9fce-7900fb7ad746",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"Status Code should be 404\", function () {",
													"    pm.expect(jsonData.statusCode).to.eql(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows",
												""
											]
										},
										"description": "Happy path test"
									},
									"response": []
								},
								{
									"name": "415 - Unsupported Media Type ( NOT IMPLEMENTED )",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d23bb461-e2b2-4ae3-b782-3756afe56f7a",
												"exec": [
													"//Input Variables",
													"pm.variables.set(\"iptSettlementWindowId\",\"-1\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e3bb1062-3657-427b-b159-62d0dfa9de83",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"Status Code should be 404\", function () {",
													"    pm.expect(jsonData.statusCode).to.eql(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows",
												""
											]
										},
										"description": "Happy path test"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "closeSettlementWindow",
							"item": [
								{
									"name": "200 - Valid Request -643b",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "07a22f50-fbba-4319-93da-c7025e11f8e0",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlementWindows?state=OPEN\", function (err, response) {",
													"    console.log(response.json());",
													"    pm.variables.set(\"openSettlementWindowId\",response.json()[0].settlementWindowId);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c891f700-2a6f-469d-a7bc-ffa8280f2237",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"New window should be opened\", function () {",
													"    pm.expect(jsonData.settlementWindowId).to.eql(pm.variables.get(\"openSettlementWindowId\")+1);",
													"});",
													"",
													"pm.test(\"New window state should be OPEN\", function () {",
													"    pm.expect(jsonData.state).to.eql('OPEN');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"TESTING\"\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows",
												"{{openWindowID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Bad Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "92c2e1bd-84de-4090-b0ff-da393ac5097c",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlementWindows?state=OPEN\", function (err, response) {",
													"    console.log(response.json());",
													"    pm.variables.set(\"openSettlementWindowId\",response.json()[0].settlementWindowId);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fe76e72d-25a6-4501-99de-35fdf8829410",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"New window should be opened\", function () {",
													"    pm.expect(jsonData.settlementWindowId).to.eql(pm.variables.get(\"openSettlementWindowId\")+1);",
													"});",
													"",
													"pm.test(\"New window state should be OPEN\", function () {",
													"    pm.expect(jsonData.state).to.eql('OPEN');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"state\": \"CLOSE\",\n  \"reason\": \"TESTING\"\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openSettlementWindowId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows",
												"{{openSettlementWindowId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Unauthorized ( NOT IMPLEMENTED )",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "95320f45-7d12-4778-a22c-4edd6d443930",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlementWindows?state=OPEN\", function (err, response) {",
													"    console.log(response.json());",
													"    pm.variables.set(\"openSettlementWindowId\",response.json()[0].settlementWindowId);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "122e0b2a-6953-4d88-97a5-207251fe29da",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"New window should be opened\", function () {",
													"    pm.expect(jsonData.settlementWindowId).to.eql(pm.variables.get(\"openSettlementWindowId\")+1);",
													"});",
													"",
													"pm.test(\"New window state should be OPEN\", function () {",
													"    pm.expect(jsonData.state).to.eql('OPEN');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"state\": \"CLOSE\",\n  \"reason\": \"TESTING\"\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openSettlementWindowId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows",
												"{{openSettlementWindowId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - No Data Found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "48a1b006-4adc-4816-80a5-6c28de9c3574",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlementWindows?state=OPEN\", function (err, response) {",
													"    console.log(response.json());",
													"    pm.variables.set(\"openSettlementWindowId\",response.json()[0].settlementWindowId);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f88be297-9c17-41c1-9476-bc0b30f8a7cd",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"New window should be opened\", function () {",
													"    pm.expect(jsonData.settlementWindowId).to.eql(pm.variables.get(\"openSettlementWindowId\")+1);",
													"});",
													"",
													"pm.test(\"New window state should be OPEN\", function () {",
													"    pm.expect(jsonData.state).to.eql('OPEN');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"state\": \"CLOSE\",\n  \"reason\": \"TESTING\"\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openSettlementWindowId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows",
												"{{openSettlementWindowId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "415 - Unsupported Media Type ( NOT IMPLEMENTED )",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "711797b7-bc95-42e1-a9e2-12f21581a7ea",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlementWindows?state=OPEN\", function (err, response) {",
													"    console.log(response.json());",
													"    pm.variables.set(\"openSettlementWindowId\",response.json()[0].settlementWindowId);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5d04bde2-1e5e-40f6-8dd6-89cb82e3ceec",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"New window should be opened\", function () {",
													"    pm.expect(jsonData.settlementWindowId).to.eql(pm.variables.get(\"openSettlementWindowId\")+1);",
													"});",
													"",
													"pm.test(\"New window state should be OPEN\", function () {",
													"    pm.expect(jsonData.state).to.eql('OPEN');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"state\": \"CLOSE\",\n  \"reason\": \"TESTING\"\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openSettlementWindowId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows",
												"{{openSettlementWindowId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Default - Unexpected Error ( NOT IMPLEMENTED )",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7756f171-c34d-48cf-ba92-28a5cbfe37b4",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlementWindows?state=OPEN\", function (err, response) {",
													"    console.log(response.json());",
													"    pm.variables.set(\"openSettlementWindowId\",response.json()[0].settlementWindowId);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "30bf138e-9fe3-48fc-b645-3ba90b4a3644",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"New window should be opened\", function () {",
													"    pm.expect(jsonData.settlementWindowId).to.eql(pm.variables.get(\"openSettlementWindowId\")+1);",
													"});",
													"",
													"pm.test(\"New window state should be OPEN\", function () {",
													"    pm.expect(jsonData.state).to.eql('OPEN');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"state\": \"CLOSE\",\n  \"reason\": \"TESTING\"\n}"
										},
										"url": {
											"raw": "http://{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openSettlementWindowId}}",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows",
												"{{openSettlementWindowId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "getSettlementWindowsByParams",
							"item": [
								{
									"name": "200 - param - state (OPEN)-643a",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f33f6841-35a8-4172-aafd-e9760a84eee7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    pm.test(\"Window State is OPEN\", function () {",
													"        pm.expect(jsonData[i].state).to.eql('OPEN');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "",
													"disabled": true
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - state (OPEN)-643a Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6eca9aca-19e9-4649-9cec-34b3f32b5ded",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    pm.test(\"Window State is OPEN\", function () {",
													"        pm.expect(jsonData[i].state).to.eql('OPEN');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=CLOSED",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "",
													"disabled": true
												},
												{
													"key": "state",
													"value": "CLOSED",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - param - state (OPEN) Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8cb8cedf-cb82-416c-91a7-b197e9db9724",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    pm.test(\"Window State is OPEN\", function () {",
													"        pm.expect(jsonData[i].state).to.eql('OPEN');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=open",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "",
													"disabled": true
												},
												{
													"key": "state",
													"value": "open",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "State, OPEN is case sensitive.\nTocheck invalid request I have provided state = \"open\""
									},
									"response": []
								},
								{
									"name": "200 - param - state (CLOSED)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "affbaa05-23f6-4e67-99b0-8a4c6e9ac618",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    pm.test(\"Window State is CLOSED\", function () {",
													"        pm.expect(jsonData[i].state).to.eql('CLOSED');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": " FSPIOP-Source",
												"value": "{{payerfsp}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=CLOSED",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "",
													"disabled": true
												},
												{
													"key": "state",
													"value": "CLOSED",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - param - state (CLOSED) Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d571920e-4c80-417e-8dd1-76f6ba9691b4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    pm.test(\"Window State is CLOSED\", function () {",
													"        pm.expect(jsonData[i].state).to.eql('CLOSED');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=CloSeD",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "",
													"disabled": true
												},
												{
													"key": "state",
													"value": "CloSeD",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - state (SETTLED)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86b35885-4387-43db-b43f-fae5413c797a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    pm.test(\"Window State is SETTLED\", function () {",
													"        pm.expect(jsonData[i].state).to.eql('SETTLED');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=SETTLED",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "",
													"disabled": true
												},
												{
													"key": "state",
													"value": "SETTLED",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - param - state (SETTLED) Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c29047f3-01cb-4c21-a8f2-d730fdcbb895",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    pm.test(\"Window State is SETTLED\", function () {",
													"        pm.expect(jsonData[i].state).to.eql('SETTLED');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=NEW",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "",
													"disabled": true
												},
												{
													"key": "state",
													"value": "NEW",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "NEW  is not a valid state for a settlement window.\nSo, I have given the state = \"NEW\" to see the behavior of the application.\n\nResponse is :\n{\n    \"statusCode\": 400,\n    \"error\": \"Bad Request\",\n    \"message\": {\n        \"errorInformation\": {\n            \"errorDescription\": \"Invalid request query input\"\n        }\n    }\n}"
									},
									"response": []
								},
								{
									"name": "200 - param - state (PENDING_SETTLEMENT)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21834f65-81eb-464f-9253-3ac183ab6e92",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    pm.test(\"Window State is PENDING_SETTLEMENT\", function () {",
													"        pm.expect(jsonData[i].state).to.eql('PENDING_SETTLEMENT');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=PENDING_SETTLEMENT",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "",
													"disabled": true
												},
												{
													"key": "state",
													"value": "PENDING_SETTLEMENT",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - param - state (PENDING_SETTLEMENT) Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9dff7811-2daf-4e28-912c-6da15d44c7b9",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    pm.test(\"Window State is PENDING_SETTLEMENT\", function () {",
													"        pm.expect(jsonData[i].state).to.eql('PENDING_SETTLEMENT');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=PENDING",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "",
													"disabled": true
												},
												{
													"key": "state",
													"value": "PENDING",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "To check the behavior with invalid request, I have given state = PENDING instead of PENDING_SETTLEMENT"
									},
									"response": []
								},
								{
									"name": "200 - param - state (NOT_SETTLED)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6295e257-47bc-4124-a452-6d3c0651c51a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Window State is NOT_SETTLED\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[0].state).to.eql('NOT_SETTLED');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=NOT_SETTLED",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "",
													"disabled": true
												},
												{
													"key": "state",
													"value": "NOT_SETTLED",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - param - state (NOT_SETTLED) -Not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c326c83-8881-4357-a95e-628676fc1453",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Window State is NOT_SETTLED\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[0].state).to.eql('NOT_SETTLED');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=NOT_SETTLED",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "",
													"disabled": true
												},
												{
													"key": "state",
													"value": "NOT_SETTLED",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - param - state (NOT_SETTLED) Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6bca050-bcf4-4f7d-a6a3-64611f9aa60e",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Window State is NOT_SETTLED\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[0].state).to.eql('NOT_SETTLED');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=ABCD",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "",
													"disabled": true
												},
												{
													"key": "state",
													"value": "ABCD",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "To check the behavior when the request is invaid, I have provided the state is \"ABCD\""
									},
									"response": []
								},
								{
									"name": "200 - param - participantId (1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a446c393-86dc-400b-bfe5-eae2b7bdbbd9",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"Should have atleast one entry\", function () {",
													"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?participantId=4",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "4"
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - param - participantId (1) Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99b0e707-4797-4787-8a18-1fd36bc5c4d3",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"Should have atleast one entry\", function () {",
													"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?participantId=100",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "100"
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Provide a participantId that does not exist or that doesnot belong to that settlement window."
									},
									"response": []
								},
								{
									"name": "200 - param - participantId (2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0cc32c31-2d8d-4c11-8889-62b89999a47c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"Should have atleast one entry\", function () {",
													"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?participantId=4",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "4"
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - param - participantId (2) Invaid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "718e497e-e294-4b45-869a-049b7e9699d2",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"Should have atleast one entry\", function () {",
													"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?participantId=a",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "a"
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - fromDateTime",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b8d48f5-c79f-4719-bc0b-86983621eacf",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Window for participant Id 1\", function () {",
													"    console.log(pm.response.array)",
													"    //pm.expect(jsonData[0].participantId).to.eql('1');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?fromDateTime=2018-10-03T11:00:00",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "2",
													"disabled": true
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2018-10-03T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z"
												},
												{
													"key": "toDateTime",
													"value": "",
													"description": "eg 2017-07-20T17:32:28Z",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - param - fromDateTime (Invaid)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cde17f65-ea77-41bc-9068-18919a1b01b9",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Window for participant Id 1\", function () {",
													"    console.log(pm.response.array)",
													"    //pm.expect(jsonData[0].participantId).to.eql('1');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?fromDateTime=2018/10/03T11:00",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "2",
													"disabled": true
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2018/10/03T11:00",
													"description": "eg 2017-07-20T17:32:28Z"
												},
												{
													"key": "toDateTime",
													"value": "",
													"description": "eg 2017-07-20T17:32:28Z",
													"disabled": true
												}
											]
										},
										"description": "Invalid  DateTime is provided in the request."
									},
									"response": []
								},
								{
									"name": "200 - param - toDateTime",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f0bc7bc-4469-40bb-a68f-14379301836a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Window for participant Id 1\", function () {",
													"    console.log(pm.response.array)",
													"    //pm.expect(jsonData[0].participantId).to.eql('1');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?toDateTime=2019-02-28T11:00:00",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "2",
													"disabled": true
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2018-10-03T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "2019-02-28T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - param - toDateTime (Invalid)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f0f042a-896a-4202-92a3-3543cc55eeb6",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Window for participant Id 4\", function () {",
													"    console.log(pm.response.array)",
													"    //pm.expect(jsonData[0].participantId).to.eql('4');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?toDateTime=0000--0000T00:00:00Z",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "2",
													"disabled": true
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2018-10-03T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "0000--0000T00:00:00Z",
													"description": "eg 2017-07-20T17:32:28Z"
												}
											]
										},
										"description": "I provided invalid datetime \"0000--0000T00:00:00Z\""
									},
									"response": []
								},
								{
									"name": "200 - param - fromDateTime&toDateTime",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d64d2b2b-1b10-4108-8e95-37d81b78a77e",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Window for participant Id 1\", function () {",
													"    console.log(pm.response.array)",
													"    //pm.expect(jsonData[0].participantId).to.eql('1');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?fromDateTime=2018-10-03T11:00:00&toDateTime=2018-11-31T11:00:00",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "2",
													"disabled": true
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2018-10-03T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z"
												},
												{
													"key": "toDateTime",
													"value": "2018-11-31T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - param - fromDateTime&toDateTime Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "937e2575-040c-4f4a-9984-d027c969873e",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Window for participant Id 1\", function () {",
													"    console.log(pm.response.array)",
													"    //pm.expect(jsonData[0].participantId).to.eql('1');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?fromDateTime=2018-11-04T11:00:00&toDateTime=2018-10-02T11:00:00",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "2",
													"disabled": true
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2018-11-04T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z"
												},
												{
													"key": "toDateTime",
													"value": "2018-10-02T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z"
												}
											]
										},
										"description": "provide from date, a later one than the todatetime."
									},
									"response": []
								},
								{
									"name": "200 - param - state & fromDateTime",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76c2cc43-fab9-4b61-9a23-9ce96a81e326",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Window State is CLOSED\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[0].state).to.eql('CLOSED');",
													"});",
													"",
													"pm.test(\"Window for participant Id 1\", function () {",
													"    console.log(pm.response.array)",
													"    //pm.expect(jsonData[0].participantId).to.eql('1');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN&fromDateTime=2018-10-03T11:00:00",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "2",
													"disabled": true
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "2018-10-03T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z"
												},
												{
													"key": "toDateTime",
													"value": "2018-10-04T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - state & participantID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96d2896d-5f03-4f42-8283-e9add5086cf4",
												"exec": [
													"// pm.test(\"Status code is 200\", function () {",
													"//     pm.response.to.have.status(200);",
													"// });",
													"// pm.test(\"Window State is OPEN\", function () {",
													"//     var jsonData = pm.response.json();",
													"//     pm.expect(jsonData[0].state).to.eql('PEN');",
													"// });",
													"",
													"// pm.test(\"Window for participant Id 2\", function () {",
													"//     console.log(pm.response.array)",
													"//     //pm.expect(jsonData[0].participantId).to.eql('2');",
													"// });",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?participantId=4&state=CLOSED",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "4"
												},
												{
													"key": "state",
													"value": "CLOSED",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "2018-10-03T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "2018-10-04T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - toDateTime & participantID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b804fff-a8ac-404e-8c73-e16273d3da1c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Window by toDateTime and participantId\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[0].settlementWindowId).to.eql(5,4,3,2,1);",
													"});",
													"",
													"pm.test(\"Window for participant Id 2\", function () {",
													"    console.log(pm.response.array)",
													"    //pm.expect(jsonData[0].participantId).to.eql('2');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?participantId=3&toDateTime=2019-02-28T11:00:00",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "3"
												},
												{
													"key": "state",
													"value": "CLOSED",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2018-10-03T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "2019-02-28T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Bad Request (BUG)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b5d9827-637c-485f-910b-d9a53296458e",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Window State is CLOSED\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[0].state).to.eql('CLOSED');",
													"});",
													"",
													"pm.test(\"Window for participant Id 1\", function () {",
													"    console.log(pm.response.array)",
													"    //pm.expect(jsonData[0].participantId).to.eql('1');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "2",
													"disabled": true
												},
												{
													"key": "state",
													"value": "CLOSED",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2018-10-03T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "2018-10-04T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - No Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "918b5c86-de0b-4376-8780-33ff4195f1d1",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?fromDateTime=2020-10-03T11:00:00",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "2",
													"disabled": true
												},
												{
													"key": "state",
													"value": "CLOSED",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2020-10-03T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z"
												},
												{
													"key": "toDateTime",
													"value": "2018-10-04T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Settlement Window by Params",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://test-central-settlement.mojaloop.live/v1/settlementWindows?state=OPEN&fromDateTime=2018-10-03T11:00:00&toDateTime=2018-10-03T15:00:00",
											"protocol": "http",
											"host": [
												"test-central-settlement",
												"mojaloop",
												"live"
											],
											"path": [
												"v1",
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "1",
													"description": "A valid participant Id to filter on.",
													"disabled": true
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "2018-10-03T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z"
												},
												{
													"key": "toDateTime",
													"value": "2018-10-03T15:00:00",
													"description": "eg 2017-07-20T17:32:28Z"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Folder for settlementWindows",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "settlements",
					"item": [
						{
							"name": "createSettlement",
							"item": [
								{
									"name": "200 - Valid Request - 1869",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "328e7c15-a1a1-47c5-aa02-1121eee51a11",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlementWindows?state=CLOSED\", function (err, response) {",
													"    console.log('windowIdToClose: ',response.json()[0].settlementWindowId);",
													"    pm.variables.set(\"windowIdToClose\",response.json()[0].settlementWindowId);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c3f537f6-abeb-453c-bdd6-320bd2bb949a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Settlement state should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.variables.get(\"windowIdToClose\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.variables.get(\"windowIdToClose\"));",
													"});",
													"",
													"pm.test(\"Settlement Window state should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql('PENDING_SETTLEMENT');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"reason\": \"TESTING\",\n  \"settlementWindows\": [\n    {\n      \"id\": {{windowIdToClose}}\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Bad Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3e4d7444-9186-4913-970c-8f57f1269a98",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlementWindows?state=CLOSED\", function (err, response) {",
													"    console.log('windowIdToClose: ',response.json()[0].settlementWindowId);",
													"    pm.variables.set(\"windowIdToClose\",response.json()[0].settlementWindowId);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e0ba494c-a905-4c4e-9d4f-b4c5f5450ef4",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Error message should be present\", function () {",
													"    pm.expect(jsonData.message).to.eql('Invalid request payload input');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"reason\": \"TESTING\",\n  \"settlementWindow\": [\n    {\n      \"id\": {{windowIdToClose}}\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Authorization Missing (NOT IMPLEMENTED)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0edd4886-ee7c-49da-bc6d-6f4f980b9254",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlementWindows?state=CLOSED\", function (err, response) {",
													"    console.log('windowIdToClose: ',response.json()[0].settlementWindowId);",
													"    pm.variables.set(\"windowIdToClose\",response.json()[0].settlementWindowId);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6b6a7acc-0b3f-41f1-9502-3132e8ec9684",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Error message should be present\", function () {",
													"    pm.expect(jsonData.message).to.eql('Invalid request payload input');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"reason\": \"TESTING\",\n  \"settlementWindow\": [\n    {\n      \"id\": {{windowIdToClose}}\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - No Data Found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "155d86a9-5b3e-44f4-ac8d-7eff2de3354b",
												"exec": [
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f5260ff2-41cc-4d67-9de5-2fb3fa04ffb4",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Error message should be present\", function () {",
													"    pm.expect(jsonData.message).to.eql('Invalid request payload input');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"reason\": \"TESTING\",\n  \"settlementWindow\": [\n    {\n      \"id\": -1\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											]
										}
									},
									"response": []
								},
								{
									"name": "createSettlement - On open window Id",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"reason\": \"string\",\n  \"settlementWindows\": [\n    {\n      \"id\": 14\n    }\n    \n  ]\n}"
										},
										"url": {
											"raw": "http://test-central-settlement.mojaloop.live/v1/settlements",
											"protocol": "http",
											"host": [
												"test-central-settlement",
												"mojaloop",
												"live"
											],
											"path": [
												"v1",
												"settlements"
											]
										},
										"description": "\nTrigger the creation of a settlement, that does the calculation of the net settlement position per participant and marks all transfers in the affected windows as PENDING_SETTLEMENT. Returned dataset is the net settlement report for the settlementWindow\nJump to definition\n"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "getSettlementsByParams",
							"item": [
								{
									"name": "200 - param - state(PENDING_SETTLEMENT)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd7bf42f-e0d7-4e77-9cc5-5831674a993c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    pm.test(\"Window State is PENDING_SETTLEMENT\", function () {",
													"        pm.expect(jsonData[i].state).to.eql('PENDING_SETTLEMENT');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements?fromDateTime=2019-02-15T17:32:28Z&toDateTime=2019-03-16T17:32:28Z",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											],
											"query": [
												{
													"key": "currency",
													"value": "USD",
													"disabled": true
												},
												{
													"key": "participantId",
													"value": "{{payerFspId}}",
													"disabled": true
												},
												{
													"key": "settlementWindowId",
													"value": "59",
													"disabled": true
												},
												{
													"key": "accountId",
													"value": "{{payerFspAccountId}}",
													"disabled": true
												},
												{
													"key": "state",
													"value": "PENDING_SETTLEMENT",
													"description": "Available values : PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2019-02-15T17:32:28Z"
												},
												{
													"key": "toDateTime",
													"value": "2019-03-16T17:32:28Z"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - currency(USD)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b433e986-aad9-4581-b6ec-e801a5e9f5f3",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    for(j in jsonData[i].participants) {",
													"        for(k in jsonData[i].participants[j].accounts) {",
													"            pm.test(\"Filter by Currency USD\", function () {",
													"                pm.expect(jsonData[i].participants[j].accounts[k].netSettlementAmount.currency).to.eql('USD');",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements?currency=USD",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											],
											"query": [
												{
													"key": "currency",
													"value": "USD"
												},
												{
													"key": "participantId",
													"value": "{{payerFspId}}",
													"disabled": true
												},
												{
													"key": "settlementWindowId",
													"value": "",
													"disabled": true
												},
												{
													"key": "accountId",
													"value": "{{payerFspAccountId}}",
													"disabled": true
												},
												{
													"key": "state",
													"value": "NOT_SETTLED",
													"description": "Available values : PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2019-02-05T17:32:28Z",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "2019-03-05T17:32:28Z",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - participantId(2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c25ed3ef-4972-4fed-9d88-4d2b313d93c3",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    for(j in jsonData[i].participants) {",
													"        ",
													"            pm.test(\"Filter by participantId 2\", function () {",
													"                pm.expect(jsonData[i].participants[j].id).to.eql(2);",
													"            });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements?participantId={{payeeFspId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											],
											"query": [
												{
													"key": "currency",
													"value": "USD",
													"disabled": true
												},
												{
													"key": "participantId",
													"value": "{{payeeFspId}}"
												},
												{
													"key": "settlementWindowId",
													"value": "",
													"disabled": true
												},
												{
													"key": "accountId",
													"value": "{{payerFspAccountId}}",
													"disabled": true
												},
												{
													"key": "state",
													"value": "NOT_SETTLED",
													"description": "Available values : PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2019-02-05T17:32:28Z",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "2019-03-05T17:32:28Z",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - settlementWindowId(2) BUG",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88410f7e-a6b8-4302-98fc-082275beb91a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    for(j in jsonData[i].participants) {",
													"        ",
													"            pm.test(\"Filter by settlementWindowId 2\", function () {",
													"                pm.expect(jsonData[i].settlementWindows[j].id).to.eql(2);",
													"            });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements?fromDateTime=2019-03-05&toDateTime=2019-03-07",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											],
											"query": [
												{
													"key": "currency",
													"value": "USD",
													"disabled": true
												},
												{
													"key": "participantId",
													"value": "{{payeeFspId}}",
													"disabled": true
												},
												{
													"key": "settlementWindowId",
													"value": "1",
													"disabled": true
												},
												{
													"key": "accountId",
													"value": "{{payeeFspAccountId}}",
													"disabled": true
												},
												{
													"key": "state",
													"value": "NOT_SETTLED",
													"description": "Available values : PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2019-03-05"
												},
												{
													"key": "toDateTime",
													"value": "2019-03-07"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - accountId(2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a13b649-787c-4347-8062-4d280d4fb3f5",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    for(j in jsonData[i].participants) {",
													"        for(k in jsonData[i].participants[j].accounts) {",
													"        ",
													"            pm.test(\"Filter by accountId 2\", function () {",
													"                pm.expect(jsonData[i].participants[j].accounts[k].id).to.eql(2);",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements?accountId={{payeeFspAccountId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											],
											"query": [
												{
													"key": "currency",
													"value": "USD",
													"disabled": true
												},
												{
													"key": "participantId",
													"value": "{{payeeFspId}}",
													"disabled": true
												},
												{
													"key": "settlementWindowId",
													"value": "2",
													"disabled": true
												},
												{
													"key": "accountId",
													"value": "{{payeeFspAccountId}}"
												},
												{
													"key": "state",
													"value": "PENDING_SETTLEMENT",
													"description": "Available values : PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2019-02-05T17:32:28Z",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "2019-03-05T17:32:28Z",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - state&accountId(PENDING_SETTLEMENT,2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b90f480-d945-4280-9404-f7214ed5bce8",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    pm.test(\"Window State is PENDING_SETTLEMENT\", function () {",
													"        pm.expect(jsonData[i].state).to.eql('PENDING_SETTLEMENT');",
													"    });",
													"}",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    for(j in jsonData[i].participants) {",
													"        for(k in jsonData[i].participants[j].accounts) {",
													"        ",
													"            pm.test(\"Filter by accountId 2\", function () {",
													"                pm.expect(jsonData[i].participants[j].accounts[k].id).to.eql(2);",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements?accountId={{payeeFspAccountId}}&state=PENDING_SETTLEMENT",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											],
											"query": [
												{
													"key": "currency",
													"value": "USD",
													"disabled": true
												},
												{
													"key": "participantId",
													"value": "{{payeeFspId}}",
													"disabled": true
												},
												{
													"key": "settlementWindowId",
													"value": "2",
													"disabled": true
												},
												{
													"key": "accountId",
													"value": "{{payeeFspAccountId}}"
												},
												{
													"key": "state",
													"value": "PENDING_SETTLEMENT",
													"description": "Available values : PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "2019-02-05T17:32:28Z",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "2019-03-05T17:32:28Z",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - currency&participantId(USD,1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b538068-dc2b-4bd3-871f-161cedd7930f",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    for(j in jsonData[i].participants) {",
													"        for(k in jsonData[i].participants[j].accounts) {",
													"            pm.test(\"Filter by Currency USD\", function () {",
													"                pm.expect(jsonData[i].participants[j].accounts[k].netSettlementAmount.currency).to.eql('USD');",
													"            });",
													"        }",
													"    }",
													"}",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    for(j in jsonData[i].participants) {",
													"            pm.test(\"Filter by participantId\", function () {",
													"                pm.expect(jsonData[i].participants[j].id).to.eql(4);",
													"            });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements?currency=USD&participantId=4",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											],
											"query": [
												{
													"key": "currency",
													"value": "USD"
												},
												{
													"key": "participantId",
													"value": "4"
												},
												{
													"key": "settlementWindowId",
													"value": "2",
													"disabled": true
												},
												{
													"key": "accountId",
													"value": "{{payeeFspAccountId}}",
													"disabled": true
												},
												{
													"key": "state",
													"value": "PENDING_SETTLEMENT",
													"description": "Available values : PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2019-02-05T17:32:28Z",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "2019-03-05T17:32:28Z",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - state(SETTLED)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49212f88-d06d-4925-9496-8781cf9434a4",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    pm.test(\"Window State is SETTLED\", function () {",
													"        pm.expect(jsonData[i].state).to.eql('SETTLED');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements?state=SETTLED",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											],
											"query": [
												{
													"key": "currency",
													"value": "USD",
													"disabled": true
												},
												{
													"key": "participantId",
													"value": "{{payerFspId}}",
													"disabled": true
												},
												{
													"key": "settlementWindowId",
													"value": "",
													"disabled": true
												},
												{
													"key": "accountId",
													"value": "{{payerFspAccountId}}",
													"disabled": true
												},
												{
													"key": "state",
													"value": "SETTLED",
													"description": "Available values : PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "2019-02-05T17:32:28Z",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "2019-03-05T17:32:28Z",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - from and toDateTime",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c7d179f5-2ab3-4b8a-9f86-e3eb74817aaa",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements?fromDateTime=2019-03-20T17:32:28Z&toDateTime=2019-03-22T19:32:28Z",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											],
											"query": [
												{
													"key": "currency",
													"value": "USD",
													"disabled": true
												},
												{
													"key": "participantId",
													"value": "{{payerFspId}}",
													"disabled": true
												},
												{
													"key": "settlementWindowId",
													"value": "143",
													"disabled": true
												},
												{
													"key": "accountId",
													"value": "{{payerFspAccountId}}",
													"disabled": true
												},
												{
													"key": "state",
													"value": "SETTLED",
													"description": "Available values : PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2019-03-20T17:32:28Z"
												},
												{
													"key": "toDateTime",
													"value": "2019-03-22T19:32:28Z"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "getSettlementById",
							"item": [
								{
									"name": "200 - Valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a3d7136-fbb0-4e02-9dcd-e6591356ba60",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Settlement state should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
													"});",
													"",
													"for(i in jsonData.settlementWindows){",
													"    pm.test(\"Settlement Window state should be PENDING_SETTLEMENT\", function () {",
													"        pm.expect(jsonData.settlementWindows[i].state).to.eql('PENDING_SETTLEMENT');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ec772017-d327-4f62-9104-e4cc7ad54fc9",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlements?state=PENDING_SETTLEMENT\", function (err, response) {",
													"    console.log('openSettlementId: ',response.json()[0].id);",
													"    pm.variables.set(\"openSettlementId\",response.json()[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/87",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"87"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "getSettlementBySettlementParticipantAccount",
							"item": [
								{
									"name": "200 - Valid Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8860c456-51ad-4ca3-b58a-2075cfc301ee",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlements?state=PENDING_SETTLEMENT\", function (err, response) {",
													"    console.log('openSettlementId: ',response.json()[0].id);",
													"    pm.variables.set(\"openSettlementId\",response.json()[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1412c858-a37b-44bd-9879-1ede866be185",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Settlement state should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
													"});",
													"",
													"for(i in jsonData.settlementWindows){",
													"    pm.test(\"Settlement Window state should be PENDING_SETTLEMENT\", function () {",
													"        pm.expect(jsonData.settlementWindows[i].state).to.eql('PENDING_SETTLEMENT');",
													"    });",
													"}",
													"",
													"for(i in jsonData.participants){",
													"    for(j in jsonData.participants[i].accounts) {",
													"        pm.test(\"Participant Account ID should be \"+pm.environment.get(\"payerFspAccountId\"), function () {",
													"            pm.expect(jsonData.participants[i].accounts[j].id).to.eql(parseInt(pm.environment.get(\"payerFspAccountId\")));",
													"       });",
													"        pm.test(\"Participant Account state should be PENDING_SETTLEMENT\", function () {",
													"           pm.expect(jsonData.participants[i].accounts[j].state).to.eql(\"PENDING_SETTLEMENT\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/7/participants/{{payerFspId}}/accounts/{{payerFspAccountId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"7",
												"participants",
												"{{payerFspId}}",
												"accounts",
												"{{payerFspAccountId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Not Found - Missing account Id in URI",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "81160669-eab5-4567-a15e-cd998f0ad7ba",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlements?state=PENDING_SETTLEMENT\", function (err, response) {",
													"    console.log('openSettlementId: ',response.json()[0].id);",
													"    pm.variables.set(\"openSettlementId\",response.json()[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b619c33b-4ca5-4b3a-8fc1-df405aa551b6",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Settlement state should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
													"});",
													"",
													"for(i in jsonData.settlementWindows){",
													"    pm.test(\"Settlement Window state should be PENDING_SETTLEMENT\", function () {",
													"        pm.expect(jsonData.settlementWindows[i].state).to.eql('PENDING_SETTLEMENT');",
													"    });",
													"}",
													"",
													"for(i in jsonData.participants){",
													"    for(j in jsonData.participants[i].accounts) {",
													"        pm.test(\"Participant Account ID should be \"+pm.environment.get(\"payerFspAccountId\"), function () {",
													"            pm.expect(jsonData.participants[i].accounts[j].id).to.eql(parseInt(pm.environment.get(\"payerFspAccountId\")));",
													"       });",
													"        pm.test(\"Participant Account state should be PENDING_SETTLEMENT\", function () {",
													"           pm.expect(jsonData.participants[i].accounts[j].state).to.eql(\"PENDING_SETTLEMENT\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{openSettlementId}}/participants/{{payerFspId}}/accounts",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{openSettlementId}}",
												"participants",
												"{{payerFspId}}",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Invalid Request - settlementID that does not exist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9ba68c7b-d414-419e-b497-28d6b6239ee0",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlements?state=PENDING_SETTLEMENT\", function (err, response) {",
													"    console.log('openSettlementId: ',response.json()[0].id);",
													"    pm.variables.set(\"openSettlementId\",response.json()[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "279af309-af64-4230-bbe5-5218c2b1fc45",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Settlement state should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
													"});",
													"",
													"for(i in jsonData.settlementWindows){",
													"    pm.test(\"Settlement Window state should be PENDING_SETTLEMENT\", function () {",
													"        pm.expect(jsonData.settlementWindows[i].state).to.eql('PENDING_SETTLEMENT');",
													"    });",
													"}",
													"",
													"for(i in jsonData.participants){",
													"    for(j in jsonData.participants[i].accounts) {",
													"        pm.test(\"Participant Account ID should be \"+pm.environment.get(\"payerFspAccountId\"), function () {",
													"            pm.expect(jsonData.participants[i].accounts[j].id).to.eql(parseInt(pm.environment.get(\"payerFspAccountId\")));",
													"       });",
													"        pm.test(\"Participant Account state should be PENDING_SETTLEMENT\", function () {",
													"           pm.expect(jsonData.participants[i].accounts[j].state).to.eql(\"PENDING_SETTLEMENT\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/100/participants/4/accounts/5",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"100",
												"participants",
												"4",
												"accounts",
												"5"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "updateSettlementById ( Refer to Happy Path )",
							"item": [
								{
									"name": "PREPARE participant",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bce58168-952b-40b3-9495-b662090218d7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].settlementWindowId).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].settlementWindowStateId).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"pm.test(\"Payer Participant ID should be: \"+pm.environment.get(\"payerFspId\"), function () {",
													"    pm.expect(jsonData.participants[0].id).to.eql(parseInt(pm.environment.get(\"payerFspId\")));",
													"});",
													"",
													"pm.test(\"Payer Participant Account ID should be: \"+pm.environment.get(\"payerFspAccountId\"), function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].id).to.eql(parseInt(pm.environment.get(\"payerFspAccountId\")));",
													"});",
													"",
													"pm.test(\"Payerfsp Participant Account State should be SETTLED\", function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].state).to.eql(\"SETTLED\");",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9b0109e5-b222-47c8-ac15-2cfbe0eb9fcd",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"participants\": [\n    {\n      \"id\": {{payerFspId}},\n      \"accounts\": [\n        {\n          \"id\": {{payerFspAccountId}},\n          \"reason\": \"test\",\n          \"state\": \"PS_TRANSFERS_RECORDED\"\n        }\n      ]\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RESERVE participant",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "462285d0-f6c0-4491-b09c-af2e2e471943",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].settlementWindowId).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].settlementWindowStateId).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"pm.test(\"Payer Participant ID should be: \"+pm.environment.get(\"payerFspId\"), function () {",
													"    pm.expect(jsonData.participants[0].id).to.eql(parseInt(pm.environment.get(\"payerFspId\")));",
													"});",
													"",
													"pm.test(\"Payer Participant Account ID should be: \"+pm.environment.get(\"payerFspAccountId\"), function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].id).to.eql(parseInt(pm.environment.get(\"payerFspAccountId\")));",
													"});",
													"",
													"pm.test(\"Payerfsp Participant Account State should be SETTLED\", function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].state).to.eql(\"SETTLED\");",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5ee636fd-419d-4e40-82ab-e640e51f2b31",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"participants\": [\n    {\n      \"id\": {{payerFspId}},\n      \"accounts\": [\n        {\n          \"id\": {{payerFspAccountId}},\n          \"reason\": \"test\",\n          \"state\": \"PS_TRANSFERS_RESERVED\"\n        }\n      ]\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "COMMIT participant",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d303dbbc-2029-4f99-b769-1dd1d63c8faa",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].settlementWindowId).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].settlementWindowStateId).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"pm.test(\"Payer Participant ID should be: \"+pm.environment.get(\"payerFspId\"), function () {",
													"    pm.expect(jsonData.participants[0].id).to.eql(parseInt(pm.environment.get(\"payerFspId\")));",
													"});",
													"",
													"pm.test(\"Payer Participant Account ID should be: \"+pm.environment.get(\"payerFspAccountId\"), function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].id).to.eql(parseInt(pm.environment.get(\"payerFspAccountId\")));",
													"});",
													"",
													"pm.test(\"Payerfsp Participant Account State should be SETTLED\", function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].state).to.eql(\"SETTLED\");",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6c8349a6-f2a9-4043-9269-08503b125e61",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"participants\": [\n    {\n      \"id\": {{payerFspId}},\n      \"accounts\": [\n        {\n          \"id\": {{payerFspAccountId}},\n          \"reason\": \"test\",\n          \"state\": \"PS_TRANSFERS_COMMITTED\"\n        }\n      ]\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SETTLE participant",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac01aafd-17ab-4f94-9283-83304ffad8e2",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].settlementWindowId).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].settlementWindowStateId).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"pm.test(\"Payer Participant ID should be: \"+pm.environment.get(\"payerFspId\"), function () {",
													"    pm.expect(jsonData.participants[0].id).to.eql(parseInt(pm.environment.get(\"payerFspId\")));",
													"});",
													"",
													"pm.test(\"Payer Participant Account ID should be: \"+pm.environment.get(\"payerFspAccountId\"), function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].id).to.eql(parseInt(pm.environment.get(\"payerFspAccountId\")));",
													"});",
													"",
													"pm.test(\"Payerfsp Participant Account State should be SETTLED\", function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].state).to.eql(\"SETTLED\");",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "52154089-1df3-41dc-9516-d48e98623617",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"participants\": [\n    {\n      \"id\": {{payerFspId}},\n      \"accounts\": [\n        {\n          \"id\": {{payerFspAccountId}},\n          \"reason\": \"test\",\n          \"state\": \"SETTLED\"\n        }\n      ]\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "updateSettlementBySettlementParticipant ( NOT IMPLEMENTED )",
							"item": [
								{
									"name": "Update settlement of participant",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accounts\": [\n    {\n      \"id\": 0,\n      \"reason\": \"reason\",\n      \"state\": \"CLOSED\",\n      \"externalReference\": \"external-reference-abc123\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}/participants/{{participantId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}",
												"participants",
												"{{participantId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c5417531-2cf3-430a-902b-f28c1e959253",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b17b3fdb-250f-43d7-8ea2-16344eee57d8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "updateSettlementBySettlementParticipantAccount ( NOT IMPLEMENTED )",
							"item": [],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a2d9e22a-b24c-4c42-ac8c-4432162ccbcd",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "30842346-404a-46cb-9f38-914222e2db5b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "abortSettlement",
							"item": [
								{
									"name": "Abort Settlement",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"state\": \"ABORTED\",\n  \"reason\": \"Aborted 1\",\n  \"externalReference\": \"1\"\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Folder for settlements",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e838f007-8a42-474a-b630-67be1f5146d5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "59c9822f-9f40-4fc1-9f5f-8d4421432a83",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Metrics-API",
			"item": [
				{
					"name": "central-ledger-service",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "837a2b9d-ff73-4f40-a02b-a64285dd81af",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Check that first and last expected response values are present\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"moja_cl_process_cpu_user_seconds_total\"); // first Value",
									"    pm.expect(pm.response.text()).to.include(\"moja_cl_nodejs_version_info\"); // last Value",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/html; charset=utf-8",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "text/html; charset=utf-8",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{env_prefix}}-central-ledger.mojaloop.live/metrics",
							"protocol": "http",
							"host": [
								"{{env_prefix}}-central-ledger",
								"mojaloop",
								"live"
							],
							"path": [
								"metrics"
							]
						}
					},
					"response": []
				},
				{
					"name": "ml-api-adapter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99d081a5-b360-422a-bb09-ac41156413d6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Check that first and last expected response values are present\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"moja_cl_process_cpu_user_seconds_total\"); // first Value",
									"    pm.expect(pm.response.text()).to.include(\"moja_cl_nodejs_version_info\"); // last Value",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/html; charset=utf-8"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "text/html; charset=utf-8"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{dateHeader}}"
							}
						],
						"url": {
							"raw": "http://{{env_prefix}}-ml-api-adapter.mojaloop.live/metrics",
							"protocol": "http",
							"host": [
								"{{env_prefix}}-ml-api-adapter",
								"mojaloop",
								"live"
							],
							"path": [
								"metrics"
							]
						}
					},
					"response": []
				},
				{
					"name": "ml-api-adapter Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d855417-8076-4057-aa87-e090bc203506",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Check that first and last expected response values are present\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"moja_cl_process_cpu_user_seconds_total\"); // first Value",
									"    pm.expect(pm.response.text()).to.include(\"moja_cl_nodejs_version_info\"); // last Value",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/html; charset=utf-8"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "text/html; charset=utf-8"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{dateHeader}}"
							}
						],
						"url": {
							"raw": "http://{{env_prefix}}-ml-api-adapter.mojaloop.live/metrics",
							"protocol": "http",
							"host": [
								"{{env_prefix}}-ml-api-adapter",
								"mojaloop",
								"live"
							],
							"path": [
								"metrics"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "FundsIn-API",
			"item": [
				{
					"name": "Record Funds In - prepare",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "54225cf3-dd39-4dc7-9939-6cf495bb6240",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('fundsInPrepareTransferId', generatedUUID);",
									"pm.environment.set('fundsInPrepareAmount', 5000);",
									"",
									"",
									"const payerfspGetStatusRequest = {",
									"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
									"  method: 'GET',",
									"  header: {",
									"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"      \"Content-Type\": \"application/json\"",
									"  }",
									"};",
									"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
									"    console.log(response.json())",
									"    var jsonData = response.json()",
									"    for(var i in jsonData) {",
									"        if((jsonData[i].ledgerAccountType === 'SETTLEMENT') && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
									"            pm.environment.set(\"payerfspSettlementAccountId\",jsonData[i].id)",
									"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsIn\",jsonData[i].value)",
									"        }",
									"    }",
									"});",
									"",
									"const hubGetStatusRequest = {",
									"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/hub/accounts',",
									"  method: 'GET',",
									"  header: {",
									"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"      \"Content-Type\": \"application/json\"",
									"  }",
									"};",
									"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
									"    console.log(response.json())",
									"    var jsonData = response.json()",
									"    for(var i in jsonData) {",
									"        if((jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
									"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsIn\",jsonData[i].value)",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "12db633a-cdd4-4495-b97a-3ac0f44fed7d",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(function () {",
									"    const payerfspGetStatusRequest = {",
									"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
									"      method: 'GET',",
									"      header: {",
									"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"          \"Content-Type\": \"application/json\"",
									"      }",
									"    };",
									"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
									"        console.log('payerfsp accounts: ',response.json())",
									"        var jsonData = response.json()",
									"        var payerfspSettlementAccountBalanceAfterFundsIn",
									"        for(var i in jsonData) {",
									"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT') {",
									"                payerfspSettlementAccountBalanceAfterFundsIn = jsonData[i].value",
									"            }",
									"        }",
									"        var payerfspExpectedBalance = pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsIn') - pm.environment.get('fundsInPrepareAmount')",
									"        pm.test(\"Final Payerfsp Settlement Account Balance should be same as before FundsIn + fundsInPrepareAmount\", function () {",
									"            pm.expect(payerfspSettlementAccountBalanceAfterFundsIn).to.eql(payerfspExpectedBalance);",
									"          });    ",
									"    ",
									"    });",
									"    ",
									"    const hubGetStatusRequest = {",
									"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/hub/accounts',",
									"      method: 'GET',",
									"      header: {",
									"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"          \"Content-Type\": \"application/json\"",
									"      }",
									"    };",
									"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
									"        console.log('hub accounts balance: ',response.json())",
									"        var jsonData = response.json()",
									"        var currentHubReconAccountBalance",
									"        for(var i in jsonData) {",
									"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') {",
									"                hubReconAccountBalanceAfterFundsIn = jsonData[i].value",
									"            }",
									"        }",
									"        var hubExpectedBalance = pm.environment.get(\"hubReconAccountBalanceBeforeFundsIn\")+pm.environment.get('fundsInPrepareAmount')",
									"        console.log(hubExpectedBalance)",
									"        pm.test(\"Final Hub Reconciliation Account Balance should be same as before FundsIn\", function () {",
									"            pm.expect(hubReconAccountBalanceAfterFundsIn).to.eql(hubExpectedBalance);",
									"          });  ",
									"    });",
									"}, 2000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "FSPIOP-Source",
								"type": "text",
								"value": "{{hub_operator}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{fundsInPrepareTransferId}}\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsIn\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": \"{{fundsInPrepareAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}",
								"accounts",
								"{{payerfspSettlementAccountId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Record Funds In - prepare transfer status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e2cf934b-125b-4d35-98d0-86312c588e66",
								"exec": [
									"pm.environment.set('dateHeader', (new Date()).toUTCString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ecc04bdc-c6b3-464b-b750-49e05eb84db1",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(function () {",
									"    ",
									"    const getTransferResponse = {",
									"      url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.environment.get(\"fundsInPrepareTransferId\"),",
									"      method: 'GET',",
									"      header: {",
									"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
									"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"          \"Content-Type\": \"application/json\"",
									"      }",
									"    };",
									"    pm.sendRequest(getTransferResponse, function (err, response) {",
									"        console.log(response.json())",
									"        var jsonData = response.json()",
									"        pm.test(\"Transfer State should be COMMITTED\", function () {",
									"            pm.expect(jsonData.transferState).to.eql(\"COMMITTED\");",
									"          });    ",
									"    ",
									"    });",
									"}, 2000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							}
						],
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsInPrepareTransferId}}",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers",
								"{{fundsInPrepareTransferId}}"
							]
						},
						"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
					},
					"response": []
				},
				{
					"name": "RecordFundsIn-1127 - Invalid Transfer ID - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83f313d0-c8a3-41bb-931a-d3f349a30b5c",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"transferId\": \"blah\",\n\t\"externalReference\": \"abc123\",\n\t\"action\": \"recordFundsIn\",\n\t\"amount\": {\n\t\t\"amount\": 50.0000,\n\t\t\"currency\": \"USD\"\n\t\t\n\t},\n\t\"reason\": \"Reason for in flow of funds\",\n\t\"extensionList\": {\n\t\t\"extension\": [\n\t\t\t{\n\t\t\t\t\"key\": \"extKey1\",\n\t\t\t\t\"value\": \"extValue1\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"key\": \"extKey2\",\n\t\t\t\t\"value\": \"extValue2\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{fspName}}/accounts/{{settlementAccountId}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
							],
							"path": [
								"participants",
								"{{fspName}}",
								"accounts",
								"{{settlementAccountId}}"
							]
						},
						"description": "Author: Sridevi Miriyala\n\n\nDeposit Submitted via a Secure PostMan request \n* DFSP Settlement Ledger updated \n* DFSP Settlement Ledger matches bank Settlement Account Balance \n* Hub Reconciliation updated \n\nA DFSP cannot process a deposit"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "FundsOut-API",
			"item": [
				{
					"name": "Prepare&Reserve",
					"item": [
						{
							"name": "Record Funds Out Prepare&Reserve- payerfsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f7d035ad-df82-4af2-9d3c-537bafcd13fe",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('fundsOutPrepareReserveTransferId', generatedUUID);",
											"pm.environment.set('fundsOutPrepareReserveAmount', 100);",
											"",
											"",
											"const payerfspGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT') {",
											"            pm.environment.set(\"payerfspSettlementAccountId\",jsonData[i].id)",
											"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutPrepare\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											"",
											"const hubGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/hub/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') {",
											"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutPrepare\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "86877ca9-57e4-48c8-8b3b-19284c02252a",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    const payerfspGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var payerfspSettlementAccountBalanceAfterFundsOutPrepare",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT') {",
											"                payerfspSettlementAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
											"            }",
											"        }",
											"        var payerfspExpectedBalance = pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutPrepare')+pm.environment.get(\"fundsOutPrepareReserveAmount\")",
											"        pm.test(\"Final Payerfsp Settlement Account Balance should increase by the transfer amount\", function () {",
											"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutPrepare).to.eql(payerfspExpectedBalance);",
											"          });    ",
											"    ",
											"    });",
											"    ",
											"    const hubGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/hub/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var hubReconAccountBalanceAfterFundsOutPrepare",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') {",
											"                hubReconAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
											"            }",
											"        }",
											"        var hubExpectedBalance = pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutPrepare\")//-pm.environment.get(\"fundsOutPrepareReserveAmount\")",
											"        pm.test(\"Final Hub Reconciliation Account Balance should increase by the transfer amount\", function () {",
											"            pm.expect(hubReconAccountBalanceAfterFundsOutPrepare).to.eql(hubExpectedBalance);",
											"          });  ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{hub_operator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{fundsOutPrepareReserveTransferId}}\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsOutPrepareReserve\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": {{fundsOutPrepareReserveAmount}},\n    \"currency\": \"{{currency}}\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Record Funds Out Prepare&Reserve - transfer status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ea08c484-9beb-40e6-9bae-138556717ad0",
										"exec": [
											"pm.environment.set('dateHeader', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c3ab2e2b-13c1-4048-9313-528f41ab0a0d",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    ",
											"    const getTransferResponse = {",
											"      url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.environment.get(\"fundsOutPrepareReserveTransferId\"),",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"payerfsp\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(getTransferResponse, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        pm.test(\"Transfer State should be RESERVED\", function () {",
											"            pm.expect(jsonData.transferState).to.eql(\"RESERVED\");",
											"          });    ",
											"    ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsOutPrepareReserveTransferId}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{fundsOutPrepareReserveTransferId}}"
									]
								},
								"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Commit",
					"item": [
						{
							"name": "Record Funds Out Commit - payerfsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "70ba77d8-e4dc-4895-b5ee-94e800da1b7d",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('fundsOutCommitTransferId', generatedUUID);",
											"pm.environment.set('fundsOutCommitAmount', 500);",
											"",
											"",
											"const payerfspGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT') {",
											"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutCommit\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											"",
											"const hubGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/hub/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') {",
											"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutCommit\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f32b676e-cc86-4482-bcf1-9dbca737bdab",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    const payerfspGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var payerfspSettlementAccountBalanceAfterFundsOutCommit",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT') {",
											"                payerfspSettlementAccountBalanceAfterFundsOutCommit = jsonData[i].value",
											"            }",
											"        }",
											"        var payerfspExpectedBalance = pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutCommit')-pm.environment.get(\"fundsOutPrepareAmount\")",
											"        pm.test(\"Final Payerfsp Settlement Account Balance should decrease by the transfer amount\", function () {",
											"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutPrepare).to.eql(payerfspExpectedBalance);",
											"          });    ",
											"    ",
											"    });",
											"    ",
											"    const hubGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/hub/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var hubReconAccountBalanceAfterFundsOutCommit",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') {",
											"                hubReconAccountBalanceAfterFundsOutCommit = jsonData[i].value",
											"            }",
											"        }",
											"        var hubExpectedBalance = pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutCommit\")+pm.environment.get(\"fundsOutPrepareAmount\")",
											"        pm.test(\"Final Hub Reconciliation Account Balance should increase by the transfer amount\", function () {",
											"            pm.expect(hubReconAccountBalanceAfterFundsOutCommit).to.eql(hubExpectedBalance);",
											"          });  ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUBOPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{hub_operator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"recordFundsOutCommit\",\n  \"reason\": \"Reason for out flow of funds\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/24/transfers/{{fundsOutPrepareReserveTransferId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"24",
										"transfers",
										"{{fundsOutPrepareReserveTransferId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Record Funds Out Commit - transfer status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "90ca10cd-d6d6-497e-a012-09d93debb64c",
										"exec": [
											"pm.environment.set('dateHeader', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a058b6ee-4a06-4fbc-96da-1db467c83b2f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(function () {",
											"    ",
											"    const getTransferResponse = {",
											"      url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.environment.get(\"fundsOutPrepareTransferId\"),",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(getTransferResponse, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        pm.test(\"Transfer State should be RESERVED\", function () {",
											"            pm.expect(jsonData.transferState).to.eql(\"RESERVED\");",
											"          });    ",
											"    ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "b3d74594-fa41-3581-acf6-4909aaec8134",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{hub_operator}}"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsInPrepareTransferId}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{fundsInPrepareTransferId}}"
									]
								},
								"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Abort",
					"item": [],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ALS-API",
			"item": [
				{
					"name": "Admin",
					"item": [
						{
							"name": "POST Oracles - ACCOUNT_ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a6403d42-01f3-4d16-9bbe-c022ccf7ffee",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,500]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.participants+json;version=1"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									},
									{
										"key": "Date",
										"type": "text",
										"value": ""
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.participants+json;version=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"oracleIdType\": \"ACCOUNT_ID\",\n  \"endpoint\": {\n    \"value\": \"{{BANKACCOUNT_ORACLE_URL}}\",\n    \"endpointType\": \"URL\"\n  },\n  \"currency\": \"{{currency}}\",\n  \"isDefault\": true\n}"
								},
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_ADMIN}}/oracles",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_ADMIN}}"
									],
									"path": [
										"oracles"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Oracles - MERCHANT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9313ba8-cc69-4068-952b-b49970c4ede6",
										"exec": [
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,500]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.participants+json;version=1"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									},
									{
										"key": "Date",
										"type": "text",
										"value": ""
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.participants+json;version=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"oracleIdType\": \"BUSINESS\",\n  \"endpoint\": {\n    \"value\": \"{{MERCHANT_ORACLE_URL}}\",\n    \"endpointType\": \"URL\"\n  },\n  \"currency\": \"{{currency}}\",\n  \"isDefault\": true\n}"
								},
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_ADMIN}}/oracles",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_ADMIN}}"
									],
									"path": [
										"oracles"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Oracles - MSISDN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7137db10-ef3d-4e80-90ab-e527ac87d81d",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,500]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.participants+json;version=1"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									},
									{
										"key": "Date",
										"type": "text",
										"value": ""
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.participants+json;version=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"oracleIdType\": \"MSISDN\",\n  \"endpoint\": {\n    \"value\": \"{{MSISDN_ORACLE_URL}}\",\n    \"endpointType\": \"URL\"\n  },\n  \"currency\": \"{{currency}}\",\n  \"isDefault\": true\n}"
								},
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_ADMIN}}/oracles",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_ADMIN}}"
									],
									"path": [
										"oracles"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Oracles",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "748ae2f8-eb9c-4bbe-8e17-624f2ca907e9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.participants+json;version=1"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									},
									{
										"key": "Date",
										"type": "text",
										"value": ""
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.participants+json;version=1.0"
									}
								],
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_ADMIN}}/oracles",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_ADMIN}}"
									],
									"path": [
										"oracles"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Oracle",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e479b118-204c-41b6-b6bc-e5f51f639878",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202,204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.participants+json;version=1"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									},
									{
										"key": "Date",
										"type": "text",
										"value": ""
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.participants+json;version=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_ADMIN}}/oracles/3",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_ADMIN}}"
									],
									"path": [
										"oracles",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Oracle",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43d95d5b-03d8-4794-af93-24d71d67116d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.participants+json;version=1"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									},
									{
										"key": "Date",
										"type": "text",
										"value": ""
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.participants+json;version=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"oracleIdType\": \"{{fsp_mockfsp01_partyIdType}}\",\n  \"endpoint\": {\n    \"value\": \"{{hub_als_oracle_account_host}}\",\n    \"endpointType\": \"URL\"\n  },\n  \"currency\": \"{{currency}}\",\n  \"isDefault\": true\n}"
								},
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_ADMIN}}/oracles/3",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_ADMIN}}"
									],
									"path": [
										"oracles",
										"3"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "14abc429-36fd-4e82-b0a6-e24e555324c1",
				"type": "text/javascript",
				"exec": [
					"pm.environment.set('dateHeader', (new Date()).toUTCString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4ca3c5d8-51f4-4d2a-b3aa-7f449ad2b24b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}