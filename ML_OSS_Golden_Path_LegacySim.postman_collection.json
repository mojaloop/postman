{
	"info": {
		"_postman_id": "86efc63e-d9b7-4a8b-b79a-46d5cea31b75",
		"name": "ML_OSS_Golden_Path_LegacySim",
		"description": "Purpose: Perform Golden path end-to-end testing on a deployed Mojaloop system\n\nContributors:\n- Mowali\n- Amar Ramachandran <amarnath.ramachandran@modusbox.com>\n- Georgi Georgiev <georgi.georgiev@modusbox.com>\n- Juan Correa <juan.correa@modusbox.com>\n- Miguel deBarros <miguel.debarros@modusbox.com>\n- Nico Duvenage <nico.duvenage@modusbox.com>\n- Sam Kummary <sam@modusbox.com>\n- Sri Miryala <sridevi.miriyala@modusbox.com>\n- Steven Oderayi <steven.oderayi@modusbox.com>\n- valentin genev <valentin.genev@modusbox.com>\n- Vijay Guthi <vijaya.guthi@modusbox.com>",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Pre-test-setup",
			"item": [
				{
					"name": "Run-sample-quotes-transfers-to-prep-simulator",
					"item": [
						{
							"name": "Send Quote",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5614a58e-c227-455f-a9e3-029f1353e0bf",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('quoteId', generatedUUID);",
											"generatedUUID = uuid.v4();",
											"pm.environment.set('transactionId', generatedUUID);",
											"pm.environment.set('quoteDate', (new Date()).toUTCString());",
											"pm.environment.set('transferAmount', 60);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7955cc80-e3dc-485a-9d15-d3a4e93a0cf8",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "payeefsp"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e80034d-df46-4972-b5a5-6719de640d93",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4d619f86-a494-48bb-aece-bd01543de8a4",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transfer_ID', generatedUUID);",
											"pm.environment.set('transferDate', (new Date()).toUTCString());",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"pm.environment.set('transferAmount', 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "FSPIOP-URI",
										"value": "/transfers",
										"type": "text"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "50b557c9-1b47-456c-bd5f-6ba7cef4b3da",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f35e10c7-8cac-4a2a-9f4f-e9544a2ed5a9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a69fd4ea-e28f-43c9-b062-2b2d1e94d4c3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c38cb349-5881-46c4-9b83-3a98f3f79f3c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "p2p_money_transfer",
			"item": [
				{
					"name": "p2p_happy_path SEND QUOTE",
					"item": [
						{
							"name": "Add User - {{pathfinderMSISDN}} to payeefsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "20e0445c-fb3b-40d9-8d87-2a9b11f26aa9",
										"exec": [
											"pm.environment.set('fullName', 'Siabelo Maroka');",
											"pm.environment.set('firstName', 'Siabelo');",
											"pm.environment.set('lastName', 'Maroka');",
											"pm.environment.set('dob', '1973-03-03');",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "faadb468-3172-4782-b7e9-cc48a8dab030",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"party\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"MSISDN\",\n            \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n            \"fspId\": \"{{payeefsp}}\"\n        },\n        \"name\": \"{{fullName}}\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"dateOfBirth\": \"{{dob}}\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{HOST_SIMULATOR}}/payeefsp/parties/MSISDN/{{pathfinderMSISDN}}",
									"host": [
										"{{HOST_SIMULATOR}}"
									],
									"path": [
										"payeefsp",
										"parties",
										"MSISDN",
										"{{pathfinderMSISDN}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Participant {{pathfinderMSISDN}} against MSISDN Simulator for PayeeFSP",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.participants+json;version=1.0"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.participants+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "payeefsp"
									},
									{
										"key": "Postman-Token",
										"value": "7aa4c9f3-1738-49f0-8904-7821e2336692,4127ff87-7d17-483c-8e3e-f0b562a16d84"
									},
									{
										"key": "User-Agent",
										"value": "PostmanRuntime/7.11.0"
									},
									{
										"key": "accept-encoding",
										"value": "gzip, deflate"
									},
									{
										"key": "cache-control",
										"value": "no-cache"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fspId\": \"payeefsp\",\n    \"currency\": \"USD\"\n}"
								},
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
									],
									"path": [
										"participants",
										"MSISDN",
										"{{pathfinderMSISDN}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Party Receiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8786fb53-74fe-40eb-8b4c-13e782fa053e",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check data on payee side",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
											"       ",
											"       if(response.responseSize !== 0) { ",
											"       //Checking headers",
											"        var headers = response.json().headers;",
											"         pm.test(\"payeefsp accept should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
											"            pm.expect(headers['accept']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
											"        });",
											"        pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"            pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"        });",
											"        ",
											"        pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
											"            pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"        });",
											"        ",
											"        pm.test(\"payeefsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
											"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
											"        });",
											"        ",
											"       } else {",
											"           pm.test(\"Parties FAILED - payeeFSP\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"           ",
											"       }",
											"      ",
											"    });",
											"}, 4000)",
											"",
											"//Check data on payer side",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
											"       ",
											"       if(response.responseSize !== 0) { ",
											"       //Checking headers",
											"        var headers = response.json().headers;",
											"        pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"            pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"        });",
											"        ",
											"        pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"            pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"        });",
											"        ",
											"        pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
											"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
											"        });",
											"        ",
											"        pm.test(\"payerfsp accept is empty\", function () {",
											"            pm.expect(headers['accept']).to.eql(undefined);",
											"        });",
											"        ",
											"        pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"            pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"        });",
											"        ",
											"        //Checking data",
											"        var jsonData = response.json().data;",
											"       pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
											"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
											"        });",
											"        pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
											"          pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
											"        });",
											"        pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
											"          pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
											"        });  ",
											"        ",
											"       } else {",
											"           pm.test(\"Parties FAILED - payerFSP\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"           ",
											"       }",
											"      ",
											"    });",
											"}, 4000)",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "05043e0f-f755-49ee-9aaa-9b81c13deb5d",
										"exec": [
											"pm.variables.set('expectedFullName', 'Siabelo Maroka');",
											"pm.variables.set('expectedFirstName', 'Siabelo');",
											"pm.variables.set('expectedLastName', 'Maroka');",
											"pm.variables.set('expectedDOB', '1973-03-03');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.parties+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.parties+json;version=1.0",
										"type": "text"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{pathfinderMSISDN}}",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
									],
									"path": [
										"parties",
										"MSISDN",
										"{{pathfinderMSISDN}}"
									]
								},
								"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "afd10e6e-c0f2-4a95-84fb-ff95eb490519",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('quoteId', generatedUUID);",
											"generatedUUID = uuid.v4();",
											"pm.environment.set('transactionId', generatedUUID);",
											"pm.environment.set('quoteDate', (new Date()).toUTCString());",
											"pm.environment.set('transferAmount', 60.11);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6349ef45-05ec-4e6b-b2cf-5f1ad7225bf9",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check the request that Switch forwards to payeefsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              ",
											"              //Check the Headers",
											"              var headers = response.json().headers;",
											"              ",
											"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-destination is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
											"                    pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
											"                });",
											"                ",
											"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
											"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
											"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"                });",
											"                ",
											"          } else {",
											"              pm.test(\"Quote FAILED\", function () {",
											"                throw new Error('Did not receive request on payee side');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 1100)",
											"",
											"//Check Data on payer side",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"          //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            //Validate protected header inside Signature",
											"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
											"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
											"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
											"            ",
											"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
											"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
											"            });",
											"            ",
											"",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
											"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
											"            });",
											"           ",
											"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            ",
											"          pm.test(\"Response fees is returned\", function () {",
											"                pm.expect(jsonData.payeeFspFee.amount).equal(\"1\");",
											"                ",
											"            });",
											"            pm.test(\"Response Commission is returned\", function () {",
											"                pm.expect(jsonData.payeeFspCommission.amount).equal(\"1\");",
											"                ",
											"            });",
											"            ",
											"            pm.test(\"Response ilpPacket is not undefined\", function () {",
											"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
											"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
											"            });",
											"       ",
											"           pm.test(\"Response condition is not undefined\", function () {",
											"               pm.expect(jsonData.condition).not.equal(undefined);",
											"               pm.environment.set(\"condition\", jsonData.condition);",
											"           });",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"",
											"      }",
											"       ",
											"   });",
											"}, 1000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "payeefsp"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aafacc2b-c616-4fae-b4e6-8bbecc31bd88",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check the request that Switch forwards to payeefsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              ",
											"              //Check the Headers",
											"              var headers = response.json().headers;",
											"              ",
											"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
											"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
											"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
											"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
											"                    pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
											"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
											"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
											"                });",
											"                ",
											"                ",
											"                //Check the data",
											"                var jsonData = response.json().data;",
											"                pm.test(\"payeefsp data should have the same transferId as request\", function () {",
											"                   pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same payerfspId as request\", function () {",
											"                   pm.expect(jsonData.payerFsp).to.eql(pm.environment.get(\"payerfsp\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same payeefspId as request\", function () {",
											"                   pm.expect(jsonData.payeeFsp).to.eql(pm.environment.get(\"payeefsp\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same amount as request\", function () {",
											"                   pm.expect(+jsonData.amount.amount).to.eql(pm.environment.get(\"transferAmount\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same currency as request\", function () {",
											"                   pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same expiration as request\", function () {",
											"                   pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
											"                   pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same condition as request\", function () {",
											"                   pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
											"                });",
											"                ",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"",
											"          }",
											"   });",
											"}, 1100)",
											"",
											"//Check the callback response that Switch forwards to payerfsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"            //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-uri includes transfers\", function () {",
											"                pm.expect(headers['fspiop-uri']).to.include('/transfers');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            pm.test(\"Response data does not have transferId\", function () {",
											"               pm.expect(jsonData.transferId).to.eql(undefined);",
											"            });",
											"            pm.test(\"Response status is COMMITTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
											"            });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"",
											"          }",
											"   });",
											"}, 1300)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "81c10700-3ad0-43a8-99bb-e25fcbe2ffb6",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transfer_ID', generatedUUID);",
											"pm.environment.set('transferDate', (new Date()).toUTCString());",
											"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));",
											"pm.environment.set('transferAmount', 1.11);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "FSPIOP-URI",
										"value": "/transfers",
										"type": "text"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "p2p_happy_path RECEIVE_QUOTE",
					"item": [
						{
							"name": "Add User - {{pathfinderMSISDN}} to payeefsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "760a5610-b375-42b9-93c9-fa674c4d2a27",
										"exec": [
											"pm.environment.set('fullName', 'Siabelo Maroka');",
											"pm.environment.set('firstName', 'Siabelo');",
											"pm.environment.set('lastName', 'Maroka');",
											"pm.environment.set('dob', '1973-03-03');",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4b452a9d-e7dc-40a8-8241-1dbc0dabdc63",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"party\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"MSISDN\",\n            \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n            \"fspId\": \"{{payeefsp}}\"\n        },\n        \"name\": \"{{fullName}}\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"dateOfBirth\": \"{{dob}}\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{HOST_SIMULATOR}}/payeefsp/parties/MSISDN/{{pathfinderMSISDN}}",
									"host": [
										"{{HOST_SIMULATOR}}"
									],
									"path": [
										"payeefsp",
										"parties",
										"MSISDN",
										"{{pathfinderMSISDN}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Party Receiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d70c6229-1c8c-4062-9bbe-2fe201d746eb",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check data on payee side",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
											"       ",
											"       if(response.responseSize !== 0) { ",
											"       //Checking headers",
											"        var headers = response.json().headers;",
											"        pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"            pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"        });",
											"        ",
											"        pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
											"            pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"        });",
											"        ",
											"        pm.test(\"payeefsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
											"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
											"        });",
											"        ",
											"        //pm.test(\"payeefsp accept should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
											"        //    pm.expect(headers['accept']).to.eql('should be application/vnd.interoperability.parties+json;version=1.0');",
											"        //});",
											"        // pm.test(\"payeefsp FSPIOP-URI to be /parties\", function () {",
											"        //     pm.expect(headers['fspiop-uri']).to.eql('/parties');",
											"        // });",
											"        ",
											"        // pm.test(\"payeefsp fspiop-http-method is GET\", function () {",
											"        //     pm.expect(headers['fspiop-http-method']).to.eql('GET');",
											"        // });",
											"        ",
											"        ",
											"        ",
											"       } else {",
											"           pm.test(\"Parties FAILED - payeeFSP\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"           ",
											"       }",
											"      ",
											"    });",
											"}, 4000)",
											"",
											"//Check data on payer side",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
											"       ",
											"       if(response.responseSize !== 0) { ",
											"       //Checking headers",
											"        var headers = response.json().headers;",
											"        pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"            pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"        });",
											"        ",
											"        pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"            pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"        });",
											"        ",
											"        pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
											"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
											"        });",
											"        ",
											"        pm.test(\"payerfsp accept is empty\", function () {",
											"            pm.expect(headers['accept']).to.eql(undefined);",
											"        });",
											"       ",
											"        //pm.test(\"payerfsp FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
											"        //    pm.expect(headers['fspiop-uri']).to.eql('/parties/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
											"        //});",
											"        ",
											"        pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"            pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"        });",
											"        ",
											"        //Checking data",
											"        var jsonData = response.json().data;",
											"       pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
											"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
											"        });",
											"        pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
											"          pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
											"        });",
											"        pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
											"          pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
											"        });  ",
											"        ",
											"       } else {",
											"           pm.test(\"Parties FAILED - payerFSP\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"           ",
											"       }",
											"      ",
											"    });",
											"}, 4000)",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b4fad537-ef7f-45e1-ae1b-9329f877d253",
										"exec": [
											"pm.variables.set('expectedFullName', 'Siabelo Maroka');",
											"pm.variables.set('expectedFirstName', 'Siabelo');",
											"pm.variables.set('expectedLastName', 'Maroka');",
											"pm.variables.set('expectedDOB', '1973-03-03');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.parties+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.parties+json;version=1.0",
										"type": "text"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{pathfinderMSISDN}}",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
									],
									"path": [
										"parties",
										"MSISDN",
										"{{pathfinderMSISDN}}"
									]
								},
								"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
							},
							"response": []
						},
						{
							"name": "Send Quote_RECEIVE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "51ac6d71-9f81-4694-ba7a-f785f062a605",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('quoteId', generatedUUID);",
											"generatedUUID = uuid.v4();",
											"pm.environment.set('transactionId', generatedUUID);",
											"pm.environment.set('quoteDate', (new Date()).toUTCString());",
											"pm.environment.set('transferAmount', 60);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d854786f-c772-4846-be6d-6b950a9b1e55",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check the request that Switch forwards to payeefsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              ",
											"              //Check the Headers",
											"              var headers = response.json().headers;",
											"              ",
											"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-destination is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
											"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
											"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"                });",
											"                ",
											"          } else {",
											"              pm.test(\"Quote FAILED\", function () {",
											"                throw new Error('Did not receive request on payee side');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 1100)",
											"",
											"//Check Data on payer side",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"          //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"          ",
											"            pm.test(\"Response ilpPacket is not undefined\", function () {",
											"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
											"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
											"            });",
											"       ",
											"           pm.test(\"Response condition is not undefined\", function () {",
											"               pm.expect(jsonData.condition).not.equal(undefined);",
											"               pm.environment.set(\"condition\", jsonData.condition);",
											"           });",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"",
											"      }",
											"       ",
											"   });",
											"}, 1000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "payeefsp"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"RECEIVE\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1698f727-e39f-4d89-bd34-f491e8f11219",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check the request that Switch forwards to payeefsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              ",
											"              //Check the Headers",
											"              var headers = response.json().headers;",
											"              ",
											"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
											"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
											"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
											"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
											"                    pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
											"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
											"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
											"                });",
											"                ",
											"                ",
											"                //Check the data",
											"                var jsonData = response.json().data;",
											"                pm.test(\"payeefsp data should have the same transferId as request\", function () {",
											"                   pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same payerfspId as request\", function () {",
											"                   pm.expect(jsonData.payerFsp).to.eql(pm.environment.get(\"payerfsp\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same payeefspId as request\", function () {",
											"                   pm.expect(jsonData.payeeFsp).to.eql(pm.environment.get(\"payeefsp\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same amount as request\", function () {",
											"                   pm.expect(+jsonData.amount.amount).to.eql(pm.environment.get(\"transferAmount\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same currency as request\", function () {",
											"                   pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same expiration as request\", function () {",
											"                   pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
											"                   pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same condition as request\", function () {",
											"                   pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
											"                });",
											"                ",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"",
											"          }",
											"   });",
											"}, 1100)",
											"",
											"//Check the callback response that Switch forwards to payerfsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"            //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            // pm.test(\"fspiop-signature is returned\", function () {",
											"            //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"payeefsp_fspiop_signature\"));",
											"            // });",
											"           ",
											"            ",
											"            pm.test(\"payerfsp fspiop-uri includes transfers\", function () {",
											"                pm.expect(headers['fspiop-uri']).to.include('/transfers');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            pm.test(\"Response data does not have transferId\", function () {",
											"               pm.expect(jsonData.transferId).to.eql(undefined);",
											"            });",
											"            pm.test(\"Response status is COMMITTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
											"            });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"",
											"          }",
											"   });",
											"}, 1300)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "193e1dc9-d731-4a00-8393-d07f1791f8f7",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transfer_ID', generatedUUID);",
											"pm.environment.set('transferDate', (new Date()).toUTCString());",
											"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));",
											"pm.environment.set('transferAmount', 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "FSPIOP-URI",
										"value": "/transfers",
										"type": "text"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "871eb539-650e-4b4f-91a6-c8c0c8b87a09",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "318d36ac-cf83-4fec-a07a-669e904c7939",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "781b1202-ddb3-4643-86a3-844627988923",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "44dcccf2-6cae-4ee6-b12f-fbad634a73c6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "block_transfer ( p>ndc )",
			"item": [
				{
					"name": "GET limits-payerfsp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99fbf978-beb4-462f-8082-b1716438fbaf",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var payerNDC = jsonData[0].limit.value",
									"pm.environment.set(\"payerNDC\",payerNDC)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payerfsp/limits",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"payerfsp",
								"limits"
							]
						},
						"description": "review the payerfsp limits/NDC"
					},
					"response": []
				},
				{
					"name": "GET limits -payeefsp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74f7030d-dae3-409b-8ed7-6340a94f5914",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var payeeNDC = jsonData[0].limit.value",
									"pm.environment.set('payeeNDC',payeeNDC)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payeefsp}}/limits",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payeefsp}}",
								"limits"
							]
						},
						"description": "review payeefsp limits/NDC"
					},
					"response": []
				},
				{
					"name": "Get payerfsp position before TheTransfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eed8c7d8-bcf6-493b-a999-949828c2c9ff",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var result;",
									"",
									"jsonData.forEach( entry => {(entry.currency === pm.environment.get(\"currency\")) ? result = entry.value: result =",
									" undefined})",
									"",
									"pm.test(\"Atleast one account position should be returned\", function () {",
									"    pm.environment.set(\"payerfspPositionBeforeTransfer\", result);",
									"    pm.expect(jsonData).to.be.not.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/positions",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}",
								"positions"
							]
						},
						"description": "view payerfsp current position before sending the transfer"
					},
					"response": []
				},
				{
					"name": "Get payeefsp position before TheTransfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee293063-f55e-4c47-ae3f-2d1418163101",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var result;",
									"",
									"jsonData.forEach( entry => {(entry.currency === pm.environment.get(\"currency\")) ? result = entry.value: result =",
									" undefined})",
									"",
									"pm.test(\"Atleast one account position should be returned\", function () {",
									"    pm.environment.set(\"payeefspPositionBeforeTransfer\", result);",
									"    pm.expect(jsonData).to.be.not.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payeefsp}}/positions",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payeefsp}}",
								"positions"
							]
						},
						"description": "Get payeefsp current position before sending the transfer"
					},
					"response": []
				},
				{
					"name": "Send Quote",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e28b20e6-7e09-4ba0-8f64-534b19c6ef05",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"   ",
									"pm.environment.set('quoteId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"",
									"var amount = Number(pm.variables.get(\"payerNDC\")) - Number( pm.variables.get(\"payerfspPositionBeforeTransfer\")) + 100",
									"pm.environment.set('transferAmount', amount)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9860e7cd-f09e-4f00-8c8f-d39a1b96a9c1",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"      if(response.responseSize !== 0) {",
									"          console.log(response.json());",
									"       pm.test(\"Response ilpPacket is not undefined\", function () {",
									"           pm.expect(response.json().ilpPacket).not.equal(undefined);",
									"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
									"       });",
									"       ",
									"       pm.test(\"Response condition is not undefined\", function () {",
									"           pm.expect(response.json().condition).not.equal(undefined);",
									"           pm.environment.set(\"condition\", response.json().condition);",
									"       });",
									"      } else {",
									"          pm.test(\"Quote FAILED\", function () {",
									"            throw new Error('Did not receive response');",
									"           });",
									"",
									"      }",
									"       ",
									"   });",
									"}, 1000)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-SOurce",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						},
						"description": "send a quote request for a specified amount. The ilp packet and condition that generates in quotes response body is used to send transfers request."
					},
					"response": []
				},
				{
					"name": "Send Block Transfer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0ec9f980-02be-44ff-bd9b-8f24d82c0b62",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
									"",
									"var amount = Number(pm.environment.get(\"payerNDC\")) - Number( pm.variables.get(\"payerfspPositionBeforeTransfer\")) + 100",
									"pm.environment.set('transferAmount', amount)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e3d243a7-e5e9-4187-95d8-21547ec76e46",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"              var jsonData = response.json();",
									"              pm.test(\"Error Code should be returned '4001'\", function () {",
									"                pm.expect(jsonData.errorInformation.errorCode).to.eql('4001');",
									"              });",
									"              pm.test(\"Error Description should be returned\", function () {",
									"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Payer FSP insufficient liquidity');",
									"              });",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"              ",
									"          }",
									"   });",
									"}, 5000)",
									"",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"              var jsonData = response.json().data;",
									"              var headers = response.json().headers;",
									"              const transferId = pm.environment.get(\"transfer_ID\");",
									"              ",
									"              pm.test(\"Error Code should be returned\", function () {",
									"                pm.expect(jsonData.errorInformation.errorCode).to.eql('4001');",
									"              });",
									"              pm.test(\"Error Description should be returned\", function () {",
									"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Payer FSP insufficient liquidity');",
									"              });",
									"              pm.test(\"fspiop-source is switch\", function () {",
									"                pm.expect(headers['fspiop-source']).to.eql('switch');",
									"            });",
									"",
									"            pm.test(\"fspiop-destination is payerfsp\", function () {",
									"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
									"            });",
									"            ",
									"            pm.test(\"accept is empty\", function () {",
									"                pm.expect(headers['accept']).to.eql(undefined);",
									"            });",
									"            ",
									"            pm.test(\"content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
									"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
									"            });",
									"            ",
									"            pm.test(\"fspiop-uri contains transfers/\"+transferId+\"/error\", function () {",
									"                pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${transferId}/error`);",
									"            });",
									"            ",
									"            pm.test(\"fspiop-http-method is empty\", function () {",
									"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
									"            });",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"              ",
									"          }",
									"   });",
									"}, 5000)",
									"",
									"pm.environment.set('transferAmount', 100);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						},
						"description": "send a tranfer request with ilp packet and condition that are generated in quotes response along with expiry, fspiop source,fspiop destination, amount and currency."
					},
					"response": []
				},
				{
					"name": "Get payerfsp position after the transfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "12f21b0b-b67d-4f4b-bc7d-2724e2c68f1e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Position before and after the transfer should be the same\", function () {",
									"    pm.expect(jsonData[0].value).to.eql(pm.environment.get(\"payerfspPositionBeforeTransfer\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/positions",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}",
								"positions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get payeefsp position after the transfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8492d30c-55c1-4fec-880b-9912c4f27a8a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Position before and after the transfer should be the same\", function () {",
									"    pm.expect(Number(jsonData[0].value)).to.eql(Number(pm.environment.get(\"payeefspPositionBeforeTransfer\")));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payeefsp}}/positions",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payeefsp}}",
								"positions"
							]
						}
					},
					"response": []
				}
			],
			"description": "Author: Sridevi Miriyala\n\nThis features testes, if a transfer is blocked when position of a participant exceeds the Net Debit Cap for the transfer amount.\n\nSTEPS:\n\nGET Limits\nGET Positions for payer and payee\nset amount=(NDC-P) + 10\nPOST Quotes - send to payee that responds COMMITTED\nPOST Transfers-Prepare\n      -Payerfsp should get error msg \"insufficient liquidity in payerfsp to perform transfer \" \nGET positions - \n  current payer position = prev position \n  current payee position = prev position \n(Failure of the transfer due to insufficient liquidity from payerfsp, results no change in positions)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1ebcb9bf-ec7c-4b27-9f04-83da9ab43eb6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f1dd0c4d-8bf1-4dc5-bc11-77011cc326f2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "funds_in",
			"item": [
				{
					"name": "Record Funds In - prepare",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "accc6a5c-4123-4ff2-89e3-2cf40f731c5a",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('fundsInPrepareTransferId', generatedUUID);",
									"pm.environment.set('fundsInPrepareAmount', 5000);",
									"",
									"",
									"const payerfspGetStatusRequest = {",
									"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
									"  method: 'GET',",
									"  header: {",
									"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"      \"Content-Type\": \"application/json\"",
									"  }",
									"};",
									"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
									"    console.log(response.json())",
									"    var jsonData = response.json()",
									"    for(var i in jsonData) {",
									"        if((jsonData[i].ledgerAccountType === 'SETTLEMENT') && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
									"            pm.environment.set(\"payerfspSettlementAccountId\",jsonData[i].id)",
									"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsIn\",jsonData[i].value)",
									"        }",
									"    }",
									"});",
									"",
									"const hubGetStatusRequest = {",
									"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
									"  method: 'GET',",
									"  header: {",
									"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"      \"Content-Type\": \"application/json\"",
									"  }",
									"};",
									"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
									"    console.log(response.json())",
									"    var jsonData = response.json()",
									"    for(var i in jsonData) {",
									"        if((jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
									"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsIn\",jsonData[i].value)",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c9a20628-ae35-4b6d-9eda-3b80fed58639",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(function () {",
									"    const payerfspGetStatusRequest = {",
									"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
									"      method: 'GET',",
									"      header: {",
									"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"          \"Content-Type\": \"application/json\"",
									"      }",
									"    };",
									"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
									"        console.log('payerfsp accounts: ',response.json())",
									"        var jsonData = response.json()",
									"        var payerfspSettlementAccountBalanceAfterFundsIn",
									"        for(var i in jsonData) {",
									"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT'  && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
									"                payerfspSettlementAccountBalanceAfterFundsIn = jsonData[i].value",
									"            }",
									"        }",
									"        var payerfspExpectedBalance = -(-Number(pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsIn')) + Number(pm.environment.get('fundsInPrepareAmount')))",
									"        pm.test(\"Final Payerfsp Settlement Account Balance should be same as before FundsIn + fundsInPrepareAmount\", function () {",
									"            pm.expect(payerfspSettlementAccountBalanceAfterFundsIn).to.eql(payerfspExpectedBalance);",
									"          });    ",
									"    ",
									"    });",
									"    ",
									"    const hubGetStatusRequest = {",
									"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
									"      method: 'GET',",
									"      header: {",
									"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"          \"Content-Type\": \"application/json\"",
									"      }",
									"    };",
									"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
									"        console.log('Hub accounts balance: ',response.json())",
									"        var jsonData = response.json()",
									"        var currentHubReconAccountBalance",
									"        for(var i in jsonData) {",
									"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION'  && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
									"                hubReconAccountBalanceAfterFundsIn = jsonData[i].value",
									"            }",
									"        }",
									"        var hubExpectedBalance = Number(pm.environment.get(\"hubReconAccountBalanceBeforeFundsIn\"))+Number(pm.environment.get('fundsInPrepareAmount'))",
									"        console.log(hubExpectedBalance)",
									"        pm.test(\"Final Hub Reconciliation Account Balance should be same as before FundsIn + fundsInPrepareAmount\", function () {",
									"            pm.expect(hubReconAccountBalanceAfterFundsIn).to.eql(hubExpectedBalance);",
									"          });  ",
									"    });",
									"}, 2000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "FSPIOP-Source",
								"type": "text",
								"value": "{{hub_operator}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{fundsInPrepareTransferId}}\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsIn\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": \"{{fundsInPrepareAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}",
								"accounts",
								"{{payerfspSettlementAccountId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Record Funds In - prepare transfer status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "078a6789-d00c-4738-a267-c19b0d5474a7",
								"exec": [
									"pm.environment.set('dateHeader', (new Date()).toUTCString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "60c4c109-885e-4c87-bbb5-a864f807d9c9",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(function () {",
									"    ",
									"    const getTransferResponse = {",
									"      url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"fundsInPrepareTransferId\"),",
									"      method: 'GET',",
									"      header: {",
									"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
									"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"          \"Content-Type\": \"application/json\"",
									"      }",
									"    };",
									"    pm.sendRequest(getTransferResponse, function (err, response) {",
									"        var jsonData = response.json().data",
									"        pm.test(\"Transfer State should be COMMITTED\", function () {",
									"            pm.expect(jsonData.transferState).to.eql(\"COMMITTED\");",
									"          });    ",
									"    ",
									"    });",
									"}, 2000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							}
						],
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsInPrepareTransferId}}",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers",
								"{{fundsInPrepareTransferId}}"
							]
						},
						"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
					},
					"response": []
				}
			],
			"description": "Aurhor: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9829a714-c299-41a4-ad4b-8fc37e325746",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d0eb65fb-b02f-4e25-a911-30ab6afe3995",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "funds_out",
			"item": [
				{
					"name": "Reserve&Commit",
					"item": [
						{
							"name": "Record Funds Out Prepare&Reserve- payerfsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "294a5624-46d2-4d6e-8e50-d031e839098a",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('fundsOutPrepareReserveTransferId', generatedUUID);",
											"pm.environment.set('fundsOutPrepareReserveAmount', 1000);",
											"",
											"const payerfspGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"",
											"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"payerfspSettlementAccountId\",jsonData[i].id)",
											"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutPrepare\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											"",
											"const hubGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutPrepare\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "37878b1e-3e28-41fe-95e8-5c99bb412d27",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    const payerfspGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var payerfspSettlementAccountBalanceAfterFundsOutPrepare",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                payerfspSettlementAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
											"            }",
											"        }",
											"        var payerfspExpectedBalance = -(-Number(pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutPrepare'))- Number(pm.environment.get(\"fundsOutPrepareReserveAmount\")))",
											"        pm.test(\"Final Payerfsp Settlement Account Balance should decrease by the transfer amount\", function () {",
											"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutPrepare).to.eql(payerfspExpectedBalance);",
											"          });    ",
											"    ",
											"    });",
											"    ",
											"    const hubGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var hubReconAccountBalanceAfterFundsOutPrepare",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                hubReconAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
											"            }",
											"        }",
											"        var hubExpectedBalance = pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutPrepare\")",
											"        pm.test(\"Final Hub Reconciliation Account Balance should stay the same in prepare phase\", function () {",
											"            pm.expect(hubReconAccountBalanceAfterFundsOutPrepare).to.eql(hubExpectedBalance);",
											"          });  ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{hub_operator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{fundsOutPrepareReserveTransferId}}\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsOutPrepareReserve\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": {{fundsOutPrepareReserveAmount}},\n    \"currency\": \"{{currency}}\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Record Funds Out Prepare&Reserve - transfer status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "928b1baf-af91-4783-abcf-4c676dcca06a",
										"exec": [
											"pm.environment.set('dateHeader', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3f12b4b0-5736-4d2d-bd81-9eeb8cf21884",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    ",
											"    const getTransferResponse = {",
											"      url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"fundsOutPrepareReserveTransferId\"),",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"payerfsp\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(getTransferResponse, function (err, response) {",
											"        var jsonData = response.json().data",
											"        pm.test(\"Transfer State should be RESERVED\", function () {",
											"            pm.expect(jsonData.transferState).to.eql(\"RESERVED\");",
											"          });    ",
											"    ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsOutPrepareReserveTransferId}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{fundsOutPrepareReserveTransferId}}"
									]
								},
								"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
							},
							"response": []
						},
						{
							"name": "Record Funds Out Commit - payerfsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7fb565bf-8de8-419e-82fe-efcdab8d3909",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('fundsOutCommitTransferId', generatedUUID);",
											"pm.environment.set('fundsOutCommitAmount', 1000);",
											"",
											"",
											"const payerfspGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutCommit\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											"",
											"const hubGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutCommit\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ad1df607-79ae-4eb3-8037-1a5fe9ae91fb",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    const payerfspGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var payerfspSettlementAccountBalanceAfterFundsOutCommit",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                payerfspSettlementAccountBalanceAfterFundsOutCommit = jsonData[i].value",
											"            }",
											"        }",
											"        var payerfspExpectedBalance = pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutCommit')//-pm.environment.get(\"fundsOutPrepareAmount\")",
											"        pm.test(\"Final Payerfsp Settlement Account Balance should not change during commit phase\", function () {",
											"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutCommit).to.eql(payerfspExpectedBalance);",
											"          });    ",
											"    ",
											"    });",
											"    ",
											"    const hubGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var hubReconAccountBalanceAfterFundsOutCommit",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                hubReconAccountBalanceAfterFundsOutCommit = jsonData[i].value",
											"            }",
											"        }",
											"        var hubExpectedBalance = Number(pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutCommit\")) - Number(pm.environment.get(\"fundsOutCommitAmount\"))",
											"        pm.test(\"Final Hub Reconciliation Account Balance should decrease by the transfer amount\", function () {",
											"            pm.expect(hubReconAccountBalanceAfterFundsOutCommit).to.eql(hubExpectedBalance);",
											"          });  ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUBOPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{hub_operator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"recordFundsOutCommit\",\n  \"reason\": \"Reason for out flow of funds\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}/transfers/{{fundsOutPrepareReserveTransferId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}",
										"transfers",
										"{{fundsOutPrepareReserveTransferId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Record Funds Out Commit - transfer status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7150feb7-e7ae-41e9-b2bf-8a35358761be",
										"exec": [
											"pm.environment.set('dateHeader', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d9aed54d-b10b-4090-abc2-28e6ae13f641",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    ",
											"    const getTransferResponse = {",
											"      url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"fundsOutPrepareReserveTransferId\"),",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(getTransferResponse, function (err, response) {",
											"        var jsonData = response.json().data",
											"        pm.test(\"Transfer State should be COMMITTED\", function () {",
											"            pm.expect(jsonData.transferState).to.eql(\"COMMITTED\");",
											"          });    ",
											"    ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "b3d74594-fa41-3581-acf6-4909aaec8134",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsOutPrepareReserveTransferId}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{fundsOutPrepareReserveTransferId}}"
									]
								},
								"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Reserve&Abort",
					"item": [
						{
							"name": "Record Funds Out Prepare&Reserve- payerfsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7c18e554-166e-4fee-933d-5c21432a7b29",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('fundsOutPrepareReserveTransferId', generatedUUID);",
											"pm.environment.set('fundsOutPrepareReserveAmount', 1000);",
											"",
											"const payerfspGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"",
											"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"payerfspSettlementAccountId\",jsonData[i].id)",
											"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutPrepare\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											"",
											"const hubGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutPrepare\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7e11da4a-33e6-4de3-b31d-e68069d83efb",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    const payerfspGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var payerfspSettlementAccountBalanceAfterFundsOutPrepare",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                payerfspSettlementAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
											"            }",
											"        }",
											"        var payerfspExpectedBalance = -(-Number(pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutPrepare'))- Number(pm.environment.get(\"fundsOutPrepareReserveAmount\")))",
											"        pm.test(\"Final Payerfsp Settlement Account Balance should decrease by the transfer amount\", function () {",
											"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutPrepare).to.eql(payerfspExpectedBalance);",
											"          });    ",
											"    ",
											"    });",
											"    ",
											"    const hubGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var hubReconAccountBalanceAfterFundsOutPrepare",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                hubReconAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
											"            }",
											"        }",
											"        var hubExpectedBalance = pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutPrepare\")//-pm.environment.get(\"fundsOutPrepareReserveAmount\")",
											"        pm.test(\"Final Hub Reconciliation Account Balance should stay the same in prepare phase\", function () {",
											"            pm.expect(hubReconAccountBalanceAfterFundsOutPrepare).to.eql(hubExpectedBalance);",
											"          });  ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{hub_operator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{fundsOutPrepareReserveTransferId}}\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsOutPrepareReserve\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": {{fundsOutPrepareReserveAmount}},\n    \"currency\": \"{{currency}}\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Record Funds Out Prepare&Reserve - transfer status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f5d5bbad-1ac7-43c3-8538-f004a4f53f20",
										"exec": [
											"pm.environment.set('dateHeader', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "96e4171c-0d12-4228-98dc-8b397f7f4dfd",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    ",
											"    const getTransferResponse = {",
											"      url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"fundsOutPrepareReserveTransferId\"),",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"payerfsp\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(getTransferResponse, function (err, response) {",
											"        console.log(response.json().data)",
											"        var jsonData = response.json().data",
											"        pm.test(\"Transfer State should be RESERVED\", function () {",
											"            pm.expect(jsonData.transferState).to.eql(\"RESERVED\");",
											"          });    ",
											"    ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsOutPrepareReserveTransferId}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{fundsOutPrepareReserveTransferId}}"
									]
								},
								"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
							},
							"response": []
						},
						{
							"name": "Record Funds Out Abort - payerfsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8fae9af3-59a1-4cc0-ae79-b74e3880e472",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('fundsOutCommitAmount', 1000);",
											"",
											"",
											"const payerfspGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutAbort\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											"",
											"const hubGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutAbort\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "15e0512b-3a6a-41ca-b522-7e001137407e",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    const payerfspGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var payerfspSettlementAccountBalanceAfterFundsOutAbort",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                payerfspSettlementAccountBalanceAfterFundsOutAbort = jsonData[i].value",
											"            }",
											"        }",
											"        var payerfspExpectedBalance = pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutPrepare')//-pm.environment.get(\"fundsOutPrepareAmount\")",
											"        pm.test(\"Final Payerfsp Settlement Account Balance should rollback to the value before Prepare\", function () {",
											"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutAbort).to.eql(payerfspExpectedBalance);",
											"          });    ",
											"    ",
											"    });",
											"    ",
											"    const hubGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var hubReconAccountBalanceAfterFundsOutCommit",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                hubReconAccountBalanceAfterFundsOutAbort = jsonData[i].value",
											"            }",
											"        }",
											"        var hubExpectedBalance = Number(pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutAbort\"))",
											"        pm.test(\"Final Hub Reconciliation Account Balance should not change\", function () {",
											"            pm.expect(hubReconAccountBalanceAfterFundsOutAbort).to.eql(hubExpectedBalance);",
											"          });  ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUBOPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{hub_operator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"recordFundsOutAbort\",\n  \"reason\": \"Reason for out flow of funds\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}/transfers/{{fundsOutPrepareReserveTransferId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}",
										"transfers",
										"{{fundsOutPrepareReserveTransferId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Record Funds Out Abort - transfer status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f33ea0d9-af19-42c3-8c72-5d7140842242",
										"exec": [
											"pm.environment.set('dateHeader', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a3f985d3-2d5a-423f-8042-aa35379e0d10",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    ",
											"    const getTransferResponse = {",
											"      url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"fundsOutPrepareReserveTransferId\"),",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(getTransferResponse, function (err, response) {",
											"        console.log(response.json().data)",
											"        var jsonData = response.json().data",
											"        pm.test(\"Transfer State should be ABORTED\", function () {",
											"            pm.expect(jsonData.transferState).to.eql(\"ABORTED\");",
											"          });    ",
											"    ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "b3d74594-fa41-3581-acf6-4909aaec8134",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsOutPrepareReserveTransferId}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{fundsOutPrepareReserveTransferId}}"
									]
								},
								"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b33a1c5d-2c45-4864-a5df-b5e74f9de969",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3bfc9ebe-20ba-41bd-978d-a8dc9524d118",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "settlement_management",
			"item": [
				{
					"name": "SETTLE  settlement",
					"item": [
						{
							"name": "Setup Settlement",
							"item": [
								{
									"name": "Store Settlement&Position Account Balances Before Transfers",
									"item": [
										{
											"name": "testfsp1 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "928a4f48-13f6-4bf4-8c4d-dbb540a5d9bb",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "190d0e7b-d4f1-4b8a-a637-37f84aa42fba",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp3 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a2346ecc-97cb-46cd-84aa-73398efd8e99",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp3",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp4 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8adec9bd-2002-4b66-8822-273ddd4cfd24",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp4",
														"accounts"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Run Quote & Transfers",
									"item": [
										{
											"name": "Get Existing Open Window(quotes and transfers)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1fe5a970-4531-419d-b151-2e48470606fe",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"State should be OPEN\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].state).to.eql('OPEN');",
															"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
															"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows"
													],
													"query": [
														{
															"key": "state",
															"value": "OPEN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close Existing Window(quotes and transfers)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4ff8a566-84db-43d8-9da0-147aa38feee2",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"New window State should be OPEN\", function () {",
															"    console.log(pm.response.json());",
															"    pm.expect(pm.response.json().state).to.eql('OPEN');",
															"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
															"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
															"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
															"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows",
														"{{openWindowID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 1 (testfsp1 to testfsp2)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5dbedbf2-a7f8-4a5f-bd58-8a57e4a5f38b",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   ",
															"   pm.environment.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   pm.environment.set('transferAmount', 60);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4657ff97-5596-48d8-84ef-6cc680b2d83d",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp1\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp2\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 1 ( testfsp1 to testfsp2 )",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1d5d745f-0be6-4197-a977-4495f16ce3a3",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 120000))",
															"pm.environment.set('transferAmount', 60);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2f6657ce-e4d3-4e95-9516-0cea455831e4",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"              });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp1\",\n  \"payeeFsp\": \"testfsp2\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 2 (testfsp1 to testfsp4)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b1a95486-e10f-4aab-9303-eb45309a8535",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('quoteId', generatedUUID);",
															"generatedUUID = uuid.v4();",
															"pm.environment.set('transactionId', generatedUUID);",
															"pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 55.12);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "bb75e1f6-5e11-4ca9-9ac5-bd7eef8cca99",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"//       if(response.responseSize !== 0) {",
															"//           console.log(response.json());",
															"//       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"//           pm.expect(response.json().ilpPacket).not.equal(undefined);",
															"//           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"//       });",
															"       ",
															"//       pm.test(\"Response condition is not undefined\", function () {",
															"//           pm.expect(response.json().condition).not.equal(undefined);",
															"//           pm.environment.set(\"condition\", response.json().condition);",
															"//       });",
															"//       } else {",
															"//           pm.test(\"Quote FAILED\", function () {",
															"//             throw new Error('Did not receive response');",
															"//           });",
															"",
															"//       }",
															"       ",
															"//   });",
															"// }, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp4"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp1\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp4\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 2 (testfsp1 to testfsp4)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8cd5a81a-154e-4e0d-a0de-bf67c7a02d80",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 120000));",
															"pm.environment.set('transferAmount', 55.99);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b91b8f2e-2708-463f-957e-927405eee606",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','true')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"",
															"          }",
															"   });",
															"}, 2000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp4"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp1\",\n  \"payeeFsp\": \"testfsp4\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 3 (testfsp3 to testfsp1)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "823359ff-d7bc-4b79-bd1e-6662e04b70cc",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('quoteId', generatedUUID);",
															"generatedUUID = uuid.v4();",
															"pm.environment.set('transactionId', generatedUUID);",
															"pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 35.1);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "8dc3aee2-eae3-4dac-905d-c6ab1116eec9",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp3/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"//       if(response.responseSize !== 0) {",
															"//           console.log(response.json());",
															"//       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"//           pm.expect(response.json().ilpPacket).not.equal(undefined);",
															"//           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"//       });",
															"       ",
															"//       pm.test(\"Response condition is not undefined\", function () {",
															"//           pm.expect(response.json().condition).not.equal(undefined);",
															"//           pm.environment.set(\"condition\", response.json().condition);",
															"//       });",
															"//       } else {",
															"//           pm.test(\"Quote FAILED\", function () {",
															"//             throw new Error('Did not receive response');",
															"//           });",
															"",
															"//       }",
															"       ",
															"//   });",
															"// }, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP3_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp3"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp3\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp1\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 3 (testfsp3 to testfsp1)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ac792d1f-fef3-4011-98ea-29d2b853ad35",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
															"pm.environment.set('transferAmount', 35.9);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0b49df62-cfc5-4787-adb9-c87f6b0789d9",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp3/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP3_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp3"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp3\",\n  \"payeeFsp\": \"testfsp1\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 4 (testfsp2 to testfsp3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "bbc5b85f-fb45-4563-b259-82d280b6cd11",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   ",
															"   pm.environment.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   pm.environment.set('transferAmount', 20.11);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0907f2dd-c310-43fe-9eff-f17591655f26",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp2/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"//       if(response.responseSize !== 0) {",
															"//           console.log(response.json());",
															"//       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"//           pm.expect(response.json().ilpPacket).not.equal(undefined);",
															"//           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"//       });",
															"       ",
															"//       pm.test(\"Response condition is not undefined\", function () {",
															"//           pm.expect(response.json().condition).not.equal(undefined);",
															"//           pm.environment.set(\"condition\", response.json().condition);",
															"//       });",
															"//       } else {",
															"//           pm.test(\"Quote FAILED\", function () {",
															"//             throw new Error('Did not receive response');",
															"//           });",
															"",
															"//       }",
															"       ",
															"//   });",
															"// }, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP2_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp2"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp2\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp3\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 4 (testfsp2 to testfsp3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0a3abef5-9f68-45da-8365-0c15f7b415ce",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))",
															"pm.environment.set(\"transferAmount\", 20.32);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "fb0ae370-26ad-4d7f-9590-44716d7335b5",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp2/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP2_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp2"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp2\",\n  \"payeeFsp\": \"testfsp3\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 5 (testfsp4 to testfsp2)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fa020489-115a-4a63-b1f7-1cb14eff7601",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('quoteId', generatedUUID);",
															"generatedUUID = uuid.v4();",
															"pm.environment.set('transactionId', generatedUUID);",
															"pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 35.124);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c4eeb187-f6ae-4d3d-ba0d-7d1dd88720c6",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"//       if(response.responseSize !== 0) {",
															"//           console.log(response.json());",
															"//       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"//           pm.expect(response.json().ilpPacket).not.equal(undefined);",
															"//           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"//       });",
															"       ",
															"//       pm.test(\"Response condition is not undefined\", function () {",
															"//           pm.expect(response.json().condition).not.equal(undefined);",
															"//           pm.environment.set(\"condition\", response.json().condition);",
															"//       });",
															"//       } else {",
															"//           pm.test(\"Quote FAILED\", function () {",
															"//             throw new Error('Did not receive response');",
															"//           });",
															"",
															"//       }",
															"       ",
															"//   });",
															"// }, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp4\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp2\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 5 (testfsp4 to testfsp2)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f9a0b3fe-930c-416a-9295-132ad1e47576",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 120000));",
															"pm.environment.set('transferAmount', 35.987);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2c51956f-4227-4989-99f5-e16ff5449440",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp4\",\n  \"payeeFsp\": \"testfsp2\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 6 (testfsp4 to testfsp3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1bc329ce-8e06-48b0-81e1-0b694af9566b",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('quoteId', generatedUUID);",
															"generatedUUID = uuid.v4();",
															"pm.environment.set('transactionId', generatedUUID);",
															"pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 25.1234);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c524b565-4738-4e8b-a4a3-0ec894f64428",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"//       if(response.responseSize !== 0) {",
															"//           console.log(response.json());",
															"//       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"//           pm.expect(response.json().ilpPacket).not.equal(undefined);",
															"//           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"//       });",
															"       ",
															"//       pm.test(\"Response condition is not undefined\", function () {",
															"//           pm.expect(response.json().condition).not.equal(undefined);",
															"//           pm.environment.set(\"condition\", response.json().condition);",
															"//       });",
															"//       } else {",
															"//           pm.test(\"Quote FAILED\", function () {",
															"//             throw new Error('Did not receive response');",
															"//           });",
															"           ",
															"//       }",
															"       ",
															"//   });",
															"// }, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp4\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp3\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 6 (testfsp4 to testfsp3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9ab2f5df-93db-4a56-9fa5-210f9fe2539d",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000));",
															"pm.environment.set('transferAmount', 25.7657);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "727b9b15-c2ed-4de7-95b4-f9474f94661b",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"",
															"          }",
															"   });",
															"}, 2000)",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp4\",\n  \"payeeFsp\": \"testfsp3\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create Settlement DEFERREDNET",
									"item": [
										{
											"name": "Get Existing Open Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "09873cd5-7237-467a-8def-1724fe91088f",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"State should be OPEN\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].state).to.eql('OPEN');",
															"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
															"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "payerfsp"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows"
													],
													"query": [
														{
															"key": "state",
															"value": "OPEN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close Existing Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0745b407-0cd8-4c81-ab92-43205b0ed165",
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"New window State should be OPEN\", function () {",
															"    console.log(pm.response.json());",
															"    pm.expect(pm.response.json().state).to.eql('OPEN');",
															"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
															"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
															"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
															"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows",
														"{{openWindowID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Settlement for Closed Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1d1940a3-5aef-467b-bf1c-2fe3438aad2d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.environment.set(\"settlementId\", pm.response.json().id);",
															"var jsonData = pm.response.json();",
															"    ",
															"pm.test(\"Settlement State should be PENDING_SETTLEMENT\", function () {",
															"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
															"});",
															"",
															"pm.test(\"Number of associated windows should be 1\", function () {",
															"    pm.expect(jsonData.settlementWindows.length).to.eql(1);",
															"});",
															"",
															"pm.test(\"Associated Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
															"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
															"});",
															"",
															"pm.test(\"Associated Settlement Window state should be PENDING_SETTLEMENT \", function () {",
															"    pm.expect(jsonData.settlementWindows[0].state).to.eql('PENDING_SETTLEMENT');",
															"});",
															"",
															"pm.test(\"Associated number of participants should be 4 \", function () {",
															"    pm.expect(jsonData.participants.length).to.eql(4);",
															"});",
															"",
															"pm.test(\"DEFERREDNET calculation for testfsp1 should be 80.09\", function () {",
															"    pm.expect(jsonData.participants[0].accounts[0].netSettlementAmount.amount).to.eql(80.09);",
															"});",
															"",
															"",
															"pm.test(\"DEFERREDNET calculation for testfsp2 should be -75.667\", function () {",
															"    pm.expect(jsonData.participants[1].accounts[0].netSettlementAmount.amount).to.eql(-75.667);",
															"});",
															"",
															"pm.test(\"DEFERREDNET calculation for testfsp3 should be -10.1857\", function () {",
															"    pm.expect(jsonData.participants[2].accounts[0].netSettlementAmount.amount).to.eql(-10.1857);",
															"});",
															"",
															"pm.test(\"DEFERREDNET calculation for testfsp4 should be 5.7627\", function () {",
															"    pm.expect(jsonData.participants[3].accounts[0].netSettlementAmount.amount).to.eql(5.7627);",
															"});",
															"",
															"for(var j in jsonData.participants) {",
															"    for(var k in jsonData.participants[j].accounts) {",
															"        console.log(jsonData.participants[j].accounts[k].id)",
															"        if(jsonData.participants[j].accounts[k].id === Number(pm.environment.get(\"payerFspAccountId\"))) {",
															"            console.log('payerfspNetSettlementAmount:',jsonData.participants[j].accounts[k].netSettlementAmount.amount)",
															"            pm.environment.set(\"payerfspNetSettlementAmount\",jsonData.participants[j].accounts[k].netSettlementAmount.amount);",
															"        } else if(jsonData.participants[j].accounts[k].id === Number(pm.environment.get(\"payeeFspAccountId\"))) {",
															"            console.log('payeefspNetSettlementAmount:',jsonData.participants[j].accounts[k].netSettlementAmount.amount)",
															"            pm.environment.set(\"payeefspNetSettlementAmount\",jsonData.participants[j].accounts[k].netSettlementAmount.amount);",
															"        }",
															"        ",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"settlementModel\": \"DEFERREDNET\",\n  \"reason\": \"TESTING\",\n  \"settlementWindows\": [\n    {\n      \"id\": {{closedWindowID}}\n    }\n  ]\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Store Settlement&Position Account Balances After Transfers",
									"item": [
										{
											"name": "testfsp1 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1e242275-5a4b-4505-9515-763b9dee6933",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6b2b7b51-102d-4c3c-864d-c2196038cb61",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp3 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "faff0021-e411-44e1-8695-5965c3c0b789",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp3",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp4 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0c7fd716-c179-4237-854e-d2fa5d3ceb10",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp4",
														"accounts"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Prepare Settlement",
							"item": [
								{
									"name": "Prepare Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1db0b44e-c749-42ae-9e12-0244aad4f294",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers recorded for payer\",",
													"                          \"state\": \"PS_TRANSFERS_RECORDED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0e68307-e0d6-4b8d-9ab2-3943f3cdd126",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PS_TRANSFERS_RECORDED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_RECORDED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_RECORDED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_RECORDED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d88dd46e-d739-42ca-97c3-33c0ea8e7c76",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterPrepare;",
													"var testfsp1PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"",
													"pm.test(\"Testfsp1 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d71a5910-bb8f-44cd-8f37-ad18416e1529",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterPrepare;",
													"var testfsp2PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f235f7ec-187b-4c49-ac1b-a13d4acea95b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterPrepare;",
													"var testfsp3PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp3SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp3 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "acbf7063-d881-4033-996f-b6fe4dfe3912",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterPrepare;",
													"var testfsp4PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Reserve Settlement",
							"item": [
								{
									"name": "Reserve Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd0daf58-0f3a-4175-9645-56a7af08b31e",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers reserved\",",
													"                          \"state\": \"PS_TRANSFERS_RESERVED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "payerfsp"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "339b3903-29a0-49d1-a4af-80e1381448bc",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PS_TRANSFERS_RESERVED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_RESERVED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_RESERVED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_RESERVED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a101317-28d9-42ca-b752-7d5d42bc25f8",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterReserve;",
													"var testfsp1PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp1 position account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bbde3e82-298f-4366-a85f-043fcc0a5ff7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterReserve;",
													"var testfsp2PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance after reserve gets increased by its net settlement  amount.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "288fab35-a519-47b8-86a2-5e4b09d54080",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterReserve;",
													"var testfsp3PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp3SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"",
													"pm.test(\"Testfsp3 position account balance after reserve gets increased by its net settlement  amount.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07092917-3315-4532-9ba0-fdece41caa1b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterReserve;",
													"var testfsp4PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Commit Settlement",
							"item": [
								{
									"name": "Commit Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a759bd6e-18ab-4279-b1e6-67e78e710247",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers committed\",",
													"                          \"state\": \"PS_TRANSFERS_COMMITTED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "payerfsp"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91bf27eb-7f6e-4106-97fc-9cbc948d4a10",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PS_TRANSFERS_COMMITTED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_COMMITTED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_COMMITTED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_COMMITTED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "086ff84d-bd8f-472c-9ad5-18d8222aa292",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterCommit;",
													"var testfsp1PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp1 position account balance after commit should be reduced by its net settlement amount.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3684170-d510-4aee-97bd-0a8ab0aff0e3",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterCommit;",
													"var testfsp2PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance after reserve gets increased by its net settlement  amount.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f24974e4-25cc-4703-bbf9-160762760e1a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterCommit;",
													"var testfsp3PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp3 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "524d8710-cdfb-47b9-852e-782af1ec24f2",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterCommit;",
													"var testfsp4PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Settle Settlement",
							"item": [
								{
									"name": "Settle Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c23f5cb1-4182-4d36-a6b4-5cbe47228f77",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers settled for payer\",",
													"                          \"state\": \"SETTLED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "payerfsp"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b08de6a-07cd-4871-a9a2-ed2b283ddc68",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be SETTLED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"SETTLED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be SETTLED\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"SETTLED\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is SETTLED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"SETTLED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73a28e96-240f-4e17-a4fb-0e657dcd6d24",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterSettle;",
													"var testfsp1PositionAccountBalanceAfterSettle;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterSettle = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterSettle = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after settle should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterSettle).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp1 position account balance before and  after settle should be the same.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterSettle).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba2e12d9-6f5d-4058-a50c-ced361155968",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterCommit;",
													"var testfsp2PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "755c6c8c-942d-4361-a2d7-b98f5c62eedf",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterCommit;",
													"var testfsp3PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp3 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cecc4f88-f97b-4995-bfa9-a08a30d23bd6",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterCommit;",
													"var testfsp4PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Hub account balance check",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/Hub/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"Hub",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d9669dd9-665b-41cf-a962-d697c3a4b53b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "427c91c9-0732-4350-bfe2-c880e3fe9f26",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "transfer_negative_scenarios",
			"item": [
				{
					"name": "payee_abort_v1.1",
					"item": [
						{
							"name": "Store Payerfsp position before prepare",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95743ed9-7bdb-41b8-a6a0-4f6cf8a709fb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"payerfspPositionBeforePrepare\", jsonData[0].value);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9118c8b7-ea3a-4074-8d5d-cc566816b4c4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Store Payeefsp position before prepare",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69120e5d-4c9d-4676-a074-f374a99709ed",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"payeefspPositionBeforePrepare\", jsonData[0].value);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b298b23e-adf2-4bed-8004-ef8b07133f9c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payeefsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/noresponsepayeefsp/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"noresponsepayeefsp",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Prepare",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "148e7132-db61-476e-b6fa-1b96dd742f2f",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transfer_ID', generatedUUID);",
											"pm.environment.set('transferDate', (new Date()).toUTCString());",
											"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));",
											"pm.environment.set('transferAmount', 99);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "667f828b-3afc-4f18-8891-cfdb3caa3999",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "noresponsepayeefsp"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{validCondition}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Store Payerfsp position after Prepare",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67182ccc-f27e-4946-9dda-5247adbd7d3a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"payerfspPositionAfterPrepare\", jsonData[0].value);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "28b9d184-6a8b-42cd-96a7-9e9e8b8a0c73",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Payee Abort - should do nothing but log in fulfil handler",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b57b2e8-69ef-4315-a73e-2d2b8594e359",
										"exec": [
											"// pm.test(\"Status code is 200\", function () {",
											"//     pm.response.to.have.status(200);",
											"// });",
											"",
											"// setTimeout(function () {",
											"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"//           if(response.responseSize !== 0) {",
											"//               var jsonData = response.json();",
											"//               pm.test(\"Response code should be ABORTED\", function () {",
											"//                 pm.expect(jsonData.transferState).to.eql('ABORTED');",
											"//               });",
											"//           } else {",
											"//               pm.test(\"Transfer FAILED\", function () {",
											"//                 throw new Error('Did not receive response');",
											"//               });",
											"              ",
											"//           }",
											"//   });",
											"// }, 5000)",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1938556d-f6da-4d67-be99-8d0b031219ea",
										"exec": [
											"pm.environment.set(\"completedTimestamp\",new Date().toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYEEFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "noresponsepayeefsp"
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"ABORTED\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Fulfill-Reject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "409622f2-a95d-42aa-9815-87c90a31fe0d",
										"exec": [
											"pm.environment.set(\"completedTimestamp\",new Date().toISOString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b2a92b85-d94b-42ee-bd07-6be07391c6d4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              //Check headers",
											"              var headers = response.json().headers;",
											"              ",
											"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
											"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
											"                });",
											"                ",
											"                pm.test(\"fspiop-destination is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-destination']).to.eql(pm.environment.get('payerfsp'));",
											"                });",
											"                ",
											"                //Uncomment after JWS is implemented",
											"                // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
											"                //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
											"                // });",
											"                ",
											"                ",
											"                pm.test(\"payeefsp content-type is same as sent in the request\", function () {",
											"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"                });",
											"                ",
											"                pm.test(\"date header should not be empty\", function () {",
											"                    pm.expect(headers['date']).to.be.not.empty;",
											"                });",
											"                ",
											"                pm.test(\"accept header should not be sent in the response\", function () {",
											"                    pm.expect(headers['accept']).to.eql(undefined);",
											"                });",
											"                ",
											"              //Check data",
											"              var jsonData = response.json().data;",
											"              pm.test(\"Response Error Code is 5101\", function () {",
											"                pm.expect(jsonData.errorInformation.errorCode).to.eql('5101');",
											"              });",
											"              ",
											"              pm.test(\"Response Error Desription is 'Payee transaction limit reached'\", function () {",
											"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Payee transaction limit reached');",
											"                //pm.expect(jsonData.errorInformation.errorDescription).to.eql('Payee transaction limit reached');",
											"              });",
											"              ",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              ",
											"          }",
											"  });",
											"}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYEEFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "noresponsepayeefsp"
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"errorInformation\": {\n\t\t\"errorCode\": \"5101\",\n\t\t\"errorDescription\": \"Payee transaction limit reached\",\n\t\t\"extensionList\": {\n\t\t\t\"extension\": [{\n\t\t\t\t\"key\": \"errorDetail\",\n\t\t\t\t\"value\": \"This is an abort extension\"\n\t\t\t}]\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}/error",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}",
										"error"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Transfer status - ABORTED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "25a90934-8ad8-4e2f-831f-140607dcf71a",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('transferId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.environment.set('transferDate', (new Date()).toUTCString());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "79bcb9a0-ed40-4794-9f2d-3f632f756642",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
											"// });",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              var jsonData = response.json();",
											"              ",
											"              pm.test(\"Response status is ABORTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
											"              });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              ",
											"          }",
											"   });",
											"}, 3000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "noresponsepayeefsp"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payerfsp position after Abort",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7975bc9c-bc67-4574-ac1e-725bdbe4db0c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Payerfsp position after Payee ABORT should be same as position before prepare.\", function () {",
											"    ",
											"    pm.expect(jsonData[0].value).to.equal(Number(pm.environment.get('payerfspPositionBeforePrepare')));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c2eec3ee-334c-4825-a825-dcb8a17b5b52",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payeefsp position after Abort",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e714a3bd-c7c6-4004-9e41-5c61d528f779",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Payeefsp position after Payee ABORT should be same as position before prepare.\", function () {",
											"    ",
											"    pm.expect(jsonData[0].value).to.equal(Number(pm.environment.get('payeefspPositionBeforePrepare')));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41dfa611-432b-4bd3-8abf-924cb0db7650",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "noresponsepayeefsp"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/noresponsepayeefsp/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"noresponsepayeefsp",
										"positions"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "payee_invalid_fulfillment",
					"item": [
						{
							"name": "Send Quote",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ef47a23c-bf48-45fb-a418-5d19d4cce830",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('quoteId', generatedUUID);",
											"generatedUUID = uuid.v4();",
											"pm.environment.set('transactionId', generatedUUID);",
											"pm.environment.set('quoteDate', (new Date()).toUTCString());",
											"pm.environment.set('transferAmount', 100);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "829f231a-317f-4dbd-83dd-d48c33096b04",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"          console.log(response.json());",
											"       pm.test(\"Response ilpPacket is not undefined\", function () {",
											"           pm.expect(response.json().ilpPacket).not.equal(undefined);",
											"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
											"       });",
											"       ",
											"       pm.test(\"Response condition is not undefined\", function () {",
											"           pm.expect(response.json().condition).not.equal(undefined);",
											"           pm.environment.set(\"condition\", response.json().condition);",
											"       });",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"",
											"      }",
											"       ",
											"   });",
											"}, 1000)",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"USD\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Transfer Prepare",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "02c9c5f5-51a4-4f85-8ff2-e870382a0901",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transfer_ID', generatedUUID);",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.environment.set('transferDate', (new Date()).toUTCString());",
											"}",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 1200000))",
											"pm.environment.set(\"transferAmount\", 10);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a4310f91-25fb-4d3a-9cd5-0b8dc321d324",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "noresponsepayeefsp"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{validCondition}}\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								},
								"description": "send a tranfer request with ilp packet and condition that are generated in quotes response along with expiry, fspiop source,fspiop destination, amount and currency."
							},
							"response": []
						},
						{
							"name": "Store Payerfsp position",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8ba2655-a537-474a-b9c0-ae67ff7658bf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"payerfspPositionBeforeTransfer\", jsonData[0].value);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f729b13f-fd59-4712-937e-5215bea3a001",
										"exec": [
											"setTimeout(function () {",
											"  pm.sendRequest('www.google.com', function (err, response) {}",
											"    );",
											"}, 3000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Store Payeefsp position",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ab4340b-f41b-4e6e-85bf-ce38f5d27959",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"payeefspPositionBeforeTransfer\", jsonData[0].value);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "48113062-d27b-4136-b7be-3fb1c2ca28ca",
										"exec": [
											"setTimeout(function () {",
											"  pm.sendRequest('www.google.com', function (err, response) {}",
											"    );",
											"}, 3000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payeefsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Payee Invalid Fulfillment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "59c6fd53-2b67-4ed9-90e1-f9fc04d85a96",
										"exec": [
											"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f2e7c836-c9ee-4042-9fd0-485bd88ba3b7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "noresponsepayeefsp"
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fulfilment\": \"{{invalidFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Transfer status - RESERVED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2fb716b3-602b-44ea-a714-1f0eaec751e8",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('transferId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.environment.set('transferDate', (new Date()).toUTCString());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7750503b-6cab-4cdf-b9d3-8c965d1c7db4",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
											"// });",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              var jsonData = response.json();",
											"              ",
											"              pm.test(\"Response status is RESERVED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('RESERVED');",
											"              });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"",
											"          }",
											"   });",
											"}, 3000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payerfsp&Payeefsp position",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7270ebc-542e-467a-ab76-8c6dc038ef4d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Payerfsp position after transfer and after Payee ABORT should be same as position before transfer.\", function () {",
											"    ",
											"    pm.expect(jsonData[0].value).to.equal(Number(pm.environment.get('payerfspPositionBeforeTransfer')));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "94c3bf2b-ca2d-4356-ae62-cfc3e753459e",
										"exec": [
											"setTimeout(function () {",
											"  pm.sendRequest('www.google.com', function (err, response) {}",
											"    );",
											"}, 10000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "transfer_timeout",
					"item": [
						{
							"name": "Store Payerfsp position before prepare",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd194873-5ab5-4673-9515-fc81323b0bd2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"",
											"var result",
											"jsonData.forEach( entry => {(entry.currency === pm.environment.get(\"currency\")) ? result = entry.value: result =",
											" undefined})",
											"pm.environment.set(\"payerfspPositionBeforePrepare\", result);",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9429d715-1aaa-4d2f-9256-9780e407175f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Prepare",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "33668fe1-10f2-460e-a9e4-292f112687a5",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transfer_ID', generatedUUID);",
											"pm.environment.set('transferDate', (new Date()).toUTCString());",
											"pm.environment.set('transferAmount', 10);",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 2000))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f5b4a0d8-3f81-4095-bdd8-9d40318ea1af",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "noresponsepayeefsp"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"nMel-FDPpp3T77jfC11fUXdcy935hy089AJ9v2OTXBI\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payerfsp position before timeout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d78ce303-6dca-4f31-acbb-b734ea5fdd6d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var result;",
											"",
											"jsonData.forEach( entry => {(entry.currency === pm.environment.get(\"currency\")) ? result = entry.value: result =",
											" undefined})",
											"",
											"pm.test(\"Payerfsp position after Prepare should be same as position before prepare+transfer amount\", function () {",
											"    ",
											"    var expectedValue = Number(pm.environment.get('payerfspPositionBeforePrepare'))+10",
											"    ",
											"    pm.expect(result).to.equal(expectedValue);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "40c4db3c-f69a-4def-965b-11bf9a6905fb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payerfsp position after timeout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62db49a4-7e97-4184-bef2-84802d7dc600",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var result;",
											"",
											"jsonData.forEach( entry => {(entry.currency === pm.environment.get(\"currency\")) ? result = entry.value: result =",
											" undefined})",
											"",
											"pm.test(\"Payerfsp position after timeout should be same as position before prepare.\", function () {",
											"    ",
											"    pm.expect(result).to.equal(Number(pm.environment.get('payerfspPositionBeforePrepare')));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a392aa94-b2f7-4565-b09b-851f78727298",
										"exec": [
											"setTimeout(function () {",
											"  pm.sendRequest('www.google.com', function (err, response) {}",
											"    );",
											"}, 15000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Transfer status - ABORTED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2bf42dbc-d9a0-4345-9fd7-7f23e617c83a",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('transferId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.environment.set('transferDate', (new Date()).toUTCString());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8ab0bfbb-c9cb-4fc7-96ec-8cc4a9730d0e",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
											"// });",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              var jsonData = response.json();",
											"              ",
											"              pm.test(\"Response status is ABORTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
											"              });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              ",
											"          }",
											"   });",
											"}, 3000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payerfsp Notification",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3e822668-0411-4da6-83a7-90ff9344286d",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('transferId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.environment.set('transferDate', (new Date()).toUTCString());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8edef09c-cb28-4bf7-beca-a8e5bb2a6339",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
											"// });",
											"",
											"pm.test(\"Response status is ABORTED\", function () {",
											"    pm.expect(pm.response.json().transferState).to.eql('ABORTED');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{HOST_SIMULATOR}}/{{payerfsp}}/correlationid/{{transfer_ID}}",
									"host": [
										"{{HOST_SIMULATOR}}"
									],
									"path": [
										"{{payerfsp}}",
										"correlationid",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Response body:\n: Received error in Transfers: {\"errorInformation\":{\"errorCode\":3100,\"errorDescription\":\"Generic validation error: Expiration date 2018-10-01T20:31:00.534Z is already in the past\"}}\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1af4f983-2db6-4cea-8e65-56481fb5cb62",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c57c9389-ad0e-40e6-8bd2-2cf57bca3975",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d6f267cb-2eeb-4e11-8745-9791cb4e6a23",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "22443fe6-a4df-486b-8729-ff1c14cb8e3d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "duplicate_handling",
			"item": [
				{
					"name": "transfers",
					"item": [
						{
							"name": "original_transfer_at_committed",
							"item": [
								{
									"name": "Send Transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fdc8e4e9-83a6-4965-b8bd-fee4fc612bee",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// pm.test(\"Check that Content-Type is present\", function () {",
													"//     pm.response.to.have.header(\"Content-Type\");",
													"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
													"// });",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              var jsonData = response.json();",
													"              pm.test(\"Response data does not have transferId\", function () {",
													"               pm.expect(jsonData.transferId).to.eql(undefined);",
													"             });",
													"              pm.test(\"Response status is COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"              });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"              ",
													"          }",
													"   });",
													"}, 2000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d89f0a3e-94f4-4af3-b2db-ea3073fc2d64",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"",
													"pm.environment.set('transfer_ID', generatedUUID);",
													"pm.environment.set('transferDate', (new Date()).toUTCString());",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
													"pm.environment.set('transferAmount', 1);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Duplicate Transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f6e775e-4b5a-4b38-85a1-b0d0e9ef0a36",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              var jsonData = response.json().data;",
													"              var headers = response.json().headers",
													"              const transferId = pm.variables.get(\"transfer_ID\");",
													"              ",
													"              pm.test(\"Response data does not have transferId\", function () {",
													"               pm.expect(jsonData.transferId).to.eql(undefined);",
													"             });",
													"              pm.test(\"Response status is COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"              });",
													"              pm.test(\"fspiop-source is switch\", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('switch');",
													"              });",
													"              pm.test(\"fspiop-destination is payerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"              });",
													"              ",
													"              pm.test(\"fspiop-uri contains /transfers/\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${transferId}`);",
													"            });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"              ",
													"          }",
													"   });",
													"}, 2000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9c2e92b3-ee03-44ee-acb2-1a769cd1d4a4",
												"exec": [
													"pm.environment.set('transferAmount', 1)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "fulfill_commit",
							"item": [
								{
									"name": "positive",
									"item": [
										{
											"name": "Send Quote",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c88f9b64-7592-43ab-a986-b33f16a5f3c8",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 100);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6a3eccaf-34b9-4b84-936c-a902d51648c8",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log('response: ',response.json());",
															"       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"           console.log('ilpPacket: ',response.json().ilpPacket)",
															"           pm.expect(response.json().ilpPacket).not.eql(undefined);",
															"          pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not undefined\", function () {",
															"           pm.expect(response.json().condition).not.eql(undefined);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-SOurce",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer-Prepare",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "66559fbd-49bd-48e6-85c3-e21528265e38",
														"exec": [
															"",
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 100);",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3a9f8959-17be-49e9-8a48-35b02e78bd20",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Signature",
														"value": "{{fspiop-signature}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{validCondition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Fulfill",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "cfdaa025-7810-4c2e-93a4-68c54477043c",
														"exec": [
															"pm.environment.set(\"completedTimestamp\",new Date().toISOString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "980c86ea-5ea3-4e7a-b7ab-8e287326e2d2",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              //Check headers",
															"              var headers = response.json().headers;",
															"              ",
															"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
															"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
															"                });",
															"                ",
															"                pm.test(\"fspiop-destination is payerfsp\", function () {",
															"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"                });",
															"                ",
															"                //Uncomment after JWS is implemented",
															"                // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"                //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
															"                // });",
															"                ",
															"                ",
															"                pm.test(\"payeefsp content-type is same as sent in the request\", function () {",
															"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"                });",
															"                ",
															"                pm.test(\"date header should not be empty\", function () {",
															"                    pm.expect(headers['date']).to.be.not.empty;",
															"                });",
															"                ",
															"                pm.test(\"accept header should not be sent in the response\", function () {",
															"                    pm.expect(headers['accept']).to.eql(undefined);",
															"                });",
															"                ",
															"              //Check data",
															"              var jsonData = response.json().data;",
															"              pm.test(\"Response transferState should be COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"              ",
															"              pm.test(\"Response fulfilment should be same as in request\", function () {",
															"                pm.expect(jsonData.fulfilment).to.eql(pm.environment.get(\"validFulfillment\"));",
															"              });",
															"              ",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"",
															"          }",
															"   });",
															"}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Duplicate Fulfill",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "187fbb3d-88d2-4ff5-912b-62563b3b5e28",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c1b47057-8481-4209-af39-c641f40ecdf4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/noresponsepayeefsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"//           if(response.responseSize !== 0) {",
															"              ",
															"//               //Check headers",
															"//               var headers = response.json().headers;",
															"              ",
															"//                 pm.test(\"fspiop-source is switch\", function () {",
															"//                     pm.expect(headers['fspiop-source']).to.eql('switch');",
															"//                 });",
															"                ",
															"//                 pm.test(\"fspiop-destination is noresponsepayeefsp\", function () {",
															"//                     pm.expect(headers['fspiop-destination']).to.eql('noresponsepayeefsp');",
															"//                 });",
															"                ",
															"//                 //Uncomment after JWS is implemented",
															"//                 // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"//                 //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
															"//                 // });",
															"                ",
															"                ",
															"//                 pm.test(\" content-type is same as sent in the request\", function () {",
															"//                     pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"//                 });",
															"                ",
															"//                 pm.test(\"date header should not be empty\", function () {",
															"//                     pm.expect(headers['date']).to.be.not.empty;",
															"//                 });",
															"                ",
															"//                 pm.test(\"accept header should not be sent in the response\", function () {",
															"//                     pm.expect(headers['accept']).to.eql(undefined);",
															"//                 });",
															"                ",
															"//              //Check data    ",
															"//               var jsonData = response.json().data;",
															"//               pm.test(\"Response transferState should be COMMITTED\", function () {",
															"//                 pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"//               });",
															"              ",
															"//               pm.test(\"Response fulfilment should be same as in request\", function () {",
															"//                 pm.expect(jsonData.fulfilment).to.eql(pm.environment.get(\"validFulfillment\"));",
															"//               });",
															"//           } else {",
															"//               pm.test(\"Transfer FAILED\", function () {",
															"//                 throw new Error('Did not receive response');",
															"//               });",
															"              ",
															"//           }",
															"//   });",
															"// }, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "negative",
									"item": [
										{
											"name": "Send Quote",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "24eb3f93-f232-4a85-a9a1-56b42a010b09",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"   ",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 100);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "098745fe-a4f7-4f09-a9b5-55782d6c6863",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log('response: ',response.json());",
															"       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"           console.log('ilpPacket: ',response.json().ilpPacket)",
															"           pm.expect(response.json().ilpPacket).not.eql(undefined);",
															"          pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"           ",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not undefined\", function () {",
															"           pm.expect(response.json().condition).not.eql(undefined);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-SOurce",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer-Prepare",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b46a2985-09cb-485d-9d8f-2042428d3f0e",
														"exec": [
															"",
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 100);",
															"pm.environment.set(\"transferExpiration\", new Date(new Date().getTime() + 60000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2efe7b6e-8255-4d63-a59b-ca2323bb5d9c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Signature",
														"value": "{{fspiop-signature}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{validCondition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Fulfill",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a1252ee5-5f29-48e9-b5a7-92616647f6f2",
														"exec": [
															"pm.environment.set(\"completedTimestamp\",new Date().toISOString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4df52c42-e430-448e-bd15-45ab8733fb43",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              //Check headers",
															"              var headers = response.json().headers;",
															"              ",
															"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
															"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
															"                });",
															"                ",
															"                pm.test(\"fspiop-destination is payerfsp\", function () {",
															"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"                });",
															"                ",
															"                //Uncomment after JWS is implemented",
															"                // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"                //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
															"                // });",
															"                ",
															"                pm.test(\"date header should not be empty\", function () {",
															"                    pm.expect(headers['date']).to.be.not.empty;",
															"                });",
															"                ",
															"                pm.test(\"accept header should not be sent in the response\", function () {",
															"                    pm.expect(headers['accept']).to.eql(undefined);",
															"                });",
															"                ",
															"                pm.test(\"payeefsp content-type is same as sent in the request\", function () {",
															"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"                });",
															"                ",
															"              //Check data",
															"              var jsonData = response.json().data;",
															"              pm.test(\"Response transferState should be COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"              ",
															"              pm.test(\"Response fulfilment should be same as in request\", function () {",
															"                pm.expect(jsonData.fulfilment).to.eql(pm.environment.get(\"validFulfillment\"));",
															"              });",
															"              ",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              ",
															"          }",
															"   });",
															"}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Invalid Duplicate Fulfill",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a9cd6c0a-5fe8-4c41-872f-c1476b15e5d5",
														"exec": [
															"pm.variables.set(\"updatedTimestamp\",new Date().toISOString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "8bbfa714-e8e3-4edf-9e29-2fc0a187a486",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/noresponsepayeefsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"//           if(response.responseSize !== 0) {",
															"              ",
															"//               //Check headers",
															"//               var headers = response.json().headers;",
															"              ",
															"//                 pm.test(\"fspiop-source is switch\", function () {",
															"//                     pm.expect(headers['fspiop-source']).to.eql('switch');",
															"//                 });",
															"                ",
															"//                 pm.test(\"fspiop-destination is noresponsepayeefsp\", function () {",
															"//                     pm.expect(headers['fspiop-destination']).to.eql('noresponsepayeefsp');",
															"//                 });",
															"                ",
															"//                 //Uncomment after JWS is implemented",
															"//                 // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"//                 //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
															"//                 // });",
															"//                 pm.test(\"date header should not be empty\", function () {",
															"//                     pm.expect(headers['date']).to.be.not.empty;",
															"//                 });",
															"                ",
															"//                 pm.test(\"accept header should not be sent in the response\", function () {",
															"//                     pm.expect(headers['accept']).to.eql(undefined);",
															"//                 });",
															"                ",
															"//                 pm.test(\"content-type is same as sent in the request\", function () {",
															"//                     pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"//                 });",
															"                ",
															"                ",
															"//              //Check data    ",
															"//               var jsonData = response.json().data;",
															"              ",
															"//               pm.test(\"Response Error Code is 3106\", function () {",
															"//                 pm.expect(jsonData.errorInformation.errorCode).to.eql('3106');",
															"//               });",
															"              ",
															"//               pm.test(\"Response Error Desription is 'Modified request'\", function () {",
															"//                 pm.expect(jsonData.errorInformation.errorDescription).to.eql('Modified request');",
															"//               });",
															"//           } else {",
															"//               pm.test(\"Transfer FAILED\", function () {",
															"//                 throw new Error('Did not receive response');",
															"//               });",
															"              ",
															"//           }",
															"//   });",
															"// }, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{updatedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"description": "Send a transfer-prepare from payerfsp to payeefsp\nDo not send transfer-fulfil from payeefsp.\n\nSend a duplicate transfer-prepare with same params.\ncheck the simulator logs to make sure that there should not be any response for the duplicate transfer when the actual transfer is not at terminal state which means neither committed nor aborted but in process.\n\nThis is same as sending duplicate transfer when actual transfer is at ABORTED state.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "db260acd-c72f-4b1a-86eb-24dc088d017e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f3631bd7-bfd7-4064-b78b-2098141bfd1f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "fulfill_reject",
							"item": [
								{
									"name": "positive",
									"item": [
										{
											"name": "Send Quote",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "bfbc9baf-a2fc-4acb-b905-fe5bc64c94ea",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 100);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f1160985-bf4d-4f81-80bb-a24b860bc5d5",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log('response: ',response.json());",
															"       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"           console.log('ilpPacket: ',response.json().ilpPacket)",
															"           pm.expect(response.json().ilpPacket).not.eql(undefined);",
															"          pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"           ",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not undefined\", function () {",
															"           pm.expect(response.json().condition).not.eql(undefined);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-SOurce",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer-Prepare",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "56337396-b606-4b5a-a399-ba2402897b31",
														"exec": [
															"",
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 100);",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5a51f379-5e4c-4e00-bd7a-0be00bc9c927",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Signature",
														"value": "{{fspiop-signature}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{validCondition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Fulfill-Reject",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ba0d7433-331f-42dc-b929-9c62153eb45c",
														"exec": [
															"pm.environment.set(\"completedTimestamp\",new Date().toISOString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c5023857-a3b4-4ebe-bdd0-a86b1e29e80d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              //Check headers",
															"              var headers = response.json().headers;",
															"              ",
															"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
															"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
															"                });",
															"                ",
															"                pm.test(\"fspiop-destination is payerfsp\", function () {",
															"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"                });",
															"                ",
															"                //Uncomment after JWS is implemented",
															"                // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"                //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
															"                // });",
															"                ",
															"                pm.test(\"date header should not be empty\", function () {",
															"                    pm.expect(headers['date']).to.be.not.empty;",
															"                });",
															"                ",
															"                pm.test(\"accept header should not be sent in the response\", function () {",
															"                    pm.expect(headers['accept']).to.eql(undefined);",
															"                });",
															"                ",
															"                pm.test(\"payeefsp content-type is same as sent in the request\", function () {",
															"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"                });",
															"                ",
															"              //Check data",
															"              var jsonData = response.json().data;",
															"              pm.test(\"Response Error Code is 5101\", function () {",
															"                pm.expect(jsonData.errorInformation.errorCode).to.eql('5101');",
															"              });",
															"              ",
															"              pm.test(\"Response Error Desription is 'Payee transaction limit reached'\", function () {",
															"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Payee transaction limit reached');",
															"                //pm.expect(jsonData.errorInformation.errorDescription).to.eql('Payee transaction limit reached');",
															"              });",
															"              ",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"",
															"          }",
															"   });",
															"}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"errorInformation\": {\n\t\t\"errorCode\": \"5101\",\n\t\t\"errorDescription\": \"Payee transaction limit reached\",\n\t\t\"extensionList\": {\n\t\t\t\"extension\": [{\n\t\t\t\t\"key\": \"errorDetail\",\n\t\t\t\t\"value\": \"This is an abort extension\"\n\t\t\t}]\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}/error",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}",
														"error"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Duplicate Fulfill-Reject",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "95174bba-afa0-49b1-8eb4-b90f8c412f7c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "343b0e01-1367-40fa-8769-fc6e9ce64394",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Not getting any response from simulator, at least no response body I mean. Can enable the below once that is addressed.",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/noresponsepayeefsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"//           if(response.responseSize !== 0) {",
															"//               //Check headers",
															"//               var headers = response.json().headers;",
															"              ",
															"//                 pm.test(\"fspiop-source is switch\", function () {",
															"//                     pm.expect(headers['fspiop-source']).to.eql('switch');",
															"//                 });",
															"                ",
															"//                 pm.test(\"fspiop-destination is noresponsepayeefsp\", function () {",
															"//                     pm.expect(headers['fspiop-destination']).to.eql('noresponsepayeefsp');",
															"//                 });",
															"                ",
															"//                 //Uncomment after JWS is implemented",
															"//                 // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"//                 //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
															"//                 // });",
															"                ",
															"//                 pm.test(\"date header should not be empty\", function () {",
															"//                     pm.expect(headers['date']).to.be.not.empty;",
															"//                 });",
															"                ",
															"//                 pm.test(\"accept header should not be sent in the response\", function () {",
															"//                     pm.expect(headers['accept']).to.eql(undefined);",
															"//                 });",
															"                ",
															"//                 pm.test(\"content-type is same as sent in the request\", function () {",
															"//                     pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"//                 });",
															"                ",
															"//               //Check data",
															"//               var jsonData = response.json().data;",
															"//               pm.test(\"Response transferState should be ABORTED\", function () {",
															"//                 pm.expect(jsonData.transferState).to.eql('ABORTED');",
															"//               });",
															"              ",
															"//               pm.test(\"Response fulfilment should be empty\", function () {",
															"//                 pm.expect(jsonData.fulfilment).to.eql(undefined);",
															"//               });",
															"//           } else {",
															"//               pm.test(\"Transfer FAILED\", function () {",
															"//                 throw new Error('Did not receive response');",
															"//               });",
															"",
															"//           }",
															"//   });",
															"// }, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"errorInformation\": {\n\t\t\"errorCode\": \"5101\",\n\t\t\"errorDescription\": \"Payee transaction limit reached\",\n\t\t\"extensionList\": {\n\t\t\t\"extension\": [{\n\t\t\t\t\"key\": \"errorDetail\",\n\t\t\t\t\"value\": \"This is an abort extension\"\n\t\t\t}]\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}/error",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}",
														"error"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "negative",
									"item": [
										{
											"name": "Send Quote",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ace64621-0dc8-4d1b-b7f3-12f9aec0ad47",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   ",
															"   pm.environment.set('quoteId', generatedUUID);",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   pm.environment.set('transferAmount', 100);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f01dfeeb-1c21-4ac8-935e-3472df83f82b",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log('response: ',response.json());",
															"       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"           console.log('ilpPacket: ',response.json().ilpPacket)",
															"           pm.expect(response.json().ilpPacket).not.eql(undefined);",
															"          pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"           ",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not undefined\", function () {",
															"           pm.expect(response.json().condition).not.eql(undefined);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-SOurce",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer-Prepare",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e5728a58-860f-4784-8107-83d8dc0b8f32",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 100);",
															"pm.environment.set(\"transferExpiration\", new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "36cd7d74-f6d0-4676-9d2a-92ccc56524ba",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Signature",
														"value": "{{fspiop-signature}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{validCondition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Fulfill-Reject",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b9276c01-e843-4af1-81a3-997e828d274d",
														"exec": [
															"pm.environment.set(\"completedTimestamp\",new Date().toISOString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0a1370f7-2192-4f95-b14a-d7a70cb97f6a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              //Check headers",
															"              var headers = response.json().headers;",
															"              ",
															"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
															"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
															"                });",
															"                ",
															"                pm.test(\"fspiop-destination is payerfsp\", function () {",
															"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"                });",
															"                ",
															"                //Uncomment after JWS is implemented",
															"                // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"                //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
															"                // });",
															"                ",
															"                ",
															"                pm.test(\"payeefsp content-type is same as sent in the request\", function () {",
															"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"                });",
															"                ",
															"                pm.test(\"date header should not be empty\", function () {",
															"                    pm.expect(headers['date']).to.be.not.empty;",
															"                });",
															"                ",
															"                pm.test(\"accept header should not be sent in the response\", function () {",
															"                    pm.expect(headers['accept']).to.eql(undefined);",
															"                });",
															"                ",
															"              //Check data",
															"              var jsonData = response.json().data;",
															"              pm.test(\"Response Error Code is 5101\", function () {",
															"                pm.expect(jsonData.errorInformation.errorCode).to.eql('5101');",
															"              });",
															"              ",
															"              pm.test(\"Response Error Desription is 'Payee transaction limit reached'\", function () {",
															"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Payee transaction limit reached');",
															"                //pm.expect(jsonData.errorInformation.errorDescription).to.eql('Payee transaction limit reached');",
															"              });",
															"              ",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              ",
															"          }",
															"   });",
															"}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"errorInformation\": {\n\t\t\"errorCode\": \"5101\",\n\t\t\"errorDescription\": \"Payee transaction limit reached\",\n\t\t\"extensionList\": {\n\t\t\t\"extension\": [{\n\t\t\t\t\"key\": \"errorDetail\",\n\t\t\t\t\"value\": \"This is an abort extension\"\n\t\t\t}]\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}/error",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}",
														"error"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Invalid Duplicate Fulfill-Reject",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "740e7d03-7ee6-4fff-b397-602893b815e7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6f125823-a441-473f-95de-de32884c821e",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/noresponsepayeefsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"//           if(response.responseSize !== 0) {",
															"//               //Check headers",
															"//               var headers = response.json().headers;",
															"              ",
															"//                 pm.test(\"fspiop-source is switch\", function () {",
															"//                     pm.expect(headers['fspiop-source']).to.eql('switch');",
															"//                 });",
															"                ",
															"//                 pm.test(\"fspiop-destination is noresponsepayeefsp\", function () {",
															"//                     pm.expect(headers['fspiop-destination']).to.eql('noresponsepayeefsp');",
															"//                 });",
															"                ",
															"//                 //Uncomment after JWS is implemented",
															"//                 // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"//                 //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
															"//                 // });",
															"//                 pm.test(\"date header should not be empty\", function () {",
															"//                     pm.expect(headers['date']).to.be.not.empty;",
															"//                 });",
															"                ",
															"//                 pm.test(\"accept header should not be sent in the response\", function () {",
															"//                     pm.expect(headers['accept']).to.eql(undefined);",
															"//                 });",
															"                ",
															"//                 pm.test(\"content-type is same as sent in the request\", function () {",
															"//                     pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"//                 });",
															"                ",
															"//               //Check data",
															"//               var jsonData = response.json().data;",
															"//               pm.test(\"Response Error Code is '3106'\", function () {",
															"//                 pm.expect(jsonData.errorInformation.errorCode).to.eql('3106');",
															"//               });",
															"              ",
															"//               pm.test(\"Response Error Desription is 'Modified request'\", function () {",
															"//                 pm.expect(jsonData.errorInformation.errorDescription).to.eql('Modified request');",
															"//               });",
															"              ",
															"//           } else {",
															"//               pm.test(\"Transfer FAILED\", function () {",
															"//                 throw new Error('Did not receive response');",
															"//               });",
															"",
															"//           }",
															"//   });",
															"// }, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"errorInformation\": {\n\t\t\"errorCode\": \"5101\",\n\t\t\"errorDescription\": \"This is an invalid duplicate request\",\n\t\t\"extensionList\": {\n\t\t\t\"extension\": [{\n\t\t\t\t\"key\": \"errorDetail\",\n\t\t\t\t\"value\": \"This is an abort extension\"\n\t\t\t}]\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}/error",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}",
														"error"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"description": "Send a transfer-prepare from payerfsp to payeefsp\nDo not send transfer-fulfil from payeefsp.\n\nSend a duplicate transfer-prepare with same params.\ncheck the simulator logs to make sure that there should not be any response for the duplicate transfer when the actual transfer is not at terminal state which means neither committed nor aborted but in process.\n\nThis is same as sending duplicate transfer when actual transfer is at ABORTED state.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "888c1391-4869-43ab-b6d2-70f891841651",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bc3d02aa-037a-4ff2-aaaa-8e4424ef3874",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f9051231-99e0-42bf-90e9-360971073324",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8b89c7af-18df-4cf3-a4dc-be733a2351d8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "participant_inactive_stop_transfers",
			"item": [
				{
					"name": "Update Participant to inactive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "740abfd4-f342-4835-832c-dc563b0b2580",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"FSP is inactive\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.isActive).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"isActive\": false\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET participant status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bb7fefbd-304b-43c9-84fb-dd0aab424486",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"FSP is inactive\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.isActive).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}"
							]
						},
						"description": "Check whether participant is Inactive or not"
					},
					"response": []
				},
				{
					"name": "Send Quote",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c847459f-499e-4907-9ebd-20457be59b1a",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 100);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "149a738b-8398-421d-8ce5-b35ec672fbbd",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"// pm.test(\"Check that Content-Type is present\", function () {",
									"//     pm.response.to.have.header(\"Content-Type\");",
									"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
									"// });",
									"",
									"",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"      if(response.responseSize !== 0) {",
									"          console.log('response: ',response.json());",
									"       ",
									"       var jsonData = response.json();",
									"        pm.test(\"Error Code should be returned '3202'\", function () {",
									"            pm.expect(jsonData.errorInformation.errorCode).to.eql('3202');",
									"        });",
									"        pm.test(\"Error Description should be returned\", function () {",
									"            pm.expect(jsonData.errorInformation.errorDescription).to.include('Payer FSP ID not found');",
									"        });",
									"        ",
									"      } else {",
									"          pm.test(\"Quote FAILURE not as expected\", function () {",
									"            throw new Error('Did not receive response');",
									"           });",
									"      }",
									"   });",
									"}, 1500)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-SOurce",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"USD\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Transfer fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e0f85fab-0779-4089-a0fb-7bc671334a27",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"//Check the callback response that Switch forwards to payerfsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"            //Checking headers",
									"            var headers = response.json().headers;",
									"            pm.test(\"payerfsp fspiop-source is switch\", function () {",
									"                pm.expect(headers['fspiop-source']).to.eql('switch');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
									"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
									"            });",
									"            ",
									"            //Uncomment this once Simulators are able to forward Signature",
									"            // pm.test(\"fspiop-signature is empty\", function () {",
									"            //     pm.expect(pm.response.json().headers['fspiop-signature']).to.eql(undefined);",
									"            // });",
									"            ",
									"            pm.test(\"payerfsp accept is empty\", function () {",
									"                pm.expect(headers['accept']).to.eql(undefined);",
									"            });",
									"            ",
									"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
									"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
									"            });",
									"            ",
									"            //pm.test(\"payerfsp fspiop-uri is /transfers/\"+pm.environment.get(\"transfer_ID\"), function () {",
									"            //    pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+pm.environment.get(\"transfer_ID\"));",
									"            //});",
									"            ",
									"            // pm.test(\"payerfsp fspiop-http-method is empty\", function () {",
									"            //     pm.expect(headers['fspiop-http-method']).to.eql(undefined);",
									"            // });",
									"            ",
									"            var jsonData = response.json().data;",
									"            pm.test(\"Error Code should be 3100\", function () {",
									"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3100');",
									"              });",
									"              pm.test(\"Error Description should contain: Validation error\", function () {",
									"                pm.expect(jsonData.errorInformation.errorDescription).to.include('validation error');",
									"              });",
									"              ",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"",
									"          }",
									"   });",
									"}, 1100)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "bb978980-a9e3-4c25-b409-1e326e647104",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							},
							{
								"key": "FSPIOP-URI",
								"type": "text",
								"value": "/transfers"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"type": "text",
								"value": "POST"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"1\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Participant to active",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5836131d-89c6-44ae-954a-babf6c5e7846",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"FSP is active\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.isActive).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"isActive\": true\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET participant status - Reset",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "13b4cce0-801f-48bf-873a-676757764209",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"FSP is active\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.isActive).to.eql(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}"
							]
						},
						"description": "Check whether participant is Inactive or not"
					},
					"response": []
				},
				{
					"name": "Send Quote",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8527a179-7ae8-45fd-a988-d909d49f46a7",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 100);",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2081391c-01c1-4f74-8f79-19999231ae00",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"// pm.test(\"Check that Content-Type is present\", function () {",
									"//     pm.response.to.have.header(\"Content-Type\");",
									"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
									"// });",
									"",
									"",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"      if(response.responseSize !== 0) {",
									"          console.log('response: ',response.json());",
									"       pm.test(\"Response ilpPacket is not undefined\", function () {",
									"           console.log('ilpPacket: ',response.json().ilpPacket)",
									"           pm.expect(response.json().ilpPacket).not.eql(undefined);",
									"          pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
									"           ",
									"       });",
									"       ",
									"       pm.test(\"Response condition is not undefined\", function () {",
									"           pm.expect(response.json().condition).not.eql(undefined);",
									"           pm.environment.set(\"condition\", response.json().condition);",
									"       });",
									"      } else {",
									"          pm.test(\"Quote FAILED\", function () {",
									"            throw new Error('Did not receive response');",
									"           });",
									"",
									"      }",
									"       ",
									"   });",
									"}, 2000)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-SOurce",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"USD\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Transfer pass",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87776d20-70e1-4ca2-be2c-52ba617d8eb3",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"//Check the request that Switch forwards to payeefsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"              ",
									"              //Check the Headers",
									"              var headers = response.json().headers;",
									"              ",
									"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
									"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
									"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
									"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
									"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
									"                    pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
									"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
									"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
									"                });",
									"                ",
									"                ",
									"                //Check the data",
									"                var jsonData = response.json().data;",
									"                pm.test(\"payeefsp data should have the same transferId as request\", function () {",
									"                   pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same payerfspId as request\", function () {",
									"                   pm.expect(jsonData.payerFsp).to.eql(pm.environment.get(\"payerfsp\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same payeefspId as request\", function () {",
									"                   pm.expect(jsonData.payeeFsp).to.eql(pm.environment.get(\"payeefsp\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same amount as request\", function () {",
									"                   pm.expect(+jsonData.amount.amount).to.eql(pm.environment.get(\"transferAmount\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same currency as request\", function () {",
									"                   pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same expiration as request\", function () {",
									"                   pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
									"                   pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same condition as request\", function () {",
									"                   pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
									"                });",
									"                ",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"              ",
									"          }",
									"   });",
									"}, 1100)",
									"",
									"//Check the callback response that Switch forwards to payerfsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"            //Checking headers",
									"            var headers = response.json().headers;",
									"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
									"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
									"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
									"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp accept is empty\", function () {",
									"                pm.expect(headers['accept']).to.eql(undefined);",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-uri includes transfers\", function () {",
									"                pm.expect(headers['fspiop-uri']).to.include('/transfers');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
									"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
									"            });",
									"            ",
									"            var jsonData = response.json().data;",
									"            pm.test(\"Response data does not have transferId\", function () {",
									"               pm.expect(jsonData.transferId).to.eql(undefined);",
									"            });",
									"            pm.test(\"Response status is COMMITTED\", function () {",
									"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
									"            });",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"              ",
									"          }",
									"   });",
									"}, 1300)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e8135f60-b87b-4f64-9cb3-cd8825d692fd",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 60000));",
									"pm.environment.set('transferAmount', 1);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							},
							{
								"key": "FSPIOP-URI",
								"value": "/transfers",
								"type": "text"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "POST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "api_tests",
			"item": [
				{
					"name": "Get participants List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d307f088-835f-4125-8f1b-e82169ac0dc1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Get Participant",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4cef2e37-1b7d-42d5-9bcb-dc4856399de0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}"
							]
						}
					},
					"response": [
						{
							"name": "Get Participant",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{participant}}",
									"protocol": "http",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{participant}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Length",
									"value": "251",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Wed, 22 Aug 2018 15:25:18 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx/1.13.8",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "accept-ranges",
									"value": "bytes",
									"name": "accept-ranges",
									"description": "Content-Types that are acceptable"
								},
								{
									"key": "cache-control",
									"value": "no-cache",
									"name": "cache-control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								}
							],
							"cookie": [],
							"body": "{\"name\":\"testfsp\",\"id\":\"{{HOST_CENTRAL_LEDGER}}/participants/testfsp\",\"created\":\"2018-08-22T08:16:50.000Z\",\"isActive\":1,\"links\":{\"self\":\"{{HOST_CENTRAL_LEDGER}}/participants/testfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]}"
						}
					]
				},
				{
					"name": "3. Get Hub Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ac15fb21-57c6-45cc-b059-48e055d8a52f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/Hub/accounts",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"Hub",
								"accounts"
							]
						}
					},
					"response": [
						{
							"name": "Get Participant",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{participant}}",
									"protocol": "http",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{participant}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Length",
									"value": "251",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Wed, 22 Aug 2018 15:25:18 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx/1.13.8",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "accept-ranges",
									"value": "bytes",
									"name": "accept-ranges",
									"description": "Content-Types that are acceptable"
								},
								{
									"key": "cache-control",
									"value": "no-cache",
									"name": "cache-control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								}
							],
							"cookie": [],
							"body": "{\"name\":\"testfsp\",\"id\":\"{{HOST_CENTRAL_LEDGER}}/participants/testfsp\",\"created\":\"2018-08-22T08:16:50.000Z\",\"isActive\":1,\"links\":{\"self\":\"{{HOST_CENTRAL_LEDGER}}/participants/testfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]}"
						}
					]
				},
				{
					"name": "11. Get Endpoints",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c2787bd-e0b2-43d9-a898-461dae83de44",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payerfsp/endpoints",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"payerfsp",
								"endpoints"
							]
						},
						"description": "Generated from a curl request: \ncurl -i -X POST     {{HOST_CENTRAL_LEDGER}}/participants/testfsp2/initialPositionAndLimits     -H 'Cache-Control: no-cache'     -H 'Content-Type: application/json'     -d '{\n    \\\"currency\\\": \\\"USD\\\",\n    \\\"limit\\\": {\n      \\\"type\\\": \\\"NET_DEBIT_CAP\\\",\n      \\\"value\\\": 1000\n    },\n    \\\"initialPosition\\\": 0\n  }'"
					},
					"response": [
						{
							"name": "2. Create Initial Position and Limits",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currency\": \"USD\",\n    \"limit\": {\n      \"type\": \"NET_DEBIT_CAP\",\n      \"value\": 1000\n    },\n    \"initialPosition\": 0\n  }"
								},
								"url": {
									"raw": "http://{{HOST_CENTRAL_LEDGER}}/participants/testfsp/initialPositionAndLimits",
									"protocol": "http",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"testfsp",
										"initialPositionAndLimits"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get - limits - All FSPs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "371c83d2-a75c-4804-b0a6-f61e64428e48",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/limits?currency=USD&type=NET_DEBIT_CAP",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"limits"
							],
							"query": [
								{
									"key": "currency",
									"value": "USD"
								},
								{
									"key": "type",
									"value": "NET_DEBIT_CAP"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get payerfsp position",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a400fd0-d302-4f1b-b933-e00718f5172c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Atleast one account position should be returned\", function () {",
									"    pm.variables.set(\"payerfspPositionBeforeTransfer\", jsonData[0].value);",
									"    pm.expect(jsonData).to.be.not.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/positions",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}",
								"positions"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bug Fixes",
			"item": [
				{
					"name": "Tests for Bugfix #998 - Quoting service not using most recent endpoint",
					"item": [
						{
							"name": "Add payeefsp request URL - QUOTES PUT with incorrect endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e2cdfe55-e3e2-4a76-bba7-6c8185a6c3b1",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"FSPIOP_CALLBACK_URL_QUOTES\",\n  \"value\": \"{{HOST_SIMULATOR_K8S_CLUSTER}}/incorrectpayeefsp\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payeefsp/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"payeefsp",
										"endpoints"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND should not get callback",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5f309260-5dac-4651-a5de-05e4696fe900",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "66b7ab3e-2f1b-4452-8449-5470fa143c1d",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"",
											"//Check Data on payee side - payeefsp should not receive any data as we added the incorrectpayeefsp as endpoint in the previous step",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"          ",
											"            pm.test(\"Test Failed\", function () {",
											"                throw new Error('Recieved request at payeefsp, so failed');",
											"            });",
											"          ",
											"      } else {",
											"          pm.test(\"Test Passed - Because didn't get request at payeefsp\", function () {",
											"            //Do nothing",
											"           });",
											"",
											"      }",
											"       ",
											"   });",
											"}, 1000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add payeefsp request URL - QUOTES PUT with correct endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5bd368e2-da4d-45d1-8d49-99617d43fda7",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"FSPIOP_CALLBACK_URL_QUOTES\",\n  \"value\": \"{{HOST_SIMULATOR_K8S_CLUSTER}}/payeefsp\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payeefsp/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"payeefsp",
										"endpoints"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND should get callback",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "684ce25d-9df2-45c5-a0f6-c14eb11553d5",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "27938e70-6557-4907-96e1-cca290f14251",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check Data on payee side - payeefsp should get request now as we updated the correct endpoint in the previous step",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            pm.test(\"Test Passed, request received at payeefsp\", function () {",
											"            //Do Nothing",
											"           });",
											"          ",
											"      } else {",
											"            pm.test(\"Test Failed\", function () {",
											"                throw new Error('Did not get response, so failed');",
											"            });",
											"      }",
											"       ",
											"   });",
											"}, 1000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests for Bugfix #1009 - ML Adapter and ALS service health should include broker status",
					"item": [
						{
							"name": "Get health status of ML Adapter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0d6ddfd-89aa-4523-8310-32b7233aab06",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Checking data",
											"var jsonData = pm.response.json();",
											"pm.test(\"Expected Status is OK\", function () {",
											"   pm.expect(jsonData.status).to.eql(\"OK\");",
											"",
											"    pm.test(\"Expected body to have services array\", function () {",
											"       pm.expect(jsonData.services).to.be.an('array');",
											"       ",
											"        pm.test(\"Expected services to have broker and status is OK\", function () {",
											"            const brokerOk = jsonData.services.find(item => {",
											"               return item.name=='broker' && item.status=='OK'; ",
											"            });",
											"            pm.expect(brokerOk).to.be.an('object');",
											"   ",
											"        });",
											"    });",
											"    ",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/health",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get health status of ALS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6e677081-fe43-489b-9be9-7dccffe034d2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Checking data",
											"var jsonData = pm.response.json();",
											"pm.test(\"Expected Status is OK\", function () {",
											"   pm.expect(jsonData.status).to.eql(\"OK\");",
											"",
											"    pm.test(\"Expected body to have services array\", function () {",
											"       pm.expect(jsonData.services).to.be.an('array');",
											"       ",
											"        pm.test(\"Expected services to have datastore and status is OK\", function () {",
											"            const brokerOk = jsonData.services.find(item => {",
											"               return item.name=='datastore' && item.status=='OK'; ",
											"            });",
											"            pm.expect(brokerOk).to.be.an('object');",
											"   ",
											"        });",
											"    });",
											"    ",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/health",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get health status of Central Ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6aed7bf3-413a-431f-a4bd-545c8091751e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Checking data",
											"var jsonData = pm.response.json();",
											"pm.test(\"Expected Status is OK\", function () {",
											"   pm.expect(jsonData.status).to.eql(\"OK\");",
											"",
											"    pm.test(\"Expected body to have services array\", function () {",
											"       pm.expect(jsonData.services).to.be.an('array');",
											"       ",
											"        pm.test(\"Expected services to have datastore and status is OK\", function () {",
											"            const brokerOk = jsonData.services.find(item => {",
											"               return item.name=='datastore' && item.status=='OK'; ",
											"            });",
											"            pm.expect(brokerOk).to.be.an('object');",
											"   ",
											"        });",
											"        pm.test(\"Expected services to have broker and status is OK\", function () {",
											"            const brokerOk = jsonData.services.find(item => {",
											"               return item.name=='broker' && item.status=='OK'; ",
											"            });",
											"            pm.expect(brokerOk).to.be.an('object');",
											"   ",
											"        });        ",
											"    });",
											"    ",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/health",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get health status of Central Settlement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8dbe3062-5908-4fda-ac54-72add9e7ca74",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Checking data",
											"var jsonData = pm.response.json();",
											"pm.test(\"Expected Status is OK\", function () {",
											"   pm.expect(jsonData.status).to.eql(\"OK\");",
											"",
											"    pm.test(\"Expected body to have services array\", function () {",
											"       pm.expect(jsonData.services).to.be.an('array');",
											"       ",
											"        pm.test(\"Expected services to have datastore and status is OK\", function () {",
											"            const brokerOk = jsonData.services.find(item => {",
											"               return item.name=='datastore' && item.status=='OK'; ",
											"            });",
											"            pm.expect(brokerOk).to.be.an('object');",
											"   ",
											"        });",
											"    });",
											"    ",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/health",
									"host": [
										"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3f9948d1-4481-479e-a0b6-22f07d90400d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "02764351-f8b9-4b9d-8655-570b473bb2b1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests for Bugfix #981 - 500 http code instead of 400",
					"item": [
						{
							"name": "Add Participant - Duplicate account Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "50da56e9-bb0f-4aaa-b254-7e58f72067e1",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check Generic client error\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Generic client error');",
											"});",
											"",
											"pm.test(\"Check Error code 3000\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3000');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{payerfsp}}\",\n  \"currency\": \"USD\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add non existing Participant",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e93a36f5-2237-414e-b130-3f0a9c01d326",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check Generic ID not found\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Generic ID not found');",
											"});",
											"",
											"pm.test(\"Check Error code 3200\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3200');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/xyz",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"xyz"
									]
								}
							},
							"response": [
								{
									"name": "Get Participant",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{participant}}",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{participant}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "251",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 22 Aug 2018 15:25:18 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "nginx/1.13.8",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "accept-ranges",
											"value": "bytes",
											"name": "accept-ranges",
											"description": "Content-Types that are acceptable"
										},
										{
											"key": "cache-control",
											"value": "no-cache",
											"name": "cache-control",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										}
									],
									"cookie": [],
									"body": "{\"name\":\"testfsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/testfsp\",\"created\":\"2018-08-22T08:16:50.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/testfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]}"
								}
							]
						},
						{
							"name": "Add Participant - Invalid Currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5160baae-cd05-490c-a7bb-86b3e52c2116",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check Malformed syntax\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
											"});",
											"",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"payer10\",\n  \"currency\": \"A#\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests for Bugfix #990 and #1016 - Quotes",
					"item": [
						{
							"name": "Check duplicate quote before and after expiration",
							"item": [
								{
									"name": "Send Quote_SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e86acceb-bf10-47d2-b957-65d5f0e0bf48",
												"exec": [
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId', generatedUUID);",
													"   generatedUUID = uuid.v4();",
													"   pm.environment.set('transactionId', generatedUUID);",
													" pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 10000))",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "38ddda91-0524-4719-b87d-652c5207e876",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// //Check the request that Switch forwards to payeefsp",
													"// setTimeout(function () {",
													"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"//           if(response.responseSize !== 0) {",
													"              ",
													"//               //Check the Headers",
													"//               var headers = response.json().headers;",
													"              ",
													"//                 pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
													"//                     pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"//                 });",
													"                ",
													"//                 pm.test(\"payeefsp fspiop-destination is payerfsp\", function () {",
													"//                     pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"//                 });",
													"                ",
													"//                 pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
													"//                     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
													"//                 });",
													"                ",
													"//                 pm.test(\"payeefsp accept is same as sent in the request\", function () {",
													"//                     pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"//                 });",
													"                ",
													"//                 pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
													"//                     pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"//                 });",
													"                ",
													"//           } else {",
													"//               pm.test(\"Quote FAILED\", function () {",
													"//                 throw new Error('Did not receive request on payee side');",
													"//               });",
													"//               postman.setNextRequest(null)",
													"//           }",
													"//   });",
													"// }, 1100)",
													"",
													"// //Check Data on payer side",
													"// setTimeout(function () {",
													"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"//       if(response.responseSize !== 0) {",
													"//           //Checking headers",
													"//             var headers = response.json().headers;",
													"//             pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
													"//                 pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"//             });",
													"            ",
													"//             pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
													"//                 pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"//             });",
													"            ",
													"//             pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
													"//                 pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"//             });",
													"            ",
													"//             pm.test(\"payerfsp accept is empty\", function () {",
													"//                 pm.expect(headers['accept']).to.eql(undefined);",
													"//             });",
													"            ",
													"            ",
													"            ",
													"//             //Validate protected header inside Signature",
													"//             var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"//             var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"//             console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"            ",
													"//             // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
													"//             //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
													"//             // });",
													"            ",
													"//             pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"//             });",
													"//             pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"//                 pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"//             });",
													"            ",
													"",
													"//             pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"//             });",
													"//             pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
													"//             });",
													"//             pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
													"//             });",
													"//             pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
													"//             });",
													"           ",
													"//             pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"//                 pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"//             });",
													"            ",
													"//             pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"//                 pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"//             });",
													"            ",
													"//             var jsonData = response.json().data;",
													"            ",
													"//           pm.test(\"Response fees is returned\", function () {",
													"//                 pm.expect(jsonData.payeeFspFee.amount).equal(\"1\");",
													"                ",
													"//             });",
													"//             pm.test(\"Response Commission is returned\", function () {",
													"//                 pm.expect(jsonData.payeeFspCommission.amount).equal(\"1\");",
													"                ",
													"//             });",
													"            ",
													"//             pm.test(\"Response ilpPacket is not undefined\", function () {",
													"//                 pm.expect(jsonData.ilpPacket).not.equal(undefined);",
													"//                 pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
													"//             });",
													"       ",
													"//           pm.test(\"Response condition is not undefined\", function () {",
													"//               pm.expect(jsonData.condition).not.equal(undefined);",
													"//               pm.environment.set(\"condition\", jsonData.condition);",
													"//           });",
													"//       } else {",
													"//           pm.test(\"Quote FAILED\", function () {",
													"//             throw new Error('Did not receive response');",
													"//           });",
													"",
													"//       }",
													"       ",
													"//   });",
													"// }, 1000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "noresponsepayeefsp"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiop-signature}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"noresponsepayeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Quote_SEND - 12 - Validate Within Expire Time w Duplicate Quote Id Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "13277792-9868-4fdc-80d2-d40bc826737b",
												"exec": [
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('transactionId', generatedUUID);",
													"",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f4dbadd6-372e-435c-8fa2-3857c4d84e61",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// Check the request that Switch forwards to payeefsp",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              ",
													"              var jsonData = response.json();",
													"            ",
													"            pm.test(\"Check Modified request - Duplicate Quote before expire time\", function () {",
													"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Modified request');",
													"            });",
													"            ",
													"            pm.test(\"Check Error code 3106\", function () {",
													"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3106');",
													"            });",
													"                ",
													"          } else {",
													"              pm.test(\"Quote FAILED\", function () {",
													"                throw new Error('Did not receive request on payee side');",
													"              });",
													"          }",
													"  });",
													"}, 1100)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "noresponsepayeefsp"
											},
											{
												"key": "FSPIOP-Signature",
												"value": "{{fspiop-signature}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"noresponsepayeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"note\": \"hej\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Quote_SEND - 12 - Validate After Expire Time w Duplicate Quote Id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a8e0f3c4-f0a9-4f31-9acc-d80496519a07",
												"exec": [
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('transactionId', generatedUUID);",
													"   pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 10000))",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest('www.google.com', function (err, response) {}",
													"    );",
													"}, 10000)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "723c96e1-899d-4e26-b017-5123f021b535",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// Check the request that Switch forwards to payeefsp",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              ",
													"              var jsonData = response.json();",
													"            ",
													"            pm.test(\"Check Modified request - Duplicate Quote before expire time\", function () {",
													"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Modified request');",
													"            });",
													"            ",
													"            pm.test(\"Check Error code 3106\", function () {",
													"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3106');",
													"            });",
													"                ",
													"          } else {",
													"              pm.test(\"Quote FAILED\", function () {",
													"                throw new Error('Did not receive request on payee side');",
													"              });",
													"          }",
													"  });",
													"}, 1100)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											},
											{
												"key": "FSPIOP-Signature",
												"value": "{{fspiop-signature}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"note\": \"hej\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0f297d8a-c978-481c-86d7-e2ec82b34b3c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "58452e59-d734-4600-b237-c87838673f30",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "bug8-DuplicateQuoteId",
							"item": [
								{
									"name": "Send Quote_SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d9de1e01-f54c-464e-a891-2b6eda4a0d74",
												"exec": [
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId', generatedUUID);",
													"   generatedUUID = uuid.v4();",
													"   pm.environment.set('transactionId', generatedUUID);",
													"",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "99b1fcbf-98b4-4d77-bf33-6d0a1ef25913",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"//Check the request that Switch forwards to payeefsp",
													"// setTimeout(function () {",
													"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"//           if(response.responseSize !== 0) {",
													"              ",
													"//               //Check the Headers",
													"//               var headers = response.json().headers;",
													"              ",
													"//                 pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
													"//                     pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"//                 });",
													"                ",
													"//                 pm.test(\"payeefsp fspiop-destination is payerfsp\", function () {",
													"//                     pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"//                 });",
													"                ",
													"//                 pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
													"//                     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
													"//                 });",
													"                ",
													"//                 pm.test(\"payeefsp accept is same as sent in the request\", function () {",
													"//                     pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"//                 });",
													"                ",
													"//                 pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
													"//                     pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"//                 });",
													"                ",
													"//           } else {",
													"//               pm.test(\"Quote FAILED\", function () {",
													"//                 throw new Error('Did not receive request on payee side');",
													"//               });",
													"//               postman.setNextRequest(null)",
													"//           }",
													"//   });",
													"// }, 1100)",
													"",
													"// //Check Data on payer side",
													"// setTimeout(function () {",
													"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"//       if(response.responseSize !== 0) {",
													"//           //Checking headers",
													"//             var headers = response.json().headers;",
													"//             pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
													"//                 pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"//             });",
													"            ",
													"//             pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
													"//                 pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"//             });",
													"            ",
													"//             pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
													"//                 pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"//             });",
													"            ",
													"//             pm.test(\"payerfsp accept is empty\", function () {",
													"//                 pm.expect(headers['accept']).to.eql(undefined);",
													"//             });",
													"            ",
													"            ",
													"            ",
													"//             //Validate protected header inside Signature",
													"//             var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"//             var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"//             console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"            ",
													"//             // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
													"//             //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
													"//             // });",
													"            ",
													"//             pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"//             });",
													"//             pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"//                 pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"//             });",
													"            ",
													"",
													"//             pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"//             });",
													"//             pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
													"//             });",
													"//             pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
													"//             });",
													"//             pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
													"//             });",
													"           ",
													"//             pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"//                 pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"//             });",
													"            ",
													"//             pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"//                 pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"//             });",
													"            ",
													"//             var jsonData = response.json().data;",
													"            ",
													"//           pm.test(\"Response fees is returned\", function () {",
													"//                 pm.expect(jsonData.payeeFspFee.amount).equal(\"1\");",
													"                ",
													"//             });",
													"//             pm.test(\"Response Commission is returned\", function () {",
													"//                 pm.expect(jsonData.payeeFspCommission.amount).equal(\"1\");",
													"                ",
													"//             });",
													"            ",
													"//             pm.test(\"Response ilpPacket is not undefined\", function () {",
													"//                 pm.expect(jsonData.ilpPacket).not.equal(undefined);",
													"//                 pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
													"//             });",
													"       ",
													"//           pm.test(\"Response condition is not undefined\", function () {",
													"//               pm.expect(jsonData.condition).not.equal(undefined);",
													"//               pm.environment.set(\"condition\", jsonData.condition);",
													"//           });",
													"//       } else {",
													"//           pm.test(\"Quote FAILED\", function () {",
													"//             throw new Error('Did not receive response');",
													"//           });",
													"",
													"//       }",
													"       ",
													"//   });",
													"// }, 1000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "payeefsp"
											},
											{
												"key": "FSPIOP-Signature",
												"value": "{{fspiop-signature}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Quote_SEND - 8 - Duplicate QuoteId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0d04755d-0352-45eb-b24f-7a6ba797f574",
												"exec": [
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"//   pm.environment.set('quoteId', generatedUUID);",
													"   pm.environment.set('quoteId', pm.variables.get(\"quoteId\"));",
													"   generatedUUID = uuid.v4();",
													"   pm.environment.set('transactionId', generatedUUID);",
													"",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "02a91436-ff51-4636-aa7d-2fb95586d082",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// //Check Data on payer side",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"      if(response.responseSize !== 0) {",
													"            ",
													"            var jsonData = response.json().data;",
													"            ",
													"            pm.test(\"Check Modified request - Duplicate Quote\", function () {",
													"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Modified request');",
													"            });",
													"            ",
													"            pm.test(\"Check Error code 3106\", function () {",
													"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3106');",
													"            });",
													"            ",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('Did not receive response');",
													"          });",
													"",
													"      }",
													"       ",
													"  });",
													"}, 1000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiop-signature}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Send Quote_SEND - Missing content-type version",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7e9bebcc-d9bf-4ffc-a28a-6c7f6d5d9aa0",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8239ea2b-17a7-42bd-a543-022ed473d52a",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check Missing mandatory element\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
											"});",
											"",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 6a - Invalid Content Type - application/json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7f5ef8bc-ed93-4b22-b248-dfc9befb9a00",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5bea957c-289e-4dd0-8f76-09c9e2b4b248",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check Missing mandatory element\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
											"});",
											"",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 6b - Invalid Content Type - xml",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "540bbe1c-04e1-4014-b481-3e84fd4e8373",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Invalid content Type - Check XML type \", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unsupported Media Type');",
											"});            ",
											"            ",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fd0ef48c-2774-4ed3-8483-912e13642b21",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 6c - Invalid Content Type - tag body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c59544d8-8555-47a7-8919-42cdc0760017",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9c2884fe-0720-4228-9095-9d623fb176f6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Invalid content Type - Check XML type \", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unsupported Media Type');",
											"});            ",
											"            ",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<q>\n<q1>\n</q1>\n</q>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 7 - Missing Payer PartyIdType",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a4f897ac-37d0-464e-9b4b-cb41d8eb37b6",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cf746352-536f-4a4d-8889-7bfb3a41836f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Missing mandatory element error\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
											"});         ",
											"",
											"pm.test(\"Check Missing payer partyIdType\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('partyIdType');",
											"});        ",
											"            ",
											"pm.test(\"Check Error code 3102\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 7 - Missing Payer PartyIdentifier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1051a0df-d6ac-4550-aa55-251c991b02f7",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5dd7b187-c39d-4f23-8078-60f7c5e1efe8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check Missing mandatory element error\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
											"});         ",
											"",
											"pm.test(\"Check Missing payer partyIdentifier\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('partyIdentifier');",
											"});        ",
											"            ",
											"pm.test(\"Check Error code 3102\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 7 - Missing Payee PartyIdentifier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5f92f567-6ded-45fd-816b-8cded227d0dd",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3010b923-1706-4515-9038-16745240ab95",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"",
											"pm.test(\"Check Missing mandatory element error\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
											"});         ",
											"",
											"pm.test(\"Check Missing payer partyIdentifier\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('partyIdentifier');",
											"});        ",
											"",
											"pm.test(\"Check Error code 3102\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 7 - Missing Payee PartyIdType",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "673001de-667f-4ea5-b8dd-b399951f13b9",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a58e108b-daae-458f-858d-65516c2ce100",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Missing mandatory element error\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
											"});         ",
											"",
											"pm.test(\"Check Missing payer partyIdType\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('partyIdType');",
											"});            ",
											"            ",
											"pm.test(\"Check Error code 3102\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 9- Destination FSP NOT FOUND",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6777436e-0d50-41ee-a950-df54510c539c",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "36d38326-faca-4835-9d6b-3772daf2e6fd",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"console.log(\"Test - FSP not found\")",
											"",
											"//Check Data on payer side",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            ",
											"            var jsonData = response.json().data;",
											"            ",
											"            pm.test(\"Check Destination FSP Error - Unsupported participant\", function () {",
											"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Destination FSP Error - Unsupported participant ');",
											"            });",
											"            ",
											"            pm.test(\"Check Error code 3201\", function () {",
											"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3201');",
											"            });",
											"            ",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"          });",
											"",
											"      }",
											"       ",
											"  });",
											"}, 1000)",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "payeefspNOTFOUND"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"23123123412\",\n      \"fspId\": \"payeefspNOTFOUND\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 10 - PayeePartyIdentifier NOT FOUND",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c87c4127-f4b1-49db-85af-a9326d5769f4",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "22fb3e7b-166c-4042-8ac9-108b8c412761",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Generic Validation Error\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Generic validation error');",
											"});          ",
											"",
											"pm.test(\"Check partyIdentifier not shorter than 1 character\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('.requestBody.payee.partyIdInfo.partyIdentifier should NOT be shorter than 1 characters');",
											"});     ",
											"            ",
											"pm.test(\"Check Error code 3100\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3100');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "QuotesByID - 11 - Missing Condition Field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ae932bf1-3dc6-43e3-9ff4-f62a8f76f421",
										"exec": [
											"pm.environment.set('quoteDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2a890b84-0462-4179-a3a1-6b7f72b4a645",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Missing conditional Field- condition is required\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element');",
											"});            ",
											"            ",
											"pm.test(\"Check Error code 3102\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": ""
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate",
										"disabled": true
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Length",
										"value": "1117",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "noresponsepayeefsp"
									},
									{
										"key": "Host",
										"value": "http://localhost:3002",
										"disabled": true
									},
									{
										"key": "Postman-Token",
										"value": "a1c5eda9-20eb-4041-8e1a-134f266dee23,a25e5bc7-0cee-4720-9d34-ffd28d08c908",
										"disabled": true
									},
									{
										"key": "User-Agent",
										"value": "PostmanRuntime/7.17.1",
										"disabled": true
									},
									{
										"key": "cache-control",
										"value": "no-cache",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferAmount\": {\n  \"amount\": \"11\",\n  \"currency\": \"XOF\" },\n  \"payeeReceiveAmount\": {\n  \"amount\": \"11\",\n  \"currency\": \"XOF\"   },\n  \"payeeFspCommission\": {\n   \"currency\": \"XOF\",\n   \"amount\": \"1\"\n },\n  \"expiration\": \"2019-10-14T20:19:20.741Z\",\n  \"ilpPacket\": \"AQAAAAAAAADIEHByaXZhdGUucGF5ZWVmc3CCAiB7InRyYW5zYWN0aW9uSWQiOiIyZGY3NzRlMi1mMWRiLTRmZjctYTQ5NS0yZGRkMzdhZjdjMmMiLCJxdW90ZUlkIjoiMDNhNjA1NTAtNmYyZi00NTU2LThlMDQtMDcwM2UzOWI4N2ZmIiwicGF5ZWUiOnsicGFydHlJZEluZm8iOnsicGFydHlJZFR5cGUiOiJNU0lTRE4iLCJwYXJ0eUlkZW50aWZpZXIiOiIyNzcxMzgwMzkxMyIsImZzcElkIjoicGF5ZWVmc3AifSwicGVyc29uYWxJbmZvIjp7ImNvbXBsZXhOYW1lIjp7fX19LCJwYXllciI6eyJwYXJ0eUlkSW5mbyI6eyJwYXJ0eUlkVHlwZSI6Ik1TSVNETiIsInBhcnR5SWRlbnRpZmllciI6IjI3NzEzODAzOTExIiwiZnNwSWQiOiJwYXllcmZzcCJ9LCJwZXJzb25hbEluZm8iOnsiY29tcGxleE5hbWUiOnt9fX0sImFtb3VudCI6eyJjdXJyZW5jeSI6IlVTRCIsImFtb3VudCI6IjIwMCJ9LCJ0cmFuc2FjdGlvblR5cGUiOnsic2NlbmFyaW8iOiJERVBPU0lUIiwic3ViU2NlbmFyaW8iOiJERVBPU0lUIiwiaW5pdGlhdG9yIjoiUEFZRVIiLCJpbml0aWF0b3JUeXBlIjoiQ09OU1VNRVIiLCJyZWZ1bmRJbmZvIjp7fX19\"\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes/febf8cff-f0b8-4a09-9a17-e22401fe4332",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes",
										"febf8cff-f0b8-4a09-9a17-e22401fe4332"
									]
								}
							},
							"response": []
						},
						{
							"name": "QuotedById - 13a- 400- Missing Accept header (BUG)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92edb30d-5200-4b6c-9b81-66a15c571d32",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Malformed syntax - Invalid accept header\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax - Invalid accept header');",
											"});            ",
											"            ",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "763be38b-fc2c-48f6-ba43-46c0797d9835",
										"exec": [
											"pm.environment.set('quoteDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes/07e92ea7-d655-4f88-925c-4aeefcee80f6",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes",
										"07e92ea7-d655-4f88-925c-4aeefcee80f6"
									]
								},
								"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
							},
							"response": []
						},
						{
							"name": "QuotesById - 13b - 400-Missing FSPIOP-Source header (BUG)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12e73216-3c69-4b30-a7a7-1c0cc3b22f37",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Missing mandatory element error\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
											"});",
											"",
											"pm.test(\"Error message fspiop-source is required\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('fspiop-source');",
											"});  ",
											"            ",
											"pm.test(\"Check Error code 31012\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0a6970fd-bfbd-4489-8cad-9ffe62f8d9ff",
										"exec": [
											"pm.environment.set('quoteDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes/07e92ea7-d655-4f88-925c-4aeefcee80f6",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes",
										"07e92ea7-d655-4f88-925c-4aeefcee80f6"
									]
								},
								"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
							},
							"response": []
						},
						{
							"name": "QuotesById - 13c - 400-Missing Date header (BUG)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c1453fd-60c0-44ca-9ddd-fffe8c7fe936",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Missing mandatory element error\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
											"});",
											"",
											"pm.test(\"Error message date is required\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('date');",
											"}); ",
											"            ",
											"pm.test(\"Check Error code 3102\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3cfbfaf4-675d-4266-b5aa-15c2a99e3c51",
										"exec": [
											"pm.environment.set('quoteDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes/07e92ea7-d655-4f88-925c-4aeefcee80f6",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes",
										"07e92ea7-d655-4f88-925c-4aeefcee80f6"
									]
								},
								"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 14 - Incorrect Switch Version Header",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8b7879c4-9c31-48e9-8003-7e8faebb6304",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c9eb3456-83db-4c8f-b42a-52e4cd65fc09",
										"exec": [
											"pm.test(\"Status code is 406\", function () {",
											"    pm.response.to.have.status(406);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Unacceptable version requested\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unacceptable version requested');",
											"});            ",
											"            ",
											"pm.test(\"Check Error code 3001\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3001');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=9.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								},
								"description": "Check POST/Quote  with incorrect switch version header\n\nExpectation : 400 with error code 3001"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests for Bugfix #1331 - 405 status code - unsupported method",
					"item": [
						{
							"name": "Post Party Receiver - Unsupported Method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6aea93d3-7317-45d0-be07-f138f08f58ad",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 405\", function () {",
											"    pm.response.to.have.status(405);",
											"});",
											"",
											"pm.test(\"Check Method Not Allowed\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Method Not Allowed');",
											"});",
											"",
											"pm.test(\"Check Error code 3000\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3000');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "56203d24-e949-472d-ba9a-02d3ba73b620",
										"exec": [
											"pm.variables.set('expectedFullName', 'Siabelo Maroka');",
											"pm.variables.set('expectedFirstName', 'Siabelo');",
											"pm.variables.set('expectedLastName', 'Maroka');",
											"pm.variables.set('expectedDOB', '1973-03-03');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.parties+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.parties+json;version=1.0"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{dateHeader}}"
									}
								],
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{pathfinderMSISDN}}",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
									],
									"path": [
										"parties",
										"MSISDN",
										"{{pathfinderMSISDN}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Quote - Unsupported Method",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "14d76c70-86d5-4d01-8d4f-6bafe389aee6",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('quoteId', generatedUUID);",
											"generatedUUID = uuid.v4();",
											"pm.environment.set('transactionId', generatedUUID);",
											"pm.environment.set('quoteDate', (new Date()).toUTCString());",
											"pm.environment.set('transferAmount', 60.11);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f02fcc93-c0b2-4d72-b7be-4d3aff45720c",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 405\", function () {",
											"    pm.response.to.have.status(405);",
											"});",
											"",
											"pm.test(\"Check Method Not Allowed\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Method Not Allowed');",
											"});",
											"",
											"pm.test(\"Check Error code 3000\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3000');",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "payeefsp"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Transfer - Unsupported method",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "75d3fd23-6e42-4c07-a365-f3cc714b66e9",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 405\", function () {",
											"    pm.response.to.have.status(405);",
											"});",
											"",
											"pm.test(\"Check Method Not Allowed\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Method Not Allowed');",
											"});",
											"",
											"pm.test(\"Check Error code 3000\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3000');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e3c319a9-aaec-4c54-b69b-7a76afd21ebf",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transfer_ID', generatedUUID);",
											"pm.environment.set('transferDate', (new Date()).toUTCString());",
											"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));",
											"pm.environment.set('transferAmount', 1.11);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									},
									{
										"key": "FSPIOP-URI",
										"type": "text",
										"value": "/transfers"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"type": "text",
										"value": "POST"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fb0203de-7e0f-43e7-b143-b58ad13aa040",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fc07086e-8d00-4b71-814b-438036d6e4d6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Test for Bugfix #1378 - extension list missing",
					"item": [
						{
							"name": "Send Quote_SEND  - with wrong content version",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2dfc4e99-e7a5-4fd5-85ca-51222ee4f43b",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('quoteId', generatedUUID);",
											"generatedUUID = uuid.v4();",
											"pm.environment.set('transactionId', generatedUUID);",
											"pm.environment.set('quoteDate', (new Date()).toUTCString());",
											"pm.environment.set('transferAmount', 60.11);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2f514fee-325f-47d7-8ca3-199daeb80061",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 406\", function () {",
											"    pm.response.to.have.status(406);",
											"});",
											"",
											"pm.test(\"Check Unacceptable version requested\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unacceptable version requested');",
											"});",
											"",
											"pm.test(\"Check Error code 3001\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3001');",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=3.2"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "payeefsp"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check transfers/ Missing ID #849",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "45f88c4e-d0ed-4bbb-a4fe-214199ec6aa2",
								"exec": [
									"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3eef4a05-5b71-4590-aabd-44b787fb2020",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Check ID missing\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unknown URI');",
									"});",
									"",
									"pm.test(\"Check Error code 3002\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3002');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"type": "text",
								"value": "noresponsepayeefsp"
							},
							{
								"key": "FSPIOP-Destination",
								"type": "text",
								"value": "{{payeefsp}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check quotes/ Missing ID #849",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a07c7a24-7c15-43bd-a001-2db01f32d8c5",
								"exec": [
									"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8dd0244a-2302-418e-9362-9d1457829742",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Check ID missing\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unknown URI');",
									"});",
									"",
									"pm.test(\"Check Error code 3002\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3002');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"type": "text",
								"value": "noresponsepayeefsp"
							},
							{
								"key": "FSPIOP-Destination",
								"type": "text",
								"value": "{{payeefsp}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/quotes",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Send Quote 4 Decimal #949",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "777e3b34-b601-4bf1-9f75-fd91ba32ba4c",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"//Check Data on payer side",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"      if(response.responseSize !== 0) {",
									"            var jsonData = response.json().data;",
									"            pm.test(\"Send Quote Amount in 4 decimal returned\", function () {",
									"                pm.expect(+jsonData.transferAmount.amount).equal(pm.environment.get(\"transferAmount\"));",
									"            });",
									"            ",
									"      } else {",
									"          pm.test(\"Quote FAILED\", function () {",
									"            throw new Error('Did not receive response');",
									"           });",
									"      }",
									"       ",
									"   });",
									"}, 1000)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51f60d06-848c-45e0-9dc5-fc24f8c7eb40",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('transferAmount', 60.1234);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TESTFSP1_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Send Transfer 4 Decimal #949",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0aefc5fd-b7c9-44ac-ac27-4217a2faac3c",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"//Check the request that Switch forwards to payeefsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"                var jsonData = response.json().data;",
									"                pm.test(\"payeefsp data should have the same amount as request and 4 decimal checked\", function () {",
									"                   pm.expect(+jsonData.amount.amount).to.eql(pm.environment.get(\"transferAmount\"));",
									"                });",
									"                ",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"          }",
									"   });",
									"}, 1100)",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "73942a3e-51fb-4c75-a37b-e7a8bc9827af",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set('transferExpiration',new Date(new Date().getTime() + 600000));",
									"pm.environment.set('transferAmount', 1.9999);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							},
							{
								"key": "FSPIOP-URI",
								"value": "/transfers",
								"type": "text"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "POST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Error 2001 Internal server error #742",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4176bef0-2d00-42b9-ba5b-a263e8e68e99",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Check Malformed syntax error\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
									"});",
									"",
									"pm.test(\"Check Error code 3101\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"payer10\",\n  \"currency\": \"A#\"\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Error 3003 Add Party information error #742",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "634dab1e-dec2-49fd-8f33-7d5db8d92778",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Check ID missing\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Add Party information error');",
									"});",
									"",
									"pm.test(\"Check Error code 3003\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3003');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{payerfsp}}\",\n  \"currency\": \"XOF\"\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
							],
							"path": [
								"participants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Error 3100  validation error#742",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee243bb1-c400-4ed9-8a68-374934e65cca",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check Generic validation error\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Generic validation error');",
									"});",
									"",
									"pm.test(\"Check Error code 3100\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3100');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "17c6beb7-1796-4c87-b411-143d1753f5a7",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));",
									"pm.environment.set('transferAmount', 1.11);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							},
							{
								"key": "FSPIOP-URI",
								"value": "/transfers",
								"type": "text"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "POST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payerFsp1\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Error 3101 Malformed syntax #742",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7e7e75d-0268-485a-b56a-fe660c67706c",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check Malformed syntax\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
									"});",
									"",
									"pm.test(\"Check Error code 3101\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6db9f719-cc67-4f98-a319-cd04a11a05e9",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000));",
									"pm.environment.set(\"transderAmount\", 1.11);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							},
							{
								"key": "FSPIOP-URI",
								"type": "text",
								"value": "/transfers"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"type": "text",
								"value": "POST"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}+1\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Error 3102  Missing mandatory element#742",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7913d2b4-d076-40ee-8813-607e212d1e84",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check Missing mandatory element\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element');",
									"});",
									"",
									"pm.test(\"Check Error code 3102\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "da53f27b-e7d9-4a66-adaf-8d8770ebc69e",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000));",
									"pm.environment.set('transferAmount', 1.11);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							},
							{
								"key": "FSPIOP-URI",
								"value": "/transfers",
								"type": "text"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "POST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check FSPIOP-URI header #733",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ea99deb-3de5-45c0-820d-3c696768be2c",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"//Check the request that Switch forwards to payeefsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"              ",
									"              //Check the Headers",
									"              var headers = response.json().headers;",
									"                ",
									"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
									"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
									"                });",
									"                ",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"",
									"          }",
									"   });",
									"}, 1100)",
									"",
									"//Check the callback response that Switch forwards to payerfsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"            //Checking headers",
									"            var headers = response.json().headers;",
									"           ",
									"            pm.test(\"payerfsp fspiop-uri includes transfers\", function () {",
									"                pm.expect(headers['fspiop-uri']).to.include('/transfers');",
									"            });",
									"            ",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"",
									"          }",
									"   });",
									"}, 1300)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "124cf49b-0c6d-44d8-a0e0-3e5385bd2947",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));",
									"pm.environment.set('transferAmount', 1.11);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							},
							{
								"key": "FSPIOP-URI",
								"type": "text",
								"value": "/transfers"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"type": "text",
								"value": "POST"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Settlements Error #956",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c4b591a-45f0-4385-abd3-5991889e679f",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check Malformed syntax\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
									"});",
									"",
									"pm.test(\"Check Error code 3101\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?participantId=0&state=open",
							"host": [
								"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
							],
							"path": [
								"settlementWindows"
							],
							"query": [
								{
									"key": "participantId",
									"value": "0"
								},
								{
									"key": "state",
									"value": "open",
									"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
								},
								{
									"key": "fromDateTime",
									"value": "",
									"disabled": true
								},
								{
									"key": "toDateTime",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "State, OPEN is case sensitive.\nTocheck invalid request I have provided state = \"open\""
					},
					"response": []
				},
				{
					"name": "Check FSPIOP Headers from Switch #883",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9248004a-318a-43a3-a288-baef61b6f85a",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"",
									"setTimeout(function () {",
									"  partyId = pm.variables.get(\"InexistentPartyId\");",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\") + `/payerfsp/callbacks/${partyId}`, function (err, response) {",
									"      responseBody = response.json();",
									"      pm.test(\"Expect simulator to return response\", () => {",
									"          pm.expect(response.responseSize).to.be.above(0);",
									"      })",
									"      pm.test(`Expect FSPIO-URI header to be /parties/MSISDN/${partyId}/error`, function () {",
									"          pm.expect(responseBody.headers).to.have.property(\"fspiop-uri\");",
									"          pm.expect(responseBody.headers[\"fspiop-uri\"]).to.equal(`/parties/MSISDN/${partyId}/error`);",
									"        });",
									"        pm.test(\"Expected FSPIO-HTTP-Method header to be PUT\", function () {",
									"            pm.expect(responseBody.headers).to.have.property(\"fspiop-http-method\");",
									"            pm.expect(responseBody.headers[\"fspiop-http-method\"]).to.equal(\"PUT\");",
									"        });",
									"    });",
									"}, 6000)",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "94e0a7be-1dc8-4789-aed1-ab1833bf8405",
								"exec": [
									"pm.environment.set('dateHeader', (new Date()).toUTCString());",
									"pm.variables.set('InexistentPartyId', 1999999)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.interoperability.parties+json;version=1.0"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"type": "text",
								"value": "{{payerfsp}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/vnd.interoperability.parties+json;version=1.0"
							}
						],
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{InexistentPartyId}}",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"parties",
								"MSISDN",
								"{{InexistentPartyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check FSPIOP Headers from ML-API-Adapter #1032",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27556594-7a92-43a3-880f-04919f39f0d5",
								"exec": [
									"pm.test(\"Status code is 202\", () => {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(() => {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\" + pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"            const responseBody = response.responseSize ? response.json() : null;",
									"            const headers = responseBody.headers || null;",
									"            const transferId = pm.environment.get(\"transfer_ID\");",
									"            ",
									"            pm.test(\"Expect simulator to return response\", () => {",
									"                  pm.expect(response.responseSize).to.be.above(0);",
									"              })",
									"            pm.test(\"payerfsp fspiop-source is switch\", () => {",
									"                pm.expect(headers['fspiop-source']).to.eql('switch');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-destination is payerfsp\", () => {",
									"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", () => {",
									"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp accept is empty\", () => {",
									"                pm.expect(headers['accept']).to.eql(undefined);",
									"            });",
									"            ",
									"            pm.test(\"fspiop-uri contains transfers/\"+transferId+\"/error\", function () {",
									"                pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${transferId}/error`);",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-http-method is PUT\", () => {",
									"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
									"            });",
									"            ",
									"            pm.test(\"Response data does not have transferId\", () => {",
									"               pm.expect(responseBody.data.transferId).to.eql(undefined);",
									"            });",
									"            ",
									"            pm.test(\"Response status is not COMMITTED\", () => {",
									"                pm.expect(responseBody.data.transferState).to.not.eql('COMMITTED');",
									"            });",
									"   });",
									"}, 20000)",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c8facc84-97f6-4872-b2d3-bb4292771ff5",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set('transferExpiration',new Date(new Date().getTime() + 10000));",
									"pm.environment.set('transferAmount', 1.9999);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							},
							{
								"key": "FSPIOP-URI",
								"type": "text",
								"value": "/transfers"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"type": "text",
								"value": "POST"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "transaction-request-service",
			"item": [
				{
					"name": "health",
					"item": [
						{
							"name": "health",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "165b81fd-2f0e-42f1-b56a-c10cfbbc5971",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5709c50e-ef99-48d8-ae39-0b370f557dd7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.health+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.health+json;version=1.0"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transactionRequestDate}}"
									},
									{
										"key": "fspiop-source",
										"type": "text",
										"value": "{{payerfsp}}"
									},
									{
										"key": "fspiop-destination",
										"type": "text",
										"value": "{{payeefsp}}"
									},
									{
										"key": "fspiop-signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									},
									{
										"key": "fspiop-uri",
										"type": "text",
										"value": "/health"
									},
									{
										"key": "fspiop-http-method",
										"type": "text",
										"value": "GET"
									}
								],
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/health",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9aa65eb4-f695-4375-b7cb-6c4370105eac",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4d46ac14-6b69-4831-860e-18722ac0560c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "received State",
					"item": [
						{
							"name": "Payee initiate request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ff70789b-0c8b-4d4f-8644-abbb3d07caff",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/transactionRequests/callbacks/\"+pm.environment.get(\"transactionRequestId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            const responseJson = response.json()",
											"            const headers = responseJson.headers",
											"            const data = responseJson.data",
											"            ",
											"            pm.test(\"Callback received in the Simulator\", function () {",
											"                pm.expect(data).not.equal(undefined);",
											"            });",
											"            ",
											"            pm.test(\"transactionId matches\", function () {",
											"                pm.expect(data['transactionId']).to.eql(pm.environment.get(\"transactionRequestId\"));",
											"            });",
											"                ",
											"            pm.test(\"fspiop-source is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-destination is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            pm.test(\"content-type is same as sent in the request\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transactionRequests+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"transactionRequestState is RECEIVED\", function () {",
											"                pm.expect(data['transactionRequestState']).to.eql('RECEIVED');",
											"            });",
											"            ",
											"      } else {",
											"          pm.test(\"Transaction Request FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"          });",
											"      }",
											"       ",
											"  });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "73a02488-c2ed-4fcd-9138-2a391ec94c9f",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);",
											"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-destination",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-http-method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionRequestId\": \"{{transactionRequestId}}\",\n    \"payee\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"PERSONAL_ID\",\n            \"partyIdentifier\": \"16135551212\",\n            \"partySubIdOrType\": \"DRIVING_LICENSE\",\n            \"fspId\": \"1234\"\n        },\n        \"merchantClassificationCode\": \"4321\",\n        \"name\": \"Justin Trudeau\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"Justin\",\n                \"middleName\": \"Pierre\",\n                \"lastName\": \"Trudeau\"\n            },\n            \"dateOfBirth\": \"1971-12-25\"\n        }\n    },\n    \"payer\": {\n        \"partyIdType\": \"PERSONAL_ID\",\n        \"partyIdentifier\": \"16135551212\",\n        \"partySubIdOrType\": \"DRIVING_LICENSE\",\n        \"fspId\": \"1234\"\n    },\n    \"amount\": {\n        \"currency\": \"USD\",\n        \"amount\": \"123.45\"\n    },\n    \"transactionType\": {\n        \"scenario\": \"DEPOSIT\",\n        \"subScenario\": \"CUSTOM_SUBSCENARIO\",\n        \"initiator\": \"PAYEE\",\n        \"initiatorType\": \"CONSUMER\",\n        \"refundInfo\": {\n            \"originalTransactionId\": \"{{transactionRequestId}}\",\n            \"refundReason\": \"free text indicating reason for the refund\"\n        },\n        \"balanceOfPayments\": \"123\"\n    },\n    \"note\": \"Free-text memo\",\n    \"geoCode\": {\n        \"latitude\": \"+45.4215\",\n        \"longitude\": \"+75.6972\"\n    },\n    \"authenticationType\": \"OTP\",\n     \"expiration\": \"{{transferExpiration}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests"
									]
								}
							},
							"response": []
						},
						{
							"name": "send RECEIVED state",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cbe63c72-e215-447a-b2bf-9140a8206da9",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b7f51ba0-b8e2-430c-a8f2-1c4214a913cd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/transactionRequests/callbacks/\"+pm.environment.get(\"transactionRequestId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            const responseJson = response.json()",
											"            const headers = responseJson.headers",
											"            const data = responseJson.data",
											"            ",
											"            pm.test(\"Callback received in the Simulator\", function () {",
											"                pm.expect(data).not.equal(undefined);",
											"            });",
											"            ",
											"            pm.test(\"transactionId matches\", function () {",
											"                pm.expect(data['transactionId']).to.eql(pm.environment.get(\"transactionRequestId\"));",
											"            });",
											"                ",
											"            pm.test(\"fspiop-source is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-destination is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            pm.test(\"content-type is same as sent in the request\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transactionRequests+json;version=1.0');",
											"            });",
											"            ",
											"      } else {",
											"          pm.test(\"Transaction Request FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"          });",
											"      }",
											"       ",
											"  });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "/transactionRequests/{{transactionRequestId}}",
										"type": "text"
									},
									{
										"key": "fspiop-http-method",
										"value": "PUT",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{transactionRequestId}}\",\n    \"transactionRequestState\": \"RECEIVED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests/{{transactionRequestId}}",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests",
										"{{transactionRequestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check transactionRequest state",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49eedeb8-3e37-486c-a660-d7354a5437ca",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/transactionRequests/callbacks/\"+pm.environment.get(\"transactionRequestId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            const responseJson = response.json()",
											"            const headers = responseJson.headers",
											"            const data = responseJson.data",
											"            ",
											"            console.log(data);",
											"            ",
											"            pm.test(\"Callback received in the Simulator\", function () {",
											"                pm.expect(data).not.equal(undefined);",
											"            });",
											"            ",
											"            pm.test(\"transactionId matches\", function () {",
											"                pm.expect(data['transactionId']).to.eql(pm.environment.get(\"transactionRequestId\"));",
											"            });",
											"                ",
											"            pm.test(\"fspiop-source is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            pm.test(\"content-type is same as sent in the request\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transactionRequests+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"transactionRequestState is RECEIVED\", function () {",
											"                pm.expect(data['transactionRequestState']).to.eql('RECEIVED');",
											"            });",
											"            ",
											"      } else {",
											"          pm.test(\"Transaction Request FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"          });",
											"      }",
											"       ",
											"  });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ad82e307-6686-434f-95c3-fd7c2b9d60da",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "/transactionRequests",
										"type": "text"
									},
									{
										"key": "fspiop-http-method",
										"value": "GET",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests/{{transactionRequestId}}",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests",
										"{{transactionRequestId}}"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "reject State",
					"item": [
						{
							"name": "Payee initiate request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72216d31-f788-4144-8082-4c809eb33038",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/transactionRequests/callbacks/\"+pm.environment.get(\"transactionRequestId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            const responseJson = response.json()",
											"            const headers = responseJson.headers",
											"            const data = responseJson.data",
											"            ",
											"            pm.test(\"Callback received in the Simulator\", function () {",
											"                pm.expect(data).not.equal(undefined);",
											"            });",
											"            ",
											"            pm.test(\"transactionId matches\", function () {",
											"                pm.expect(data['transactionId']).to.eql(pm.environment.get(\"transactionRequestId\"));",
											"            });",
											"                ",
											"            pm.test(\"fspiop-source is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-destination is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            pm.test(\"content-type is same as sent in the request\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transactionRequests+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"transactionRequestState is RECEIVED\", function () {",
											"                pm.expect(data['transactionRequestState']).to.eql('RECEIVED');",
											"            });",
											"            ",
											"      } else {",
											"          pm.test(\"Transaction Request FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"          });",
											"      }",
											"       ",
											"  });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e429437c-31c1-4426-9172-6294ebf9da03",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);",
											"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-destination",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-http-method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionRequestId\": \"{{transactionRequestId}}\",\n    \"payee\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"PERSONAL_ID\",\n            \"partyIdentifier\": \"16135551212\",\n            \"partySubIdOrType\": \"DRIVING_LICENSE\",\n            \"fspId\": \"1234\"\n        },\n        \"merchantClassificationCode\": \"4321\",\n        \"name\": \"Justin Trudeau\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"Justin\",\n                \"middleName\": \"Pierre\",\n                \"lastName\": \"Trudeau\"\n            },\n            \"dateOfBirth\": \"1971-12-25\"\n        }\n    },\n    \"payer\": {\n        \"partyIdType\": \"PERSONAL_ID\",\n        \"partyIdentifier\": \"16135551212\",\n        \"partySubIdOrType\": \"DRIVING_LICENSE\",\n        \"fspId\": \"1234\"\n    },\n    \"amount\": {\n        \"currency\": \"USD\",\n        \"amount\": \"123.45\"\n    },\n    \"transactionType\": {\n        \"scenario\": \"DEPOSIT\",\n        \"subScenario\": \"CUSTOM_SUBSCENARIO\",\n        \"initiator\": \"PAYEE\",\n        \"initiatorType\": \"CONSUMER\",\n        \"refundInfo\": {\n            \"originalTransactionId\": \"{{transactionRequestId}}\",\n            \"refundReason\": \"free text indicating reason for the refund\"\n        },\n        \"balanceOfPayments\": \"123\"\n    },\n    \"note\": \"Free-text memo\",\n    \"geoCode\": {\n        \"latitude\": \"+45.4215\",\n        \"longitude\": \"+75.6972\"\n    },\n    \"authenticationType\": \"OTP\",\n     \"expiration\": \"{{transferExpiration}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check transactionRequest state",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25cc5859-35cf-45e1-a851-d37c5fd5b998",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/transactionRequests/callbacks/\"+pm.environment.get(\"transactionRequestId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            const responseJson = response.json()",
											"            const headers = responseJson.headers",
											"            const data = responseJson.data",
											"            ",
											"            console.log(data);",
											"            ",
											"            pm.test(\"Callback received in the Simulator\", function () {",
											"                pm.expect(data).not.equal(undefined);",
											"            });",
											"            ",
											"            pm.test(\"transactionId matches\", function () {",
											"                pm.expect(data['transactionId']).to.eql(pm.environment.get(\"transactionRequestId\"));",
											"            });",
											"                ",
											"            pm.test(\"fspiop-source is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            pm.test(\"content-type is same as sent in the request\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transactionRequests+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"transactionRequestState is RECEIVED\", function () {",
											"                pm.expect(data['transactionRequestState']).to.eql('RECEIVED');",
											"            });",
											"            ",
											"      } else {",
											"          pm.test(\"Transaction Request FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"          });",
											"      }",
											"       ",
											"  });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0d6c7222-bdd6-4a59-83e1-122461bdc7be",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "/transactionRequests",
										"type": "text"
									},
									{
										"key": "fspiop-http-method",
										"value": "GET",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests/{{transactionRequestId}}",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests",
										"{{transactionRequestId}}"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send REJECT state",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c2f36086-fa09-4508-b234-01048b48937f",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a3efd6c2-bfcd-4b0e-a26a-79e9909002cd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/transactionRequests/callbacks/\"+pm.environment.get(\"transactionRequestId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            const responseJson = response.json()",
											"            const headers = responseJson.headers",
											"            const data = responseJson.data",
											"            ",
											"            pm.test(\"Callback received in the Simulator\", function () {",
											"                pm.expect(data).not.equal(undefined);",
											"            });",
											"            ",
											"            pm.test(\"transactionId matches\", function () {",
											"                pm.expect(data['transactionId']).to.eql(pm.environment.get(\"transactionRequestId\"));",
											"            });",
											"                ",
											"            pm.test(\"fspiop-source is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-destination is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            pm.test(\"content-type is same as sent in the request\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transactionRequests+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"transactionRequestState is REJECTED\", function () {",
											"                pm.expect(data['transactionRequestState']).to.eql('REJECTED');",
											"            });",
											"            ",
											"      } else {",
											"          pm.test(\"Transaction Request FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"          });",
											"      }",
											"       ",
											"  });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transactionRequestDate}}"
									},
									{
										"key": "fspiop-source",
										"type": "text",
										"value": "{{payerfsp}}"
									},
									{
										"key": "fspiop-destination",
										"type": "text",
										"value": "{{payeefsp}}"
									},
									{
										"key": "fspiop-signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									},
									{
										"key": "fspiop-uri",
										"type": "text",
										"value": "/transactionRequests/{{transactionRequestId}}"
									},
									{
										"key": "fspiop-http-method",
										"type": "text",
										"value": "PUT"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{transactionRequestId}}\",\n    \"transactionRequestState\": \"REJECTED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests/{{transactionRequestId}}",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests",
										"{{transactionRequestId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "96f82564-1731-4d46-8312-a58d6ee4dd51",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a969c078-7729-4f5b-b845-885feb11b053",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "error framework",
					"item": [
						{
							"name": "Check unknown transactionID - error code and description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "476dfd35-aedc-4b49-bba9-da75ad7c322a",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/transactionRequests/callbacks/\"+pm.environment.get(\"transactionRequestId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            const responseJson = response.json()",
											"            const headers = responseJson.headers",
											"            const data = responseJson.data",
											"            ",
											"            console.log(data);",
											"            ",
											"            pm.test(\"Callback received in the Simulator\", function () {",
											"                pm.expect(data).not.equal(undefined);",
											"            });",
											"            ",
											"            pm.test(\"transactionId matches\", function () {",
											"                pm.expect(data['transactionId']).to.eql(undefined);",
											"            });",
											"                ",
											"            pm.test(\"fspiop-source is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-destination is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            pm.test(\"content-type is same as sent in the request\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transactionRequests+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"Check ID missing\", function () {",
											"                pm.expect(data.errorInformation.errorDescription).to.include('Transaction request ID not found ');",
											"            });",
											"",
											"            pm.test(\"Check Error code 3003\", function () {",
											"                pm.expect(data.errorInformation.errorCode).to.eql('3206');",
											"            });",
											"            ",
											"      } else {",
											"          pm.test(\"Transaction Request FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"          });",
											"      }",
											"       ",
											"  });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8e89d571-206a-48d5-adac-9f00e5b9cfd8",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transactionRequestDate}}"
									},
									{
										"key": "fspiop-source",
										"type": "text",
										"value": "{{payeefsp}}"
									},
									{
										"key": "fspiop-destination",
										"type": "text",
										"value": "{{payerfsp}}"
									},
									{
										"key": "fspiop-signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									},
									{
										"key": "fspiop-uri",
										"type": "text",
										"value": "/transactionRequests"
									},
									{
										"key": "fspiop-http-method",
										"type": "text",
										"value": "GET"
									}
								],
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests/{{transactionRequestId}}",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests",
										"{{transactionRequestId}}"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3100 - Missing body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3bf86bd-5445-4c98-a048-f3c9af30c8a7",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check Malformed syntax error \", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax ');",
											"});",
											"",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0c324e95-b67c-4242-b942-19cdf3de2c19",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "Content-Length",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-forwarded-for",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-encryption",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-http-method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Date ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51fe7509-6739-4d58-8483-afde13f110b1",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Missing mandatory element error\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
											"});",
											"",
											"pm.test(\"Error message date is required\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('date');",
											"});",
											"",
											"pm.test(\"Check Error code 3102\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0584c352-24ba-41a2-b390-5d8d69e8c5b0",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "Content-Length",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-forwarded-for",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-encryption",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-http-method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionRequestId\": \"{{transactionRequestId}}\",\n    \"payee\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"PERSONAL_ID\",\n            \"partyIdentifier\": \"16135551212\",\n            \"partySubIdOrType\": \"DRIVING_LICENSE\",\n            \"fspId\": \"1234\"\n        },\n        \"merchantClassificationCode\": \"4321\",\n        \"name\": \"Justin Trudeau\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"Justin\",\n                \"middleName\": \"Pierre\",\n                \"lastName\": \"Trudeau\"\n            },\n            \"dateOfBirth\": \"1971-12-25\"\n        }\n    },\n    \"payer\": {\n        \"partyIdType\": \"PERSONAL_ID\",\n        \"partyIdentifier\": \"16135551212\",\n        \"partySubIdOrType\": \"DRIVING_LICENSE\",\n        \"fspId\": \"1234\"\n    },\n    \"amount\": {\n        \"currency\": \"USD\",\n        \"amount\": \"123.45\"\n    },\n    \"transactionType\": {\n        \"scenario\": \"DEPOSIT\",\n        \"subScenario\": \"locally defined sub-scenario\",\n        \"initiator\": \"PAYEE\",\n        \"initiatorType\": \"CONSUMER\",\n        \"refundInfo\": {\n            \"originalTransactionId\": \"{{transactionRequestId}}\",\n            \"refundReason\": \"free text indicating reason for the refund\"\n        },\n        \"balanceOfPayments\": \"123\"\n    },\n    \"note\": \"Free-text memo\",\n    \"geoCode\": {\n        \"latitude\": \"+45.4215\",\n        \"longitude\": \"+75.6972\"\n    },\n    \"authenticationType\": \"OTP\",\n    \"expiration\": \"2016-05-24T08:38:08.699-04:00\",\n    \"extensionList\": {\n        \"extension\": [\n            {\n                \"key\": \"errorDescription\",\n                \"value\": \"This is a more detailed error description\"\n            },\n            {\n                \"key\": \"errorDescription\",\n                \"value\": \"This is a more detailed error description\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing fspiop-source",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dce19395-bbc9-4dc6-bfad-fad2d0b8731a",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Missing mandatory element error\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
											"});",
											"",
											"pm.test(\"Error message fspiop-source is required\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('fspiop-source');",
											"});",
											"",
											"pm.test(\"Check Error code 3102\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7d415e47-dc60-4aa3-816c-35328fcbd064",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Length",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-forwarded-for",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-encryption",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-http-method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionRequestId\": \"{{transactionRequestId}}\",\n    \"payee\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"PERSONAL_ID\",\n            \"partyIdentifier\": \"16135551212\",\n            \"partySubIdOrType\": \"DRIVING_LICENSE\",\n            \"fspId\": \"1234\"\n        },\n        \"merchantClassificationCode\": \"4321\",\n        \"name\": \"Justin Trudeau\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"Justin\",\n                \"middleName\": \"Pierre\",\n                \"lastName\": \"Trudeau\"\n            },\n            \"dateOfBirth\": \"1971-12-25\"\n        }\n    },\n    \"payer\": {\n        \"partyIdType\": \"PERSONAL_ID\",\n        \"partyIdentifier\": \"16135551212\",\n        \"partySubIdOrType\": \"DRIVING_LICENSE\",\n        \"fspId\": \"1234\"\n    },\n    \"amount\": {\n        \"currency\": \"USD\",\n        \"amount\": \"123.45\"\n    },\n    \"transactionType\": {\n        \"scenario\": \"DEPOSIT\",\n        \"subScenario\": \"locally defined sub-scenario\",\n        \"initiator\": \"PAYEE\",\n        \"initiatorType\": \"CONSUMER\",\n        \"refundInfo\": {\n            \"originalTransactionId\": \"{{transactionRequestId}}\",\n            \"refundReason\": \"free text indicating reason for the refund\"\n        },\n        \"balanceOfPayments\": \"123\"\n    },\n    \"note\": \"Free-text memo\",\n    \"geoCode\": {\n        \"latitude\": \"+45.4215\",\n        \"longitude\": \"+75.6972\"\n    },\n    \"authenticationType\": \"OTP\",\n    \"expiration\": \"2016-05-24T08:38:08.699-04:00\",\n    \"extensionList\": {\n        \"extension\": [\n            {\n                \"key\": \"errorDescription\",\n                \"value\": \"This is a more detailed error description\"\n            },\n            {\n                \"key\": \"errorDescription\",\n                \"value\": \"This is a more detailed error description\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong content version ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1134126c-edbb-43e2-83e6-fd61765e525b",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 406\", function () {",
											"    pm.response.to.have.status(406);",
											"});",
											"",
											"pm.test(\"Check Unacceptable version requested\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unacceptable version requested');",
											"});",
											"",
											"pm.test(\"Check Error code 3001\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3001');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f05dd0de-931f-486c-b8fb-c6b6b534d862",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=4.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "Content-Length",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-forwarded-for",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-encryption",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-http-method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionRequestId\": \"{{transactionRequestId}}\",\n    \"payee\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"PERSONAL_ID\",\n            \"partyIdentifier\": \"16135551212\",\n            \"partySubIdOrType\": \"DRIVING_LICENSE\",\n            \"fspId\": \"1234\"\n        },\n        \"merchantClassificationCode\": \"4321\",\n        \"name\": \"Justin Trudeau\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"Justin\",\n                \"middleName\": \"Pierre\",\n                \"lastName\": \"Trudeau\"\n            },\n            \"dateOfBirth\": \"1971-12-25\"\n        }\n    },\n    \"payer\": {\n        \"partyIdType\": \"PERSONAL_ID\",\n        \"partyIdentifier\": \"16135551212\",\n        \"partySubIdOrType\": \"DRIVING_LICENSE\",\n        \"fspId\": \"1234\"\n    },\n    \"amount\": {\n        \"currency\": \"USD\",\n        \"amount\": \"123.45\"\n    },\n    \"transactionType\": {\n        \"scenario\": \"DEPOSIT\",\n        \"subScenario\": \"locally defined sub-scenario\",\n        \"initiator\": \"PAYEE\",\n        \"initiatorType\": \"CONSUMER\",\n        \"refundInfo\": {\n            \"originalTransactionId\": \"{{transactionRequestId}}\",\n            \"refundReason\": \"free text indicating reason for the refund\"\n        },\n        \"balanceOfPayments\": \"123\"\n    },\n    \"note\": \"Free-text memo\",\n    \"geoCode\": {\n        \"latitude\": \"+45.4215\",\n        \"longitude\": \"+75.6972\"\n    },\n    \"authenticationType\": \"OTP\",\n    \"expiration\": \"2016-05-24T08:38:08.699-04:00\",\n    \"extensionList\": {\n        \"extension\": [\n            {\n                \"key\": \"errorDescription\",\n                \"value\": \"This is a more detailed error description\"\n            },\n            {\n                \"key\": \"errorDescription\",\n                \"value\": \"This is a more detailed error description\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unsupported Media Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e285790b-2055-4862-9bac-dacdaeeb205c",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check Malformed syntax - Unsupported Media Type\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax - Unsupported Media Type');",
											"});",
											"",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1012763c-6300-4771-be85-fc389d5166f1",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+xml;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "Content-Length",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-forwarded-for",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-encryption",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-http-method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionRequestId\": \"{{transactionRequestId}}\",\n    \"payee\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"PERSONAL_ID\",\n            \"partyIdentifier\": \"16135551212\",\n            \"partySubIdOrType\": \"DRIVING_LICENSE\",\n            \"fspId\": \"1234\"\n        },\n        \"merchantClassificationCode\": \"4321\",\n        \"name\": \"Justin Trudeau\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"Justin\",\n                \"middleName\": \"Pierre\",\n                \"lastName\": \"Trudeau\"\n            },\n            \"dateOfBirth\": \"1971-12-25\"\n        }\n    },\n    \"payer\": {\n        \"partyIdType\": \"PERSONAL_ID\",\n        \"partyIdentifier\": \"16135551212\",\n        \"partySubIdOrType\": \"DRIVING_LICENSE\",\n        \"fspId\": \"1234\"\n    },\n    \"amount\": {\n        \"currency\": \"USD\",\n        \"amount\": \"123.45\"\n    },\n    \"transactionType\": {\n        \"scenario\": \"DEPOSIT\",\n        \"subScenario\": \"locally defined sub-scenario\",\n        \"initiator\": \"PAYEE\",\n        \"initiatorType\": \"CONSUMER\",\n        \"refundInfo\": {\n            \"originalTransactionId\": \"{{transactionRequestId}}\",\n            \"refundReason\": \"free text indicating reason for the refund\"\n        },\n        \"balanceOfPayments\": \"123\"\n    },\n    \"note\": \"Free-text memo\",\n    \"geoCode\": {\n        \"latitude\": \"+45.4215\",\n        \"longitude\": \"+75.6972\"\n    },\n    \"authenticationType\": \"OTP\",\n    \"expiration\": \"2016-05-24T08:38:08.699-04:00\",\n    \"extensionList\": {\n        \"extension\": [\n            {\n                \"key\": \"errorDescription\",\n                \"value\": \"This is a more detailed error description\"\n            },\n            {\n                \"key\": \"errorDescription\",\n                \"value\": \"This is a more detailed error description\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "authorizations",
					"item": [
						{
							"name": "Error framework",
							"item": [
								{
									"name": "Check retriesLeft missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3686a4ca-0924-4ac9-8eea-bc767f214ff8",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Check Missing mandatory element\", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element'&&'retriesLeft');",
													"});",
													"",
													"pm.test(\"Check Error code 3102\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "12c2df14-41ce-4398-bca6-54dd71e951f6",
												"exec": [
													"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"",
													"pm.environment.set('transactionRequestId', generatedUUID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{transactionRequestDate}}",
												"type": "text"
											},
											{
												"key": "fspiop-source",
												"value": "{{payerfsp}}",
												"type": "text"
											},
											{
												"key": "fspiop-destination",
												"value": "{{payeefsp}}",
												"type": "text"
											},
											{
												"key": "fspiop-signature",
												"value": "{{fspiop-signature}}",
												"type": "text"
											},
											{
												"key": "fspiop-uri",
												"value": "/transactionRequests",
												"type": "text"
											},
											{
												"key": "fspiop-http-method",
												"value": "GET",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}?authenticationType=OTP&amount=102&currency=USD",
											"host": [
												"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
											],
											"path": [
												"authorizations",
												"{{transactionRequestId}}"
											],
											"query": [
												{
													"key": "authenticationType",
													"value": "OTP"
												},
												{
													"key": "amount",
													"value": "102"
												},
												{
													"key": "currency",
													"value": "USD"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check authenticationType missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bcfcf65e-ef31-445b-bcb9-c33ef805eb6c",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Check Missing mandatory element\", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element'&&'authenticationType');",
													"});",
													"",
													"pm.test(\"Check Error code 3102\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "237c7a61-8218-4eca-b3c0-3b2bb535b5f5",
												"exec": [
													"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"",
													"pm.environment.set('transactionRequestId', generatedUUID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{transactionRequestDate}}",
												"type": "text"
											},
											{
												"key": "fspiop-source",
												"value": "{{payerfsp}}",
												"type": "text"
											},
											{
												"key": "fspiop-destination",
												"value": "{{payeefsp}}",
												"type": "text"
											},
											{
												"key": "fspiop-signature",
												"value": "{{fspiop-signature}}",
												"type": "text"
											},
											{
												"key": "fspiop-uri",
												"value": "/transactionRequests",
												"type": "text"
											},
											{
												"key": "fspiop-http-method",
												"value": "GET",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}?retriesLeft=2&amount=102&currency=USD",
											"host": [
												"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
											],
											"path": [
												"authorizations",
												"{{transactionRequestId}}"
											],
											"query": [
												{
													"key": "retriesLeft",
													"value": "2"
												},
												{
													"key": "amount",
													"value": "102"
												},
												{
													"key": "currency",
													"value": "USD"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check currency missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8c4a3f6-1dd0-4321-8279-af163bc4a551",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Check Missing mandatory element\", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element'&&'currency');",
													"});",
													"",
													"pm.test(\"Check Error code 3102\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c4ed30d0-7592-4ff8-93b8-578d460d998c",
												"exec": [
													"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"",
													"pm.environment.set('transactionRequestId', generatedUUID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{transactionRequestDate}}",
												"type": "text"
											},
											{
												"key": "fspiop-source",
												"value": "{{payerfsp}}",
												"type": "text"
											},
											{
												"key": "fspiop-destination",
												"value": "{{payeefsp}}",
												"type": "text"
											},
											{
												"key": "fspiop-signature",
												"value": "{{fspiop-signature}}",
												"type": "text"
											},
											{
												"key": "fspiop-uri",
												"value": "/transactionRequests",
												"type": "text"
											},
											{
												"key": "fspiop-http-method",
												"value": "GET",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}?authenticationType=OTP&retriesLeft=2&amount=102",
											"host": [
												"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
											],
											"path": [
												"authorizations",
												"{{transactionRequestId}}"
											],
											"query": [
												{
													"key": "authenticationType",
													"value": "OTP"
												},
												{
													"key": "retriesLeft",
													"value": "2"
												},
												{
													"key": "amount",
													"value": "102"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check retriesLeft with non-number ",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9386ff6a-ee10-44ef-a5a8-d367dbd983b5",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Check Malformed syntax \", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax '&&'retriesLeft');",
													"});",
													"",
													"pm.test(\"Check Error code 3101\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e5d011b-19d6-4619-9cf2-588a24ece221",
												"exec": [
													"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"",
													"pm.environment.set('transactionRequestId', generatedUUID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transactionRequestDate}}"
											},
											{
												"key": "fspiop-source",
												"type": "text",
												"value": "{{payerfsp}}"
											},
											{
												"key": "fspiop-destination",
												"type": "text",
												"value": "{{payeefsp}}"
											},
											{
												"key": "fspiop-signature",
												"type": "text",
												"value": "{{fspiop-signature}}"
											},
											{
												"key": "fspiop-uri",
												"type": "text",
												"value": "/transactionRequests"
											},
											{
												"key": "fspiop-http-method",
												"type": "text",
												"value": "GET"
											}
										],
										"url": {
											"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}?authenticationType=OTP&retriesLeft=g&amount=102&currency=USD",
											"host": [
												"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
											],
											"path": [
												"authorizations",
												"{{transactionRequestId}}"
											],
											"query": [
												{
													"key": "authenticationType",
													"value": "OTP"
												},
												{
													"key": "retriesLeft",
													"value": "g"
												},
												{
													"key": "amount",
													"value": "102"
												},
												{
													"key": "currency",
													"value": "USD"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check retriesLeft with floating number",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1673ea1-e479-4e14-b87b-da68195f5431",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Check Malformed syntax with floating retriesLeft\", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('retriesLeft');",
													"});",
													"",
													"pm.test(\"Check Error code 3101\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5e78eaa8-dfa4-4dd3-939b-9cbdb9441535",
												"exec": [
													"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"",
													"pm.environment.set('transactionRequestId', generatedUUID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transactionRequestDate}}"
											},
											{
												"key": "fspiop-source",
												"type": "text",
												"value": "{{payerfsp}}"
											},
											{
												"key": "fspiop-destination",
												"type": "text",
												"value": "{{payeefsp}}"
											},
											{
												"key": "fspiop-signature",
												"type": "text",
												"value": "{{fspiop-signature}}"
											},
											{
												"key": "fspiop-uri",
												"type": "text",
												"value": "/transactionRequests"
											},
											{
												"key": "fspiop-http-method",
												"type": "text",
												"value": "GET"
											}
										],
										"url": {
											"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}?authenticationType=OTP&retriesLeft=1.5&amount=102&currency=USD",
											"host": [
												"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
											],
											"path": [
												"authorizations",
												"{{transactionRequestId}}"
											],
											"query": [
												{
													"key": "authenticationType",
													"value": "OTP"
												},
												{
													"key": "retriesLeft",
													"value": "1.5"
												},
												{
													"key": "amount",
													"value": "102"
												},
												{
													"key": "currency",
													"value": "USD"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check wrong authentication type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64035716-e2fa-4615-af14-6894396754e6",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Check Generic validation error \", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Generic validation error '&&'authenticationType');",
													"});",
													"",
													"pm.test(\"Check Error code 3100\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3100');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "516782b6-231c-4896-b560-bc316a5617a6",
												"exec": [
													"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"",
													"pm.environment.set('transactionRequestId', generatedUUID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transactionRequestDate}}"
											},
											{
												"key": "fspiop-source",
												"type": "text",
												"value": "{{payerfsp}}"
											},
											{
												"key": "fspiop-destination",
												"type": "text",
												"value": "{{payeefsp}}"
											},
											{
												"key": "fspiop-signature",
												"type": "text",
												"value": "{{fspiop-signature}}"
											},
											{
												"key": "fspiop-uri",
												"type": "text",
												"value": "/transactionRequests"
											},
											{
												"key": "fspiop-http-method",
												"type": "text",
												"value": "GET"
											}
										],
										"url": {
											"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}?authenticationType=XTP&retriesLeft=2&amount=102&currency=USD",
											"host": [
												"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
											],
											"path": [
												"authorizations",
												"{{transactionRequestId}}"
											],
											"query": [
												{
													"key": "authenticationType",
													"value": "XTP"
												},
												{
													"key": "retriesLeft",
													"value": "2"
												},
												{
													"key": "amount",
													"value": "102"
												},
												{
													"key": "currency",
													"value": "USD"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check accept header missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6bb83b9a-a752-49b3-afc0-fe8124bbb3e8",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Check Missing mandatory element - Accept \", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Accept is required');",
													"});",
													"",
													"pm.test(\"Check Error code 3102\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "795ff603-293f-4ecb-b0b3-b907f150df9a",
												"exec": [
													"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"",
													"pm.environment.set('transactionRequestId', generatedUUID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept-encoding": true,
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{transactionRequestDate}}",
												"type": "text"
											},
											{
												"key": "fspiop-source",
												"value": "{{payerfsp}}",
												"type": "text"
											},
											{
												"key": "fspiop-destination",
												"value": "{{payeefsp}}",
												"type": "text"
											},
											{
												"key": "fspiop-signature",
												"value": "{{fspiop-signature}}",
												"type": "text"
											},
											{
												"key": "fspiop-uri",
												"value": "/transactionRequests",
												"type": "text"
											},
											{
												"key": "fspiop-http-method",
												"value": "GET",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}?authenticationType=OTP&retriesLeft=2&amount=102&currency=USD",
											"host": [
												"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
											],
											"path": [
												"authorizations",
												"{{transactionRequestId}}"
											],
											"query": [
												{
													"key": "authenticationType",
													"value": "OTP"
												},
												{
													"key": "retriesLeft",
													"value": "2"
												},
												{
													"key": "amount",
													"value": "102"
												},
												{
													"key": "currency",
													"value": "USD"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check date missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd713b0d-22f8-4c75-b005-542653d0d99d",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Check Missing mandatory element \", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Generic validation error '&&'date');",
													"});",
													"",
													"pm.test(\"Check Error code 3102\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6ecd4bad-82a5-4433-81f6-6c2896e5b1fa",
												"exec": [
													"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"",
													"pm.environment.set('transactionRequestId', generatedUUID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transactionRequestDate}}",
												"disabled": true
											},
											{
												"key": "fspiop-source",
												"type": "text",
												"value": "{{payerfsp}}"
											},
											{
												"key": "fspiop-destination",
												"type": "text",
												"value": "{{payeefsp}}"
											},
											{
												"key": "fspiop-signature",
												"type": "text",
												"value": "{{fspiop-signature}}"
											},
											{
												"key": "fspiop-uri",
												"type": "text",
												"value": "/transactionRequests"
											},
											{
												"key": "fspiop-http-method",
												"type": "text",
												"value": "GET"
											}
										],
										"url": {
											"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}?authenticationType=OTP&retriesLeft=2&amount=102&currency=USD",
											"host": [
												"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
											],
											"path": [
												"authorizations",
												"{{transactionRequestId}}"
											],
											"query": [
												{
													"key": "authenticationType",
													"value": "OTP"
												},
												{
													"key": "retriesLeft",
													"value": "2"
												},
												{
													"key": "amount",
													"value": "102"
												},
												{
													"key": "currency",
													"value": "USD"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check fspiop-source missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96beb1da-ad46-4fc7-afa8-b5f170298231",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Check Missing mandatory element \", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Generic validation error '&&'fspiop-source');",
													"});",
													"",
													"pm.test(\"Check Error code 3102\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1ae663b8-1730-49de-bc16-ececf2f7c166",
												"exec": [
													"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"",
													"pm.environment.set('transactionRequestId', generatedUUID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transactionRequestDate}}"
											},
											{
												"key": "fspiop-source",
												"type": "text",
												"value": "{{payerfsp}}",
												"disabled": true
											},
											{
												"key": "fspiop-destination",
												"type": "text",
												"value": "{{payeefsp}}"
											},
											{
												"key": "fspiop-signature",
												"type": "text",
												"value": "{{fspiop-signature}}"
											},
											{
												"key": "fspiop-uri",
												"type": "text",
												"value": "/transactionRequests"
											},
											{
												"key": "fspiop-http-method",
												"type": "text",
												"value": "GET"
											}
										],
										"url": {
											"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}?authenticationType=OTP&retriesLeft=2&amount=102&currency=USD",
											"host": [
												"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
											],
											"path": [
												"authorizations",
												"{{transactionRequestId}}"
											],
											"query": [
												{
													"key": "authenticationType",
													"value": "OTP"
												},
												{
													"key": "retriesLeft",
													"value": "2"
												},
												{
													"key": "amount",
													"value": "102"
												},
												{
													"key": "currency",
													"value": "USD"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check ID missingv-Unknown URI",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37fa1bef-6ff4-437f-b74a-c57ee18342c2",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Check Unknown URI \", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unknown URI');",
													"});",
													"",
													"pm.test(\"Check Error code 3002\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3002');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a3a3c846-8228-444e-afb8-50aa9e025b6c",
												"exec": [
													"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"",
													"pm.environment.set('transactionRequestId', generatedUUID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{transactionRequestDate}}",
												"type": "text"
											},
											{
												"key": "fspiop-source",
												"value": "{{payerfsp}}",
												"type": "text"
											},
											{
												"key": "fspiop-destination",
												"value": "{{payeefsp}}",
												"type": "text"
											},
											{
												"key": "fspiop-signature",
												"value": "{{fspiop-signature}}",
												"type": "text"
											},
											{
												"key": "fspiop-uri",
												"value": "/transactionRequests",
												"type": "text"
											},
											{
												"key": "fspiop-http-method",
												"value": "GET",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations",
											"host": [
												"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
											],
											"path": [
												"authorizations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check content-type missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9a637b6-2e0a-4369-8756-b58e894587c5",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Check authorization -Missing mandatory element-  Content-type \", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Content-type');",
													"});",
													"",
													"pm.test(\"Check authorization - Missing mandatory element - Error code 3102\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6f07e2d6-2edd-4dd2-994c-fb7747349984",
												"exec": [
													"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"",
													"pm.environment.set('transactionRequestId', generatedUUID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transactionRequests+json;version=3.0",
												"disabled": true
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transactionRequestDate}}"
											},
											{
												"key": "fspiop-source",
												"type": "text",
												"value": "{{payerfsp}}"
											},
											{
												"key": "fspiop-destination",
												"type": "text",
												"value": "{{payeefsp}}"
											},
											{
												"key": "fspiop-signature",
												"type": "text",
												"value": "{{fspiop-signature}}"
											},
											{
												"key": "fspiop-uri",
												"type": "text",
												"value": "/transactionRequests"
											},
											{
												"key": "fspiop-http-method",
												"type": "text",
												"value": "GET"
											}
										],
										"url": {
											"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}?authenticationType=OTP&retriesLeft=2&amount=102&currency=USD",
											"host": [
												"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
											],
											"path": [
												"authorizations",
												"{{transactionRequestId}}"
											],
											"query": [
												{
													"key": "authenticationType",
													"value": "OTP"
												},
												{
													"key": "retriesLeft",
													"value": "2"
												},
												{
													"key": "amount",
													"value": "102"
												},
												{
													"key": "currency",
													"value": "USD"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check Authorizations  - Unacceptable content version",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cb8e719-dd35-439d-a675-8c3f6c5719d2",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 406\", function () {",
													"    pm.response.to.have.status(406);",
													"});",
													"",
													"pm.test(\"Check authorization - Unacceptable version requested  \", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unacceptable version requested ');",
													"});",
													"",
													"pm.test(\"Check authorization - Unacceptable version requested  - Error code 3001\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3001');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cbd5ce49-fcbd-4f2a-84df-662972ec48f2",
												"exec": [
													"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"",
													"pm.environment.set('transactionRequestId', generatedUUID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.authorizations+json;version=4.0"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transactionRequestDate}}"
											},
											{
												"key": "fspiop-source",
												"type": "text",
												"value": "{{payerfsp}}"
											},
											{
												"key": "fspiop-destination",
												"type": "text",
												"value": "{{payeefsp}}"
											},
											{
												"key": "fspiop-signature",
												"type": "text",
												"value": "{{fspiop-signature}}"
											},
											{
												"key": "fspiop-uri",
												"type": "text",
												"value": "/transactionRequests"
											},
											{
												"key": "fspiop-http-method",
												"type": "text",
												"value": "GET"
											}
										],
										"url": {
											"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}?authenticationType=OTP&retriesLeft=2&amount=102&currency=USD",
											"host": [
												"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
											],
											"path": [
												"authorizations",
												"{{transactionRequestId}}"
											],
											"query": [
												{
													"key": "authenticationType",
													"value": "OTP"
												},
												{
													"key": "retriesLeft",
													"value": "2"
												},
												{
													"key": "amount",
													"value": "102"
												},
												{
													"key": "currency",
													"value": "USD"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Check Authorizatons - wrong responseType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e691a1d5-4257-4ac3-acae-7e5d1f9704b2",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6de9d780-acc9-4c01-a0cd-6071c2791e36",
												"exec": [
													"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"",
													"pm.environment.set('transactionRequestId', generatedUUID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{transactionRequestDate}}",
												"type": "text"
											},
											{
												"key": "fspiop-source",
												"value": "{{payeefsp}}",
												"type": "text"
											},
											{
												"key": "fspiop-destination",
												"value": "{{payerfsp}}",
												"type": "text"
											},
											{
												"key": "fspiop-signature",
												"value": "{{fspiop-signature}}",
												"type": "text"
											},
											{
												"key": "fspiop-uri",
												"value": "/transactionRequests",
												"type": "text"
											},
											{
												"key": "fspiop-http-method",
												"value": "PUT",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"authenticationInfo\": {\n    \"authentication\": \"OTP\",\n    \"authenticationValue\": \"234567\"\n  },\n  \"responseType\": \"WHAT\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}",
											"host": [
												"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
											],
											"path": [
												"authorizations",
												"{{transactionRequestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check authentication missing - 400 - 3102 Error code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92a6fe98-98c9-449b-aa43-8da5d2fab06a",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Check Missing mandatory element - authentication \", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('authentication');",
													"});",
													"",
													"pm.test(\"Check Error code 3102\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f1065fd7-ff78-4a4d-b8ae-19916cecbcaf",
												"exec": [
													"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"",
													"pm.environment.set('transactionRequestId', generatedUUID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{transactionRequestDate}}",
												"type": "text"
											},
											{
												"key": "fspiop-source",
												"value": "{{payeefsp}}",
												"type": "text"
											},
											{
												"key": "fspiop-destination",
												"value": "{{payerfsp}}",
												"type": "text"
											},
											{
												"key": "fspiop-signature",
												"value": "{{fspiop-signature}}",
												"type": "text"
											},
											{
												"key": "fspiop-uri",
												"value": "/transactionRequests",
												"type": "text"
											},
											{
												"key": "fspiop-http-method",
												"value": "PUT",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"authenticationInfo\": {\n    \"authenticationValue\": \"234567\"\n  },\n  \"responseType\": \"REJECTED\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}",
											"host": [
												"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
											],
											"path": [
												"authorizations",
												"{{transactionRequestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check authenticationValue missing - 400 - 3102 Error code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9951c03-ef9d-4272-9199-dea041d1ac9e",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Check Missing mandatory element - authenticationValue \", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('authenticationValue');",
													"});",
													"",
													"pm.test(\"Check Error code 3102\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "78c7174e-58a5-4571-9a13-4905e55a9c4c",
												"exec": [
													"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"",
													"pm.environment.set('transactionRequestId', generatedUUID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transactionRequestDate}}"
											},
											{
												"key": "fspiop-source",
												"type": "text",
												"value": "{{payeefsp}}"
											},
											{
												"key": "fspiop-destination",
												"type": "text",
												"value": "{{payerfsp}}"
											},
											{
												"key": "fspiop-signature",
												"type": "text",
												"value": "{{fspiop-signature}}"
											},
											{
												"key": "fspiop-uri",
												"type": "text",
												"value": "/transactionRequests"
											},
											{
												"key": "fspiop-http-method",
												"type": "text",
												"value": "PUT"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"authenticationInfo\": {\n    \"authentication\": \"OTP\"\n  },\n  \"responseType\": \"REJECTED\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}",
											"host": [
												"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
											],
											"path": [
												"authorizations",
												"{{transactionRequestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check responseType missing - 400 - 3102 Error code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87faa2a1-ed07-4142-b5e8-3cd2fc3027f5",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Check Missing mandatory element  - responseType \", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('responseType');",
													"});",
													"",
													"pm.test(\"Check Error code 3102\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c64af7e5-2367-4772-afcb-27d69149db92",
												"exec": [
													"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"",
													"pm.environment.set('transactionRequestId', generatedUUID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{transactionRequestDate}}",
												"type": "text"
											},
											{
												"key": "fspiop-source",
												"value": "{{payeefsp}}",
												"type": "text"
											},
											{
												"key": "fspiop-destination",
												"value": "{{payerfsp}}",
												"type": "text"
											},
											{
												"key": "fspiop-signature",
												"value": "{{fspiop-signature}}",
												"type": "text"
											},
											{
												"key": "fspiop-uri",
												"value": "/transactionRequests",
												"type": "text"
											},
											{
												"key": "fspiop-http-method",
												"value": "PUT",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"authenticationInfo\": {\n    \"authentication\": \"OTP\",\n    \"authenticationValue\": \"234567\"\n  }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}",
											"host": [
												"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
											],
											"path": [
												"authorizations",
												"{{transactionRequestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check authorization with content-type header missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8665df97-64b7-4501-8f7c-40656eabd480",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Check authorization -Missing mandatory element-  Content-type \", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Content-type');",
													"});",
													"",
													"pm.test(\"Check authorization - Missing mandatory element - Error code 3102\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "32d6dc4d-1170-4b95-853a-8868aeae7861",
												"exec": [
													"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"",
													"pm.environment.set('transactionRequestId', generatedUUID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"content-length": true,
											"content-type": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Date",
												"value": "{{transactionRequestDate}}",
												"type": "text"
											},
											{
												"key": "fspiop-source",
												"value": "{{payeefsp}}",
												"type": "text"
											},
											{
												"key": "fspiop-destination",
												"value": "{{payerfsp}}",
												"type": "text"
											},
											{
												"key": "fspiop-signature",
												"value": "{{fspiop-signature}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "fspiop-uri",
												"value": "/transactionRequests",
												"type": "text",
												"disabled": true
											},
											{
												"key": "fspiop-http-method",
												"value": "PUT",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"authenticationInfo\": {\n    \"authentication\": \"OTP\",\n    \"authenticationValue\": \"234567\"\n  },\n  \"responseType\": \"REJECTED\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}",
											"host": [
												"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
											],
											"path": [
												"authorizations",
												"{{transactionRequestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check authorization with date header missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f82242f0-31d8-46c3-b61b-4491386f464d",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Check authorization - Missing mandatory element - date is required \", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('date'&&'Missing mandatory element');",
													"});",
													"",
													"pm.test(\"Check authorization - Missing mandatory element - Error code 3102\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "29d3c751-c94a-4459-af90-7acaa74c56bf",
												"exec": [
													"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"",
													"pm.environment.set('transactionRequestId', generatedUUID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{transactionRequestDate}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "fspiop-source",
												"value": "{{payeefsp}}",
												"type": "text"
											},
											{
												"key": "fspiop-destination",
												"value": "{{payerfsp}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "fspiop-signature",
												"value": "{{fspiop-signature}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "fspiop-uri",
												"value": "/transactionRequests",
												"type": "text",
												"disabled": true
											},
											{
												"key": "fspiop-http-method",
												"value": "PUT",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"authenticationInfo\": {\n    \"authentication\": \"OTP\",\n    \"authenticationValue\": \"234567\"\n  },\n  \"responseType\": \"REJECTED\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}",
											"host": [
												"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
											],
											"path": [
												"authorizations",
												"{{transactionRequestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check authorization with fspiop header missing ",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "30a0b6d2-bc23-482b-941f-8295b8d58cf5",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Check authorization - Missing mandatory element - fspiop-source missing\", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('fspiop-source');",
													"});",
													"",
													"pm.test(\"Check authorization - Missing mandatory element - Error code 3102\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c78a85c4-e8a0-4297-892f-6ac3c3abf9da",
												"exec": [
													"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"",
													"pm.environment.set('transactionRequestId', generatedUUID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{transactionRequestDate}}",
												"type": "text"
											},
											{
												"key": "fspiop-source",
												"value": "{{payeefsp}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "fspiop-destination",
												"value": "{{payerfsp}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "fspiop-signature",
												"value": "{{fspiop-signature}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "fspiop-uri",
												"value": "/transactionRequests",
												"type": "text",
												"disabled": true
											},
											{
												"key": "fspiop-http-method",
												"value": "PUT",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"authenticationInfo\": {\n    \"authentication\": \"OTP\",\n    \"authenticationValue\": \"234567\"\n  },\n  \"responseType\": \"REJECTED\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}",
											"host": [
												"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
											],
											"path": [
												"authorizations",
												"{{transactionRequestId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check authorization with accept header missing",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0bba686-288a-4333-aebe-4bed81a4b05b",
												"exec": [
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Check authorization - Missing mandatory element - accept header missing\", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('accept' && '');",
													"});",
													"",
													"pm.test(\"Check authorization - Missing mandatory element - Error code 3102\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "524ef32b-92b1-4498-862f-7f12f29cf294",
												"exec": [
													"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"",
													"pm.environment.set('transactionRequestId', generatedUUID);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true,
											"accept-encoding": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.authorizations+json;version=1.0"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{transactionRequestDate}}"
											},
											{
												"key": "fspiop-source",
												"type": "text",
												"value": "{{payeefsp}}"
											},
											{
												"key": "fspiop-destination",
												"type": "text",
												"value": "{{payerfsp}}",
												"disabled": true
											},
											{
												"key": "fspiop-signature",
												"type": "text",
												"value": "{{fspiop-signature}}",
												"disabled": true
											},
											{
												"key": "fspiop-uri",
												"type": "text",
												"value": "/transactionRequests",
												"disabled": true
											},
											{
												"key": "fspiop-http-method",
												"type": "text",
												"value": "PUT",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"authenticationInfo\": {\n    \"authentication\": \"OTP\",\n    \"authenticationValue\": \"234567\"\n  },\n  \"responseType\": \"REJECTED\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}",
											"host": [
												"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
											],
											"path": [
												"authorizations",
												"{{transactionRequestId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d17491f0-9dde-4e97-ab2e-fdc4a5af45d9",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1bac08e8-3d29-4527-8a9c-ae1029cd0490",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "authorizations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45f79822-3bc1-46f8-b23b-bd3d07fabfbf",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "54be8ec5-0e70-4f5d-9150-d76271b2d5b1",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.authorizations+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.authorizations+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "/authorizations",
										"type": "text"
									},
									{
										"key": "fspiop-http-method",
										"value": "GET",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}?authenticationType=OTP&retriesLeft=2&amount=102&currency=USD",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"authorizations",
										"{{transactionRequestId}}"
									],
									"query": [
										{
											"key": "authenticationType",
											"value": "OTP"
										},
										{
											"key": "retriesLeft",
											"value": "2"
										},
										{
											"key": "amount",
											"value": "102"
										},
										{
											"key": "currency",
											"value": "USD"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "authorizations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00045b23-846e-4ac5-8bdb-bd648105dec9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5325b702-82a1-4364-8c0a-403563fbbbfc",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.authorizations+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.authorizations+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-destination",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "/authorizations",
										"type": "text"
									},
									{
										"key": "fspiop-http-method",
										"value": "PUT",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"authenticationInfo\": {\n    \"authentication\": \"OTP\",\n    \"authenticationValue\": \"234567\"\n  },\n  \"responseType\": \"REJECTED\"\n}"
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"authorizations",
										"{{transactionRequestId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "quoting_service",
			"item": [
				{
					"name": "Get health status of Quoting Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa1d6049-7422-4f13-8e5e-a4a6a4f4481f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Checking data",
									"var jsonData = pm.response.json();",
									"pm.test(\"Expected Status is OK\", function () {",
									"   pm.expect(jsonData.status).to.eql(\"OK\");",
									"",
									"    pm.test(\"Expected body to have services array\", function () {",
									"       pm.expect(jsonData.services).to.be.an('array');",
									"       ",
									"        pm.test(\"Expected services to have data store and status is OK\", function () {",
									"            const datastoreOK = jsonData.services.find(item => {",
									"               return item.name=='datastore' && item.status=='OK'; ",
									"            });",
									"            pm.expect(datastoreOK).to.be.an('object');",
									"   ",
									"        });",
									"    });",
									"    ",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/health",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Send Quote",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd16a9ae-f6de-4ecd-a386-956a35de513e",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"//Check Data on payer side",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"      if(response.responseSize !== 0) {",
									"            var jsonData = response.json().data;",
									"            pm.test(\"Send Quote Amount in 4 decimal returned\", function () {",
									"                pm.expect(+jsonData.transferAmount.amount).equal(pm.environment.get(\"transferAmount\"));",
									"            });",
									"            ",
									"      } else {",
									"          pm.test(\"Quote FAILED\", function () {",
									"            throw new Error('Did not receive response');",
									"          });",
									"      }",
									"       ",
									"  });",
									"}, 1000)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5dcaf292-ea51-4d44-b661-f1abeb4fcd9c",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('transferAmount', 60.1234);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TESTFSP1_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Quote",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8aa7421d-3c97-4350-bb93-16ec05ec6d88",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"//Check Data on payer side",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"      if(response.responseSize !== 0) {",
									"            var jsonData = response.json().data;",
									"            var headers = response.json().headers;",
									"            ",
									"            pm.test(\"Send Quote Amount in 4 decimal returned\", function () {",
									"                pm.expect(+jsonData.transferAmount.amount).equal(pm.environment.get(\"transferAmount\"));",
									"            });",
									"            ",
									"                //Check the Headers",
									"                pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
									"                    pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
									"                });",
									"                ",
									"                pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
									"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
									"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
									"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
									"                });",
									"            ",
									"      } else {",
									"          pm.test(\"Quote FAILED\", function () {",
									"            throw new Error('Did not receive response');",
									"          });",
									"      }",
									"       ",
									"  });",
									"}, 1000)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b9e1e029-2e94-4b10-bba3-f86e5f21a8c0",
								"exec": [
									"// var uuid = require('uuid');",
									"// var generatedUUID = uuid.v4();",
									"",
									"// pm.environment.set('quoteId', generatedUUID);",
									"// generatedUUID = uuid.v4();",
									"// pm.environment.set('transactionId', generatedUUID);",
									"// pm.environment.set('transferAmount', 60.1234);",
									"// pm.environment.set('quoteDate', (new Date()).toUTCString());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TESTFSP1_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId}}",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes",
								"{{quoteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Send Quote - Missing Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "54b52035-c1e9-4519-8196-c2f743bf99a4",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"            ",
									"pm.test(\"Missing mandatory element error\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
									"});",
									"",
									"pm.test(\"Error message date is required\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('date');",
									"});  ",
									"",
									"pm.test(\"Check Error code 3102\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1cc49a4f-89d6-4945-b473-58f7e968a387",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('transferAmount', 60.1234);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TESTFSP1_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}",
								"disabled": true
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Send Quote - Missing Accept Header",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c628653-c330-47f3-918f-855abb95a77b",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"            ",
									"pm.test(\"Check Missing mandatory element - Invalid accept header\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax - Invalid accept header');",
									"});            ",
									"            ",
									"pm.test(\"Check Error code 3101\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9b37e565-087f-4925-8ac7-c65af43fc541",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('transferAmount', 60.1234);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TESTFSP1_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Quote - Missing content type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3feed228-7ebc-4b69-9889-ef5220f761d0",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check Missing mandatory element\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element');",
									"});",
									"",
									"pm.test(\"Check Error code 3102\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "aa870869-7c56-4e7d-9010-1c9e8154b384",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TESTFSP1_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0",
								"disabled": true
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId}}",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes",
								"{{quoteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Quote - Invalid content type ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c15c99a-02b6-4035-a897-6f48ca78b91d",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check Malformed syntax\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
									"});",
									"",
									"pm.test(\"Check Error code 3101\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eb60dc5a-2bed-425a-b5ed-372c5c38a2bc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TESTFSP1_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+xml;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId}}",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes",
								"{{quoteId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "282a1a1d-7a4f-404e-8b5b-bb14043f8f90",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "446eef95-6800-4c99-9997-1f568ba8f15f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "p2p_on_us_transfers",
			"item": [
				{
					"name": "Add User - {{pathfinderMSISDN}} to payeefsp",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6d5afc1f-d1bb-47fe-b6ed-387196b55e44",
								"exec": [
									"pm.environment.set('fullName', 'Siabelo Maroka');",
									"pm.environment.set('firstName', 'Siabelo');",
									"pm.environment.set('lastName', 'Maroka');",
									"pm.environment.set('dob', '3/3/1973');",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "744178eb-3e41-4d3e-a0d8-21c3be391a3a",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"party\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"MSISDN\",\n            \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n            \"fspId\": \"{{payeefsp}}\"\n        },\n        \"name\": \"{{fullName}}\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"dateOfBirth\": \"{{dob}}\"\n        }\n    }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{HOST_SIMULATOR}}/payeefsp/parties/MSISDN/{{pathfinderMSISDN}}",
							"host": [
								"{{HOST_SIMULATOR}}"
							],
							"path": [
								"payeefsp",
								"parties",
								"MSISDN",
								"{{pathfinderMSISDN}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Participant {{pathfinderMSISDN}} against MSISDN Simulator for PayeeFSP",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.participants+json;version=1.0"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.participants+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payeefsp"
							},
							{
								"key": "Postman-Token",
								"value": "7aa4c9f3-1738-49f0-8904-7821e2336692,4127ff87-7d17-483c-8e3e-f0b562a16d84"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.11.0"
							},
							{
								"key": "accept-encoding",
								"value": "gzip, deflate"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fspId\": \"payeefsp\",\n    \"currency\": \"USD\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"participants",
								"MSISDN",
								"{{pathfinderMSISDN}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Quote_SEND",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4da9d248-33b7-496d-a7fe-f3e931c0b031",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60.11);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b51bba9d-d274-4eea-b144-b41939505e34",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"const ON_US_TRANSFERS_ENABLED = pm.environment.get(\"ON_US_TRANSFERS_ENABLED\") && (pm.environment.get(\"ON_US_TRANSFERS_ENABLED\")===\"true\" || pm.environment.get(\"ON_US_TRANSFERS_ENABLED\")===true || pm.environment.get(\"ON_US_TRANSFERS_ENABLED\")===\"1\") ? true : false",
									"",
									"//Check the request that Switch forwards to payeefsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"              ",
									"              //Check the Headers",
									"              var headers = response.json().headers;",
									"              ",
									"                pm.test(\"payeefsp fspiop-source is payeefsp\", function () {",
									"                    pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
									"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
									"                    pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
									"                });",
									"                ",
									"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
									"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
									"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
									"                });",
									"                ",
									"          } else {",
									"              pm.test(\"Quote FAILED\", function () {",
									"                throw new Error('Did not receive request on payee side');",
									"              });",
									"              postman.setNextRequest(null)",
									"          }",
									"   });",
									"}, 1100)",
									"",
									"//Check Data on payer side",
									"if (ON_US_TRANSFERS_ENABLED) {",
									"    setTimeout(function () {",
									"    pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"        if(response.responseSize !== 0) {",
									"            //Checking headers",
									"                var headers = response.json().headers;",
									"                pm.test(\"payeefsp fspiop-source is payeefsp\", function () {",
									"                    pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
									"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
									"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp accept is empty\", function () {",
									"                    pm.expect(headers['accept']).to.eql(undefined);",
									"                });",
									"                ",
									"                //Validate protected header inside Signature",
									"                var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
									"                var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
									"                console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
									"                ",
									"                pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
									"                    pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
									"                });",
									"                pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
									"                    pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
									"                });",
									"                ",
									"",
									"                pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
									"                    pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
									"                });",
									"                pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
									"                    pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
									"                });",
									"                pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payeefsp\", function () {",
									"                    pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payeefsp');",
									"                });",
									"                pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
									"                    pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
									"                });",
									"            ",
									"                pm.test(\"payeefsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
									"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
									"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
									"                });",
									"                ",
									"                var jsonData = response.json().data;",
									"                ",
									"            pm.test(\"Response fees is returned\", function () {",
									"                    pm.expect(jsonData.payeeFspFee.amount).equal(\"1\");",
									"                    ",
									"                });",
									"                pm.test(\"Response Commission is returned\", function () {",
									"                    pm.expect(jsonData.payeeFspCommission.amount).equal(\"1\");",
									"                    ",
									"                });",
									"                ",
									"                pm.test(\"Response ilpPacket is not undefined\", function () {",
									"                    pm.expect(jsonData.ilpPacket).not.equal(undefined);",
									"                    pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
									"                });",
									"        ",
									"            pm.test(\"Response condition is not undefined\", function () {",
									"                pm.expect(jsonData.condition).not.equal(undefined);",
									"                pm.environment.set(\"condition\", jsonData.condition);",
									"            });",
									"        } else {",
									"            pm.test(\"Quote FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"            });",
									"",
									"        }",
									"        ",
									"    });",
									"    }, 1000)",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TESTFSP1_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payeefsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Transfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "627a8da3-f91e-489d-acaf-a27b8c63fb07",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"const ON_US_TRANSFERS_ENABLED = pm.environment.get(\"ON_US_TRANSFERS_ENABLED\") && (pm.environment.get(\"ON_US_TRANSFERS_ENABLED\")===\"true\" || pm.environment.get(\"ON_US_TRANSFERS_ENABLED\")===true || pm.environment.get(\"ON_US_TRANSFERS_ENABLED\")===\"1\") ? true : false",
									"",
									"if (ON_US_TRANSFERS_ENABLED) {",
									"    //Check the request that Switch forwards to payeefsp",
									"    setTimeout(function () {",
									"    pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"            if(response.responseSize !== 0) {",
									"                ",
									"                //Check the Headers",
									"                var headers = response.json().headers;",
									"                ",
									"                    pm.test(\"payeefsp fspiop-source is payeefsp\", function () {",
									"                        pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
									"                    });",
									"                    ",
									"                    pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
									"                        pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
									"                    });",
									"                    ",
									"                    pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
									"                        pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
									"                    });",
									"                    ",
									"                    pm.test(\"payeefsp accept is same as sent in the request\", function () {",
									"                        pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
									"                    });",
									"                    ",
									"                    pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
									"                        pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
									"                    });",
									"                    ",
									"                    pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
									"                        pm.expect(headers['fspiop-http-method']).to.eql('POST');",
									"                    });",
									"                    ",
									"                    pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
									"                        pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
									"                    });",
									"                    ",
									"                    ",
									"                    //Check the data",
									"                    var jsonData = response.json().data;",
									"                    pm.test(\"payeefsp data should have the same transferId as request\", function () {",
									"                    pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));",
									"                    });",
									"                    pm.test(\"payerfsp data should have the same payeefspId as request\", function () {",
									"                    pm.expect(jsonData.payerFsp).to.eql(pm.environment.get(\"payeefsp\"));",
									"                    });",
									"                    pm.test(\"payeefsp data should have the same payeefspId as request\", function () {",
									"                    pm.expect(jsonData.payeeFsp).to.eql(pm.environment.get(\"payeefsp\"));",
									"                    });",
									"                    pm.test(\"payeefsp data should have the same amount as request\", function () {",
									"                    pm.expect(+jsonData.amount.amount).to.eql(pm.environment.get(\"transferAmount\"));",
									"                    });",
									"                    pm.test(\"payeefsp data should have the same currency as request\", function () {",
									"                    pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
									"                    });",
									"                    pm.test(\"payeefsp data should have the same expiration as request\", function () {",
									"                    pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
									"                    });",
									"                    pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
									"                    pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
									"                    });",
									"                    pm.test(\"payeefsp data should have the same condition as request\", function () {",
									"                    pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
									"                    });",
									"                    ",
									"            } else {",
									"                pm.test(\"Transfer FAILED\", function () {",
									"                    throw new Error('Did not receive response');",
									"                });",
									"",
									"            }",
									"    });",
									"    }, 1100)",
									"",
									"    //Check the callback response that Switch forwards to payeefsp",
									"    setTimeout(function () {",
									"    pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"            if(response.responseSize !== 0) {",
									"                //Checking headers",
									"                var headers = response.json().headers;",
									"                pm.test(\"payeefsp fspiop-source is payeefsp\", function () {",
									"                    pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
									"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
									"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp accept is empty\", function () {",
									"                    pm.expect(headers['accept']).to.eql(undefined);",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-uri includes transfers\", function () {",
									"                    pm.expect(headers['fspiop-uri']).to.include('/transfers');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
									"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
									"                });",
									"                ",
									"                var jsonData = response.json().data;",
									"                pm.test(\"Response data does not have transferId\", function () {",
									"                pm.expect(jsonData.transferId).to.eql(undefined);",
									"                });",
									"                pm.test(\"Response status is COMMITTED\", function () {",
									"                    pm.expect(jsonData.transferState).to.eql('COMMITTED');",
									"                });",
									"            } else {",
									"                pm.test(\"Transfer FAILED\", function () {",
									"                    throw new Error('Did not receive response');",
									"                });",
									"",
									"            }",
									"    });",
									"    }, 1300)",
									"} else {",
									"    //Check the error callback response that Switch forwards to payeefsp",
									"    setTimeout(function () {",
									"    pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"            if(response.responseSize !== 0) {",
									"                //Checking headers",
									"                var headers = response.json().headers;",
									"                pm.test(\"payeefsp fspiop-source is payeefsp\", function () {",
									"                    pm.expect(headers['fspiop-source']).to.eql('switch');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
									"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
									"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp accept is empty\", function () {",
									"                    pm.expect(headers['accept']).to.eql(undefined);",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-uri includes transfers\", function () {",
									"                    pm.expect(headers['fspiop-uri']).to.include('/transfers');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
									"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
									"                });",
									"                ",
									"                var jsonData = response.json().data;",
									"                pm.test(\"Error response data should have errorInformation\", function () {",
									"                    pm.expect(jsonData).to.have.property(\"errorInformation\");",
									"                    pm.test(\"Error code should be 3100\", function () {",
									"                        pm.expect(jsonData.errorInformation.errorCode).to.eql('3100');",
									"                    });",
									"                    pm.test(\"Error description should contain proper reason\", function () {",
									"                        pm.expect(jsonData.errorInformation.errorDescription).to.include('Payer FSP and Payee FSP should be different');",
									"                    });",
									"                });",
									"            } else {",
									"                pm.test(\"Transfer FAILED\", function () {",
									"                    throw new Error('Did not receive response');",
									"                });",
									"",
									"            }",
									"    });",
									"    }, 1300)",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f46c9fdc-fd9a-49a4-8d63-a1309475cb41",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));",
									"pm.environment.set('transferAmount', 1.11);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							},
							{
								"key": "FSPIOP-URI",
								"value": "/transfers",
								"type": "text"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "POST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payeefsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "78e4b6f1-d747-45c7-a10e-8b81b8cf6ef6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "499207d3-0e30-4eba-b192-aa86c1d3fda3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "45bcfb53-ca77-44d0-8de9-8065df88867f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "0084bf6c-7a05-4162-9c94-93a8ec1d855e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}