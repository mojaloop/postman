{
	"info": {
		"_postman_id": "a6401943-d87a-48cf-a117-e1fb78b85fd7",
		"name": "Bulk_API_Transfers_MojaSims",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Positive Scenarios",
			"item": [
				{
					"name": "POST Bulk Transfer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9c4e449b-871d-4233-a1c9-28cd9ffd0692",
								"exec": [
									"const uuid = require('uuid');",
									"",
									"const delay = 1000 * 3600 * 24",
									"const bulkTransferId = uuid.v4();",
									"const bulkQuoteId = uuid.v4();",
									"const transferId = uuid.v4();",
									"const transferId2 = uuid.v4();",
									"const now = new Date();",
									"const headerDate = now.toUTCString();",
									"const expirationDate = new Date(now.getTime() + delay).toISOString();",
									"const completedTimestamp = now.toISOString();",
									"",
									"pm.environment.set(\"bulkTransferId\", bulkTransferId);",
									"pm.environment.set(\"bulkQuoteId\", bulkQuoteId);",
									"pm.environment.set(\"transferId\", transferId);",
									"pm.environment.set(\"transferId2\", transferId2);",
									"pm.environment.set(\"headerDate\", headerDate);",
									"pm.environment.set(\"expirationDate\", expirationDate);",
									"pm.environment.set(\"completedTimestamp\", completedTimestamp);",
									"pm.environment.set(\"amount\", 1);",
									"pm.environment.set(\"amount2\", 1);",
									"pm.environment.set(\"currency2\", \"USD\");",
									"pm.environment.set(\"acceptHeader\", \"application/vnd.interoperability.bulkTransfers+json;version=1\");",
									"pm.environment.set(\"contentType\", \"application/vnd.interoperability.bulkTransfers+json;version=1.0\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5ae6a6e0-7755-4a9f-a039-6c385af664ea",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(function () {",
									"    pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\") + \"/requests/\" + pm.environment.get(\"bulkTransferId\"), function (err, response) {",
									"        if (response.responseSize !== 0) {",
									"            const jsonResponse = response.json();",
									"",
									"            const headers = jsonResponse.headers",
									"            pm.test(\"date header should be set\", function () {",
									"                pm.expect(headers.date).to.be.ok;",
									"            });",
									"            pm.test(\"fspiop-source should be payerfsp\", function () {",
									"                pm.expect(headers[\"fspiop-source\"]).to.eql('payerfsp');",
									"            });",
									"            pm.test(\"fspiop-destination should be payeefsp\", function () {",
									"                pm.expect(headers[\"fspiop-destination\"]).to.eql('payeefsp');",
									"            });",
									"            pm.test(\"fspiop-http-method should be POST\", function () {",
									"                pm.expect(headers[\"fspiop-http-method\"]).to.eql('POST');",
									"            });",
									"            pm.test(\"fspiop-uri should be /bulkTransfers\", function () {",
									"                pm.expect(headers[\"fspiop-uri\"]).to.eql(\"/bulkTransfers\");",
									"            });",
									"            pm.test(\"fspiop-signature should be set\", function () {",
									"                pm.expect(headers[\"fspiop-signature\"]).to.be.ok;",
									"            });",
									"",
									"",
									"            const data = jsonResponse.data",
									"            pm.test(\"Bulk transfer Id should be set\", function () {",
									"                pm.expect(data.bulkTransferId).to.eql(pm.environment.get(\"bulkTransferId\"));",
									"            });",
									"            pm.test(\"Bulk quote Id should be set\", function () {",
									"                pm.expect(data.bulkQuoteId).to.eql(pm.environment.get(\"bulkQuoteId\"));",
									"            });",
									"            pm.test(\"PayerFsp should be 'payerfsp'\", function () {",
									"                pm.expect(data.payerFsp).to.eql(\"payerfsp\");",
									"            });",
									"            pm.test(\"PayeeFsp should be 'payeefsp'\", function () {",
									"                pm.expect(data.payeeFsp).to.eql(\"payeefsp\");",
									"            });",
									"            pm.test(\"expiration should be set\", function () {",
									"                pm.expect(data.expiration).to.be.ok;",
									"            });",
									"            pm.test(\"All individual transfers (prepare) should be sent\", function () {",
									"                pm.expect(data.individualTransfers.length).to.eql(2);",
									"            });",
									"            const transfer1 = data.individualTransfers.find(t => t.transferId === pm.environment.get(\"transferId\"));",
									"            pm.test(\"1st individual transfer should have valid ilpPacket\", function () {",
									"                pm.expect(transfer1.ilpPacket).to.eql(pm.environment.get(\"validIlpPacket2\"))",
									"            });",
									"            pm.test(\"1st individual transfer should have valid condition\", function () {",
									"                pm.expect(transfer1.condition).to.eql(pm.environment.get(\"validCondition2\"))",
									"            });",
									"            pm.expect(JSON.stringify(transfer1.transferAmount)).to.eql(JSON.stringify({ amount: \"1\", currency: \"USD\" }))",
									"            pm.expect(JSON.stringify(transfer1.extensionList)).to.eql(JSON.stringify({ extension: [{key: \"extKey1\", value: \"extValue1\"}, { key: \"extKey2\", value: \"extValue2\" }]}))",
									"            ",
									"            const transfer2 = data.individualTransfers.find(t => t.transferId === pm.environment.get(\"transferId2\"));",
									"            pm.test(\"2nd individual transfer should have valid ilpPacket\", function () {",
									"                pm.expect(transfer2.ilpPacket).to.eql(pm.environment.get(\"validIlpPacket2\"))",
									"            });",
									"            pm.test(\"2nd individual transfer should have valid condition\", function () {",
									"                pm.expect(transfer2.condition).to.eql(pm.environment.get(\"validCondition2\"))",
									"            });",
									"            pm.expect(JSON.stringify(transfer2.transferAmount)).to.eql(JSON.stringify({ amount: \"1\", currency: \"USD\" }))",
									"        } else {",
									"            pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"            });",
									"        }",
									"    });",
									"",
									"    pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\") + \"/callbacks/\" + pm.environment.get(\"bulkTransferId\"), function (err, response) {",
									"        if (response.responseSize !== 0) {",
									"            const jsonResponse = response.json();",
									"",
									"            const headers = jsonResponse.headers",
									"            pm.test(\"date header should be set\", function () {",
									"                pm.expect(headers.date).to.be.ok;",
									"            });",
									"            pm.test(\"fspiop-source should be switch\", function () {",
									"                pm.expect(headers[\"fspiop-source\"]).to.eql('switch');",
									"            });",
									"            pm.test(\"fspiop-destination should be payeefsp\", function () {",
									"                pm.expect(headers[\"fspiop-destination\"]).to.eql('payeefsp');",
									"            });",
									"            pm.test(\"fspiop-http-method should be PUT\", function () {",
									"                pm.expect(headers[\"fspiop-http-method\"]).to.eql('PUT');",
									"            });",
									"            pm.test(\"fspiop-uri should be /payeefsp/bulkTransfers/\" + pm.environment.get(\"bulkTransferId\"), function () {",
									"                pm.expect(headers[\"fspiop-uri\"]).to.eql(\"/payeefsp/bulkTransfers/\" + pm.environment.get(\"bulkTransferId\"));",
									"            });",
									"            pm.test(\"fspiop-signature should not be set\", function () {",
									"                pm.expect(headers[\"fspiop-signature\"]).to.eql(undefined);",
									"            });",
									"",
									"",
									"            const data = jsonResponse.data",
									"            pm.test(\"Bulk Transfer state should be COMPLETED on Payee side\", function () {",
									"                pm.expect(data.bulkTransferState).to.eql('COMPLETED');",
									"            });",
									"            pm.test(\"Completed timestamp should be set\", function () {",
									"                pm.expect(data.completedTimestamp).to.be.ok;",
									"            });",
									"            pm.test(\"All individual transfer results (fulfilments) should be returned\", function () {",
									"                pm.expect(data.individualTransferResults.length).to.eql(2);",
									"            });",
									"            const transfer1 = data.individualTransferResults.find(t => t.transferId === pm.environment.get(\"transferId\"));",
									"            pm.test(\"1st individual transfer should have fulfilment\", function () {",
									"                pm.expect(transfer1.fulfilment).to.be.ok",
									"            });",
									"            const transfer2 = data.individualTransferResults.find(t => t.transferId === pm.environment.get(\"transferId2\"));",
									"            pm.test(\"2nd individual transfer should have fulfilment\", function () {",
									"                pm.expect(transfer2.fulfilment).to.be.ok",
									"            });",
									"        } else {",
									"            pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"            });",
									"        }",
									"    });",
									"",
									"    pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\") + \"/callbacks/\" + pm.environment.get(\"bulkTransferId\"), function (err, response) {",
									"        if (response.responseSize !== 0) {",
									"            const jsonResponse = response.json();",
									"",
									"            const headers = jsonResponse.headers",
									"            pm.test(\"date header should be set\", function () {",
									"                pm.expect(headers.date).to.be.ok;",
									"            });",
									"            pm.test(\"fspiop-source should be payeefsp\", function () {",
									"                pm.expect(headers[\"fspiop-source\"]).to.eql('payeefsp');",
									"            });",
									"            pm.test(\"fspiop-destination should be payerfsp\", function () {",
									"                pm.expect(headers[\"fspiop-destination\"]).to.eql('payerfsp');",
									"            });",
									"            pm.test(\"fspiop-http-method should be PUT\", function () {",
									"                pm.expect(headers[\"fspiop-http-method\"]).to.eql('PUT');",
									"            });",
									"            pm.test(\"fspiop-uri should be /payerfsp/bulkTransfers/\" + pm.environment.get(\"bulkTransferId\"), function () {",
									"                pm.expect(headers[\"fspiop-uri\"]).to.eql(\"/payerfsp/bulkTransfers/\" + pm.environment.get(\"bulkTransferId\"));",
									"            });",
									"            pm.test(\"fspiop-signature should be set\", function () {",
									"                pm.expect(headers[\"fspiop-signature\"]).to.be.ok;",
									"            });",
									"",
									"",
									"            const data = jsonResponse.data",
									"            pm.test(\"Bulk Transfer state should be COMPLETED on Payer side\", function () {",
									"                pm.expect(data.bulkTransferState).to.eql('COMPLETED');",
									"            });",
									"            pm.test(\"Completed timestamp should be set\", function () {",
									"                pm.expect(data.completedTimestamp).to.be.ok;",
									"            });",
									"            pm.test(\"All individual transfer results (failed & successful) should be returned\", function () {",
									"                pm.expect(data.individualTransferResults.length).to.eql(2);",
									"            });",
									"            const transfer1 = data.individualTransferResults.find(t => t.transferId === pm.environment.get(\"transferId\"));",
									"            pm.test(\"1st individual transfer should have fulfilment\", function () {",
									"                pm.expect(transfer1.fulfilment).to.be.ok",
									"            });",
									"            const transfer2 = data.individualTransferResults.find(t => t.transferId === pm.environment.get(\"transferId2\"));",
									"            pm.test(\"2nd individual transfer should have fulfilment\", function () {",
									"                pm.expect(transfer2.fulfilment).to.be.ok",
									"            });",
									"           ",
									"        } else {",
									"            pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"            });",
									"",
									"        }",
									"    });",
									"}, 3000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "{{contentType}}"
							},
							{
								"key": "Date",
								"value": "{{headerDate}}"
							},
							{
								"key": "Accept",
								"value": "{{acceptHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "~~{{payerfsp}}~~"
							},
							{
								"key": "FSPIOP-URI",
								"type": "text",
								"value": "/bulkTransfers"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "POST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n    \"bulkTransferId\": \"{{bulkTransferId}}\",\n    \"bulkQuoteId\": \"{{bulkQuoteId}}\",\n    \"payeeFsp\": \"{{payeefsp}}\",\n    \"payerFsp\": \"{{payerfsp}}\",\n    \"individualTransfers\":\n    [ {\n        \"transferId\": \"{{transferId}}\",\n        \"transferAmount\": {\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"{{amount}}\"\n        },\n        \"ilpPacket\": \"{{validIlpPacket2}}\",\n        \"condition\": \"{{validCondition2}}\",\n        \"extensionList\": { \"extension\": [\n            { \"key\": \"extKey1\", \"value\": \"extValue1\"},\n            { \"key\": \"extKey2\", \"value\": \"extValue2\"}\n        ] }\n      },\n       {\n        \"transferId\": \"{{transferId2}}\",\n        \"transferAmount\": {\n            \"currency\": \"{{currency2}}\",\n            \"amount\": \"{{amount2}}\"\n        },\n        \"ilpPacket\": \"{{validIlpPacket2}}\",\n        \"condition\": \"{{validCondition2}}\"\n    } ],\n    \"expiration\": \"{{expirationDate}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_BULK_ADAPTER}}/bulkTransfers",
							"host": [
								"{{HOST_BULK_ADAPTER}}"
							],
							"path": [
								"bulkTransfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Bulk Transfer - PayeeFSP",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5655cb66-b327-4fb7-adf1-38ae773daeef",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c79ab4f5-d985-488d-a715-37933ca39607",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"bulkTransferId\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"              const jsonResponse = response.json();",
									"              ",
									"              const headers = jsonResponse.headers",
									"              pm.test(\"date header should be set\", function () {",
									"                pm.expect(headers.date).to.be.ok;",
									"              });",
									"              pm.test(\"fspiop-source should be switch\", function () {",
									"                pm.expect(headers[\"fspiop-source\"]).to.eql('switch');",
									"              });",
									"              pm.test(\"fspiop-destination should be payeefsp\", function () {",
									"                pm.expect(headers[\"fspiop-destination\"]).to.eql('payeefsp');",
									"              });",
									"              pm.test(\"fspiop-http-method should be PUT\", function () {",
									"                pm.expect(headers[\"fspiop-http-method\"]).to.eql('PUT');",
									"              });",
									"              pm.test(\"fspiop-uri should be /payeefsp/bulkTransfers/\" + pm.environment.get(\"bulkTransferId\"), function () {",
									"                pm.expect(headers[\"fspiop-uri\"]).to.eql(\"/payeefsp/bulkTransfers/\" + pm.environment.get(\"bulkTransferId\"));",
									"              });",
									"              pm.test(\"fspiop-signature should not be set\", function () {",
									"                pm.expect(headers[\"fspiop-signature\"]).to.eql(undefined);",
									"              });",
									"              ",
									"             ",
									"              const data = jsonResponse.data",
									"              pm.test(\"Bulk Transfer state should be COMPLETED on Payee side\", function () {",
									"                pm.expect(data.bulkTransferState).to.eql('COMPLETED');",
									"              });",
									"              pm.test(\"Completed timestamp should be set\", function () {",
									"                pm.expect(data.completedTimestamp).to.be.ok;",
									"              });",
									"              pm.test(\"All individual transfer results (fulfilments) should be returned\", function () {",
									"                pm.expect(data.individualTransferResults.length).to.eql(2);",
									"              });",
									"              const transfer1 = data.individualTransferResults.find(t => t.transferId === pm.environment.get(\"transferId\"));",
									"              pm.test(\"1st individual transfer should have fulfilment\", function () {",
									"                  pm.expect(transfer1.fulfilment).to.be.ok",
									"              });",
									"              const transfer2 = data.individualTransferResults.find(t => t.transferId === pm.environment.get(\"transferId2\"));",
									"              pm.test(\"2nd individual transfer should have fulfilment\", function () {",
									"                  pm.expect(transfer2.fulfilment).to.be.ok",
									"              });",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"          }",
									"   });",
									"}, 1000)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{headerDate}}"
							},
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "switch"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "~~{{payeefsp}}~~"
							},
							{
								"key": "FSPIOP-URI",
								"type": "text",
								"value": "/bulkTransfers/{{bulkTransferId}}"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"type": "text",
								"value": "GET"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST_BULK_ADAPTER}}/bulkTransfers/{{bulkTransferId}}",
							"host": [
								"{{HOST_BULK_ADAPTER}}"
							],
							"path": [
								"bulkTransfers",
								"{{bulkTransferId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Bulk Transfer - PayerFSP",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "769d66c4-4c24-4c94-9e16-b10672b4f8c3",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "64959f68-016a-4771-8b14-fdef073aafc3",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"bulkTransferId\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"              const jsonResponse = response.json();",
									"              ",
									"              const headers = jsonResponse.headers",
									"              pm.test(\"date header should be set\", function () {",
									"                pm.expect(headers.date).to.be.ok;",
									"              });",
									"              pm.test(\"fspiop-source should be switch\", function () {",
									"                pm.expect(headers[\"fspiop-source\"]).to.eql('switch');",
									"              });",
									"              pm.test(\"fspiop-destination should be payerfsp\", function () {",
									"                pm.expect(headers[\"fspiop-destination\"]).to.eql('payerfsp');",
									"              });",
									"              pm.test(\"fspiop-http-method should be PUT\", function () {",
									"                pm.expect(headers[\"fspiop-http-method\"]).to.eql('PUT');",
									"              });",
									"              pm.test(\"fspiop-uri should be /payerfsp/bulkTransfers/\" + pm.environment.get(\"bulkTransferId\"), function () {",
									"                pm.expect(headers[\"fspiop-uri\"]).to.eql(\"/payerfsp/bulkTransfers/\" + pm.environment.get(\"bulkTransferId\"));",
									"              });",
									"              pm.test(\"fspiop-signature should not be set\", function () {",
									"                pm.expect(headers[\"fspiop-signature\"]).to.eql(undefined)",
									"              });",
									"              ",
									"              const data = jsonResponse.data",
									"              pm.test(\"Bulk Transfer state should be COMPLETED on Payer side\", function () {",
									"                pm.expect(data.bulkTransferState).to.eql('COMPLETED');",
									"              });",
									"              pm.test(\"Completed timestamp should be set\", function () {",
									"                pm.expect(data.completedTimestamp).to.be.ok;",
									"              });",
									"              pm.test(\"All individual transfer results (fulfilments) should be returned\", function () {",
									"                pm.expect(data.individualTransferResults.length).to.eql(2);",
									"              });",
									"              const transfer1 = data.individualTransferResults.find(t => t.transferId === pm.environment.get(\"transferId\"));",
									"              pm.test(\"1st individual transfer should have fulfilment\", function () {",
									"                  pm.expect(transfer1.fulfilment).to.be.ok",
									"              });",
									"              const transfer2 = data.individualTransferResults.find(t => t.transferId === pm.environment.get(\"transferId2\"));",
									"              pm.test(\"2nd individual transfer should have fulfilment\", function () {",
									"                  pm.expect(transfer2.fulfilment).to.be.ok",
									"              });",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"              ",
									"          }",
									"   });",
									"}, 1000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{headerDate}}"
							},
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "switch"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "~~{{payerfsp}}~~"
							},
							{
								"key": "FSPIOP-URI",
								"type": "text",
								"value": "/bulkTransfers/{{bulkTransferId}}"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"type": "text",
								"value": "GET"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{HOST_BULK_ADAPTER}}/bulkTransfers/{{bulkTransferId}}",
							"host": [
								"{{HOST_BULK_ADAPTER}}"
							],
							"path": [
								"bulkTransfers",
								"{{bulkTransferId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative Scenarios",
			"item": [
				{
					"name": "payee_abort",
					"item": [
						{
							"name": "Store Payerfsp position before prepare",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad77ab6e-1a01-46f2-ab4b-a0e29024872e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"payerfspPositionBeforePrepare\", jsonData[0].value);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "afd7282e-3702-4fc1-af28-a8833f95aabc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Store Payeefsp position before prepare",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9f53a9b-8080-4177-961b-ba77342679ca",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"payeefspPositionBeforePrepare\", jsonData[0].value);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "54edfe2c-8697-4a54-bc86-56d91b030ef1",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "noresponsepayeefsp"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/noresponsepayeefsp/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"noresponsepayeefsp",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Prepare",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "82a4c9c5-6971-4dec-9f37-931686f6e7b9",
										"exec": [
											"const uuid = require('uuid');",
											"",
											"const delay = 1000 * 3600 * 24",
											"const bulkTransferId = uuid.v4();",
											"const bulkQuoteId = uuid.v4();",
											"const transferId = uuid.v4();",
											"const transferId2 = uuid.v4();",
											"const now = new Date();",
											"const headerDate = now.toUTCString();",
											"const expirationDate = new Date(now.getTime() + delay).toISOString();",
											"const completedTimestamp = now.toISOString();",
											"const amount = 1;",
											"const amount2 = 2;",
											"",
											"pm.environment.set(\"bulkTransferId\", bulkTransferId);",
											"pm.environment.set(\"bulkQuoteId\", bulkQuoteId);",
											"pm.environment.set(\"transferId\", transferId);",
											"pm.environment.set(\"transferId2\", transferId2);",
											"pm.environment.set(\"headerDate\", headerDate);",
											"pm.environment.set(\"expirationDate\", expirationDate);",
											"pm.environment.set(\"completedTimestamp\", completedTimestamp);",
											"pm.environment.set(\"amount\", amount);",
											"pm.environment.set(\"amount2\", amount2);",
											"pm.environment.set(\"currency2\", \"USD\");",
											"pm.environment.set(\"acceptHeader\", \"application/vnd.interoperability.bulkTransfers+json;version=1\");",
											"pm.environment.set(\"contentType\", \"application/vnd.interoperability.bulkTransfers+json;version=1.0\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "00859e27-0238-47fe-a1b4-0e43e38c2e39",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "{{acceptHeader}}"
									},
									{
										"key": "Content-Type",
										"value": "{{contentType}}"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "noresponsepayeefsp"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"bulkTransferId\": \"{{bulkTransferId}}\",\n    \"bulkQuoteId\": \"{{bulkQuoteId}}\",\n    \"payeeFsp\": \"noresponsepayeefsp\",\n    \"payerFsp\": \"{{payerfsp}}\",\n    \"individualTransfers\":\n    [ {\n        \"transferId\": \"{{transferId}}\",\n        \"transferAmount\": {\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"{{amount}}\"\n        },\n        \"ilpPacket\": \"{{validIlpPacket2}}\",\n        \"condition\": \"{{validCondition2}}\",\n        \"extensionList\": { \"extension\": [\n            { \"key\": \"extKey1\", \"value\": \"extValue1\"},\n            { \"key\": \"extKey2\", \"value\": \"extValue2\"}\n        ] }\n      },\n      {\n        \"transferId\": \"{{transferId2}}\",\n        \"transferAmount\": {\n            \"currency\": \"{{currency2}}\",\n            \"amount\": \"{{amount2}}\"\n        },\n        \"ilpPacket\": \"{{validIlpPacket2}}\",\n        \"condition\": \"{{validCondition2}}\"\n    } ],\n    \"expiration\": \"{{expirationDate}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{HOST_BULK_ADAPTER}}/bulkTransfers",
									"host": [
										"{{HOST_BULK_ADAPTER}}"
									],
									"path": [
										"bulkTransfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Store Payerfsp position after Prepare",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4774ec4b-5abc-48cc-a5ff-7d1dd7ecb76e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"payerfspPositionAfterPrepare\", jsonData[0].value);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e79ed7cd-a2e4-4126-a36d-64204f674685",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Payee Error",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f8165a1c-3b26-44f4-9336-3e73d3c396f5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8b6450d5-823d-41eb-b0ea-f4580f37deb5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\") + \"/callbacks/\" + pm.environment.get(\"bulkTransferId\"), function (err, response) {",
											"    if (response.responseSize !== 0) {",
											"      const jsonResponse = response.json();",
											"",
											"      const headers = jsonResponse.headers",
											"      pm.test(\"date header should be set\", function () {",
											"        pm.expect(headers.date).to.be.ok;",
											"      });",
											"      pm.test(\"fspiop-source should be noresponsepayeefsp\", function () {",
											"        pm.expect(headers[\"fspiop-source\"]).to.eql('noresponsepayeefsp');",
											"      });",
											"      pm.test(\"fspiop-destination should be payerfsp\", function () {",
											"        pm.expect(headers[\"fspiop-destination\"]).to.eql('payerfsp');",
											"      });",
											"      pm.test(\"fspiop-http-method should be PUT\", function () {",
											"        pm.expect(headers[\"fspiop-http-method\"]).to.eql('PUT');",
											"      });",
											"      pm.test(`fspiop-uri should be /payerfsp/bulkTransfers/${pm.environment.get('bulkTransferId')}/error`, function () {",
											"        pm.expect(headers[\"fspiop-uri\"]).to.eql(`/payerfsp/bulkTransfers/${pm.environment.get('bulkTransferId')}/error`);",
											"      });",
											"      pm.test(\"accept header should be undefined\", function () {",
											"        pm.expect(headers[\"accept\"]).to.eql(undefined);",
											"      });",
											"      pm.test(\"fspiop-signature should not be set\", function () {",
											"        pm.expect(headers[\"fspiop-signature\"]).to.eql(undefined);",
											"      });",
											"",
											"      const data = jsonResponse.data",
											"      pm.test('errorInformation should be set correctly', function () {",
											"        pm.expect(data).to.eql({",
											"          errorInformation: {",
											"            errorCode: \"5100\",",
											"            errorDescription: \"An error occured\"",
											"          }",
											"        })",
											"      });",
											"    } else {",
											"      pm.test(\"Transfer FAILED\", function () {",
											"        throw new Error('Did not receive response');",
											"      });",
											"",
											"    }",
											"  });",
											"",
											"  pm.sendRequest(pm.environment.get(\"HOST_LEGACY_SIMULATOR\") + \"/bulkTransfersNegative/callbacks/\" + pm.environment.get(\"bulkTransferId\"), function (err, response) {",
											"    if (response.responseSize !== 0) {",
											"      const jsonResponse = response.json();",
											"",
											"      const headers = jsonResponse.headers",
											"      pm.test(\"date header should be set\", function () {",
											"        pm.expect(headers.date).to.be.ok;",
											"      });",
											"      pm.test(\"fspiop-source should be switch\", function () {",
											"        pm.expect(headers[\"fspiop-source\"]).to.eql('switch');",
											"      });",
											"      pm.test(\"fspiop-destination should be noresponsepayeefsp\", function () {",
											"        pm.expect(headers[\"fspiop-destination\"]).to.eql('noresponsepayeefsp');",
											"      });",
											"      pm.test(\"fspiop-http-method should be PUT\", function () {",
											"        pm.expect(headers[\"fspiop-http-method\"]).to.eql('PUT');",
											"      });",
											"      pm.test(`fspiop-uri should be /noresponsepayeefsp/bulkTransfers/${pm.environment.get('bulkTransferId')}/error`, function () {",
											"        pm.expect(headers[\"fspiop-uri\"]).to.eql(`/noresponsepayeefsp/bulkTransfers/${pm.environment.get('bulkTransferId')}/error`);",
											"      });",
											"      pm.test(\"accept header should be undefined\", function () {",
											"        pm.expect(headers[\"accept\"]).to.eql(undefined);",
											"      });",
											"      pm.test(\"fspiop-signature should not be set\", function () {",
											"        pm.expect(headers[\"fspiop-signature\"]).to.eql(undefined);",
											"      });",
											"",
											"      const data = jsonResponse.data",
											"      pm.test('Request body should be errorInformation', function () {",
											"        pm.expect(data).to.eql({",
											"          errorInformation: {",
											"            errorCode: \"5100\",",
											"            errorDescription: \"An error occured\"",
											"          }",
											"        })",
											"      })",
											"    } else {",
											"      pm.test(\"Transfer FAILED\", function () {",
											"        throw new Error('Did not receive response');",
											"      });",
											"    }",
											"  });",
											"",
											"  pm.sendRequest(pm.environment.get(\"HOST_LEGACY_SIMULATOR\") + \"/bulkTransfersNegative/requests/\" + pm.environment.get(\"bulkTransferId\"), function (err, response) {",
											"    if (response.responseSize !== 0) {",
											"      const jsonResponse = response.json();",
											"",
											"      const headers = jsonResponse.headers",
											"      pm.test(\"date header should be set\", function () {",
											"        pm.expect(headers.date).to.be.ok;",
											"      });",
											"      pm.test(\"fspiop-source should be payerfsp\", function () {",
											"        pm.expect(headers[\"fspiop-source\"]).to.eql('payerfsp');",
											"      });",
											"      pm.test(\"fspiop-destination should be noresponsepayeefsp\", function () {",
											"        pm.expect(headers[\"fspiop-destination\"]).to.eql('noresponsepayeefsp');",
											"      });",
											"      pm.test(\"fspiop-http-method should be POST\", function () {",
											"        pm.expect(headers[\"fspiop-http-method\"]).to.eql('POST');",
											"      });",
											"      pm.test(\"fspiop-uri should be /bulkTransfers\", function () {",
											"        pm.expect(headers[\"fspiop-uri\"]).to.eql(\"/bulkTransfers\");",
											"      });",
											"      pm.test(\"accept header should be application/vnd.interoperability.bulkTransfers+json;version=1\", function () {",
											"        pm.expect(headers[\"accept\"]).to.eql(\"application/vnd.interoperability.bulkTransfers+json;version=1\");",
											"      });",
											"      pm.test(\"fspiop-signature should not be set\", function () {",
											"        pm.expect(headers[\"fspiop-signature\"]).to.eql(undefined);",
											"      });",
											"",
											"      const data = jsonResponse.data",
											"      pm.test('Request body should be sent correctly', function () {",
											"        pm.expect(data).to.have.property(\"bulkTransferId\", pm.environment.get(\"bulkTransferId\"));",
											"        pm.expect(data).to.have.property(\"bulkQuoteId\", pm.environment.get(\"bulkQuoteId\"));",
											"        pm.expect(data).to.have.property(\"payeeFsp\",\"noresponsepayeefsp\");",
											"        pm.expect(data).to.have.property(\"payerFsp\", pm.environment.get(\"payerfsp\"));",
											"        pm.expect(data.individualTransfers.length).to.eql(2);",
											"",
											"        const transfer1 = data.individualTransfers.find(t => t.extensionList !== undefined )",
											"        pm.expect(transfer1).to.have.property(\"transferId\", pm.environment.get(\"transferId\"))",
											"        pm.expect(JSON.stringify(transfer1.transferAmount)).to.eql(JSON.stringify({ amount: \"1\", currency: \"USD\" }))",
											"        pm.expect(transfer1).to.have.property(\"ilpPacket\", pm.environment.get(\"validIlpPacket2\"))",
											"        pm.expect(transfer1).to.have.property(\"condition\", pm.environment.get(\"validCondition2\"))",
											"        pm.expect(JSON.stringify(transfer1.extensionList)).to.eql(JSON.stringify({ extension: [{key: \"extKey1\", value: \"extValue1\"}, { key: \"extKey2\", value: \"extValue2\" }]}))",
											"",
											"        const transfer2 = data.individualTransfers.find(t => t.extensionList === undefined )",
											"        pm.expect(transfer2).to.have.property(\"transferId\", pm.environment.get(\"transferId2\"))",
											"        pm.expect(JSON.stringify(transfer2.transferAmount)).to.eql(JSON.stringify({ amount: \"2\", currency: \"USD\" }))",
											"        pm.expect(transfer2).to.have.property(\"ilpPacket\", pm.environment.get(\"validIlpPacket2\"))",
											"        pm.expect(transfer2).to.have.property(\"condition\", pm.environment.get(\"validCondition2\"))",
											"      })",
											"    } else {",
											"      pm.test(\"Transfer FAILED\", function () {",
											"        throw new Error('Did not receive response');",
											"      });",
											"    }",
											"  });",
											"}, 1000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYEEFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.bulkTransfers+json;version=1.0"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "noresponsepayeefsp"
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"errorInformation\": {\n        \"errorCode\": \"5100\",\n        \"errorDescription\": \"An error occured\"\n    }\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{HOST_BULK_ADAPTER}}/bulkTransfers/{{bulkTransferId}}/error",
									"host": [
										"{{HOST_BULK_ADAPTER}}"
									],
									"path": [
										"bulkTransfers",
										"{{bulkTransferId}}",
										"error"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Bulk Transfer - PayerFSP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "96ff1045-f6f5-4d6b-86a1-8419d3bffe2d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "421b7e1a-3d82-41ff-867c-1eb61f2cfe9a",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"  pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\") + \"/callbacks/\" + pm.environment.get(\"bulkTransferId\"), function (err, response) {",
											"    if (response.responseSize !== 0) {",
											"      const jsonResponse = response.json();",
											"",
											"      const headers = jsonResponse.headers",
											"      pm.test(\"date header should be set\", function () {",
											"        pm.expect(headers.date).to.be.ok;",
											"      });",
											"      pm.test(\"fspiop-source should be switch\", function () {",
											"        pm.expect(headers[\"fspiop-source\"]).to.eql('switch');",
											"      });",
											"      pm.test(\"fspiop-destination should be payerfsp\", function () {",
											"        pm.expect(headers[\"fspiop-destination\"]).to.eql('payerfsp');",
											"      });",
											"      pm.test(\"fspiop-http-method should be PUT\", function () {",
											"        pm.expect(headers[\"fspiop-http-method\"]).to.eql('PUT');",
											"      });",
											"      pm.test(`fspiop-uri should be /payerfsp/bulkTransfers/${pm.environment.get(\"bulkTransferId\")}/error`, function () {",
											"        pm.expect(headers[\"fspiop-uri\"]).to.eql(`/payerfsp/bulkTransfers/${pm.environment.get(\"bulkTransferId\")}/error`);",
											"      });",
											"      pm.test(\"fspiop-signature should not be set\", function () {",
											"        pm.expect(headers[\"fspiop-signature\"]).to.eql(undefined);",
											"      });",
											"",
											"      const data = jsonResponse.data",
											"      pm.test('errorInformation should be set correctly', function () {",
											"        pm.expect(data).to.eql({",
											"          errorInformation: {",
											"            errorCode: \"5100\",",
											"            errorDescription: \"An error occured\"",
											"          }",
											"        })",
											"      });",
											"    } else {",
											"      pm.test(\"Transfer FAILED\", function () {",
											"        throw new Error('Did not receive response');",
											"      });",
											"    }",
											"  });",
											"}, 1000)",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{headerDate}}"
									},
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "switch"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "~~{{payerfsp}}~~"
									},
									{
										"key": "FSPIOP-URI",
										"type": "text",
										"value": "/bulkTransfers/{{bulkTransferId}}"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"type": "text",
										"value": "GET"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_BULK_ADAPTER}}/bulkTransfers/{{bulkTransferId}}",
									"host": [
										"{{HOST_BULK_ADAPTER}}"
									],
									"path": [
										"bulkTransfers",
										"{{bulkTransferId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Bulk Transfer - PayeeFSP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1d617bb8-0264-4c51-b9e1-9c04ba7b2448",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "83c87af5-6fdc-4f54-a19f-55b9b7e92e76",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"   pm.sendRequest(pm.environment.get(\"HOST_LEGACY_SIMULATOR\") + \"/bulkTransfersNegative/callbacks/\" + pm.environment.get(\"bulkTransferId\"), function (err, response) {",
											"    if (response.responseSize !== 0) {",
											"      const jsonResponse = response.json();",
											"",
											"      const headers = jsonResponse.headers",
											"      pm.test(\"date header should be set\", function () {",
											"        pm.expect(headers.date).to.be.ok;",
											"      });",
											"      pm.test(\"fspiop-source should be switch\", function () {",
											"        pm.expect(headers[\"fspiop-source\"]).to.eql('switch');",
											"      });",
											"      pm.test(\"fspiop-destination should be noresponsepayeefsp\", function () {",
											"        pm.expect(headers[\"fspiop-destination\"]).to.eql('noresponsepayeefsp');",
											"      });",
											"      pm.test(\"fspiop-http-method should be PUT\", function () {",
											"        pm.expect(headers[\"fspiop-http-method\"]).to.eql('PUT');",
											"      });",
											"      pm.test(`fspiop-uri should be /noresponsepayeefsp/bulkTransfers/${pm.environment.get('bulkTransferId')}/error`, function () {",
											"        pm.expect(headers[\"fspiop-uri\"]).to.eql(`/noresponsepayeefsp/bulkTransfers/${pm.environment.get('bulkTransferId')}/error`);",
											"      });",
											"      pm.test(\"accept header should be undefined\", function () {",
											"        pm.expect(headers[\"accept\"]).to.eql(undefined);",
											"      });",
											"      pm.test(\"fspiop-signature should not be set\", function () {",
											"        pm.expect(headers[\"fspiop-signature\"]).to.eql(undefined);",
											"      });",
											"",
											"      const data = jsonResponse.data",
											"      pm.test('Request body should be errorInformation', function () {",
											"        pm.expect(data).to.eql({",
											"          errorInformation: {",
											"            errorCode: \"5100\",",
											"            errorDescription: \"An error occured\"",
											"          }",
											"        })",
											"      })",
											"    } else {",
											"      pm.test(\"Transfer FAILED\", function () {",
											"        throw new Error('Did not receive response');",
											"      });",
											"    }",
											"  });",
											"}, 1000)",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{headerDate}}"
									},
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "FSPIOP-Source",
										"value": "noresponsepayeefsp"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "switch"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "~~noresponsepayeefsp~~"
									},
									{
										"key": "FSPIOP-URI",
										"type": "text",
										"value": "/bulkTransfers/{{bulkTransferId}}"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"type": "text",
										"value": "GET"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_BULK_ADAPTER}}/bulkTransfers/{{bulkTransferId}}",
									"host": [
										"{{HOST_BULK_ADAPTER}}"
									],
									"path": [
										"bulkTransfers",
										"{{bulkTransferId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payerfsp position after Abort",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7856c753-b86b-4ce2-a1d3-e385b31c4eaf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Payerfsp position after Payee ABORT should be same as position before prepare.\", function () {",
											"    pm.expect(jsonData[0].value).to.equal(Number(pm.environment.get('payerfspPositionBeforePrepare')));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4722f865-75cb-42e7-b737-e632c29a7f43",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payeefsp position after Abort",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ab6c7db-423f-4323-88e5-6cc9b9faa8e5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Payeefsp position after Payee ABORT should be same as position before prepare.\", function () {",
											"    pm.expect(jsonData[0].value).to.equal(Number(pm.environment.get('payeefspPositionBeforePrepare')));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bab412b4-ee86-418a-af5d-04714f140e5c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/noresponsepayeefsp/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"noresponsepayeefsp",
										"positions"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "partial fulfil",
					"item": [
						{
							"name": "POST Bulk Transfer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "801e703c-bf3d-47c3-8215-46b4ac2cb487",
										"exec": [
											"const uuid = require('uuid');",
											"",
											"const delay = 1000 * 3600 * 24",
											"const bulkTransferId = uuid.v4();",
											"const bulkQuoteId = uuid.v4();",
											"const transferId = uuid.v4();",
											"const transferId2 = uuid.v4();",
											"const now = new Date();",
											"const headerDate = now.toUTCString();",
											"const expirationDate = new Date(now.getTime() + delay).toISOString();",
											"const completedTimestamp = now.toISOString();",
											"",
											"pm.environment.set(\"bulkTransferId\", bulkTransferId);",
											"pm.environment.set(\"bulkQuoteId\", bulkQuoteId);",
											"pm.environment.set(\"transferId\", transferId);",
											"pm.environment.set(\"transferId2\", transferId2);",
											"pm.environment.set(\"headerDate\", headerDate);",
											"pm.environment.set(\"expirationDate\", expirationDate);",
											"pm.environment.set(\"completedTimestamp\", completedTimestamp);",
											"pm.environment.set(\"amount\", 1);",
											"pm.environment.set(\"amount2\", 1);",
											"pm.environment.set(\"currency2\", \"USD\");",
											"pm.environment.set(\"acceptHeader\", \"application/vnd.interoperability.bulkTransfers+json;version=1\");",
											"pm.environment.set(\"contentType\", \"application/vnd.interoperability.bulkTransfers+json;version=1.0\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1090bb1f-c306-4fba-94aa-0213a96e3483",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\") + \"/requests/\" + pm.environment.get(\"bulkTransferId\"), function (err, response) {",
											"        if (response.responseSize !== 0) {",
											"            const jsonResponse = response.json();",
											"",
											"            const headers = jsonResponse.headers",
											"            pm.test(\"date header should be set\", function () {",
											"                pm.expect(headers.date).to.be.ok;",
											"            });",
											"            pm.test(\"fspiop-source should be payerfsp\", function () {",
											"                pm.expect(headers[\"fspiop-source\"]).to.eql('payerfsp');",
											"            });",
											"            pm.test(\"fspiop-destination should be payeefsp\", function () {",
											"                pm.expect(headers[\"fspiop-destination\"]).to.eql('payeefsp');",
											"            });",
											"            pm.test(\"fspiop-http-method should be POST\", function () {",
											"                pm.expect(headers[\"fspiop-http-method\"]).to.eql('POST');",
											"            });",
											"            pm.test(\"fspiop-uri should be /bulkTransfers\", function () {",
											"                pm.expect(headers[\"fspiop-uri\"]).to.eql(\"/bulkTransfers\");",
											"            });",
											"            pm.test(\"fspiop-signature should be set\", function () {",
											"                pm.expect(headers[\"fspiop-signature\"]).to.be.ok;",
											"            });",
											"",
											"",
											"            const data = jsonResponse.data",
											"            pm.test(\"Bulk transfer Id should be set\", function () {",
											"                pm.expect(data.bulkTransferId).to.eql(pm.environment.get(\"bulkTransferId\"));",
											"            });",
											"            pm.test(\"Bulk quote Id should be set\", function () {",
											"                pm.expect(data.bulkQuoteId).to.eql(pm.environment.get(\"bulkQuoteId\"));",
											"            });",
											"            pm.test(\"PayerFsp should be 'payerfsp'\", function () {",
											"                pm.expect(data.payerFsp).to.eql(\"payerfsp\");",
											"            });",
											"            pm.test(\"PayeeFsp should be 'payeefsp'\", function () {",
											"                pm.expect(data.payeeFsp).to.eql(\"payeefsp\");",
											"            });",
											"            pm.test(\"expiration should be set\", function () {",
											"                pm.expect(data.expiration).to.be.ok;",
											"            });",
											"            pm.test(\"Individual transfers (prepare) should be one (1)\", function () {",
											"                pm.expect(data.individualTransfers.length).to.eql(1);",
											"            });",
											"            pm.test(\"Individual transfer should have transferId\", function () {",
											"                pm.expect(data.individualTransfers[0].transferId).to.be.ok;",
											"            });",
											"            pm.test(\"Individual transfer should have ilpPacket\", function () {",
											"                pm.expect(data.individualTransfers[0].ilpPacket).to.be.ok;",
											"            });",
											"            pm.test(\"Individual transfer should have condition\", function () {",
											"                pm.expect(data.individualTransfers[0].condition).to.be.ok;",
											"            });",
											"        } else {",
											"            pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"            });",
											"        }",
											"    });",
											"",
											"    pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\") + \"/callbacks/\" + pm.environment.get(\"bulkTransferId\"), function (err, response) {",
											"        if (response.responseSize !== 0) {",
											"            const jsonResponse = response.json();",
											"",
											"            const headers = jsonResponse.headers",
											"            pm.test(\"date header should be set\", function () {",
											"                pm.expect(headers.date).to.be.ok;",
											"            });",
											"            pm.test(\"fspiop-source should be switch\", function () {",
											"                pm.expect(headers[\"fspiop-source\"]).to.eql('switch');",
											"            });",
											"            pm.test(\"fspiop-destination should be payeefsp\", function () {",
											"                pm.expect(headers[\"fspiop-destination\"]).to.eql('payeefsp');",
											"            });",
											"            pm.test(\"fspiop-http-method should be PUT\", function () {",
											"                pm.expect(headers[\"fspiop-http-method\"]).to.eql('PUT');",
											"            });",
											"            pm.test(\"fspiop-uri should be /payeefsp/bulkTransfers/\" + pm.environment.get(\"bulkTransferId\"), function () {",
											"                pm.expect(headers[\"fspiop-uri\"]).to.eql(\"/payeefsp/bulkTransfers/\" + pm.environment.get(\"bulkTransferId\"));",
											"            });",
											"            pm.test(\"fspiop-signature should not be set\", function () {",
											"                pm.expect(headers[\"fspiop-signature\"]).to.eql(undefined);",
											"            });",
											"",
											"",
											"            const data = jsonResponse.data",
											"            pm.test(\"Bulk Transfer state should be COMPLETED on Payee side\", function () {",
											"                pm.expect(data.bulkTransferState).to.eql('COMPLETED');",
											"            });",
											"            pm.test(\"Completed timestamp should be set\", function () {",
											"                pm.expect(data.completedTimestamp).to.be.ok;",
											"            });",
											"            pm.test(\"Only one (1) individual transfer result (fulfilments) should be returned\", function () {",
											"                pm.expect(data.individualTransferResults.length).to.eql(1);",
											"            });",
											"            pm.test(\"Individual transfer result should have transferId\", function () {",
											"                pm.expect(data.individualTransferResults[0].transferId).to.be.ok;",
											"            });",
											"            pm.test(\"Individual transfer result should have fulfilment\", function () {",
											"                pm.expect(data.individualTransferResults[0].fulfilment).to.be.ok;",
											"            });",
											"        } else {",
											"            pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"            });",
											"        }",
											"    });",
											"",
											"    pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\") + \"/callbacks/\" + pm.environment.get(\"bulkTransferId\"), function (err, response) {",
											"        if (response.responseSize !== 0) {",
											"            const jsonResponse = response.json();",
											"",
											"            const headers = jsonResponse.headers",
											"            pm.test(\"date header should be set\", function () {",
											"                pm.expect(headers.date).to.be.ok;",
											"            });",
											"            pm.test(\"fspiop-source should be payeefsp\", function () {",
											"                pm.expect(headers[\"fspiop-source\"]).to.eql('payeefsp');",
											"            });",
											"            pm.test(\"fspiop-destination should be payerfsp\", function () {",
											"                pm.expect(headers[\"fspiop-destination\"]).to.eql('payerfsp');",
											"            });",
											"            pm.test(\"fspiop-http-method should be PUT\", function () {",
											"                pm.expect(headers[\"fspiop-http-method\"]).to.eql('PUT');",
											"            });",
											"            pm.test(\"fspiop-uri should be /payerfsp/bulkTransfers/\" + pm.environment.get(\"bulkTransferId\"), function () {",
											"                pm.expect(headers[\"fspiop-uri\"]).to.eql(\"/payerfsp/bulkTransfers/\" + pm.environment.get(\"bulkTransferId\"));",
											"            });",
											"            pm.test(\"fspiop-signature should be set\", function () {",
											"                pm.expect(headers[\"fspiop-signature\"]).to.be.ok;",
											"            });",
											"",
											"",
											"            const data = jsonResponse.data",
											"            pm.test(\"Bulk Transfer state should be COMPLETED on Payer side\", function () {",
											"                pm.expect(data.bulkTransferState).to.eql('COMPLETED');",
											"            });",
											"            pm.test(\"Completed timestamp should be set\", function () {",
											"                pm.expect(data.completedTimestamp).to.be.ok;",
											"            });",
											"            pm.test(\"All individual transfer results (failed & successful) should be returned\", function () {",
											"                pm.expect(data.individualTransferResults.length).to.eql(2);",
											"            });",
											"            pm.test(\"One individual transfer result should contain successful transfer fulfilment\", function () {",
											"                const successTransfer = data.individualTransferResults.find(t => t.transferId === pm.environment.get(\"transferId\"))",
											"                pm.expect(successTransfer.transferId).to.be.ok",
											"                pm.expect(successTransfer.fulfilment).to.be.ok",
											"            })",
											"            pm.test(\"One individual transfer result should contain errorInformation\", function () {",
											"                const failedTransfer = data.individualTransferResults.find(t => t.transferId === pm.environment.get(\"transferId2\"))",
											"                pm.expect(failedTransfer.errorInformation.errorCode).to.eql(\"3100\");",
											"                pm.expect(failedTransfer.errorInformation.errorDescription).to.eql(\"Generic validation error - Participant payerfsp AED account not found\");",
											"                pm.expect(failedTransfer.transferId).to.be.ok",
											"            })",
											"        } else {",
											"            pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"            });",
											"        }",
											"    });",
											"}, 3000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "{{contentType}}"
									},
									{
										"key": "Date",
										"value": "{{headerDate}}"
									},
									{
										"key": "Accept",
										"value": "{{acceptHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "~~{{payerfsp}}~~"
									},
									{
										"key": "FSPIOP-URI",
										"type": "text",
										"value": "/bulkTransfers"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n    \"bulkTransferId\": \"{{bulkTransferId}}\",\n    \"bulkQuoteId\": \"{{bulkQuoteId}}\",\n    \"payeeFsp\": \"{{payeefsp}}\",\n    \"payerFsp\": \"{{payerfsp}}\",\n    \"individualTransfers\":\n    [ {\n        \"transferId\": \"{{transferId}}\",\n        \"transferAmount\": {\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"{{amount}}\"\n        },\n        \"ilpPacket\": \"{{validIlpPacket2}}\",\n        \"condition\": \"{{validCondition2}}\",\n        \"extensionList\": { \"extension\": [\n            { \"key\": \"extKey1\", \"value\": \"extValue1\"},\n            { \"key\": \"extKey2\", \"value\": \"extValue2\"}\n        ] }\n      },\n       {\n        \"transferId\": \"{{transferId2}}\",\n        \"transferAmount\": {\n            \"currency\": \"AED\",\n            \"amount\": \"{{amount2}}\"\n        },\n        \"ilpPacket\": \"{{validIlpPacket2}}\",\n        \"condition\": \"{{validCondition2}}\"\n    } ],\n    \"expiration\": \"{{expirationDate}}\"\n}"
								},
								"url": {
									"raw": "{{HOST_BULK_ADAPTER}}/bulkTransfers",
									"host": [
										"{{HOST_BULK_ADAPTER}}"
									],
									"path": [
										"bulkTransfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Bulk Transfer - PayeeFSP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3526a9f9-93a2-4b4e-8fd6-db2bcd752059",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c105f1ae-749a-439e-b3cf-adce66c3c3cd",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"bulkTransferId\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              const jsonResponse = response.json();",
											"              ",
											"              const headers = jsonResponse.headers",
											"              pm.test(\"date header should be set\", function () {",
											"                pm.expect(headers.date).to.be.ok;",
											"              });",
											"              pm.test(\"fspiop-source should be switch\", function () {",
											"                pm.expect(headers[\"fspiop-source\"]).to.eql('switch');",
											"              });",
											"              pm.test(\"fspiop-destination should be payeefsp\", function () {",
											"                pm.expect(headers[\"fspiop-destination\"]).to.eql('payeefsp');",
											"              });",
											"              pm.test(\"fspiop-http-method should be PUT\", function () {",
											"                pm.expect(headers[\"fspiop-http-method\"]).to.eql('PUT');",
											"              });",
											"              pm.test(\"fspiop-uri should be /payeefsp/bulkTransfers/\" + pm.environment.get(\"bulkTransferId\"), function () {",
											"                pm.expect(headers[\"fspiop-uri\"]).to.eql(\"/payeefsp/bulkTransfers/\" + pm.environment.get(\"bulkTransferId\"));",
											"              });",
											"              pm.test(\"fspiop-signature should not be set\", function () {",
											"                pm.expect(headers[\"fspiop-signature\"]).to.eql(undefined);",
											"              });",
											"              ",
											"             ",
											"              const data = jsonResponse.data",
											"              pm.test(\"Bulk Transfer state should be COMPLETED on Payee side\", function () {",
											"                pm.expect(data.bulkTransferState).to.eql('COMPLETED');",
											"              });",
											"              pm.test(\"Completed timestamp should be set\", function () {",
											"                pm.expect(data.completedTimestamp).to.be.ok;",
											"              });",
											"              pm.test(\"Only one (1) individual transfer result (fulfilment) should be returned\", function () {",
											"                pm.expect(data.individualTransferResults.length).to.eql(1);",
											"              });",
											"              pm.test(\"Individual transfer result should have transferId\", function () {",
											"                pm.expect(data.individualTransferResults[0].transferId).to.be.ok;",
											"              });",
											"              pm.test(\"Individual transfer result should have fulfilment\", function () {",
											"                pm.expect(data.individualTransferResults[0].fulfilment).to.be.ok;",
											"              });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"          }",
											"   });",
											"}, 1000)",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{headerDate}}"
									},
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "switch"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "~~{{payeefsp}}~~"
									},
									{
										"key": "FSPIOP-URI",
										"type": "text",
										"value": "/bulkTransfers/{{bulkTransferId}}"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"type": "text",
										"value": "GET"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_BULK_ADAPTER}}/bulkTransfers/{{bulkTransferId}}",
									"host": [
										"{{HOST_BULK_ADAPTER}}"
									],
									"path": [
										"bulkTransfers",
										"{{bulkTransferId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Bulk Transfer - PayerFSP",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e49f7d09-5e05-4023-accc-f8f3a6daeb68",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7253dba3-dd3d-48b2-bc1a-f03a0153918b",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"bulkTransferId\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              const jsonResponse = response.json();",
											"              ",
											"              const headers = jsonResponse.headers",
											"              pm.test(\"date header should be set\", function () {",
											"                pm.expect(headers.date).to.be.ok;",
											"              });",
											"              pm.test(\"fspiop-source should be switch\", function () {",
											"                pm.expect(headers[\"fspiop-source\"]).to.eql('switch');",
											"              });",
											"              pm.test(\"fspiop-destination should be payerfsp\", function () {",
											"                pm.expect(headers[\"fspiop-destination\"]).to.eql('payerfsp');",
											"              });",
											"              pm.test(\"fspiop-http-method should be PUT\", function () {",
											"                pm.expect(headers[\"fspiop-http-method\"]).to.eql('PUT');",
											"              });",
											"              pm.test(\"fspiop-uri should be /payerfsp/bulkTransfers/\" + pm.environment.get(\"bulkTransferId\"), function () {",
											"                pm.expect(headers[\"fspiop-uri\"]).to.eql(\"/payerfsp/bulkTransfers/\" + pm.environment.get(\"bulkTransferId\"));",
											"              });",
											"              pm.test(\"fspiop-signature should be set\", function () {",
											"                pm.expect(headers[\"fspiop-signature\"]).to.eql(undefined);",
											"              });",
											"              ",
											"             ",
											"              const data = jsonResponse.data",
											"              pm.test(\"Bulk transfer state should be COMPLETED on Payer side\", function () {",
											"                pm.expect(data.bulkTransferState).to.eql('COMPLETED');",
											"              });",
											"              pm.test(\"Completed timestamp should be set\", function () {",
											"                pm.expect(data.completedTimestamp).to.be.ok;",
											"              });",
											"              pm.test(\"All individual transfer results (fulfilments) should be returned\", function () {",
											"                pm.expect(data.individualTransferResults.length).to.eql(2);",
											"              });",
											"              const transfer1 = data.individualTransferResults.find(t => t.transferId === pm.environment.get(\"transferId\"));",
											"              pm.test(\"1st individual transfer should have fulfilment\", function () {",
											"                  pm.expect(transfer1.fulfilment).to.be.ok",
											"              });",
											"              const transfer2 = data.individualTransferResults.find(t => t.transferId === pm.environment.get(\"transferId2\"));",
											"              pm.test(\"2nd individual transfer should not have fulfilment\", function () {",
											"                  pm.expect(transfer2.fulfilment).to.eql(undefined)",
											"              });",
											"              pm.test(\"2nd individual transfer should contain valid error information\", function() {",
											"                pm.expect(transfer2.errorInformation.errorCode).to.eql(\"3100\");",
											"                pm.expect(transfer2.errorInformation.errorDescription).to.eql(\"Generic validation error - Participant payerfsp AED account not found\");",
											"              })",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              ",
											"          }",
											"   });",
											"}, 1000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{headerDate}}"
									},
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "switch"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "~~{{payerfsp}}~~"
									},
									{
										"key": "FSPIOP-URI",
										"type": "text",
										"value": "/bulkTransfers/{{bulkTransferId}}"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"type": "text",
										"value": "GET"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_BULK_ADAPTER}}/bulkTransfers/{{bulkTransferId}}",
									"host": [
										"{{HOST_BULK_ADAPTER}}"
									],
									"path": [
										"bulkTransfers",
										"{{bulkTransferId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "GET Bulk API Health",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7abcfaf7-f010-4be1-ad05-5bd8fd2cf825",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{HOST_BULK_ADAPTER}}/health",
					"host": [
						"{{HOST_BULK_ADAPTER}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}