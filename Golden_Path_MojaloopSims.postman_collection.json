{
	"info": {
		"_postman_id": "58a117c8-d33a-443b-a2d1-dfed93736b69",
		"name": "Golden_Path_MojaloopSims",
		"description": "Author: Sridevi Miriyala\nDescription: Golden Path Tests using Mojaloop Simulators",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "feature-tests",
			"item": [
				{
					"name": "p2p_money_transfer",
					"item": [
						{
							"name": "(BUG) p2p_happy_path_RECEIVE_quote",
							"item": [
								{
									"name": "Download JWS Signature Generation Package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ac59223-2083-4df4-bb55-7f47c4ed94b1",
												"exec": [
													"pm.environment.set(\"jrsassign\", pm.response.text());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js",
											"protocol": "http",
											"host": [
												"kjur",
												"github",
												"io"
											],
											"path": [
												"jsrsasign",
												"jsrsasign-latest-all-min.js"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Party - MSISDN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "decab794-66d7-4b03-b6da-4191441206a8",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"//Check data on payee side",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"payeefspMSISDN\"), function (err, response) {",
													"       ",
													"       if(response.responseSize !== 0) { ",
													"       //Checking headers",
													"        var headers = response.json().headers;",
													"        pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
													"            pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"        });",
													"        ",
													"        pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
													"            pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"        });",
													"        ",
													"        pm.test(\"payeefsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
													"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
													"        });",
													"        ",
													"        pm.test(\"payeefsp accept should be application/vnd.interoperability.parties+json;version=1\", function () {",
													"            pm.expect(headers['accept']).to.eql('application/vnd.interoperability.parties+json;version=1');",
													"        });",
													"        ",
													"        ",
													"        pm.test.skip(\"payeefsp FSPIOP-URI to be /parties\", function () {",
													"            pm.expect(headers['fspiop-uri']).to.eql('/parties');",
													"        });",
													"        ",
													"        pm.test.skip(\"payeefsp fspiop-http-method is GET\", function () {",
													"            pm.expect(headers['fspiop-http-method']).to.eql('GET');",
													"        });",
													"        ",
													"        ",
													"        ",
													"       } else {",
													"           pm.test(\"Parties FAILED - payeeFSP\", function () {",
													"            throw new Error('Did not receive response');",
													"           });",
													"           ",
													"       }",
													"      ",
													"    });",
													"}, 100)",
													"",
													"//Check data on payer side",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.variables.get(\"payeefspMSISDN\"), function (err, response) {",
													"       ",
													"       if(response.responseSize !== 0) { ",
													"       //Checking headers",
													"        var headers = response.json().headers;",
													"        pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
													"            pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"        });",
													"        ",
													"        pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
													"            pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"        });",
													"        ",
													"        pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
													"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
													"        });",
													"        ",
													"        pm.test(\"payerfsp accept is empty\", function () {",
													"            pm.expect(headers['accept']).to.eql(undefined);",
													"        });",
													"        ",
													"        ",
													"        ",
													"        //Validate protected header inside Signature",
													"        var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"        var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"        console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"        ",
													"        // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
													"        //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
													"        // });",
													"        ",
													"        pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"            pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"        });",
													"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
													"            pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
													"        });",
													"        ",
													"",
													"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"            pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"        });",
													"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
													"            pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
													"        });",
													"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
													"            pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
													"        });",
													"        pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"            pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
													"        });",
													"       ",
													"        //pm.test(\"payerfsp FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
													"        //    pm.expect(headers['fspiop-uri']).to.eql('/parties/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
													"        //});",
													"        ",
													"        pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"            pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"        });",
													"        ",
													"        //Checking data",
													"        var jsonData = response.json().data;",
													"       pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
													"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
													"        });",
													"        pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
													"          pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
													"        });",
													"        pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
													"          pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
													"        });  ",
													"        ",
													"       } else {",
													"           pm.test(\"Parties FAILED - payerFSP\", function () {",
													"            throw new Error('Did not receive response');",
													"           });",
													"           ",
													"       }",
													"      ",
													"    });",
													"}, 200)",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
												"exec": [
													"pm.variables.set('expectedFullName', 'SimFirst SimLast');",
													"pm.variables.set('expectedFirstName', 'SimFirst');",
													"pm.variables.set('expectedLastName', 'SimLast');",
													"pm.variables.set('expectedDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.parties+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.parties+json;version=1.0"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "Date",
												"value": "{{dateHeader}}"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/parties/MSISDN/{{payeefspMSISDN}}",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"parties",
												"MSISDN",
												"{{payeefspMSISDN}}"
											]
										},
										"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
									},
									"response": []
								},
								{
									"name": "Get Party - BUSINESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "decab794-66d7-4b03-b6da-4191441206a8",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"//Check data on payee side",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"merchantId\"), function (err, response) {",
													"       ",
													"       if(response.responseSize !== 0) { ",
													"       //Checking headers",
													"        var headers = response.json().headers;",
													"        pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
													"            pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"        });",
													"        ",
													"        pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
													"            pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"        });",
													"        ",
													"        pm.test(\"payeefsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
													"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
													"        });",
													"        ",
													"        pm.test(\"payeefsp accept should be application/vnd.interoperability.parties+json;version=1\", function () {",
													"            pm.expect(headers['accept']).to.eql('application/vnd.interoperability.parties+json;version=1');",
													"        });",
													"        ",
													"        ",
													"        pm.test.skip(\"payeefsp FSPIOP-URI to be /parties\", function () {",
													"            pm.expect(headers['fspiop-uri']).to.eql('/parties');",
													"        });",
													"        ",
													"        pm.test.skip(\"payeefsp fspiop-http-method is GET\", function () {",
													"            pm.expect(headers['fspiop-http-method']).to.eql('GET');",
													"        });",
													"        ",
													"        ",
													"        ",
													"       } else {",
													"           pm.test(\"Parties FAILED - payeeFSP\", function () {",
													"            throw new Error('Did not receive response');",
													"           });",
													"           ",
													"       }",
													"      ",
													"    });",
													"}, 100)",
													"",
													"//Check data on payer side",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.variables.get(\"merchantId\"), function (err, response) {",
													"       ",
													"       if(response.responseSize !== 0) { ",
													"       //Checking headers",
													"        var headers = response.json().headers;",
													"        pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
													"            pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"        });",
													"        ",
													"        pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
													"            pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"        });",
													"        ",
													"        pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
													"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
													"        });",
													"        ",
													"        pm.test(\"payerfsp accept is empty\", function () {",
													"            pm.expect(headers['accept']).to.eql(undefined);",
													"        });",
													"        ",
													"        ",
													"        ",
													"        //Validate protected header inside Signature",
													"        var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"        var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"        console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"        ",
													"        // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
													"        //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
													"        // });",
													"        ",
													"        pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"            pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"        });",
													"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/BUSINESS/\"+pm.environment.get(\"merchantId\"), function () {",
													"            pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/BUSINESS/'+pm.environment.get(\"merchantId\"));",
													"        });",
													"        ",
													"",
													"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"            pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"        });",
													"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be payeefsp\", function () {",
													"            pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
													"        });",
													"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
													"            pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
													"        });",
													"        pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"            pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
													"        });",
													"       ",
													"        //pm.test(\"payerfsp FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
													"        //    pm.expect(headers['fspiop-uri']).to.eql('/parties/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
													"        //});",
													"        ",
													"        pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"            pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"        });",
													"        ",
													"        //Checking data",
													"        var jsonData = response.json().data;",
													"       pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
													"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
													"        });",
													"        pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
													"          pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
													"        });",
													"        pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
													"          pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
													"        });  ",
													"        ",
													"       } else {",
													"           pm.test(\"Parties FAILED - payerFSP\", function () {",
													"            throw new Error('Did not receive response');",
													"           });",
													"           ",
													"       }",
													"      ",
													"    });",
													"}, 200)",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
												"exec": [
													"pm.variables.set('expectedFullName', 'SimFirst SimLast');",
													"pm.variables.set('expectedFirstName', 'SimFirst');",
													"pm.variables.set('expectedLastName', 'SimLast');",
													"pm.variables.set('expectedDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.parties+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.parties+json;version=1.0"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "Date",
												"value": "{{dateHeader}}"
											}
										],
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/parties/BUSINESS/{{merchantId}}",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"parties",
												"BUSINESS",
												"{{merchantId}}"
											]
										},
										"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
									},
									"response": []
								},
								{
									"name": "Get Party - ALIAS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "decab794-66d7-4b03-b6da-4191441206a8",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"//Check data on payee side",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"aliasID\"), function (err, response) {",
													"       ",
													"       if(response.responseSize !== 0) { ",
													"       //Checking headers",
													"        var headers = response.json().headers;",
													"        pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
													"            pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"        });",
													"        ",
													"        pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
													"            pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"        });",
													"        ",
													"        pm.test(\"payeefsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
													"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
													"        });",
													"        ",
													"        pm.test(\"payeefsp accept should be application/vnd.interoperability.parties+json;version=1\", function () {",
													"            pm.expect(headers['accept']).to.eql('application/vnd.interoperability.parties+json;version=1');",
													"        });",
													"        ",
													"        ",
													"        pm.test.skip(\"payeefsp FSPIOP-URI to be /parties\", function () {",
													"            pm.expect(headers['fspiop-uri']).to.eql('/parties');",
													"        });",
													"        ",
													"        pm.test.skip(\"payeefsp fspiop-http-method is GET\", function () {",
													"            pm.expect(headers['fspiop-http-method']).to.eql('GET');",
													"        });",
													"        ",
													"        ",
													"        ",
													"       } else {",
													"           pm.test(\"Parties FAILED - payeeFSP\", function () {",
													"            throw new Error('Did not receive response');",
													"           });",
													"           ",
													"       }",
													"      ",
													"    });",
													"}, 100)",
													"",
													"//Check data on payer side",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.variables.get(\"aliasID\"), function (err, response) {",
													"       ",
													"       if(response.responseSize !== 0) { ",
													"       //Checking headers",
													"        var headers = response.json().headers;",
													"        pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
													"            pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"        });",
													"        ",
													"        pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
													"            pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"        });",
													"        ",
													"        pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
													"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
													"        });",
													"        ",
													"        pm.test(\"payerfsp accept is empty\", function () {",
													"            pm.expect(headers['accept']).to.eql(undefined);",
													"        });",
													"        ",
													"        ",
													"        ",
													"        //Validate protected header inside Signature",
													"        var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"        var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"        console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"        ",
													"        // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
													"        //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
													"        // });",
													"        ",
													"        pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"            pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"        });",
													"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/ALIAS/\"+pm.environment.get(\"aliasID\"), function () {",
													"            pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/ALIAS/'+pm.environment.get(\"aliasID\"));",
													"        });",
													"        ",
													"",
													"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"            pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"        });",
													"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
													"            pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
													"        });",
													"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
													"            pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
													"        });",
													"        pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"            pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
													"        });",
													"       ",
													"        //pm.test(\"payerfsp FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
													"        //    pm.expect(headers['fspiop-uri']).to.eql('/parties/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
													"        //});",
													"        ",
													"        pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"            pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"        });",
													"        ",
													"        //Checking data",
													"        var jsonData = response.json().data;",
													"       pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
													"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
													"        });",
													"        pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
													"          pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
													"        });",
													"        pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
													"          pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
													"        });  ",
													"        ",
													"       } else {",
													"           pm.test(\"Parties FAILED - payerFSP\", function () {",
													"            throw new Error('Did not receive response');",
													"           });",
													"           ",
													"       }",
													"      ",
													"    });",
													"}, 200)",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
												"exec": [
													"pm.variables.set('expectedFullName', 'SimFirst SimLast');",
													"pm.variables.set('expectedFirstName', 'SimFirst');",
													"pm.variables.set('expectedLastName', 'SimLast');",
													"pm.variables.set('expectedDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.parties+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.parties+json;version=1.0"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "Date",
												"value": "{{dateHeader}}"
											}
										],
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/parties/ALIAS/{{aliasID}}",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"parties",
												"ALIAS",
												"{{aliasID}}"
											]
										},
										"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
									},
									"response": []
								},
								{
									"name": "(BUG) Send Quote - RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"var navigator = {}; ",
													"var window = {}; ",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
													"      \"fspId\": \"payerfsp\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"      \"dateOfBirth\": \"1983-10-25\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
													"      \"fspId\": \"payeefsp\"",
													"    }",
													"  },",
													"  \"amountType\": \"RECEIVE\",",
													"  \"amount\": {",
													"    \"amount\": \"60\",",
													"    \"currency\": pm.environment.get('currency')",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              ",
													"              //Check the Headers",
													"              var headers = response.json().headers;",
													"              ",
													"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
													"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
													"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
													"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
													"                });",
													"                ",
													"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
													"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
													"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {",
													"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
													"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
													"                });",
													"                ",
													"          } else {",
													"              pm.test(\"Quote FAILED\", function () {",
													"                throw new Error('Did not receive request on payee side');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 1100)",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
													"      if(response.responseSize !== 0) {",
													"          //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            ",
													"            ",
													"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"            // var strData = JSON.stringify(response.json().data)",
													"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
													"            // console.log(`token: ${token}`)",
													"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
													"            // console.log(`isValid: ${isValid}`)",
													"            // pm.test(\"Check if the response is JWS valid\", function () {",
													"            //     pm.expect(isValid).to.eql(true);",
													"            // });",
													"            ",
													"            //Validate protected header inside Signature",
													"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"            ",
													"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"            });",
													"            ",
													"",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);",
													"            });",
													"           ",
													"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            ",
													"            pm.test(\"Response quoteId is  null\", function () {",
													"                pm.expect(jsonData.quoteId).to.eql(undefined);",
													"                ",
													"            });",
													"          ",
													"            pm.test(\"Response ilpPacket is not null\", function () {",
													"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
													"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
													"            });",
													"       ",
													"           pm.test(\"Response condition is not null\", function () {",
													"               pm.expect(jsonData.condition).not.equal(undefined);",
													"               pm.environment.set(\"condition\", jsonData.condition);",
													"           });",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('Did not receive response on Payer side');",
													"           });",
													"           postman.setNextRequest(null);",
													"      }",
													"       ",
													"   });",
													"}, 1000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "payeefsp"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "(BUG)Send Transfer - RECEIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "900142b0-e4d7-43a4-a751-38202b600661",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// //Check the request that Switch forwards to payeefsp",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              ",
													"              //Check the Headers",
													"              var headers = response.json().headers;",
													"              ",
													"                pm.test(\"payeefsp fspiop-source is goldenpayerfsp\", function () {",
													"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-destination is goldenpayeefsp\", function () {",
													"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
													"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
													"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
													"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
													"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
													"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
													"                });",
													"                ",
													"                ",
													"                //Check the data",
													"                var jsonData = response.json().data;",
													"                pm.test(\"payeefsp data should have the same transferId as request\", function () {",
													"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));",
													"                });",
													"                pm.test(\"payeefsp data should have the same payerfspId as request\", function () {",
													"                  pm.expect(jsonData.payerFsp).to.eql('payerfsp');",
													"                });",
													"                pm.test(\"payeefsp data should have the same payeefspId as request\", function () {",
													"                  pm.expect('payeefsp');",
													"                });",
													"                pm.test(\"payeefsp data should have the same amount as request\", function () {",
													"                  pm.expect(jsonData.amount.amount).to.eql('10');",
													"                });",
													"                pm.test(\"payeefsp data should have the same currency as request\", function () {",
													"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
													"                });",
													"                pm.test(\"payeefsp data should have the same expiration as request\", function () {",
													"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
													"                });",
													"                pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
													"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
													"                });",
													"                pm.test(\"payeefsp data should have the same condition as request\", function () {",
													"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
													"                });",
													"                ",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response on payee side');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"  });",
													"}, 1100)",
													"",
													"//Check the callback response that Switch forwards to payerfsp",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"            //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is goldenpayeefsp \", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-signature is not empty\", function () {",
													"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
													"                });",
													"            ",
													"            ",
													"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            pm.test(\"Response data does not have transferId\", function () {",
													"               pm.expect(jsonData.transferId).to.eql(undefined);",
													"            });",
													"            pm.test(\"Response status is COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"            });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response on payer side');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 1300)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "20820c95-0a24-4906-a6ba-708d6ecf4a61",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"transferId\": pm.environment.get('transfer_ID'),",
													"  \"payerFsp\": \"payerfsp\",",
													"  \"payeeFsp\": \"payeefsp\",",
													"  \"amount\": {",
													"    \"amount\": \"10\",",
													"    \"currency\": pm.environment.get('currency')",
													"  },",
													"  \"expiration\": pm.environment.get('transferExpiration'),",
													"  \"ilpPacket\": pm.environment.get('ilpPacket'),",
													"  \"condition\": pm.environment.get('condition')",
													"}",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"transferRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
													"//console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "payeefsp"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/transfers"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transferRequest}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Transfer_SEND_quote",
							"item": [
								{
									"name": "Get payerfsp position before TheTransfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f2c9a7dc-8b97-4b80-ad48-3b0e722f87d6",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"",
													"for (var i in jsonData){",
													"    if(jsonData[i].currency === \"XOF\") {",
													"  pm.test(\"Atleast one account position should be returned\", function () {",
													"    pm.environment.set(\"payerfspPositionBeforeTransferhp\", jsonData[i].value);",
													"    pm.expect(jsonData).to.be.not.empty;",
													"  });",
													"    }",
													"   ",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"positions"
											]
										},
										"description": "We will capture the initial position for Payerfsp before the transfer and will save this value in a variable  payerfspPositionBeforeTransferhp"
									},
									"response": []
								},
								{
									"name": "Get payeefsp position before TheTransfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a9997f5-7f71-400c-8e4b-2234ad1aba3e",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"",
													"for (var i in jsonData){",
													"    if(jsonData[i].currency === \"XOF\") {",
													"  pm.test(\"Atleast one account position should be returned\", function () {",
													"    pm.environment.set(\"payeefspPositionBeforeTransferhp\", jsonData[i].value);",
													"    pm.expect(jsonData).to.be.not.empty;",
													"  });",
													"    }",
													"   ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYEEFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "payeefsp",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payeefsp}}",
												"positions"
											]
										},
										"description": "We will capture the initial position for Payeefsp before the transfer and will save this value in a variable  payeefspPositionBeforeTransferhp"
									},
									"response": []
								},
								{
									"name": "(BUG) Send Quote - SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
													"      \"fspId\": \"payerfsp\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"      \"dateOfBirth\": \"1983-10-25\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
													"      \"fspId\": \"payeefsp\"",
													"    }",
													"  },",
													"  \"amountType\": \"SEND\",",
													"  \"amount\": {",
													"    \"amount\": \"10\",",
													"    \"currency\": pm.environment.get('currency')",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              ",
													"              //Check the Headers",
													"              var headers = response.json().headers;",
													"              ",
													"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
													"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
													"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
													"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
													"                });",
													"                ",
													"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
													"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
													"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {",
													"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
													"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
													"                });",
													"                ",
													"          } else {",
													"              pm.test(\"Quote FAILED\", function () {",
													"                throw new Error('Did not receive request on payee side');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 1100)",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
													"      if(response.responseSize !== 0) {",
													"          //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is goldenpayeefsp\", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            ",
													"            ",
													"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"            // var strData = JSON.stringify(response.json().data)",
													"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
													"            // console.log(`token: ${token}`)",
													"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
													"            // console.log(`isValid: ${isValid}`)",
													"            // pm.test(\"Check if the response is JWS valid\", function () {",
													"            //     pm.expect(isValid).to.eql(true);",
													"            // });",
													"            ",
													"            //Validate protected header inside Signature",
													"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"            ",
													"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"            });",
													"            ",
													"",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
													"            });",
													"           ",
													"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            ",
													"            pm.test(\"Response quoteId is  null\", function () {",
													"                pm.expect(jsonData.quoteId).to.eql(undefined);",
													"                ",
													"            });",
													"          ",
													"            pm.test(\"Response ilpPacket is not null\", function () {",
													"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
													"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
													"            });",
													"       ",
													"           pm.test(\"Response condition is not null\", function () {",
													"               pm.expect(jsonData.condition).not.equal(undefined);",
													"               pm.environment.set(\"condition\", jsonData.condition);",
													"           });",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('Did not receive response on Payer side');",
													"           });",
													"           postman.setNextRequest(null);",
													"      }",
													"       ",
													"   });",
													"}, 1000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "payeefsp"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "(BUG) Send Transfer - SEND",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "900142b0-e4d7-43a4-a751-38202b600661",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// //Check the request that Switch forwards to payeefsp",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              ",
													"              //Check the Headers",
													"              var headers = response.json().headers;",
													"              ",
													"                pm.test(\"payeefsp fspiop-source is goldenpayerfsp\", function () {",
													"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-destination is goldenpayeefsp\", function () {",
													"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
													"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
													"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
													"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
													"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
													"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
													"                });",
													"                ",
													"                ",
													"                //Check the data",
													"                var jsonData = response.json().data;",
													"                pm.test(\"payeefsp data should have the same transferId as request\", function () {",
													"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));",
													"                });",
													"                pm.test(\"payeefsp data should have the same payerfspId as request\", function () {",
													"                  pm.expect(jsonData.payerFsp).to.eql('payerfsp');",
													"                });",
													"                pm.test(\"payeefsp data should have the same payeefspId as request\", function () {",
													"                  pm.expect('payeefsp');",
													"                });",
													"                pm.test(\"payeefsp data should have the same amount as request\", function () {",
													"                  pm.expect(jsonData.amount.amount).to.eql('10');",
													"                });",
													"                pm.test(\"payeefsp data should have the same currency as request\", function () {",
													"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
													"                });",
													"                pm.test(\"payeefsp data should have the same expiration as request\", function () {",
													"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
													"                });",
													"                pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
													"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
													"                });",
													"                pm.test(\"payeefsp data should have the same condition as request\", function () {",
													"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
													"                });",
													"                ",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response on payee side');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"  });",
													"}, 1100)",
													"",
													"//Check the callback response that Switch forwards to payerfsp",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"            //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is goldenpayeefsp \", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            ",
													"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            pm.test(\"Response data does not have transferId\", function () {",
													"               pm.expect(jsonData.transferId).to.eql(undefined);",
													"            });",
													"            pm.test(\"Response status is COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"            });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response on payer side');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 1300)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "20820c95-0a24-4906-a6ba-708d6ecf4a61",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"transferId\": pm.environment.get('transfer_ID'),",
													"  \"payerFsp\": \"payerfsp\",",
													"  \"payeeFsp\": \"payeefsp\",",
													"  \"amount\": {",
													"    \"amount\": \"10\",",
													"    \"currency\": pm.environment.get('currency')",
													"  },",
													"  \"expiration\": pm.environment.get('transferExpiration'),",
													"  \"ilpPacket\": pm.environment.get('ilpPacket'),",
													"  \"condition\": pm.environment.get('condition')",
													"}",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"transferRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
													"//console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "payeefsp"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/transfers"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transferRequest}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get payerfsp position after the transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7174c4f7-799f-4c4a-ad66-ab598ed32477",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var expectedamount = Number.parseFloat(pm.environment.get(\"payerfspPositionBeforeTransferhp\"))+Number.parseFloat(1);",
													"//expectedamount = expectedamount.toFixed(2);",
													"console.log(expectedamount);",
													"//console.log(jsonData[0].value);",
													"/*if (pm.environment.get('ENV') === 'uat0') {",
													"pm.test(\"Position should be changed after transfer\", function () {",
													"    pm.expect(jsonData[1].value).to.eql(Number(expectedamount));",
													"});",
													"}else{",
													"    ",
													"    pm.test(\"Position should be changed after transfer\", function () {",
													"    pm.expect(jsonData[0].value).to.eql(Number(expectedamount));",
													"});",
													"}*/",
													"",
													"",
													"for (var i in jsonData){",
													"    if(jsonData[i].currency === \"XOF\") {",
													"   pm.test(\"Position should be changed after transfer\", function () {",
													"    pm.expect(jsonData[i].value).to.eql(Number(expectedamount));",
													"});",
													"    }",
													"   ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"positions"
											]
										},
										"description": "If transfer was successful then the position for payerfsp should change, we will get the current position for payerfsp and compare this value against initial payerfsp position captured in:  payerfspPositionBeforeTransferhp\nPositon should be increased in 1 XOF"
									},
									"response": []
								},
								{
									"name": "Get payeefsp position after the transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "864dee38-3b5b-4709-9637-92931170b286",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var expectedamount = Number.parseFloat(pm.environment.get(\"payeefspPositionBeforeTransferhp\"))-Number.parseFloat(1);",
													"//expectedamount = expectedPayerAccountBalanceAfterSettlementx.toFixed(2);",
													"/*console.log(expectedamount);",
													"pm.test(\"Position should be changed after transfer\", function () {",
													"    pm.expect(Number(jsonData[0].value)).to.eql(Number(expectedamount));",
													"});*/",
													"",
													"for (var i in jsonData){",
													"    if(jsonData[i].currency === \"XOF\") {",
													"   pm.test(\"Position should be changed after transfer\", function () {",
													"   pm.expect(Number(jsonData[i].value)).to.eql(Number(expectedamount));",
													"});",
													"    }",
													"   ",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payeefsp}}",
												"positions"
											]
										},
										"description": "If transfer was successful then the position for payeefsp should change, we will get the current position for payeefsp and compare this value against initial payeefsp position captured in:  payeefspPositionBeforeTransferhp\nPositon should be increased in 1 XOF"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Author: Sridevi Miriyala",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bd53c7ee-b55d-4d1a-a178-3c09e68e8901",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c2b5e1bd-f23e-4874-98a7-fc62bcd9d331",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "post_scenarios",
					"item": [
						{
							"name": "positive",
							"item": [
								{
									"name": "Add party to payeefsp - MSISDN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29b9bc87-1012-4c8d-a593-7506feb361eb",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([204,500]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"displayName\": \"PayeeFirst PayeeLast\",\n    \"firstName\": \"PayeeFirst\",\n    \"middleName\": \"PayeeMiddle\",\n    \"lastName\": \"PayeeLast\",\n    \"dateOfBirth\": \"2010-10-10\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"{{payeefspMSISDN}}\"\n}"
										},
										"url": {
											"raw": "{{PAYEEFSP_BACKEND_TESTAPI_URL}}/repository/parties",
											"host": [
												"{{PAYEEFSP_BACKEND_TESTAPI_URL}}"
											],
											"path": [
												"repository",
												"parties"
											]
										},
										"description": "Create a party"
									},
									"response": [
										{
											"name": "The party was created",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/repository/parties",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"repository",
														"parties"
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "An error occured processing the request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/repository/parties",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"repository",
														"parties"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Post scenarios - MSISDN - payerfsp to payeefsp",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c2c608b5-051f-42e8-959c-550701cbdb05",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
													"pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5ec089f0-63bb-4200-807a-90ab47a1a7f2",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`Payer name is ${pm.variables.get('payerName')}`, function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.from.displayName).to.eql(pm.variables.get('payerName'));",
													"});",
													"pm.test(\"payer idType is MSISDN\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.from.idType).to.eql(\"MSISDN\");",
													"});",
													"pm.test(\"payer idValue is 44123456789\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.from.idValue).to.eql(pm.environment.get('payerfspMSISDN'));",
													"});",
													"",
													"pm.test(\"Payee idType is MSISDN\", function () {",
													"    var jsonData = pm.response.json();",
													"     pm.expect(jsonData.scenario1.result.to.idType).to.eql(\"MSISDN\");",
													"});",
													"",
													"pm.test(`Payee idValue is ${pm.variables.get('payeefspMSISDN')}`, function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.to.idValue).to.eql(pm.variables.get('payeefspMSISDN'));",
													"});",
													"",
													"pm.test(\"payee fspId is payeefsp\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.to.fspId).to.eql(\"payeefsp\");",
													"});",
													"",
													"pm.test(\"payee First name is PayeeFirst\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.to.firstName).to.eql(\"PayeeFirst\");",
													"});   ",
													"",
													"pm.test(\"payee Last name is PayeeLast\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.to.lastName).to.eql(\"PayeeLast\");",
													"});",
													"",
													"pm.test(\"payee DOB is 2010-10-10\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
													"});",
													"",
													"pm.test(\"amount type is SEND\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.amountType).to.eql(\"SEND\");",
													"});",
													"",
													"pm.test(`Currency is ${pm.environment.get('currency')}`, function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.currency).to.eql(pm.environment.get('currency'));",
													"});",
													"",
													"pm.test(\"Transfer Amount is 10\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.amount).to.eql(\"10\");",
													"});",
													"",
													"pm.test(\"Transaction type is Transfer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.transactionType).to.eql(\"TRANSFER\");",
													"});",
													"   ",
													"  pm.test(\"Initiator type is CONSUMER\", function () {",
													"    var jsonData = pm.response.json(); ",
													"    pm.expect(jsonData.scenario1.result.initiatorType).to.eql(\"CONSUMER\");",
													" });  ",
													" ",
													" pm.test(\"Note is TESTPAYMENT\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.note).to.eql(\"test payment\");",
													"});",
													"",
													"// pm.test(`quote Id is ${pm.environment.get('quoteId')} `, function () {",
													"//     var jsonData = pm.response.json();",
													"    ",
													"//     pm.expect(jsonData.scenario1.result.quoteResponse.quoteId).to.eql(pm.environment.get('quoteId'));",
													"// });",
													"",
													"pm.test(`transferId is ${pm.environment.get('transferId')}`, function () {",
													"    var jsonData = pm.response.json();",
													"     pm.expect(jsonData.scenario1.result.transferId).to.eql(jsonData.scenario2.result.transferId);",
													"});",
													"",
													"pm.test(\"Home transaction Id is 123ABC\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.homeTransactionId).to.eql(\"123ABC\");",
													"});",
													"    ",
													"pm.test(\"Current state on quote is WAITING FOR QUOTE ACCEPTANCE\", function () {",
													"    var jsonData = pm.response.json();",
													"  pm.expect(jsonData.scenario1.result.currentState).to.eql(\"WAITING_FOR_QUOTE_ACCEPTANCE\");",
													"});",
													"",
													"pm.test(`Transfer amount is ${pm.environment.get('amount')}`, function () {",
													"    var jsonData = pm.response.json();  ",
													"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
													"});",
													"",
													"pm.test(`Currency is ${pm.environment.get('currency')}`, function () {",
													"    var jsonData = pm.response.json();  ",
													"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.currency).to.eql(pm.environment.get('currency'));",
													"});",
													"  ",
													"pm.test(\"Quote response expiration is not null\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario1.result.quoteResponse.expiration).not.eql(undefined);",
													"});",
													"",
													"pm.test(\"Qupte request ILP packet is not null\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario1.result.quoteResponse.ilpPacket).not.eql(undefined);",
													"});",
													"",
													"pm.test(\"Quote response condition is not null\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario1.result.quoteResponse.condition).not.eql(undefined);",
													"});",
													"  ",
													"pm.test(\"Payeefsp Fee amount is 0\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.amount).to.eql('0');",
													"});",
													"",
													"pm.test(\"PayeeFSP fee currency is \", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.currency).to.eql(pm.environment.get('currency'));",
													"});",
													"",
													"pm.test(\" Payeefsp Commission amount is 0\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
													"});",
													"",
													"pm.test(`Currency is ${pm.environment.get('currency')}`, function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.currency).to.eql(pm.environment.get('currency'));",
													"});",
													"  ",
													"// Scenario 2 tests",
													"",
													"pm.test(\"payer fsp nameis:${pm.environment.get('payerName')\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.from.displayName).to.eql(pm.variables.get('payerName'));",
													"});",
													" ",
													"pm.test(\"IdType is MSISDN\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.from.idType).to.eql(\"MSISDN\");",
													"});",
													"   ",
													"pm.test(`Payer MSISDN is ${pm.environment.get('payerfspMSISDN')} `, function () {",
													"var jsonData = pm.response.json(); ",
													"pm.expect(jsonData.scenario2.result.from.idValue).to.eql(pm.variables.get('payerfspMSISDN'));",
													"});",
													"",
													"pm.test(\"IdType is MSISDN\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.to.idType).to.eql(\"MSISDN\");",
													"});",
													"",
													"pm.test(`goldenpayeefspReceiverMSISDN Value is ${pm.environment.get('payeefspMSISDN')}`, function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.to.idValue).to.eql(pm.variables.get('payeefspMSISDN'));",
													"});",
													"",
													"pm.test(\"fspId is payeefsp\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.to.fspId).to.eql(\"payeefsp\");",
													"});",
													"",
													"pm.test(\"First name of the party is PayeeFirst\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.to.firstName).to.eql(\"PayeeFirst\");",
													"});",
													"",
													"pm.test(\"First name of the party is PayeeLast \", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.to.lastName).to.eql(\"PayeeLast\");",
													"});",
													"",
													"pm.test(\"Date of Birth of the MSISDN is 2010-10-10 \", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
													"});",
													"",
													"pm.test(\"Amount-Type in Quote request is SEND\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.amountType).to.eql(\"SEND\");",
													"});",
													"",
													"pm.test(` Currency in quotes is ${pm.environment.get('currency')}`, function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.currency).to.eql(pm.environment.get('currency'));",
													"});",
													"    ",
													"pm.test(\" Transfer amount is 10\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.amount).to.eql(\"10\");",
													"});",
													"   ",
													"pm.test(\" Transaction Type is TRANSFER\", function () {",
													"var jsonData = pm.response.json(); ",
													"pm.expect(jsonData.scenario2.result.transactionType).to.eql(\"TRANSFER\");",
													"});",
													"   ",
													"pm.test(\"Initiator type is CONSUMER\", function () {",
													"var jsonData = pm.response.json(); ",
													"pm.expect(jsonData.scenario2.result.initiatorType).to.eql(\"CONSUMER\");",
													"});",
													"   ",
													"pm.test(\"note is test payment\", function () {",
													"var jsonData = pm.response.json(); ",
													"pm.expect(jsonData.scenario2.result.note).to.eql(\"test payment\");",
													"});",
													"   ",
													"pm.test(\"HomeTransactionId is 123ABC\", function () {",
													"var jsonData = pm.response.json(); ",
													"pm.expect(jsonData.scenario2.result.homeTransactionId).to.eql(\"123ABC\");",
													"});",
													"    ",
													"pm.test(\"Current state of the transacfer is COMPLETED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.currentState).to.eql(\"COMPLETED\");",
													"});",
													"  ",
													"pm.test(\"Transfer Amount is 10\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
													"});",
													"",
													"pm.test(\"Response validation\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.quoteResponse.transferAmount.currency).to.eql(pm.environment.get('currency'));",
													"});",
													"",
													"pm.test(\"Quote Expiration is not Null\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.quoteResponse.expiration).not.eql(null);",
													"});",
													"",
													"pm.test(\"Response ilpPacket is not null\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.quoteResponse.ilpPacket).not.eql(null);",
													"});",
													"",
													"pm.test(\"Response condition is not null\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.quoteResponse.condition).not.eql(null);",
													"});",
													"",
													"pm.test(\"PayeeFspFee is 0\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspFee.amount).to.eql(\"0\");",
													"});",
													"",
													"pm.test(`Payeefsp fee currency is ${pm.environment.get('currency')}` , function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspFee.currency).to.eql(pm.environment.get('currency'));",
													"});",
													"",
													"pm.test(\"Payeefsp commission is 0\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
													"});",
													"",
													"pm.test(` Transfer currency is ${pm.environment.get('currency')}`, function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspCommission.currency).to.eql(pm.environment.get('currency'));",
													"});",
													"",
													"pm.test(\"CompletedTimestamp is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.fulfil.completedTimestamp).not.eql(null);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  //Check Headers for parties endpoint on payee side",
													"  setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"payeefspMSISDN\"), function (err, response) {",
													"       ",
													"      if(response.responseSize !== 0) { ",
													"      //Checking headers",
													"        var headers = response.json().headers;",
													"        pm.test(\"On payerfsp fspiop-source is payerfsp\", function () {",
													"            pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"        });",
													"        ",
													"        // pm.test(\"goldenpayeefsp fspiop-destination is goldenpayeefsp\", function () {",
													"        //     pm.expect(headers['fspiop-destination']).to.eql('goldenpayeefsp');",
													"        // });",
													"        ",
													"        pm.test(\"On goldenpayeefsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
													"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
													"        });",
													"        ",
													"        pm.test(\"On goldenpayeefsp accept should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
													"            pm.expect(headers['accept']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
													"        });",
													"        ",
													"        pm.test(\"On goldenpayeefsp date cannot be null\", function () {",
													"            pm.expect(headers['date']).to.not.eql(undefined);",
													"        });",
													"        ",
													"      } else {",
													"          pm.test(\"Parties FAILED - payeeFSP\", function () {",
													"            throw new Error('Did not receive response');",
													"          });",
													"           ",
													"      }",
													"      ",
													"    });",
													"}, 100)",
													"",
													"//Check Headers and data for parties endpoint on payer side",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.variables.get(\"payeefspMSISDN\"), function (err, response) {",
													"       ",
													"      if(response.responseSize !== 0) { ",
													"      //Checking headers",
													"        var headers = response.json().headers;",
													"        pm.test(\"On payerfsp fspiop-source is payeefsp\", function () {",
													"            pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"        });",
													"        ",
													"        pm.test(\"On payerfsp fspiop-destination is payerfsp\", function () {",
													"            pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"        });",
													"        ",
													"        pm.test(\"On payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
													"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
													"        });",
													"        ",
													"        pm.test(\"payerfsp accept is empty\", function () {",
													"            pm.expect(headers['accept']).to.eql(undefined);",
													"        });",
													"        ",
													"        //Validate protected header inside Signature",
													"        var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"        var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"        console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"        ",
													"        // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
													"        //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
													"        // });",
													"        ",
													"        pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"            pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"        });",
													"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"payeefspMSISDN\"), function () {",
													"            pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/'+pm.environment.get(\"payeefspMSISDN\"));",
													"        });",
													"        ",
													"",
													"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"            pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"        });",
													"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be payeefsp\", function () {",
													"            pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
													"        });",
													"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
													"            pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
													"        });",
													"        pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"            pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
													"        });",
													"       ",
													"        pm.test(\"payerfsp FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"payeefspMSISDN\"), function () {",
													"            pm.expect(headers['fspiop-uri']).to.eql('/parties/MSISDN/'+pm.environment.get(\"payeefspMSISDN\"));",
													"        });",
													"        ",
													"        pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"            pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"        });",
													"        ",
													"      //Checking data",
													"      var jsonData = response.json().data;",
													"        pm.test(\"Expected partyIdType is MSISDN\", function () {",
													"          pm.expect(jsonData.party.partyIdInfo.partyIdType).to.eql('MSISDN');",
													"        });",
													"        pm.test(\"Expected partyIdentifier is \"+pm.environment.get('payeefspMSISDN'), function () {",
													"          pm.expect(jsonData.party.partyIdInfo.partyIdentifier).to.eql(pm.environment.get('payeefspMSISDN'));",
													"        });",
													"        pm.test(\"Expected fspId is payeefsp\", function () {",
													"          pm.expect(jsonData.party.partyIdInfo.fspId).to.eql('payeefsp');",
													"        });",
													"        ",
													"      pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedPayeeFirstName\"), function () {",
													"          pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedPayeeFirstName\"));",
													"        });",
													"        pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedPayeeLastName\"), function () {",
													"          pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedPayeeLastName\"));",
													"        });",
													"        pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedPayeeDOB\"), function () {",
													"          pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedPayeeDOB\"));",
													"        });  ",
													"        ",
													"      } else {",
													"          pm.test(\"Parties FAILED - payerFSP\", function () {",
													"            throw new Error('Did not receive response');",
													"          });",
													"        }",
													"    });",
													"}, 100)",
													"",
													"var transferID = pm.response.json().scenario1.result.transferId",
													"//Check the request that Switch forwards to payeefsp",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+transferID, function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              ",
													"              //Check the Headers",
													"              var headers = response.json().headers;",
													"              ",
													"                pm.test(\"On payeefsp fspiop-source is payerfsp\", function () {",
													"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"                });",
													"                ",
													"                pm.test(\"On payeefsp fspiop-destination is payeefsp\", function () {",
													"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"                });",
													"                ",
													"                pm.test(\"On payeefsp content-typeis same as sent in the request\", function () {",
													"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"                });",
													"                ",
													"                pm.test(\"On payeefsp accept is same as sent in the request\", function () {",
													"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"                });",
													"                ",
													"                pm.test(\"On payeefsp fspiop-http-method is POST\", function () {",
													"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
													"                });",
													"                ",
													"                pm.test(\"On payeefsp fspiop-uri is /transfers\", function () {",
													"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
													"                });",
													"                ",
													"                ",
													"                //Check the data",
													"                var jsonData = response.json().data;",
													"                pm.test(\"On payeefsp data should have the same transferId as request\", function () {",
													"                  pm.expect(jsonData.transferId).to.eql(transferID);",
													"                });",
													"                pm.test(\"On payeefsp data should have the same payerfspId as request\", function () {",
													"                  pm.expect(jsonData.payerFsp).to.eql('payerfsp');",
													"                });",
													"                pm.test(\"On payeefsp data should have the same payeefspId as request\", function () {",
													"                  pm.expect(jsonData.payeeFsp).to.eql('payeefsp');",
													"                });",
													"                pm.test(\"On payeefsp data should have the same amount as request\", function () {",
													"                  pm.expect(jsonData.amount.amount).to.eql('10');",
													"                });",
													"                pm.test(\"payeefsp data should have the same currency as request\", function () {",
													"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
													"                });",
													"                // pm.test(\"payeefsp data should have the same expiration as request\", function () {",
													"                //   pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
													"                // });",
													"                // pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
													"                //   pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
													"                // });",
													"                // pm.test(\"payeefsp data should have the same condition as request\", function () {",
													"                //   pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
													"                // });",
													"                ",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"",
													"          }",
													"  });",
													"}, 100)",
													"",
													"//Check the callback response that Switch forwards to payerfsp",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+transferID, function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"            //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"On payerfsp fspiop-source is payeefsp\", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"            });",
													"            ",
													"            pm.test(\"On payerfsp fspiop-destination is payerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"On payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            // pm.test(\"fspiop-signature is returned\", function () {",
													"            //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"payeefsp_fspiop_signature\"));",
													"            // });",
													"           ",
													"            ",
													"            pm.test(\"payerfsp fspiop-uri includes transfers\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.include('/transfers');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            pm.test(\"Response data does not have transferId\", function () {",
													"              pm.expect(jsonData.transferId).to.eql(undefined);",
													"            });",
													"            pm.test(\"Response status is COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"            });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"",
													"          }",
													"  });",
													"}, 100)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Date",
												"value": "{{transferDate}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"{{payerName}}\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{payerfspMSISDN}}\"\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{payeefspMSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"10\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
										},
										"url": {
											"raw": "{{PAYERFSP_BACKEND_TESTAPI_URL}}/scenarios",
											"host": [
												"{{PAYERFSP_BACKEND_TESTAPI_URL}}"
											],
											"path": [
												"scenarios"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Author: Sridevi Miriyala\nDescription: Contains scripts that test with post /scenarios on majaloop sim backend",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "block_transfer ( p>ndc ) (complete)",
					"item": [
						{
							"name": "GET limits-payerfsp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a75db36e-2d2f-432c-81a6-77f912c41aa9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"jsonData.forEach( ndcPerCurrency => {",
											"    pm.environment.set(`payerfsp${ndcPerCurrency.currency}NDC`, `${ndcPerCurrency.limit.value}`)",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYERFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payerfsp/limits",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"payerfsp",
										"limits"
									]
								},
								"description": "review the payerfsp limits/NDC"
							},
							"response": []
						},
						{
							"name": "GET limits -payeefsp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84ca3f51-0bdb-4905-86d9-a6179a084f88",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var payeeNDC = jsonData[0].limit.value",
											"pm.environment.set('payeeNDC',payeeNDC)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYEEFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/limits",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payeefsp}}",
										"limits"
									]
								},
								"description": "review payeefsp limits/NDC"
							},
							"response": []
						},
						{
							"name": "Get payerfsp position before TheTransfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2c9a7dc-8b97-4b80-ad48-3b0e722f87d6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"/*var result;",
											"",
											"jsonData.forEach( entry => {(entry.currency === pm.environment.get(\"currency\")) ? result = entry.value: result =",
											" undefined})",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.environment.set(\"payerfspPositionBeforeTransfer\", result);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"*/",
											"",
											"// for (var i in jsonData){",
											"//     if(jsonData[i].currency === \"XOF\") {",
											"//   pm.test(\"Atleast one account position should be returned\", function () {",
											"//     pm.environment.set(\"payerfspPositionBeforeTransfer\", jsonData[i].value);",
											"//     pm.expect(jsonData).to.be.not.empty;",
											"//   });",
											"//     }",
											"   ",
											"// }",
											"",
											"jsonData.forEach(positionPerCurrency => {",
											"    pm.environment.set(`payerfsp${positionPerCurrency.currency}PositionBeforeTransfer`, positionPerCurrency.value);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYERFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								},
								"description": "view payerfsp current position before sending the transfer"
							},
							"response": []
						},
						{
							"name": "Get payeefsp position before TheTransfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a9997f5-7f71-400c-8e4b-2234ad1aba3e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"/*var result;",
											"",
											"jsonData.forEach( entry => {(entry.currency === pm.environment.get(\"currency\")) ? result = entry.value: result =",
											" undefined})",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.environment.set(\"payeefspPositionBeforeTransfer\", result);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});*/",
											"",
											"for (var i in jsonData){",
											"    if(jsonData[i].currency === \"XOF\") {",
											"  pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.environment.set(\"payeefspPositionBeforeTransfer\", jsonData[i].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"  });",
											"    }",
											"   ",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYERFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payeefsp}}",
										"positions"
									]
								},
								"description": "Get payeefsp current position before sending the transfer"
							},
							"response": []
						},
						{
							"name": "(BUG) Send Quote",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
										"exec": [
											"var navigator = {}; ",
											"var window = {}; ",
											"eval(pm.environment.get('jrsassign'));",
											"",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"generatedUUID = uuid.v4();",
											"pm.environment.set('transactionId', generatedUUID);",
											"",
											"pm.variables.set('quoteDate', (new Date()).toUTCString());",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
											"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
											"var sHeader = JSON.stringify(oHeader);",
											"console.log(`sHeader: ${sHeader}`)",
											"",
											"var objPayload = {",
											"  \"quoteId\": pm.environment.get('quoteId'),",
											"  \"transactionId\": pm.environment.get('transactionId'),",
											"  \"payer\": {",
											"    \"partyIdInfo\": {",
											"      \"partyIdType\": \"MSISDN\",",
											"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
											"      \"fspId\": \"payerfsp\"",
											"    },",
											"    \"personalInfo\": {",
											"      \"complexName\": {",
											"        \"firstName\": \"Mats\",",
											"        \"lastName\": \"Hagman\"",
											"      },",
											"      \"dateOfBirth\": \"1983-10-25\"",
											"    }",
											"  },",
											"  \"payee\": {",
											"    \"partyIdInfo\": {",
											"      \"partyIdType\": \"MSISDN\",",
											"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
											"      \"fspId\": \"payeefsp\"",
											"    }",
											"  },",
											"  \"amountType\": \"RECEIVE\",",
											"  \"amount\": {",
											"    \"amount\": \"60\",",
											"    \"currency\": pm.environment.get('currency')",
											"  },",
											"  \"transactionType\": {",
											"    \"scenario\": \"TRANSFER\",",
											"    \"initiator\": \"PAYER\",",
											"    \"initiatorType\": \"CONSUMER\"",
											"  },",
											"  \"note\": \"hej\"",
											"}",
											"",
											"var sPayload = JSON.stringify(objPayload)",
											"console.log(`sPayload: ${sPayload}`)",
											"pm.variables.set(\"quoteRequest\", sPayload);",
											"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
											"console.log(`token: ${token}`)",
											"",
											"// var encodedHeaders = btoa(sHeader)",
											"",
											"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
											"// var token = JSON.stringify(ofspiopSignature)",
											"",
											"const [ protectedHeaderBase64, , signature ] = token.split('.');",
											"",
											"const signatureObject = {",
											"    signature: signature.replace('\"', ''),",
											"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
											"};",
											"",
											"console.log(JSON.stringify(signatureObject))",
											"",
											"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              ",
											"              //Check the Headers",
											"              var headers = response.json().headers;",
											"              ",
											"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
											"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
											"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
											"                });",
											"                ",
											"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
											"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
											"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {",
											"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
											"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
											"                });",
											"                ",
											"          } else {",
											"              pm.test(\"Quote FAILED\", function () {",
											"                throw new Error('Did not receive request on payee side');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 1100)",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"          //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            ",
											"            ",
											"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
											"            // var strData = JSON.stringify(response.json().data)",
											"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
											"            // console.log(`token: ${token}`)",
											"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
											"            // console.log(`isValid: ${isValid}`)",
											"            // pm.test(\"Check if the response is JWS valid\", function () {",
											"            //     pm.expect(isValid).to.eql(true);",
											"            // });",
											"            ",
											"            //Validate protected header inside Signature",
											"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
											"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
											"            ",
											"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
											"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
											"            });",
											"            ",
											"",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
											"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
											"            });",
											"           ",
											"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            ",
											"            pm.test(\"Response quoteId is  null\", function () {",
											"                pm.expect(jsonData.quoteId).to.eql(undefined);",
											"                ",
											"            });",
											"          ",
											"            pm.test(\"Response ilpPacket is not null\", function () {",
											"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
											"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
											"            });",
											"       ",
											"           pm.test(\"Response condition is not null\", function () {",
											"               pm.expect(jsonData.condition).not.equal(undefined);",
											"               pm.environment.set(\"condition\", jsonData.condition);",
											"           });",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response on Payer side');",
											"           });",
											"           postman.setNextRequest(null);",
											"      }",
											"       ",
											"   });",
											"}, 1000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYERFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "payeefsp"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "{{fspiopSignature}}"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"type": "text",
										"value": "POST"
									},
									{
										"key": "FSPIOP-URI",
										"type": "text",
										"value": "/quotes"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{quoteRequest}}"
								},
								"url": {
									"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
									"host": [
										"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Block Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bf32265b-a6a7-49ab-912e-9393c41f6d3d",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
											"// });",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              var jsonData = response.json().data;",
											"              var headers = response.json().headers;",
											"              pm.test(\"Error Code should be returned\", function () {",
											"                pm.expect(jsonData.errorInformation.errorCode).to.eql('4001');",
											"              });",
											"              pm.test(\"Error Description should be returned\", function () {",
											"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Payer FSP insufficient liquidity');",
											"              });",
											"              pm.test(\"fspiop-source is switch\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('switch');",
											"            });",
											"",
											"            pm.test(\"fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-signature is present\", function () {",
											"                pm.expect(headers['fspiop-signature']).to.not.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"fspiop-uri is /transfers/{ID}/error\", function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${pm.environment.get('transfer_ID')}/error`);",
											"            });",
											"            ",
											"            pm.test(\"fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 5000)",
											"",
											"pm.environment.set('transferAmount', 100);",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7b1fab38-22a8-4004-8f51-359bf75956b8",
										"exec": [
											"var navigator = {}; //fake a navigator object for the lib",
											"var window = {}; //fake a window object for the lib",
											"eval(pm.environment.get('jrsassign'));",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"pm.environment.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"var payerfspDefCurNDC = `payerfsp${pm.environment.get('currency')}NDC`",
											"var payerfspDefCurPositionBeforeTransfer = `payerfsp${pm.environment.get('currency')}PositionBeforeTransfer`",
											"",
											"console.log(pm.environment.get(payerfspDefCurNDC))",
											"console.log(pm.environment.get(payerfspDefCurPositionBeforeTransfer))",
											"var amount = Number(pm.environment.get(payerfspDefCurNDC))-Number( pm.environment.get(payerfspDefCurPositionBeforeTransfer))+100",
											"",
											"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
											"var sHeader = JSON.stringify(oHeader);",
											"console.log(`sHeader: ${sHeader}`)",
											"",
											"var objPayload = {",
											"  \"transferId\": pm.environment.get('transfer_ID'),",
											"  \"payerFsp\": \"payerfsp\",",
											"  \"payeeFsp\": \"payeefsp\",",
											"  \"amount\": {",
											"    \"amount\": `${amount}`,",
											"    \"currency\": pm.environment.get('currency')",
											"  },",
											"  \"expiration\": pm.environment.get('transferExpiration'),",
											"  \"ilpPacket\": pm.environment.get('ilpPacket'),",
											"  \"condition\": pm.environment.get('condition')",
											"}",
											"var sPayload = JSON.stringify(objPayload)",
											"console.log(`sPayload: ${sPayload}`)",
											"pm.variables.set(\"transferRequest\", sPayload);",
											"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
											"//console.log(`token: ${token}`)",
											"",
											"// var encodedHeaders = btoa(sHeader)",
											"",
											"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
											"// var token = JSON.stringify(ofspiopSignature)",
											"",
											"const [ protectedHeaderBase64, , signature ] = token.split('.');",
											"",
											"const signatureObject = {",
											"    signature: signature.replace('\"', ''),",
											"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
											"};",
											"",
											"console.log(JSON.stringify(signatureObject))",
											"",
											"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYERFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiopSignature}}",
										"type": "text"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "POST",
										"type": "text"
									},
									{
										"key": "FSPIOP-URI",
										"value": "/transfers",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{transferRequest}}"
								},
								"url": {
									"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers",
									"host": [
										"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
									],
									"path": [
										"transfers"
									]
								},
								"description": "send a tranfer request with ilp packet and condition that are generated in quotes response along with expiry, fspiop source,fspiop destination, amount and currency."
							},
							"response": []
						},
						{
							"name": "Get payerfsp position after the transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7174c4f7-799f-4c4a-ad66-ab598ed32477",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"/*pm.test(\"Position before and after the transfer should be the same\", function () {",
											"    pm.expect(jsonData[0].value).to.eql(pm.environment.get(\"payerfspPositionBeforeTransfer\"));",
											"});*/",
											"",
											"for (var i in jsonData){",
											"    if(jsonData[i].currency === \"XOF\") {",
											"  pm.test(\"Position before and after the transfer should be the same\", function () {",
											"    pm.expect(jsonData[i].value).to.eql(pm.environment.get(\"payerfspPositionBeforeTransfer\"));",
											"  });",
											"    }",
											"   ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYERFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get payeefsp position after the transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "864dee38-3b5b-4709-9637-92931170b286",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"/*pm.test(\"Position before and after the transfer should be the same\", function () {",
											"    pm.expect(Number(jsonData[0].value)).to.eql(Number(pm.environment.get(\"payeefspPositionBeforeTransfer\")));",
											"});*/",
											"",
											"for (var i in jsonData){",
											"    if(jsonData[i].currency === \"XOF\") {",
											"  pm.test(\"Position before and after the transfer should be the same\", function () {",
											"    pm.expect(Number(jsonData[i].value)).to.eql(Number(pm.environment.get(\"payeefspPositionBeforeTransfer\")));",
											"  });",
											"    }",
											"   ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYEEFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "payeefsp",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payeefsp}}",
										"positions"
									]
								}
							},
							"response": []
						}
					],
					"description": "Author: Sridevi Miriyala\n\nThis features testes, if a transfer is blocked when position of a participant exceeds the Net Debit Cap for the transfer amount.\n\nSTEPS:\n\nGET Limits\nGET Positions for payer and payee\nset amount=(NDC-P) + 10\nPOST Quotes - send to payee that responds COMMITTED\nPOST Transfers-Prepare\n      -Payerfsp should get error msg \"insufficient liquidity in payerfsp to perform transfer \" \nGET positions - \n  current payer position = prev position \n  current payee position = prev position \n(Failure of the transfer due to insufficient liquidity from payerfsp, results no change in positions)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2f9024db-2f95-4bf6-9022-f7bd5d50afd3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eefb3ca4-f973-4059-95cc-c681c9e55121",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get_transfers",
					"item": [
						{
							"name": "Send Quote",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
										"exec": [
											"var navigator = {}; ",
											"var window = {}; ",
											"eval(pm.environment.get('jrsassign'));",
											"",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"generatedUUID = uuid.v4();",
											"pm.environment.set('transactionId', generatedUUID);",
											"",
											"pm.variables.set('quoteDate', (new Date()).toUTCString());",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
											"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
											"var sHeader = JSON.stringify(oHeader);",
											"console.log(`sHeader: ${sHeader}`)",
											"",
											"var objPayload = {",
											"  \"quoteId\": pm.environment.get('quoteId'),",
											"  \"transactionId\": pm.environment.get('transactionId'),",
											"  \"payer\": {",
											"    \"partyIdInfo\": {",
											"      \"partyIdType\": \"MSISDN\",",
											"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
											"      \"fspId\": \"payerfsp\"",
											"    },",
											"    \"personalInfo\": {",
											"      \"complexName\": {",
											"        \"firstName\": \"Mats\",",
											"        \"lastName\": \"Hagman\"",
											"      },",
											"      \"dateOfBirth\": \"1983-10-25\"",
											"    }",
											"  },",
											"  \"payee\": {",
											"    \"partyIdInfo\": {",
											"      \"partyIdType\": \"MSISDN\",",
											"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
											"      \"fspId\": \"payeefsp\"",
											"    }",
											"  },",
											"  \"amountType\": \"RECEIVE\",",
											"  \"amount\": {",
											"    \"amount\": \"60\",",
											"    \"currency\": pm.environment.get('currency')",
											"  },",
											"  \"transactionType\": {",
											"    \"scenario\": \"TRANSFER\",",
											"    \"initiator\": \"PAYER\",",
											"    \"initiatorType\": \"CONSUMER\"",
											"  },",
											"  \"note\": \"hej\"",
											"}",
											"",
											"var sPayload = JSON.stringify(objPayload)",
											"console.log(`sPayload: ${sPayload}`)",
											"pm.variables.set(\"quoteRequest\", sPayload);",
											"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
											"console.log(`token: ${token}`)",
											"",
											"// var encodedHeaders = btoa(sHeader)",
											"",
											"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
											"// var token = JSON.stringify(ofspiopSignature)",
											"",
											"const [ protectedHeaderBase64, , signature ] = token.split('.');",
											"",
											"const signatureObject = {",
											"    signature: signature.replace('\"', ''),",
											"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
											"};",
											"",
											"console.log(JSON.stringify(signatureObject))",
											"",
											"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              ",
											"              //Check the Headers",
											"              var headers = response.json().headers;",
											"              ",
											"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
											"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
											"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
											"                });",
											"                ",
											"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
											"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
											"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {",
											"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
											"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
											"                });",
											"                ",
											"          } else {",
											"              pm.test(\"Quote FAILED\", function () {",
											"                throw new Error('Did not receive request on payee side');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 1100)",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"          //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            ",
											"            ",
											"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
											"            // var strData = JSON.stringify(response.json().data)",
											"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
											"            // console.log(`token: ${token}`)",
											"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
											"            // console.log(`isValid: ${isValid}`)",
											"            // pm.test(\"Check if the response is JWS valid\", function () {",
											"            //     pm.expect(isValid).to.eql(true);",
											"            // });",
											"            ",
											"            //Validate protected header inside Signature",
											"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
											"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
											"            ",
											"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
											"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
											"            });",
											"            ",
											"",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
											"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);",
											"            });",
											"           ",
											"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            ",
											"            pm.test(\"Response quoteId is  null\", function () {",
											"                pm.expect(jsonData.quoteId).to.eql(undefined);",
											"                ",
											"            });",
											"          ",
											"            pm.test(\"Response ilpPacket is not null\", function () {",
											"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
											"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
											"            });",
											"       ",
											"           pm.test(\"Response condition is not null\", function () {",
											"               pm.expect(jsonData.condition).not.equal(undefined);",
											"               pm.environment.set(\"condition\", jsonData.condition);",
											"           });",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response on Payer side');",
											"           });",
											"           postman.setNextRequest(null);",
											"      }",
											"       ",
											"   });",
											"}, 1000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYERFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "payeefsp"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "{{fspiopSignature}}"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"type": "text",
										"value": "POST"
									},
									{
										"key": "FSPIOP-URI",
										"type": "text",
										"value": "/quotes"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{quoteRequest}}"
								},
								"url": {
									"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
									"host": [
										"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "900142b0-e4d7-43a4-a751-38202b600661",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// //Check the request that Switch forwards to payeefsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              ",
											"              //Check the Headers",
											"              var headers = response.json().headers;",
											"              ",
											"                pm.test(\"payeefsp fspiop-source is goldenpayerfsp\", function () {",
											"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-destination is goldenpayeefsp\", function () {",
											"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
											"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
											"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
											"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
											"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
											"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
											"                });",
											"                ",
											"                ",
											"                //Check the data",
											"                var jsonData = response.json().data;",
											"                pm.test(\"payeefsp data should have the same transferId as request\", function () {",
											"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same payerfspId as request\", function () {",
											"                  pm.expect(jsonData.payerFsp).to.eql('payerfsp');",
											"                });",
											"                pm.test(\"payeefsp data should have the same payeefspId as request\", function () {",
											"                  pm.expect('payeefsp');",
											"                });",
											"                pm.test(\"payeefsp data should have the same amount as request\", function () {",
											"                  pm.expect(jsonData.amount.amount).to.eql('10');",
											"                });",
											"                pm.test(\"payeefsp data should have the same currency as request\", function () {",
											"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same expiration as request\", function () {",
											"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
											"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same condition as request\", function () {",
											"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
											"                });",
											"                ",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response on payee side');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"  });",
											"}, 1100)",
											"",
											"//Check the callback response that Switch forwards to payerfsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"            //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is goldenpayeefsp \", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            ",
											"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            pm.test(\"Response data does not have transferId\", function () {",
											"               pm.expect(jsonData.transferId).to.eql(undefined);",
											"            });",
											"            pm.test(\"Response status is COMMITTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
											"            });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response on payer side');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 1300)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "20820c95-0a24-4906-a6ba-708d6ecf4a61",
										"exec": [
											"var navigator = {}; //fake a navigator object for the lib",
											"var window = {}; //fake a window object for the lib",
											"eval(pm.environment.get('jrsassign'));",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
											"",
											"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
											"var sHeader = JSON.stringify(oHeader);",
											"console.log(`sHeader: ${sHeader}`)",
											"",
											"var objPayload = {",
											"  \"transferId\": pm.environment.get('transfer_ID'),",
											"  \"payerFsp\": \"payerfsp\",",
											"  \"payeeFsp\": \"payeefsp\",",
											"  \"amount\": {",
											"    \"amount\": \"10\",",
											"    \"currency\": pm.environment.get('currency')",
											"  },",
											"  \"expiration\": pm.environment.get('transferExpiration'),",
											"  \"ilpPacket\": pm.environment.get('ilpPacket'),",
											"  \"condition\": pm.environment.get('condition')",
											"}",
											"var sPayload = JSON.stringify(objPayload)",
											"console.log(`sPayload: ${sPayload}`)",
											"pm.variables.set(\"transferRequest\", sPayload);",
											"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
											"//console.log(`token: ${token}`)",
											"",
											"// var encodedHeaders = btoa(sHeader)",
											"",
											"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
											"// var token = JSON.stringify(ofspiopSignature)",
											"",
											"const [ protectedHeaderBase64, , signature ] = token.split('.');",
											"",
											"const signatureObject = {",
											"    signature: signature.replace('\"', ''),",
											"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
											"};",
											"",
											"console.log(JSON.stringify(signatureObject))",
											"",
											"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYERFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "payeefsp"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "{{fspiopSignature}}"
									},
									{
										"key": "FSPIOP-URI",
										"type": "text",
										"value": "/transfers"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"type": "text",
										"value": "POST"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{transferRequest}}"
								},
								"url": {
									"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers",
									"host": [
										"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
									],
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET transfer - COMMITTED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
										"exec": [
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6c54bbb2-0b33-4301-86ae-751142923a4c",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check the callback response that Switch forwards to payerfsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"            //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is switch \", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('switch');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-signature is not empty\", function () {",
											"                pm.expect(headers['fspiop-signature']).not.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            pm.test(\"Response data does not have transferId\", function () {",
											"               pm.expect(jsonData.transferId).to.eql(undefined);",
											"            });",
											"            pm.test(\"Response status is COMMITTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
											"            });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response on payer side');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 1300)",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYERFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "(BUG) Source is original receiver",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1809507a-83ea-469d-8692-59e38cced96d",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('nonExistingtransferID', generatedUUID);",
											"pm.environment.set('dateHeader', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ff51ad8-7633-4fb2-9719-fc72c08eb30d",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"            //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is switch\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('switch');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"payeefsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\")+'/error');",
											"            });",
											"            ",
											"            pm.test(\"payeefsp fspiop-signature is not null\", function () {",
											"                pm.expect(headers['fspiop-signature']).not.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            pm.test(\"Transfer State is COMMITTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
											"              });",
											"              ",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 2000)",
											"",
											"// setTimeout(function () {",
											"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"nonExistingtransferID\"), function (err, response) {",
											"//           if(response.responseSize !== 0) {",
											"//             //Checking headers",
											"//             var headers = response.json().headers;",
											"//             pm.test(\"payerfsp fspiop-source is switch\", function () {",
											"//                 pm.expect(headers['fspiop-source']).to.eql('switch');",
											"//             });",
											"            ",
											"//             pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"//                 pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"//             });",
											"            ",
											"//             pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"//                 pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"//             });",
											"            ",
											"//             pm.test(\"payerfsp accept is empty\", function () {",
											"//                 pm.expect(headers['accept']).to.eql(undefined);",
											"//             });",
											"            ",
											"//         //    pm.test(\"fspiop-signature is returned\", function () {",
											"//          //       pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"payeefsp_fspiop_signature\"));",
											"//         //    });",
											"        ",
											"//           pm.test(\"fspiop-signature is returned\", function () {",
											"//             pm.expect(headers['fspiop-signature']).to.eql(undefined);",
											"//           });",
											"           ",
											"            ",
											"//          /*   pm.test(\"payerfsp fspiop-uri includes transfers\", function () {",
											"//                 pm.expect(headers['fspiop-uri']).to.include('/transfers');",
											"//             });",
											"            ",
											"//             pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"//                 pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"//             });*/",
											"            ",
											"//             var jsonData = response.json().data;",
											"//             pm.test(\"Error Code should be returned\", function () {",
											"//                 pm.expect(jsonData.errorInformation.errorCode).to.eql('3208');",
											"//               });",
											"//               pm.test(\"Error Description should be returned\", function () {",
											"//                 pm.expect(jsonData.errorInformation.errorDescription).to.eql('Provided Transfer ID was not found on the server.');",
											"//               });",
											"//           } else {",
											"//               pm.test(\"Transfer FAILED\", function () {",
											"//                 throw new Error('Did not receive response');",
											"//               });",
											"//               postman.setNextRequest(null)",
											"//           }",
											"//   });",
											"// }, 2000)",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYEEFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.participants+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payeefsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								},
								"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer.\n\nTake a new UUID which does not exist in DB.i.e valid format but shd not exist in DB.\nor\nchange (not remove) one letter or digit from a transfer ID that exists in DB."
							},
							"response": []
						},
						{
							"name": "(BUG) Source is not part of original sender/receiver",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1809507a-83ea-469d-8692-59e38cced96d",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('nonExistingtransferID', generatedUUID);",
											"pm.environment.set('dateHeader', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ff51ad8-7633-4fb2-9719-fc72c08eb30d",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"            //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is switch\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('switch');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"payeefsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\")+'/error');",
											"            });",
											"            ",
											"            pm.test(\"payeefsp fspiop-signature is not null\", function () {",
											"                pm.expect(headers['fspiop-signature']).not.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            pm.test(\"Error Code should be returned\", function () {",
											"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3000');",
											"              });",
											"              pm.test(\"Error Description should be returned\", function () {",
											"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Generic client error');",
											"              });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 2000)",
											"",
											"// setTimeout(function () {",
											"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"nonExistingtransferID\"), function (err, response) {",
											"//           if(response.responseSize !== 0) {",
											"//             //Checking headers",
											"//             var headers = response.json().headers;",
											"//             pm.test(\"payerfsp fspiop-source is switch\", function () {",
											"//                 pm.expect(headers['fspiop-source']).to.eql('switch');",
											"//             });",
											"            ",
											"//             pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"//                 pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"//             });",
											"            ",
											"//             pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"//                 pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"//             });",
											"            ",
											"//             pm.test(\"payerfsp accept is empty\", function () {",
											"//                 pm.expect(headers['accept']).to.eql(undefined);",
											"//             });",
											"            ",
											"//         //    pm.test(\"fspiop-signature is returned\", function () {",
											"//          //       pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"payeefsp_fspiop_signature\"));",
											"//         //    });",
											"        ",
											"//           pm.test(\"fspiop-signature is returned\", function () {",
											"//             pm.expect(headers['fspiop-signature']).to.eql(undefined);",
											"//           });",
											"           ",
											"            ",
											"//          /*   pm.test(\"payerfsp fspiop-uri includes transfers\", function () {",
											"//                 pm.expect(headers['fspiop-uri']).to.include('/transfers');",
											"//             });",
											"            ",
											"//             pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"//                 pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"//             });*/",
											"            ",
											"//             var jsonData = response.json().data;",
											"//             pm.test(\"Error Code should be returned\", function () {",
											"//                 pm.expect(jsonData.errorInformation.errorCode).to.eql('3208');",
											"//               });",
											"//               pm.test(\"Error Description should be returned\", function () {",
											"//                 pm.expect(jsonData.errorInformation.errorDescription).to.eql('Provided Transfer ID was not found on the server.');",
											"//               });",
											"//           } else {",
											"//               pm.test(\"Transfer FAILED\", function () {",
											"//                 throw new Error('Did not receive response');",
											"//               });",
											"//               postman.setNextRequest(null)",
											"//           }",
											"//   });",
											"// }, 2000)",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.participants+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "testfsp1"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								},
								"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer.\n\nTake a new UUID which does not exist in DB.i.e valid format but shd not exist in DB.\nor\nchange (not remove) one letter or digit from a transfer ID that exists in DB."
							},
							"response": []
						},
						{
							"name": "200 - 3208 - TransferId not found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1809507a-83ea-469d-8692-59e38cced96d",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('nonExistingtransferID', generatedUUID);",
											"pm.environment.set('dateHeader', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6ff51ad8-7633-4fb2-9719-fc72c08eb30d",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"",
											"//Check the callback response that Switch forwards to payerfsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"nonExistingtransferID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"            //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is switch\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('switch');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"payeefsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"nonExistingtransferID\")+'/error');",
											"            });",
											"            ",
											"            pm.test(\"payeefsp fspiop-signature is not null\", function () {",
											"                pm.expect(headers['fspiop-signature']).not.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            pm.test(\"Error Code should be returned 3208\", function () {",
											"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3208');",
											"              });",
											"              pm.test(\"Error Description Transfer ID not found should be returned\", function () {",
											"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Transfer ID not found - Provided Transfer ID was not found on the server.');",
											"              });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 2000)",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYERFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.participants+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers/{{nonExistingtransferID}}",
									"host": [
										"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
									],
									"path": [
										"transfers",
										"{{nonExistingtransferID}}"
									]
								},
								"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer.\n\nTake a new UUID which does not exist in DB.i.e valid format but shd not exist in DB.\nor\nchange (not remove) one letter or digit from a transfer ID that exists in DB."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "funds_out (BUG)",
					"item": [
						{
							"name": "Reserve&Commit (BUG)",
							"item": [
								{
									"name": "Record Funds Out Prepare&Reserve- payerfsp",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a96ad88c-c5e9-4077-b060-765ccd1e86e1",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('fundsOutPrepareReserveTransferId', generatedUUID);",
													"pm.environment.set('fundsOutPrepareReserveAmount', 1000);",
													"",
													"",
													"const payerfspGetStatusRequest = {",
													"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
													"  method: 'GET',",
													"  header: {",
													"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"      \"FSPIOP-Source\": \"hub_operator\",",
													"      \"Content-Type\": \"application/json\"",
													"  }",
													"};",
													"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
													"    console.log(response.json())",
													"    var jsonData = response.json()",
													"    for(var i in jsonData) {",
													"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"            pm.environment.set(\"payerfspSettlementAccountId\",jsonData[i].id)",
													"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutPrepare\",jsonData[i].value)",
													"        }",
													"    }",
													"});",
													"",
													"const hubGetStatusRequest = {",
													"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/hub/accounts',",
													"  method: 'GET',",
													"  header: {",
													"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"      \"FSPIOP-Source\": \"hub_operator\",",
													"      \"Content-Type\": \"application/json\"",
													"  }",
													"};",
													"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
													"    console.log(response.json())",
													"    var jsonData = response.json()",
													"    for(var i in jsonData) {",
													"        if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutPrepare\",jsonData[i].value)",
													"        }",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "96c26230-6092-4f78-882f-c5343b363fe1",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"    const payerfspGetStatusRequest = {",
													"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
													"      method: 'GET',",
													"      header: {",
													"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"          \"FSPIOP-Source\": \"hub_operator\",",
													"          \"Content-Type\": \"application/json\"",
													"      }",
													"    };",
													"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
													"        console.log(response.json())",
													"        var jsonData = response.json()",
													"        var payerfspSettlementAccountBalanceAfterFundsOutPrepare",
													"        for(var i in jsonData) {",
													"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"                payerfspSettlementAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
													"            }",
													"        }",
													"        var payerfspExpectedBalance = -(-Number(pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutPrepare'))- Number(pm.environment.get(\"fundsOutPrepareReserveAmount\")))",
													"        pm.test(\"Final Payerfsp Settlement Account Balance should decrease by the transfer amount\", function () {",
													"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutPrepare).to.eql(payerfspExpectedBalance);",
													"          });    ",
													"    ",
													"    });",
													"    ",
													"    const hubGetStatusRequest = {",
													"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/hub/accounts',",
													"      method: 'GET',",
													"      header: {",
													"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"          \"Content-Type\": \"application/json\"",
													"      }",
													"    };",
													"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
													"        console.log(response.json())",
													"        var jsonData = response.json()",
													"        var hubReconAccountBalanceAfterFundsOutPrepare",
													"        for(var i in jsonData) {",
													"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"                hubReconAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
													"            }",
													"        }",
													"        var hubExpectedBalance = pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutPrepare\")//-pm.environment.get(\"fundsOutPrepareReserveAmount\")",
													"        pm.test(\"Final Hub Reconciliation Account Balance should stay the same in prepare phase\", function () {",
													"            pm.expect(hubReconAccountBalanceAfterFundsOutPrepare).to.eql(hubExpectedBalance);",
													"          });  ",
													"    });",
													"}, 2000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "hub_operator"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{fundsOutPrepareReserveTransferId}}\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsOutPrepareReserve\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": {{fundsOutPrepareReserveAmount}},\n    \"currency\": \"{{currency}}\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"accounts",
												"{{payerfspSettlementAccountId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "(BUG) Record Funds Out Prepare&Reserve - transfer status (BUG)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1809507a-83ea-469d-8692-59e38cced96d",
												"exec": [
													"pm.environment.set('dateHeader', (new Date()).toUTCString());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "db933910-0ef6-406a-bed5-76e74347f533",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"    ",
													"    const getTransferResponse = {",
													"      url: pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"fundsOutPrepareReserveTransferId\"),",
													"      method: 'GET',",
													"      header: {",
													"          \"Authorization\":\"Bearer \"+pm.environment.get(\"PAYERFSP_BEARER_TOKEN\"),",
													"          \"FSPIOP-Source\": pm.environment.get(\"payerfsp\"),",
													"          \"Content-Type\": \"application/json\"",
													"      }",
													"    };",
													"    pm.sendRequest(getTransferResponse, function (err, response) {",
													"        if(response.responseSize !== 0) {",
													"            ",
													"            //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is switch \", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('switch');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-signature is not empty\", function () {",
													"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
													"                });",
													"            ",
													"            ",
													"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"                ",
													"            var jsonData = response.json().data",
													"            pm.test(\"Transfer State should be RESERVED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql(\"RESERVED\");",
													"              });    ",
													"        } else {",
													"            pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"            });",
													"            postman.setNextRequest(null)",
													"        }",
													"    });",
													"}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{dateHeader}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											}
										],
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers/{{fundsOutPrepareReserveTransferId}}",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"transfers",
												"{{fundsOutPrepareReserveTransferId}}"
											]
										},
										"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
									},
									"response": []
								},
								{
									"name": "Record Funds Out Commit - payerfsp",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a96ad88c-c5e9-4077-b060-765ccd1e86e1",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('fundsOutCommitTransferId', generatedUUID);",
													"pm.environment.set('fundsOutCommitAmount', 1000);",
													"",
													"",
													"const payerfspGetStatusRequest = {",
													"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
													"  method: 'GET',",
													"  header: {",
													"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"      \"FSPIOP-Source\": \"hub_operator\",",
													"      \"Content-Type\": \"application/json\"",
													"  }",
													"};",
													"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
													"    console.log(response.json())",
													"    var jsonData = response.json()",
													"    for(var i in jsonData) {",
													"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutCommit\",jsonData[i].value)",
													"        }",
													"    }",
													"});",
													"",
													"const hubGetStatusRequest = {",
													"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/hub/accounts',",
													"  method: 'GET',",
													"  header: {",
													"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"      \"FSPIOP-Source\": \"hub_operator\",",
													"      \"Content-Type\": \"application/json\"",
													"  }",
													"};",
													"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
													"    console.log(response.json())",
													"    var jsonData = response.json()",
													"    for(var i in jsonData) {",
													"        if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutCommit\",jsonData[i].value)",
													"        }",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "96c26230-6092-4f78-882f-c5343b363fe1",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"    const payerfspGetStatusRequest = {",
													"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
													"      method: 'GET',",
													"      header: {",
													"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"          \"Content-Type\": \"application/json\"",
													"      }",
													"    };",
													"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
													"        console.log(response.json())",
													"        var jsonData = response.json()",
													"        var payerfspSettlementAccountBalanceAfterFundsOutCommit",
													"        for(var i in jsonData) {",
													"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"                payerfspSettlementAccountBalanceAfterFundsOutCommit = jsonData[i].value",
													"            }",
													"        }",
													"        var payerfspExpectedBalance = pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutCommit')//-pm.environment.get(\"fundsOutPrepareAmount\")",
													"        pm.test(\"Final Payerfsp Settlement Account Balance should not change during commit phase\", function () {",
													"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutCommit).to.eql(payerfspExpectedBalance);",
													"          });    ",
													"    ",
													"    });",
													"    ",
													"    const hubGetStatusRequest = {",
													"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/hub/accounts',",
													"      method: 'GET',",
													"      header: {",
													"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"          \"Content-Type\": \"application/json\"",
													"      }",
													"    };",
													"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
													"        console.log(response.json())",
													"        var jsonData = response.json()",
													"        var hubReconAccountBalanceAfterFundsOutCommit",
													"        for(var i in jsonData) {",
													"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"                hubReconAccountBalanceAfterFundsOutCommit = jsonData[i].value",
													"            }",
													"        }",
													"        var hubExpectedBalance = Number(pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutCommit\")) - Number(pm.environment.get(\"fundsOutCommitAmount\"))",
													"        pm.test(\"Final Hub Reconciliation Account Balance should decrease by the transfer amount\", function () {",
													"            pm.expect(hubReconAccountBalanceAfterFundsOutCommit).to.eql(hubExpectedBalance);",
													"          });  ",
													"    });",
													"}, 2000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{hub_operator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"recordFundsOutCommit\",\n  \"reason\": \"Reason for out flow of funds\"\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}/transfers/{{fundsOutPrepareReserveTransferId}}",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"accounts",
												"{{payerfspSettlementAccountId}}",
												"transfers",
												"{{fundsOutPrepareReserveTransferId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "(BUG) Record Funds Out Commit - transfer status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1809507a-83ea-469d-8692-59e38cced96d",
												"exec": [
													"pm.environment.set('dateHeader', (new Date()).toUTCString());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "db933910-0ef6-406a-bed5-76e74347f533",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"    ",
													"    const getTransferResponse = {",
													"      url: pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"fundsOutPrepareReserveTransferId\"),",
													"      method: 'GET',",
													"      header: {",
													"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"          \"FSPIOP-Source\": \"hub_operator\",",
													"          \"Content-Type\": \"application/json\"",
													"      }",
													"    };",
													"    pm.sendRequest(getTransferResponse, function (err, response) {",
													"        if(response.responseSize !== 0) {",
													"            //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is switch \", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('switch');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-signature is not empty\", function () {",
													"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
													"                });",
													"            ",
													"            ",
													"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data",
													"            pm.test(\"Transfer State should be COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql(\"COMMITTED\");",
													"              });    ",
													"        } else {",
													"            pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"            });",
													"            postman.setNextRequest(null)",
													"        }",
													"    });",
													"}, 2000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{dateHeader}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											}
										],
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers/{{fundsOutPrepareReserveTransferId}}",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"transfers",
												"{{fundsOutPrepareReserveTransferId}}"
											]
										},
										"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Reserve&Abort (BUG)",
							"item": [
								{
									"name": "Record Funds Out Prepare&Reserve- payerfsp",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a96ad88c-c5e9-4077-b060-765ccd1e86e1",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('fundsOutPrepareReserveTransferId', generatedUUID);",
													"pm.environment.set('fundsOutPrepareReserveAmount', 1000);",
													"",
													"",
													"const payerfspGetStatusRequest = {",
													"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
													"  method: 'GET',",
													"  header: {",
													"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"      \"Content-Type\": \"application/json\"",
													"  }",
													"};",
													"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
													"    console.log(response.json())",
													"    var jsonData = response.json()",
													"    for(var i in jsonData) {",
													"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"            pm.environment.set(\"payerfspSettlementAccountId\",jsonData[i].id)",
													"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutPrepare\",jsonData[i].value)",
													"        }",
													"    }",
													"});",
													"",
													"const hubGetStatusRequest = {",
													"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/hub/accounts',",
													"  method: 'GET',",
													"  header: {",
													"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"      \"Content-Type\": \"application/json\"",
													"  }",
													"};",
													"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
													"    console.log(response.json())",
													"    var jsonData = response.json()",
													"    for(var i in jsonData) {",
													"        if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutPrepare\",jsonData[i].value)",
													"        }",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "96c26230-6092-4f78-882f-c5343b363fe1",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"    const payerfspGetStatusRequest = {",
													"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
													"      method: 'GET',",
													"      header: {",
													"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"          \"Content-Type\": \"application/json\"",
													"      }",
													"    };",
													"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
													"        console.log(response.json())",
													"        var jsonData = response.json()",
													"        var payerfspSettlementAccountBalanceAfterFundsOutPrepare",
													"        for(var i in jsonData) {",
													"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"                payerfspSettlementAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
													"            }",
													"        }",
													"        var payerfspExpectedBalance = -(-Number(pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutPrepare'))- Number(pm.environment.get(\"fundsOutPrepareReserveAmount\")))",
													"        pm.test(\"Final Payerfsp Settlement Account Balance should decrease by the transfer amount\", function () {",
													"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutPrepare).to.eql(payerfspExpectedBalance);",
													"          });    ",
													"    ",
													"    });",
													"    ",
													"    const hubGetStatusRequest = {",
													"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/hub/accounts',",
													"      method: 'GET',",
													"      header: {",
													"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"          \"Content-Type\": \"application/json\"",
													"      }",
													"    };",
													"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
													"        console.log(response.json())",
													"        var jsonData = response.json()",
													"        var hubReconAccountBalanceAfterFundsOutPrepare",
													"        for(var i in jsonData) {",
													"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"                hubReconAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
													"            }",
													"        }",
													"        var hubExpectedBalance = pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutPrepare\")//-pm.environment.get(\"fundsOutPrepareReserveAmount\")",
													"        pm.test(\"Final Hub Reconciliation Account Balance should stay the same in prepare phase\", function () {",
													"            pm.expect(hubReconAccountBalanceAfterFundsOutPrepare).to.eql(hubExpectedBalance);",
													"          });  ",
													"    });",
													"}, 2000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "hub_operator"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{fundsOutPrepareReserveTransferId}}\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsOutPrepareReserve\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": {{fundsOutPrepareReserveAmount}},\n    \"currency\": \"{{currency}}\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"accounts",
												"{{payerfspSettlementAccountId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Record Funds Out Prepare&Reserve - transfer status (BUG)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1809507a-83ea-469d-8692-59e38cced96d",
												"exec": [
													"pm.environment.set('dateHeader', (new Date()).toUTCString());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "db933910-0ef6-406a-bed5-76e74347f533",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"    ",
													"    const getTransferResponse = {",
													"      url: pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"fundsOutPrepareReserveTransferId\"),",
													"      method: 'GET',",
													"      header: {",
													"          \"Authorization\":\"Bearer \"+pm.environment.get(\"PAYERFSP_BEARER_TOKEN\"),",
													"          \"FSPIOP-Source\": pm.environment.get(\"payerfsp\"),",
													"          \"Content-Type\": \"application/json\"",
													"      }",
													"    };",
													"    pm.sendRequest(getTransferResponse, function (err, response) {",
													"        if(response.responseSize !== 0) {",
													"            ",
													"            //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is switch \", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('switch');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-signature is not empty\", function () {",
													"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
													"                });",
													"            ",
													"            ",
													"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data",
													"            pm.test(\"Transfer State should be RESERVED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql(\"RESERVED\");",
													"              }); ",
													"        } else {",
													"            pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"            });",
													"            postman.setNextRequest(null)",
													"        }",
													"    ",
													"    });",
													"}, 2000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{dateHeader}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											}
										],
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers/{{fundsOutPrepareReserveTransferId}}",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"transfers",
												"{{fundsOutPrepareReserveTransferId}}"
											]
										},
										"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
									},
									"response": []
								},
								{
									"name": "Record Funds Out Abort - payerfsp",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a96ad88c-c5e9-4077-b060-765ccd1e86e1",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('fundsOutCommitAmount', 1000);",
													"",
													"",
													"const payerfspGetStatusRequest = {",
													"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
													"  method: 'GET',",
													"  header: {",
													"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"      \"Content-Type\": \"application/json\"",
													"  }",
													"};",
													"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
													"    console.log(response.json())",
													"    var jsonData = response.json()",
													"    for(var i in jsonData) {",
													"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutAbort\",jsonData[i].value)",
													"        }",
													"    }",
													"});",
													"",
													"const hubGetStatusRequest = {",
													"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/hub/accounts',",
													"  method: 'GET',",
													"  header: {",
													"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"      \"Content-Type\": \"application/json\"",
													"  }",
													"};",
													"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
													"    console.log(response.json())",
													"    var jsonData = response.json()",
													"    for(var i in jsonData) {",
													"        if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutAbort\",jsonData[i].value)",
													"        }",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "96c26230-6092-4f78-882f-c5343b363fe1",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"    const payerfspGetStatusRequest = {",
													"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
													"      method: 'GET',",
													"      header: {",
													"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"          \"Content-Type\": \"application/json\"",
													"      }",
													"    };",
													"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
													"        console.log(response.json())",
													"        var jsonData = response.json()",
													"        var payerfspSettlementAccountBalanceAfterFundsOutAbort",
													"        for(var i in jsonData) {",
													"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"                payerfspSettlementAccountBalanceAfterFundsOutAbort = jsonData[i].value",
													"            }",
													"        }",
													"        var payerfspExpectedBalance = pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutPrepare')//-pm.environment.get(\"fundsOutPrepareAmount\")",
													"        pm.test(\"Final Payerfsp Settlement Account Balance should rollback to the value before Prepare\", function () {",
													"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutAbort).to.eql(payerfspExpectedBalance);",
													"          });    ",
													"    ",
													"    });",
													"    ",
													"    const hubGetStatusRequest = {",
													"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/hub/accounts',",
													"      method: 'GET',",
													"      header: {",
													"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"          \"Content-Type\": \"application/json\"",
													"      }",
													"    };",
													"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
													"        console.log(response.json())",
													"        var jsonData = response.json()",
													"        var hubReconAccountBalanceAfterFundsOutCommit",
													"        for(var i in jsonData) {",
													"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"                hubReconAccountBalanceAfterFundsOutAbort = jsonData[i].value",
													"            }",
													"        }",
													"        var hubExpectedBalance = Number(pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutAbort\"))",
													"        pm.test(\"Final Hub Reconciliation Account Balance should not change\", function () {",
													"            pm.expect(hubReconAccountBalanceAfterFundsOutAbort).to.eql(hubExpectedBalance);",
													"          });  ",
													"    });",
													"}, 2000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{hub_operator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"recordFundsOutAbort\",\n  \"reason\": \"Reason for out flow of funds\"\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}/transfers/{{fundsOutPrepareReserveTransferId}}",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"accounts",
												"{{payerfspSettlementAccountId}}",
												"transfers",
												"{{fundsOutPrepareReserveTransferId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Record Funds Out Abort - transfer status (BUG)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1809507a-83ea-469d-8692-59e38cced96d",
												"exec": [
													"pm.environment.set('dateHeader', (new Date()).toUTCString());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "db933910-0ef6-406a-bed5-76e74347f533",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"    ",
													"    const getTransferResponse = {",
													"      url: pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"fundsOutPrepareReserveTransferId\"),",
													"      method: 'GET',",
													"      header: {",
													"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"          \"Content-Type\": \"application/json\"",
													"      }",
													"    };",
													"    pm.sendRequest(getTransferResponse, function (err, response) {",
													"        if(response.responseSize !== 0) {",
													"            ",
													"            //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is switch \", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('switch');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-signature is not empty\", function () {",
													"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
													"                });",
													"            ",
													"            ",
													"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data",
													"            pm.test(\"Transfer State should be ABORTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql(\"ABORTED\");",
													"              });    ",
													"        } else {",
													"            pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"            });",
													"            postman.setNextRequest(null)",
													"        }",
													"    ",
													"    });",
													"}, 2000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{dateHeader}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											}
										],
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers/{{fundsOutPrepareReserveTransferId}}",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"transfers",
												"{{fundsOutPrepareReserveTransferId}}"
											]
										},
										"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "funds_in (BUG)",
					"item": [
						{
							"name": "Record Funds In - prepare",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a96ad88c-c5e9-4077-b060-765ccd1e86e1",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('fundsInPrepareTransferId', generatedUUID);",
											"pm.environment.set('fundsInPrepareAmount', 5000);",
											"",
											"",
											"const payerfspGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if((jsonData[i].ledgerAccountType === 'SETTLEMENT') && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"payerfspSettlementAccountId\",jsonData[i].id)",
											"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsIn\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											"",
											"const hubGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/hub/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if((jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsIn\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "96c26230-6092-4f78-882f-c5343b363fe1",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    const payerfspGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"        console.log('payerfsp accounts: ',response.json())",
											"        var jsonData = response.json()",
											"        var payerfspSettlementAccountBalanceAfterFundsIn",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT'  && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                payerfspSettlementAccountBalanceAfterFundsIn = jsonData[i].value",
											"            }",
											"        }",
											"        var payerfspExpectedBalance = -(-Number(pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsIn')) + Number(pm.environment.get('fundsInPrepareAmount')))",
											"        pm.test(\"Final Payerfsp Settlement Account Balance should be same as before FundsIn + fundsInPrepareAmount\", function () {",
											"            pm.expect(payerfspSettlementAccountBalanceAfterFundsIn).to.eql(payerfspExpectedBalance);",
											"          });    ",
											"    ",
											"    });",
											"    ",
											"    const hubGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/hub/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"        console.log('hub accounts balance: ',response.json())",
											"        var jsonData = response.json()",
											"        var currentHubReconAccountBalance",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION'  && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                hubReconAccountBalanceAfterFundsIn = jsonData[i].value",
											"            }",
											"        }",
											"        var hubExpectedBalance = Number(pm.environment.get(\"hubReconAccountBalanceBeforeFundsIn\"))+Number(pm.environment.get('fundsInPrepareAmount'))",
											"        console.log(hubExpectedBalance)",
											"        pm.test(\"Final Hub Reconciliation Account Balance should be same as before FundsIn + fundsInPrepareAmount\", function () {",
											"            pm.expect(hubReconAccountBalanceAfterFundsIn).to.eql(hubExpectedBalance);",
											"          });  ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYERFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{fundsInPrepareTransferId}}\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsIn\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": \"{{fundsInPrepareAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Record Funds In - prepare transfer status (BUG)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1809507a-83ea-469d-8692-59e38cced96d",
										"exec": [
											"pm.environment.set('dateHeader', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "db933910-0ef6-406a-bed5-76e74347f533",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    ",
											"    const getTransferResponse = {",
											"      url: pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"fundsInPrepareTransferId\"),",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"PAYERFSP_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"payerfsp\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    }",
											"    pm.sendRequest(getTransferResponse, function (err, response) {",
											"        if(response.responseSize !== 0) {",
											"            ",
											"            //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is switch \", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('switch');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-signature is not empty\", function () {",
											"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
											"                });",
											"            ",
											"            ",
											"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data",
											"            pm.test(\"Transfer State should be COMMITTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql(\"COMMITTED\");",
											"            });   ",
											"            ",
											"        } else {",
											"            pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"            });",
											"            postman.setNextRequest(null)",
											"        }",
											"    ",
											"    });",
											"}, 4000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYERFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers/{{fundsInPrepareTransferId}}",
									"host": [
										"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
									],
									"path": [
										"transfers",
										"{{fundsInPrepareTransferId}}"
									]
								},
								"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "settlement_management (pending)",
					"item": [
						{
							"name": "SETTLE  settlement",
							"item": [
								{
									"name": "Setup Settlement",
									"item": [
										{
											"name": "Setup Accounts",
											"item": [
												{
													"name": "Activate currency Account",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "df459f6a-f3cf-405b-a06a-5c58755c0519",
																"exec": [
																	"const fsps = ['payerfsp','payeefsp','testfsp1','testfsp2'];",
																	"",
																	"pm.response.json().map(participant => {",
																	"    if(fsps.include(participant.name)) {",
																	"       const participantGetRequest = {",
																	"          url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+participant.name,",
																	"          method: 'GET',",
																	"          header: {",
																	"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
																	"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
																	"              \"Content-Type\": \"application/json\"",
																	"          }",
																	"        };",
																	"        pm.sendRequest(participantGetRequest, function (err, response) {",
																	"            if(response.responseSize !== 0) {",
																	"                response.json().accounts.map(account => {",
																	"                    const url = pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+participant.name+'/accounts/'+account.id;",
																	"                    const header =  {",
																	"                          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
																	"                          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
																	"                          \"Content-Type\": \"application/json\"",
																	"                      };",
																	"                    if(account.currency === pm.environment.get('currency')) {",
																	"                        const participantOutRequest = {",
																	"                          url: url,",
																	"                          method: 'PUT',",
																	"                          header: header,",
																	"                          body: {",
																	"                              \"isActive\": true",
																	"                            }",
																	"                        };",
																	"                    } else {",
																	"                        const participantOutRequest = {",
																	"                          url: url,",
																	"                          method: 'PUT',",
																	"                          header: header,",
																	"                          body: {",
																	"                              \"isActive\": false",
																	"                            }",
																	"                        };",
																	"                    }",
																	"                })",
																	"            } else {",
																	"                pm.test(\"Request FAILED\", function () {",
																	"                    throw new Error('Did not receive response');",
																	"                });",
																	"                postman.setNextRequest(null)",
																	"            }",
																	"        }); ",
																	"    }",
																	"})"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants",
															"host": [
																"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
															],
															"path": [
																"participants"
															]
														}
													},
													"response": []
												}
											],
											"description": "Activate only XOF accounts and disable rest of the accounts",
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Create Settlement on the current open window",
											"item": [
												{
													"name": "Get Existing Open Window",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "06ca836d-99c7-49c7-844e-fe68090e14a4",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"State should be OPEN\", function () {",
																	"    var jsonData = pm.response.json();",
																	"    pm.expect(jsonData[0].state).to.eql('OPEN');",
																	"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
																	"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"value": "hub_operator",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
															"host": [
																"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
															],
															"path": [
																"settlementWindows"
															],
															"query": [
																{
																	"key": "state",
																	"value": "OPEN"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Close Existing Window",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "5b16f7ed-2212-419d-a43b-e2b38cf2b718",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"New window State should be OPEN\", function () {",
																	"    console.log(pm.response.json());",
																	"    pm.expect(pm.response.json().state).to.eql('OPEN');",
																	"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
																	"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
																	"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
																	"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
														},
														"url": {
															"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
															"host": [
																"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
															],
															"path": [
																"settlementWindows",
																"{{openWindowID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Settlement for Closed Window",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "2fd9c949-c268-4b8a-b924-724a54c9295d",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.environment.set(\"settlementId\", pm.response.json().id);",
																	"var jsonData = pm.response.json();",
																	"    ",
																	"pm.test(\"Settlement State should be PENDING_SETTLEMENT\", function () {",
																	"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
																	"});",
																	"",
																	"pm.test(\"Number of associated windows should be 1\", function () {",
																	"    pm.expect(jsonData.settlementWindows.length).to.eql(1);",
																	"});",
																	"",
																	"pm.test(\"Associated Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
																	"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
																	"});",
																	"",
																	"pm.test(\"Associated Settlement Window state should be PENDING_SETTLEMENT \", function () {",
																	"    pm.expect(jsonData.settlementWindows[0].state).to.eql('PENDING_SETTLEMENT');",
																	"});",
																	"",
																	"",
																	"for(var j in jsonData.participants) {",
																	"    for(var k in jsonData.participants[j].accounts) {",
																	"        console.log(jsonData.participants[j].accounts[k].id)",
																	"        if(jsonData.participants[j].accounts[k].id === Number(pm.environment.get(\"payerFspAccountId\"))) {",
																	"            console.log('payerfspNetSettlementAmount:',jsonData.participants[j].accounts[k].netSettlementAmount.amount)",
																	"            pm.environment.set(\"payerfspNetSettlementAmount\",jsonData.participants[j].accounts[k].netSettlementAmount.amount);",
																	"        } else if(jsonData.participants[j].accounts[k].id === Number(pm.environment.get(\"payeeFspAccountId\"))) {",
																	"            console.log('payeefspNetSettlementAmount:',jsonData.participants[j].accounts[k].netSettlementAmount.amount)",
																	"            pm.environment.set(\"payeefspNetSettlementAmount\",jsonData.participants[j].accounts[k].netSettlementAmount.amount);",
																	"        }",
																	"        ",
																	"    }",
																	"}",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payerfsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"reason\": \"TESTING\",\n  \"settlementWindows\": [\n    {\n      \"id\": {{closedWindowID}}\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
															"host": [
																"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
															],
															"path": [
																"settlements"
															]
														}
													},
													"response": []
												},
												{
													"name": "Prepare Settlement",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
																"exec": [
																	"",
																	"var jsonData = pm.response.json();",
																	"jsonData.participants.map(participant => {",
																	"    participant.accounts",
																	"                    .filter(account => account.netSettlementAmount.currency === pm.environment.get('currency'))",
																	"                    .forEach(curAccount => {",
																	"                        const participantPutRequest = {",
																	"                          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
																	"                          method: 'PUT',",
																	"                          header: {",
																	"                              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
																	"                              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
																	"                              \"Content-Type\": \"application/json\"",
																	"                          },",
																	"                          body: {",
																	"                            mode: 'raw',",
																	"                            raw: JSON.stringify(",
																	"                                {",
																	"                                  \"participants\": [",
																	"                                    {",
																	"                                      \"id\": participant.id,",
																	"                                      \"accounts\": [",
																	"                                        {",
																	"                                          \"id\": curAccount.id,",
																	"                                          \"reason\": \"Transfers recorded for payer\",",
																	"                                          \"state\": \"PS_TRANSFERS_RECORDED\"",
																	"                                        }",
																	"                                      ]",
																	"                                    }",
																	"                                  ]",
																	"                                }",
																	"                            )",
																	"                          }",
																	"                        };",
																	"                        pm.sendRequest(participantPutRequest, function (err, response) {",
																	"                            console.log(response.json());",
																	"                        });",
																	"                    })",
																	"})",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "payerfsp"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
															"host": [
																"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
															],
															"path": [
																"settlements",
																"{{settlementId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reserve Settlement",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
																"exec": [
																	"",
																	"var jsonData = pm.response.json();",
																	"jsonData.participants.map(participant => {",
																	"    participant.accounts",
																	"                    .filter(account => account.netSettlementAmount.currency === pm.environment.get('currency'))",
																	"                    .forEach(curAccount => {",
																	"                        const participantPutRequest = {",
																	"                          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
																	"                          method: 'PUT',",
																	"                          header: {",
																	"                              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
																	"                              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
																	"                              \"Content-Type\": \"application/json\"",
																	"                          },",
																	"                          body: {",
																	"                            mode: 'raw',",
																	"                            raw: JSON.stringify(",
																	"                                {",
																	"                                  \"participants\": [",
																	"                                    {",
																	"                                      \"id\": participant.id,",
																	"                                      \"accounts\": [",
																	"                                        {",
																	"                                          \"id\": curAccount.id,",
																	"                                          \"reason\": \"Transfers reserved\",",
																	"                                          \"state\": \"PS_TRANSFERS_RESERVED\"",
																	"                                        }",
																	"                                      ]",
																	"                                    }",
																	"                                  ]",
																	"                                }",
																	"                            )",
																	"                          }",
																	"                        };",
																	"                        pm.sendRequest(participantPutRequest, function (err, response) {",
																	"                            console.log(response.json());",
																	"                        });",
																	"                    })",
																	"})"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "payerfsp"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
															"host": [
																"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
															],
															"path": [
																"settlements",
																"{{settlementId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Commit Settlement",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
																"exec": [
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"var jsonData = pm.response.json();",
																	"jsonData.participants.map(participant => {",
																	"    participant.accounts",
																	"                    .filter(account => account.netSettlementAmount.currency === pm.environment.get('currency'))",
																	"                    .forEach(curAccount => {",
																	"                        const participantPutRequest = {",
																	"                          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
																	"                          method: 'PUT',",
																	"                          header: {",
																	"                              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
																	"                              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
																	"                              \"Content-Type\": \"application/json\"",
																	"                          },",
																	"                          body: {",
																	"                            mode: 'raw',",
																	"                            raw: JSON.stringify(",
																	"                                {",
																	"                                  \"participants\": [",
																	"                                    {",
																	"                                      \"id\": participant.id,",
																	"                                      \"accounts\": [",
																	"                                        {",
																	"                                          \"id\": curAccount.id,",
																	"                                          \"reason\": \"Transfers committed\",",
																	"                                          \"state\": \"PS_TRANSFERS_COMMITTED\"",
																	"                                        }",
																	"                                      ]",
																	"                                    }",
																	"                                  ]",
																	"                                }",
																	"                            )",
																	"                          }",
																	"                        };",
																	"                        pm.sendRequest(participantPutRequest, function (err, response) {",
																	"                            console.log(response.json());",
																	"                        });",
																	"                    })",
																	"})",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "payerfsp"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
															"host": [
																"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
															],
															"path": [
																"settlements",
																"{{settlementId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Settle Settlement",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
																"exec": [
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"jsonData.participants.map(participant => {",
																	"    participant.accounts",
																	"                    .filter(account => account.netSettlementAmount.currency === pm.environment.get('currency'))",
																	"                    .forEach(curAccount => {",
																	"                        const participantPutRequest = {",
																	"                          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
																	"                          method: 'PUT',",
																	"                          header: {",
																	"                              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
																	"                              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
																	"                              \"Content-Type\": \"application/json\"",
																	"                          },",
																	"                          body: {",
																	"                            mode: 'raw',",
																	"                            raw: JSON.stringify(",
																	"                                {",
																	"                                  \"participants\": [",
																	"                                    {",
																	"                                      \"id\": participant.id,",
																	"                                      \"accounts\": [",
																	"                                        {",
																	"                                          \"id\": curAccount.id,",
																	"                                          \"reason\": \"Transfers settled for payer\",",
																	"                                          \"state\": \"SETTLED\"",
																	"                                        }",
																	"                                      ]",
																	"                                    }",
																	"                                  ]",
																	"                                }",
																	"                            )",
																	"                          }",
																	"                        };",
																	"                        pm.sendRequest(participantPutRequest, function (err, response) {",
																	"                            console.log(response.json());",
																	"                        });",
																	"                    })",
																	"})",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "payerfsp"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
															"host": [
																"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
															],
															"path": [
																"settlements",
																"{{settlementId}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "This will allow us to not leave any window unsettled. Means eachwindow that we close using this collection will be gone through the whole manual settlement process and the positions gets reset.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "66c5d094-479b-4a16-a18a-124c173441d6",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "eabb2405-82c3-4946-bd81-a6cacb9903af",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Store Settlement&Position Account Balances Before Transfers",
											"item": [
												{
													"name": "testfsp1 balances",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "22c316ff-8ffd-4e54-b450-d12deb6e40b0",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"jsonData",
																	"    .filter(account => account.currency === pm.environment.get('currency'))",
																	"    .forEach(curAccount => {",
																	"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
																	"            pm.environment.set(\"testfsp1SettleAccountBalanceBeforeTransfer\", curAccount.value);",
																	"        }",
																	"        if(curAccount.ledgerAccountType === \"POSITION\") {",
																	"            pm.environment.set(\"testfsp1PositionAccountBalanceBeforeTransfer\", curAccount.value);",
																	"            pm.test(\"testfsp1 position account balance is 0\", function () {",
																	"                pm.expect(curAccount.value).to.eql(0);",
																	"            });",
																	"        }",
																	"    })",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
															"host": [
																"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
															],
															"path": [
																"participants",
																"testfsp1",
																"accounts"
															]
														}
													},
													"response": []
												},
												{
													"name": "testfsp2 balances",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"jsonData",
																	"    .filter(account => account.currency === pm.environment.get('currency'))",
																	"    .forEach(curAccount => {",
																	"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
																	"            pm.environment.set(\"testfsp2SettleAccountBalanceBeforeTransfer\", curAccount.value);",
																	"        }",
																	"        if(curAccount.ledgerAccountType === \"POSITION\") {",
																	"            pm.environment.set(\"testfsp2PositionAccountBalanceBeforeTransfer\", curAccount.value);",
																	"            pm.test(\"testfsp2 position account balance is 0\", function () {",
																	"                pm.expect(curAccount.value).to.eql(0);",
																	"            });",
																	"        }",
																	"    })",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
															"host": [
																"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
															],
															"path": [
																"participants",
																"testfsp2",
																"accounts"
															]
														}
													},
													"response": []
												},
												{
													"name": "payerfsp balances",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"jsonData",
																	"    .filter(account => account.currency === pm.environment.get('currency'))",
																	"    .forEach(curAccount => {",
																	"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
																	"            pm.environment.set(\"payerfspSettleAccountBalanceBeforeTransfer\", curAccount.value);",
																	"        }",
																	"        if(curAccount.ledgerAccountType === \"POSITION\") {",
																	"            pm.environment.set(\"payerfspPositionAccountBalanceBeforeTransfer\", curAccount.value);",
																	"            pm.test(\"payerfsp position account balance is 0\", function () {",
																	"                pm.expect(curAccount.value).to.eql(0);",
																	"            });",
																	"        }",
																	"    })",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "payerfsp"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payerfsp/accounts",
															"host": [
																"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
															],
															"path": [
																"participants",
																"payerfsp",
																"accounts"
															]
														}
													},
													"response": []
												},
												{
													"name": "payeefsp balances",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"jsonData",
																	"    .filter(account => account.currency === pm.environment.get('currency'))",
																	"    .forEach(curAccount => {",
																	"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
																	"            pm.environment.set(\"payeefspSettleAccountBalanceBeforeTransfer\", curAccount.value);",
																	"        }",
																	"        if(curAccount.ledgerAccountType === \"POSITION\") {",
																	"            pm.environment.set(\"payeefspPositionAccountBalanceBeforeTransfer\", curAccount.value);",
																	"            pm.test(\"payeefsp position account balance is 0\", function () {",
																	"                pm.expect(curAccount.value).to.eql(0);",
																	"            });",
																	"        }",
																	"    })",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "payerfsp"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payeefsp/accounts",
															"host": [
																"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
															],
															"path": [
																"participants",
																"payeefsp",
																"accounts"
															]
														}
													},
													"response": []
												},
												{
													"name": "HUB balances",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"jsonData",
																	"    .filter(account => account.currency === pm.environment.get('currency'))",
																	"    .forEach(curAccount => {",
																	"        if(curAccount.ledgerAccountType === \"HUB_RECONCILIATION\") {",
																	"            pm.environment.set(\"hubReconciliationAccountBalanceBeforeTransfer\", curAccount.value);",
																	"        }",
																	"        if(curAccount.ledgerAccountType === \"HUB_MULTILATERAL_SETTLEMENT\") {",
																	"            pm.environment.set(\"hubMultilateralAccountBalanceBeforeTransfer\", curAccount.value);",
																	"        }",
																	"    })",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "hub_operator"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/hub/accounts",
															"host": [
																"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
															],
															"path": [
																"participants",
																"hub",
																"accounts"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Run Quote & Transfers",
											"item": [
												{
													"name": "Send Quote 1 (testfsp1 to testfsp2)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"  var navigator = {}; ",
																	"var window = {}; ",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('quoteId', generatedUUID);",
																	"generatedUUID = uuid.v4();",
																	"pm.environment.set('transactionId', generatedUUID);",
																	"",
																	"pm.variables.set('quoteDate', (new Date()).toUTCString());",
																	"pm.variables.set('payerName', 'PayerFirst PayerLast');",
																	"pm.variables.set('payerMSISDN', '918381008987');",
																	"",
																	"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
																	"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
																	"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp1\",\"FSPIOP-Destination\":\"testfsp2\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"  \"quoteId\": pm.environment.get('quoteId'),",
																	"  \"transactionId\": pm.environment.get('transactionId'),",
																	"  \"payer\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
																	"      \"fspId\": \"testfsp1\"",
																	"    },",
																	"    \"personalInfo\": {",
																	"      \"complexName\": {",
																	"        \"firstName\": \"Mats\",",
																	"        \"lastName\": \"Hagman\"",
																	"      },",
																	"      \"dateOfBirth\": \"1983-10-25\"",
																	"    }",
																	"  },",
																	"  \"payee\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
																	"      \"fspId\": \"testfsp2\"",
																	"    }",
																	"  },",
																	"  \"amountType\": \"RECEIVE\",",
																	"  \"amount\": {",
																	"    \"amount\": \"60\",",
																	"    \"currency\": pm.environment.get('currency')",
																	"  },",
																	"  \"transactionType\": {",
																	"    \"scenario\": \"TRANSFER\",",
																	"    \"initiator\": \"PAYER\",",
																	"    \"initiatorType\": \"CONSUMER\"",
																	"  },",
																	"  \"note\": \"hej\"",
																	"}",
																	"",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"quoteRequest\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp1JWSKey'));",
																	"console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"TESTFSP2_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"              \r",
																	"              //Check the Headers\r",
																	"              var headers = response.json().headers;\r",
																	"              \r",
																	"                pm.test(\"testfsp2 fspiop-source is testfsp1\", function () {\r",
																	"                    pm.expect(headers['fspiop-source']).to.eql('testfsp1');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-destination is testfsp2\", function () {\r",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('testfsp2');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-signature is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 accept is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 content-typeis same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-uri is /quotes\", function () {\r",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-http-method is POST\", function () {\r",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
																	"                });\r",
																	"                \r",
																	"          } else {\r",
																	"              pm.test(\"Quote FAILED\", function () {\r",
																	"                throw new Error('Did not receive request on payee side');\r",
																	"              });\r",
																	"              postman.setNextRequest(null)\r",
																	"          }\r",
																	"   });\r",
																	"}, 1100)\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {\r",
																	"      if(response.responseSize !== 0) {\r",
																	"          //Checking headers\r",
																	"            var headers = response.json().headers;\r",
																	"            pm.test(\"testfsp1 fspiop-source is testfsp2\", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('testfsp2');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 fspiop-destination is testfsp1\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 accept is empty\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql(undefined);\r",
																	"            });\r",
																	"            \r",
																	"            \r",
																	"            \r",
																	"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])\r",
																	"            // var strData = JSON.stringify(response.json().data)\r",
																	"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`\r",
																	"            // console.log(`token: ${token}`)\r",
																	"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldentestfsp2JWSPubKey'), {alg: ['RS256']})\r",
																	"            // console.log(`isValid: ${isValid}`)\r",
																	"            // pm.test(\"Check if the response is JWS valid\", function () {\r",
																	"            //     pm.expect(isValid).to.eql(true);\r",
																	"            // });\r",
																	"            \r",
																	"            //Validate protected header inside Signature\r",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))\r",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)\r",
																	"            \r",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
																	"            });\r",
																	"            \r",
																	"\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldentestfsp2\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('testfsp2');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be testfsp1\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('testfsp1');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);\r",
																	"            });\r",
																	"           \r",
																	"            pm.test(\"testfsp1 FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 fspiop-http-method is PUT\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
																	"            });\r",
																	"            \r",
																	"            var jsonData = response.json().data;\r",
																	"            \r",
																	"            pm.test(\"Response quoteId is  null\", function () {\r",
																	"                pm.expect(jsonData.quoteId).to.eql(undefined);\r",
																	"                \r",
																	"            });\r",
																	"          \r",
																	"            pm.test(\"Response ilpPacket is not null\", function () {\r",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);\r",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);\r",
																	"            });\r",
																	"       \r",
																	"           pm.test(\"Response condition is not null\", function () {\r",
																	"               pm.expect(jsonData.condition).not.equal(undefined);\r",
																	"               pm.environment.set(\"condition\", jsonData.condition);\r",
																	"           });\r",
																	"      } else {\r",
																	"          pm.test(\"Quote FAILED\", function () {\r",
																	"            throw new Error('Did not receive response on Payer side');\r",
																	"           });\r",
																	"           postman.setNextRequest(null);\r",
																	"      }\r",
																	"       \r",
																	"   });\r",
																	"}, 1000)\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TESTFSP1_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "testfsp1",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "testfsp2",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/quotes",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{quoteRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Transfer 1 ( testfsp1 to testfsp2 )",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
																"exec": [
																	"var navigator = {}; //fake a navigator object for the lib\r",
																	"var window = {}; //fake a window object for the lib\r",
																	"eval(pm.environment.get('jrsassign'));\r",
																	"\r",
																	"var uuid = require('uuid');\r",
																	"var generatedUUID = uuid.v4();\r",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
																	"\r",
																	"\r",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
																	"\r",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
																	"\r",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp1\",\"FSPIOP-Destination\":\"testfsp2\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};\r",
																	"var sHeader = JSON.stringify(oHeader);\r",
																	"console.log(`sHeader: ${sHeader}`)\r",
																	"\r",
																	"var objPayload = {\r",
																	"  \"transferId\": pm.environment.get('transfer_ID'),\r",
																	"  \"payerFsp\": \"testfsp1\",\r",
																	"  \"payeeFsp\": \"testfsp2\",\r",
																	"  \"amount\": {\r",
																	"    \"amount\": \"60\",\r",
																	"    \"currency\": pm.environment.get('currency')\r",
																	"  },\r",
																	"  \"expiration\": pm.environment.get('transferExpiration'),\r",
																	"  \"ilpPacket\": pm.environment.get('ilpPacket'),\r",
																	"  \"condition\": pm.environment.get('condition')\r",
																	"}\r",
																	"var sPayload = JSON.stringify(objPayload)\r",
																	"console.log(`sPayload: ${sPayload}`)\r",
																	"pm.variables.set(\"transferRequest\", sPayload);\r",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp1JWSKey'));\r",
																	"//console.log(`token: ${token}`)\r",
																	"\r",
																	"// var encodedHeaders = btoa(sHeader)\r",
																	"\r",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
																	"// var token = JSON.stringify(ofspiopSignature)\r",
																	"\r",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
																	"\r",
																	"const signatureObject = {\r",
																	"    signature: signature.replace('\"', ''),\r",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
																	"};\r",
																	"\r",
																	"console.log(JSON.stringify(signatureObject))\r",
																	"\r",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});\r",
																	"\r",
																	"// //Check the request that Switch forwards to testfsp2\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"TESTFSP2_SDK_INBOUND_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"              \r",
																	"              //Check the Headers\r",
																	"              var headers = response.json().headers;\r",
																	"              \r",
																	"                pm.test(\"testfsp2 fspiop-source is goldentestfsp1\", function () {\r",
																	"                    pm.expect(headers['fspiop-source']).to.eql('testfsp1');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-destination is goldentestfsp2\", function () {\r",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('testfsp2');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 content-typeis same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 accept is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-signature is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-http-method is POST\", function () {\r",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-uri is /transfers\", function () {\r",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');\r",
																	"                });\r",
																	"                \r",
																	"                \r",
																	"                //Check the data\r",
																	"                var jsonData = response.json().data;\r",
																	"                pm.test(\"testfsp2 data should have the same transferId as request\", function () {\r",
																	"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));\r",
																	"                });\r",
																	"                pm.test(\"testfsp2 data should have the same amount as request\", function () {\r",
																	"                  pm.expect(jsonData.amount.amount).to.eql('60');\r",
																	"                });\r",
																	"                pm.test(\"testfsp2 data should have the same currency as request\", function () {\r",
																	"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));\r",
																	"                });\r",
																	"                pm.test(\"testfsp2 data should have the same expiration as request\", function () {\r",
																	"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));\r",
																	"                });\r",
																	"                pm.test(\"testfsp2 data should have the same ilpPacket as request\", function () {\r",
																	"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));\r",
																	"                });\r",
																	"                pm.test(\"testfsp2 data should have the same condition as request\", function () {\r",
																	"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));\r",
																	"                });\r",
																	"                \r",
																	"          } else {\r",
																	"              pm.test(\"Transfer FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on payee side');\r",
																	"              });\r",
																	"              postman.setNextRequest(null)\r",
																	"          }\r",
																	"  });\r",
																	"}, 1100)\r",
																	"\r",
																	"//Check the callback response that Switch forwards to testfsp1\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"            //Checking headers\r",
																	"            var headers = response.json().headers;\r",
																	"            pm.test(\"testfsp1 fspiop-source is goldentestfsp2 \", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('testfsp2');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 fspiop-destination is goldentestfsp1\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 accept is empty\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql(undefined);\r",
																	"            });\r",
																	"            \r",
																	"            \r",
																	"            pm.test(\"testfsp1 fspiop-uri includes /transfers/{{transfer_ID}}\", function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 fspiop-http-method is PUT\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
																	"            });\r",
																	"            \r",
																	"            var jsonData = response.json().data;\r",
																	"            pm.test(\"Response data does not have transferId\", function () {\r",
																	"               pm.expect(jsonData.transferId).to.eql(undefined);\r",
																	"            });\r",
																	"            pm.test(\"Response status is COMMITTED\", function () {\r",
																	"                pm.expect(jsonData.transferState).to.eql('COMMITTED');\r",
																	"            });\r",
																	"          } else {\r",
																	"              pm.test(\"Transfer FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on payer side');\r",
																	"              });\r",
																	"              postman.setNextRequest(null)\r",
																	"          }\r",
																	"   });\r",
																	"}, 1500)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TESTFSP1_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "testfsp1",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "testfsp2",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Quote 2 (testfsp1 to payeefsp)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"var navigator = {}; ",
																	"var window = {}; ",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('quoteId', generatedUUID);",
																	"generatedUUID = uuid.v4();",
																	"pm.environment.set('transactionId', generatedUUID);",
																	"",
																	"pm.variables.set('quoteDate', (new Date()).toUTCString());",
																	"pm.variables.set('payerName', 'PayerFirst PayerLast');",
																	"pm.variables.set('payerMSISDN', '918381008987');",
																	"",
																	"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
																	"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
																	"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp1\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"  \"quoteId\": pm.environment.get('quoteId'),",
																	"  \"transactionId\": pm.environment.get('transactionId'),",
																	"  \"payer\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
																	"      \"fspId\": \"testfsp1\"",
																	"    },",
																	"    \"personalInfo\": {",
																	"      \"complexName\": {",
																	"        \"firstName\": \"Mats\",",
																	"        \"lastName\": \"Hagman\"",
																	"      },",
																	"      \"dateOfBirth\": \"1983-10-25\"",
																	"    }",
																	"  },",
																	"  \"payee\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
																	"      \"fspId\": \"payeefsp\"",
																	"    }",
																	"  },",
																	"  \"amountType\": \"RECEIVE\",",
																	"  \"amount\": {",
																	"    \"amount\": \"55\",",
																	"    \"currency\": pm.environment.get('currency')",
																	"  },",
																	"  \"transactionType\": {",
																	"    \"scenario\": \"TRANSFER\",",
																	"    \"initiator\": \"PAYER\",",
																	"    \"initiatorType\": \"CONSUMER\"",
																	"  },",
																	"  \"note\": \"hej\"",
																	"}",
																	"",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"quoteRequest\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp1JWSKey'));",
																	"console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"              \r",
																	"              //Check the Headers\r",
																	"              var headers = response.json().headers;\r",
																	"              \r",
																	"                pm.test(\"payeefsp fspiop-source is testfsp1\", function () {\r",
																	"                    pm.expect(headers['fspiop-source']).to.eql('testfsp1');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {\r",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payeefsp accept is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {\r",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {\r",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
																	"                });\r",
																	"                \r",
																	"          } else {\r",
																	"              pm.test(\"Quote FAILED\", function () {\r",
																	"                throw new Error('Did not receive request on payee side');\r",
																	"              });\r",
																	"              postman.setNextRequest(null)\r",
																	"          }\r",
																	"   });\r",
																	"}, 1100)\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {\r",
																	"      if(response.responseSize !== 0) {\r",
																	"          //Checking headers\r",
																	"            var headers = response.json().headers;\r",
																	"            pm.test(\"testfsp1 fspiop-source is payeefsp\", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 fspiop-destination is testfsp1\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 accept is empty\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql(undefined);\r",
																	"            });\r",
																	"            \r",
																	"            \r",
																	"            \r",
																	"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])\r",
																	"            // var strData = JSON.stringify(response.json().data)\r",
																	"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`\r",
																	"            // console.log(`token: ${token}`)\r",
																	"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})\r",
																	"            // console.log(`isValid: ${isValid}`)\r",
																	"            // pm.test(\"Check if the response is JWS valid\", function () {\r",
																	"            //     pm.expect(isValid).to.eql(true);\r",
																	"            // });\r",
																	"            \r",
																	"            //Validate protected header inside Signature\r",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))\r",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)\r",
																	"            \r",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
																	"            });\r",
																	"            \r",
																	"\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be testfsp1\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('testfsp1');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);\r",
																	"            });\r",
																	"           \r",
																	"            pm.test(\"testfsp1 FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 fspiop-http-method is PUT\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
																	"            });\r",
																	"            \r",
																	"            var jsonData = response.json().data;\r",
																	"            \r",
																	"            pm.test(\"Response quoteId is  null\", function () {\r",
																	"                pm.expect(jsonData.quoteId).to.eql(undefined);\r",
																	"                \r",
																	"            });\r",
																	"          \r",
																	"            pm.test(\"Response ilpPacket is not null\", function () {\r",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);\r",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);\r",
																	"            });\r",
																	"       \r",
																	"           pm.test(\"Response condition is not null\", function () {\r",
																	"               pm.expect(jsonData.condition).not.equal(undefined);\r",
																	"               pm.environment.set(\"condition\", jsonData.condition);\r",
																	"           });\r",
																	"      } else {\r",
																	"          pm.test(\"Quote FAILED\", function () {\r",
																	"            throw new Error('Did not receive response on Payer side');\r",
																	"           });\r",
																	"           postman.setNextRequest(null);\r",
																	"      }\r",
																	"       \r",
																	"   });\r",
																	"}, 1000)\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TESTFSP1_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "testfsp1",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "payeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/quotes",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{quoteRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Transfer 2 (testfsp1 to payeefsp)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
																"exec": [
																	"var navigator = {}; //fake a navigator object for the lib\r",
																	"var window = {}; //fake a window object for the lib\r",
																	"eval(pm.environment.get('jrsassign'));\r",
																	"\r",
																	"var uuid = require('uuid');\r",
																	"var generatedUUID = uuid.v4();\r",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
																	"\r",
																	"\r",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
																	"\r",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
																	"\r",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp1\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};\r",
																	"var sHeader = JSON.stringify(oHeader);\r",
																	"console.log(`sHeader: ${sHeader}`)\r",
																	"\r",
																	"var objPayload = {\r",
																	"  \"transferId\": pm.environment.get('transfer_ID'),\r",
																	"  \"payerFsp\": \"testfsp1\",\r",
																	"  \"payeeFsp\": \"payeefsp\",\r",
																	"  \"amount\": {\r",
																	"    \"amount\": \"55\",\r",
																	"    \"currency\": pm.environment.get('currency')\r",
																	"  },\r",
																	"  \"expiration\": pm.environment.get('transferExpiration'),\r",
																	"  \"ilpPacket\": pm.environment.get('ilpPacket'),\r",
																	"  \"condition\": pm.environment.get('condition')\r",
																	"}\r",
																	"var sPayload = JSON.stringify(objPayload)\r",
																	"console.log(`sPayload: ${sPayload}`)\r",
																	"pm.variables.set(\"transferRequest\", sPayload);\r",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp1JWSKey'));\r",
																	"//console.log(`token: ${token}`)\r",
																	"\r",
																	"// var encodedHeaders = btoa(sHeader)\r",
																	"\r",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
																	"// var token = JSON.stringify(ofspiopSignature)\r",
																	"\r",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
																	"\r",
																	"const signatureObject = {\r",
																	"    signature: signature.replace('\"', ''),\r",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
																	"};\r",
																	"\r",
																	"console.log(JSON.stringify(signatureObject))\r",
																	"\r",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});\r",
																	"\r",
																	"// //Check the request that Switch forwards to payeefsp\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"              \r",
																	"              //Check the Headers\r",
																	"              var headers = response.json().headers;\r",
																	"              \r",
																	"                pm.test(\"payeefsp fspiop-source is goldentestfsp1\", function () {\r",
																	"                    pm.expect(headers['fspiop-source']).to.eql('testfsp1');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payeefsp fspiop-destination is goldenpayeefsp\", function () {\r",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payeefsp accept is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {\r",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {\r",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');\r",
																	"                });\r",
																	"                \r",
																	"                \r",
																	"                //Check the data\r",
																	"                var jsonData = response.json().data;\r",
																	"                pm.test(\"payeefsp data should have the same transferId as request\", function () {\r",
																	"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));\r",
																	"                });\r",
																	"                pm.test(\"payeefsp data should have the same amount as request\", function () {\r",
																	"                  pm.expect(jsonData.amount.amount).to.eql('55');\r",
																	"                });\r",
																	"                pm.test(\"payeefsp data should have the same currency as request\", function () {\r",
																	"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));\r",
																	"                });\r",
																	"                pm.test(\"payeefsp data should have the same expiration as request\", function () {\r",
																	"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));\r",
																	"                });\r",
																	"                pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {\r",
																	"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));\r",
																	"                });\r",
																	"                pm.test(\"payeefsp data should have the same condition as request\", function () {\r",
																	"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));\r",
																	"                });\r",
																	"                \r",
																	"          } else {\r",
																	"              pm.test(\"Transfer FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on payee side');\r",
																	"              });\r",
																	"              postman.setNextRequest(null)\r",
																	"          }\r",
																	"  });\r",
																	"}, 1100)\r",
																	"\r",
																	"//Check the callback response that Switch forwards to testfsp1\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"            //Checking headers\r",
																	"            var headers = response.json().headers;\r",
																	"            pm.test(\"testfsp1 fspiop-source is goldenpayeefsp \", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 fspiop-destination is goldentestfsp1\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 accept is empty\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql(undefined);\r",
																	"            });\r",
																	"            \r",
																	"            \r",
																	"            pm.test(\"testfsp1 fspiop-uri includes /transfers/{{transfer_ID}}\", function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 fspiop-http-method is PUT\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
																	"            });\r",
																	"            \r",
																	"            var jsonData = response.json().data;\r",
																	"            pm.test(\"Response data does not have transferId\", function () {\r",
																	"               pm.expect(jsonData.transferId).to.eql(undefined);\r",
																	"            });\r",
																	"            pm.test(\"Response status is COMMITTED\", function () {\r",
																	"                pm.expect(jsonData.transferState).to.eql('COMMITTED');\r",
																	"            });\r",
																	"          } else {\r",
																	"              pm.test(\"Transfer FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on payer side');\r",
																	"              });\r",
																	"              postman.setNextRequest(null)\r",
																	"          }\r",
																	"   });\r",
																	"}, 1500)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TESTFSP1_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "testfsp1",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "payeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Quote 3 (payerfspto testfsp1)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"var navigator = {}; \r",
																	"var window = {}; \r",
																	"eval(pm.environment.get('jrsassign'));\r",
																	"\r",
																	"\r",
																	"var uuid = require('uuid');\r",
																	"var generatedUUID = uuid.v4();\r",
																	"pm.environment.set('quoteId', generatedUUID);\r",
																	"generatedUUID = uuid.v4();\r",
																	"pm.environment.set('transactionId', generatedUUID);\r",
																	"\r",
																	"pm.variables.set('quoteDate', (new Date()).toUTCString());\r",
																	"pm.variables.set('payerName', 'PayerFirst PayerLast');\r",
																	"pm.variables.set('payerMSISDN', '918381008987');\r",
																	"\r",
																	"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');\r",
																	"pm.variables.set('expectedPayeeLastName', 'GoldenLast');\r",
																	"pm.variables.set('expectedPayeeDOB', '2010-10-10');\r",
																	"\r",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"testfsp1\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};\r",
																	"var sHeader = JSON.stringify(oHeader);\r",
																	"console.log(`sHeader: ${sHeader}`)\r",
																	"\r",
																	"var objPayload = {\r",
																	"  \"quoteId\": pm.environment.get('quoteId'),\r",
																	"  \"transactionId\": pm.environment.get('transactionId'),\r",
																	"  \"payer\": {\r",
																	"    \"partyIdInfo\": {\r",
																	"      \"partyIdType\": \"MSISDN\",\r",
																	"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),\r",
																	"      \"fspId\": \"payerfsp\"\r",
																	"    },\r",
																	"    \"personalInfo\": {\r",
																	"      \"complexName\": {\r",
																	"        \"firstName\": \"Mats\",\r",
																	"        \"lastName\": \"Hagman\"\r",
																	"      },\r",
																	"      \"dateOfBirth\": \"1983-10-25\"\r",
																	"    }\r",
																	"  },\r",
																	"  \"payee\": {\r",
																	"    \"partyIdInfo\": {\r",
																	"      \"partyIdType\": \"MSISDN\",\r",
																	"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),\r",
																	"      \"fspId\": \"testfsp1\"\r",
																	"    }\r",
																	"  },\r",
																	"  \"amountType\": \"RECEIVE\",\r",
																	"  \"amount\": {\r",
																	"    \"amount\": \"35\",\r",
																	"    \"currency\": pm.environment.get('currency')\r",
																	"  },\r",
																	"  \"transactionType\": {\r",
																	"    \"scenario\": \"TRANSFER\",\r",
																	"    \"initiator\": \"PAYER\",\r",
																	"    \"initiatorType\": \"CONSUMER\"\r",
																	"  },\r",
																	"  \"note\": \"hej\"\r",
																	"}\r",
																	"\r",
																	"var sPayload = JSON.stringify(objPayload)\r",
																	"console.log(`sPayload: ${sPayload}`)\r",
																	"pm.variables.set(\"quoteRequest\", sPayload);\r",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));\r",
																	"console.log(`token: ${token}`)\r",
																	"\r",
																	"// var encodedHeaders = btoa(sHeader)\r",
																	"\r",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
																	"// var token = JSON.stringify(ofspiopSignature)\r",
																	"\r",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
																	"\r",
																	"const signatureObject = {\r",
																	"    signature: signature.replace('\"', ''),\r",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
																	"};\r",
																	"\r",
																	"console.log(JSON.stringify(signatureObject))\r",
																	"\r",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"              \r",
																	"              //Check the Headers\r",
																	"              var headers = response.json().headers;\r",
																	"              \r",
																	"                pm.test(\"testfsp1 fspiop-source is payerfsp\", function () {\r",
																	"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp1 fspiop-destination is testfsp1\", function () {\r",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('testfsp1');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp1 fspiop-signature is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp1 accept is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp1 content-typeis same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp1 fspiop-uri is /quotes\", function () {\r",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp1 fspiop-http-method is POST\", function () {\r",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
																	"                });\r",
																	"                \r",
																	"          } else {\r",
																	"              pm.test(\"Quote FAILED\", function () {\r",
																	"                throw new Error('Did not receive request on payee side');\r",
																	"              });\r",
																	"              postman.setNextRequest(null)\r",
																	"          }\r",
																	"   });\r",
																	"}, 1100)\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {\r",
																	"      if(response.responseSize !== 0) {\r",
																	"          //Checking headers\r",
																	"            var headers = response.json().headers;\r",
																	"            pm.test(\"payerfsp fspiop-source is testfsp1\", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('testfsp1');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payerfsp accept is empty\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql(undefined);\r",
																	"            });\r",
																	"            \r",
																	"            \r",
																	"            \r",
																	"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])\r",
																	"            // var strData = JSON.stringify(response.json().data)\r",
																	"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`\r",
																	"            // console.log(`token: ${token}`)\r",
																	"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldentestfsp1JWSPubKey'), {alg: ['RS256']})\r",
																	"            // console.log(`isValid: ${isValid}`)\r",
																	"            // pm.test(\"Check if the response is JWS valid\", function () {\r",
																	"            //     pm.expect(isValid).to.eql(true);\r",
																	"            // });\r",
																	"            \r",
																	"            //Validate protected header inside Signature\r",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))\r",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)\r",
																	"            \r",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
																	"            });\r",
																	"            \r",
																	"\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldentestfsp1\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('testfsp1');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);\r",
																	"            });\r",
																	"           \r",
																	"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
																	"            });\r",
																	"            \r",
																	"            var jsonData = response.json().data;\r",
																	"            \r",
																	"            pm.test(\"Response quoteId is  null\", function () {\r",
																	"                pm.expect(jsonData.quoteId).to.eql(undefined);\r",
																	"                \r",
																	"            });\r",
																	"          \r",
																	"            pm.test(\"Response ilpPacket is not null\", function () {\r",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);\r",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);\r",
																	"            });\r",
																	"       \r",
																	"           pm.test(\"Response condition is not null\", function () {\r",
																	"               pm.expect(jsonData.condition).not.equal(undefined);\r",
																	"               pm.environment.set(\"condition\", jsonData.condition);\r",
																	"           });\r",
																	"      } else {\r",
																	"          pm.test(\"Quote FAILED\", function () {\r",
																	"            throw new Error('Did not receive response on Payer side');\r",
																	"           });\r",
																	"           postman.setNextRequest(null);\r",
																	"      }\r",
																	"       \r",
																	"   });\r",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "testfsp1",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/quotes",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{quoteRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Transfer 3 (payerfsp to testfsp1)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
																"exec": [
																	"var navigator = {}; //fake a navigator object for the lib\r",
																	"var window = {}; //fake a window object for the lib\r",
																	"eval(pm.environment.get('jrsassign'));\r",
																	"\r",
																	"var uuid = require('uuid');\r",
																	"var generatedUUID = uuid.v4();\r",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
																	"\r",
																	"\r",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
																	"\r",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
																	"\r",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"testfsp1\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};\r",
																	"var sHeader = JSON.stringify(oHeader);\r",
																	"console.log(`sHeader: ${sHeader}`)\r",
																	"\r",
																	"var objPayload = {\r",
																	"  \"transferId\": pm.environment.get('transfer_ID'),\r",
																	"  \"payerFsp\": \"payerfsp\",\r",
																	"  \"payeeFsp\": \"testfsp1\",\r",
																	"  \"amount\": {\r",
																	"    \"amount\": \"35\",\r",
																	"    \"currency\": pm.environment.get('currency')\r",
																	"  },\r",
																	"  \"expiration\": pm.environment.get('transferExpiration'),\r",
																	"  \"ilpPacket\": pm.environment.get('ilpPacket'),\r",
																	"  \"condition\": pm.environment.get('condition')\r",
																	"}\r",
																	"var sPayload = JSON.stringify(objPayload)\r",
																	"console.log(`sPayload: ${sPayload}`)\r",
																	"pm.variables.set(\"transferRequest\", sPayload);\r",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));\r",
																	"//console.log(`token: ${token}`)\r",
																	"\r",
																	"// var encodedHeaders = btoa(sHeader)\r",
																	"\r",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
																	"// var token = JSON.stringify(ofspiopSignature)\r",
																	"\r",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
																	"\r",
																	"const signatureObject = {\r",
																	"    signature: signature.replace('\"', ''),\r",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
																	"};\r",
																	"\r",
																	"console.log(JSON.stringify(signatureObject))\r",
																	"\r",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});\r",
																	"\r",
																	"// //Check the request that Switch forwards to testfsp1\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_INBOUND_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"              \r",
																	"              //Check the Headers\r",
																	"              var headers = response.json().headers;\r",
																	"              \r",
																	"                pm.test(\"testfsp1 fspiop-source is goldenpayerfsp\", function () {\r",
																	"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp1 fspiop-destination is goldentestfsp1\", function () {\r",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('testfsp1');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp1 content-typeis same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp1 accept is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp1 fspiop-signature is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp1 fspiop-http-method is POST\", function () {\r",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp1 fspiop-uri is /transfers\", function () {\r",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');\r",
																	"                });\r",
																	"                \r",
																	"                \r",
																	"                //Check the data\r",
																	"                var jsonData = response.json().data;\r",
																	"                pm.test(\"testfsp1 data should have the same transferId as request\", function () {\r",
																	"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));\r",
																	"                });\r",
																	"                pm.test(\"testfsp1 data should have the same payerfspId as request\", function () {\r",
																	"                  pm.expect(jsonData.payerFsp).to.eql('payerfsp');\r",
																	"                });\r",
																	"                pm.test(\"testfsp1 data should have the same testfsp1Id as request\", function () {\r",
																	"                  pm.expect('testfsp1');\r",
																	"                });\r",
																	"                pm.test(\"testfsp1 data should have the same amount as request\", function () {\r",
																	"                  pm.expect(jsonData.amount.amount).to.eql('35');\r",
																	"                });\r",
																	"                pm.test(\"testfsp1 data should have the same currency as request\", function () {\r",
																	"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));\r",
																	"                });\r",
																	"                pm.test(\"testfsp1 data should have the same expiration as request\", function () {\r",
																	"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));\r",
																	"                });\r",
																	"                pm.test(\"testfsp1 data should have the same ilpPacket as request\", function () {\r",
																	"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));\r",
																	"                });\r",
																	"                pm.test(\"testfsp1 data should have the same condition as request\", function () {\r",
																	"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));\r",
																	"                });\r",
																	"                \r",
																	"          } else {\r",
																	"              pm.test(\"Transfer FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on payee side');\r",
																	"              });\r",
																	"              postman.setNextRequest(null)\r",
																	"          }\r",
																	"  });\r",
																	"}, 1100)\r",
																	"\r",
																	"//Check the callback response that Switch forwards to payerfsp\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"            //Checking headers\r",
																	"            var headers = response.json().headers;\r",
																	"            pm.test(\"payerfsp fspiop-source is goldentestfsp1 \", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('testfsp1');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payerfsp accept is empty\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql(undefined);\r",
																	"            });\r",
																	"            \r",
																	"            \r",
																	"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
																	"            });\r",
																	"            \r",
																	"            var jsonData = response.json().data;\r",
																	"            pm.test(\"Response data does not have transferId\", function () {\r",
																	"               pm.expect(jsonData.transferId).to.eql(undefined);\r",
																	"            });\r",
																	"            pm.test(\"Response status is COMMITTED\", function () {\r",
																	"                pm.expect(jsonData.transferState).to.eql('COMMITTED');\r",
																	"            });\r",
																	"          } else {\r",
																	"              pm.test(\"Transfer FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on payer side');\r",
																	"              });\r",
																	"              postman.setNextRequest(null)\r",
																	"          }\r",
																	"   });\r",
																	"}, 1500)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "testfsp1",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Quote 4 (testfsp2 to payerfsp)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"var navigator = {}; ",
																	"var window = {}; ",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('quoteId', generatedUUID);",
																	"generatedUUID = uuid.v4();",
																	"pm.environment.set('transactionId', generatedUUID);",
																	"",
																	"pm.variables.set('quoteDate', (new Date()).toUTCString());",
																	"pm.variables.set('payerName', 'PayerFirst PayerLast');",
																	"pm.variables.set('payerMSISDN', '918381008987');",
																	"",
																	"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
																	"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
																	"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp2\",\"FSPIOP-Destination\":\"payerfsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"  \"quoteId\": pm.environment.get('quoteId'),",
																	"  \"transactionId\": pm.environment.get('transactionId'),",
																	"  \"payer\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
																	"      \"fspId\": \"testfsp2\"",
																	"    },",
																	"    \"personalInfo\": {",
																	"      \"complexName\": {",
																	"        \"firstName\": \"Mats\",",
																	"        \"lastName\": \"Hagman\"",
																	"      },",
																	"      \"dateOfBirth\": \"1983-10-25\"",
																	"    }",
																	"  },",
																	"  \"payee\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
																	"      \"fspId\": \"payerfsp\"",
																	"    }",
																	"  },",
																	"  \"amountType\": \"RECEIVE\",",
																	"  \"amount\": {",
																	"    \"amount\": \"20\",",
																	"    \"currency\": pm.environment.get('currency')",
																	"  },",
																	"  \"transactionType\": {",
																	"    \"scenario\": \"TRANSFER\",",
																	"    \"initiator\": \"PAYER\",",
																	"    \"initiatorType\": \"CONSUMER\"",
																	"  },",
																	"  \"note\": \"hej\"",
																	"}",
																	"",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"quoteRequest\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp2JWSKey'));",
																	"console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"              \r",
																	"              //Check the Headers\r",
																	"              var headers = response.json().headers;\r",
																	"              \r",
																	"                pm.test(\"payerfsp fspiop-source is testfsp2\", function () {\r",
																	"                    pm.expect(headers['fspiop-source']).to.eql('testfsp2');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {\r",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-signature is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp accept is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp content-typeis same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-uri is /quotes\", function () {\r",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-http-method is POST\", function () {\r",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
																	"                });\r",
																	"                \r",
																	"          } else {\r",
																	"              pm.test(\"Quote FAILED\", function () {\r",
																	"                throw new Error('Did not receive request on payee side');\r",
																	"              });\r",
																	"              postman.setNextRequest(null)\r",
																	"          }\r",
																	"   });\r",
																	"}, 1100)\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"TESTFSP2_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {\r",
																	"      if(response.responseSize !== 0) {\r",
																	"          //Checking headers\r",
																	"            var headers = response.json().headers;\r",
																	"            pm.test(\"testfsp2 fspiop-source is payerfsp\", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('payerfsp');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp2 fspiop-destination is testfsp2\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('testfsp2');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp2 content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp2 accept is empty\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql(undefined);\r",
																	"            });\r",
																	"            \r",
																	"            \r",
																	"            \r",
																	"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])\r",
																	"            // var strData = JSON.stringify(response.json().data)\r",
																	"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`\r",
																	"            // console.log(`token: ${token}`)\r",
																	"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayerfspJWSPubKey'), {alg: ['RS256']})\r",
																	"            // console.log(`isValid: ${isValid}`)\r",
																	"            // pm.test(\"Check if the response is JWS valid\", function () {\r",
																	"            //     pm.expect(isValid).to.eql(true);\r",
																	"            // });\r",
																	"            \r",
																	"            //Validate protected header inside Signature\r",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))\r",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)\r",
																	"            \r",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
																	"            });\r",
																	"            \r",
																	"\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayerfsp\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payerfsp');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be testfsp2\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('testfsp2');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);\r",
																	"            });\r",
																	"           \r",
																	"            pm.test(\"testfsp2 FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp2 fspiop-http-method is PUT\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
																	"            });\r",
																	"            \r",
																	"            var jsonData = response.json().data;\r",
																	"            \r",
																	"            pm.test(\"Response quoteId is  null\", function () {\r",
																	"                pm.expect(jsonData.quoteId).to.eql(undefined);\r",
																	"                \r",
																	"            });\r",
																	"          \r",
																	"            pm.test(\"Response ilpPacket is not null\", function () {\r",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);\r",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);\r",
																	"            });\r",
																	"       \r",
																	"           pm.test(\"Response condition is not null\", function () {\r",
																	"               pm.expect(jsonData.condition).not.equal(undefined);\r",
																	"               pm.environment.set(\"condition\", jsonData.condition);\r",
																	"           });\r",
																	"      } else {\r",
																	"          pm.test(\"Quote FAILED\", function () {\r",
																	"            throw new Error('Did not receive response on Payer side');\r",
																	"           });\r",
																	"           postman.setNextRequest(null);\r",
																	"      }\r",
																	"       \r",
																	"   });\r",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TESTFSP2_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "testfsp2",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "payerfsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/quotes",
																"type": "text"
															},
															{
																"key": "x-forwarded-for",
																"value": "34.245.65.70",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{quoteRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Transfer 4 (testfsp2 to payerfsp)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
																"exec": [
																	"var navigator = {}; //fake a navigator object for the lib\r",
																	"var window = {}; //fake a window object for the lib\r",
																	"eval(pm.environment.get('jrsassign'));\r",
																	"\r",
																	"var uuid = require('uuid');\r",
																	"var generatedUUID = uuid.v4();\r",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
																	"\r",
																	"\r",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
																	"\r",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
																	"\r",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp2\",\"FSPIOP-Destination\":\"payerfsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};\r",
																	"var sHeader = JSON.stringify(oHeader);\r",
																	"console.log(`sHeader: ${sHeader}`)\r",
																	"\r",
																	"var objPayload = {\r",
																	"  \"transferId\": pm.environment.get('transfer_ID'),\r",
																	"  \"payerFsp\": \"testfsp2\",\r",
																	"  \"payeeFsp\": \"payerfsp\",\r",
																	"  \"amount\": {\r",
																	"    \"amount\": \"20\",\r",
																	"    \"currency\": pm.environment.get('currency')\r",
																	"  },\r",
																	"  \"expiration\": pm.environment.get('transferExpiration'),\r",
																	"  \"ilpPacket\": pm.environment.get('ilpPacket'),\r",
																	"  \"condition\": pm.environment.get('condition')\r",
																	"}\r",
																	"var sPayload = JSON.stringify(objPayload)\r",
																	"console.log(`sPayload: ${sPayload}`)\r",
																	"pm.variables.set(\"transferRequest\", sPayload);\r",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp2JWSKey'));\r",
																	"//console.log(`token: ${token}`)\r",
																	"\r",
																	"// var encodedHeaders = btoa(sHeader)\r",
																	"\r",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
																	"// var token = JSON.stringify(ofspiopSignature)\r",
																	"\r",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
																	"\r",
																	"const signatureObject = {\r",
																	"    signature: signature.replace('\"', ''),\r",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
																	"};\r",
																	"\r",
																	"console.log(JSON.stringify(signatureObject))\r",
																	"\r",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});\r",
																	"\r",
																	"// //Check the request that Switch forwards to payerfsp\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"              \r",
																	"              //Check the Headers\r",
																	"              var headers = response.json().headers;\r",
																	"              \r",
																	"                pm.test(\"payerfsp fspiop-source is goldentestfsp2\", function () {\r",
																	"                    pm.expect(headers['fspiop-source']).to.eql('testfsp2');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {\r",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp content-typeis same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp accept is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-signature is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-http-method is POST\", function () {\r",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-uri is /transfers\", function () {\r",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');\r",
																	"                });\r",
																	"                \r",
																	"                \r",
																	"                //Check the data\r",
																	"                var jsonData = response.json().data;\r",
																	"                pm.test(\"payerfsp data should have the same transferId as request\", function () {\r",
																	"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));\r",
																	"                });\r",
																	"                pm.test(\"payerfsp data should have the same amount as request\", function () {\r",
																	"                  pm.expect(jsonData.amount.amount).to.eql('20');\r",
																	"                });\r",
																	"                pm.test(\"payerfsp data should have the same currency as request\", function () {\r",
																	"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));\r",
																	"                });\r",
																	"                pm.test(\"payerfsp data should have the same expiration as request\", function () {\r",
																	"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));\r",
																	"                });\r",
																	"                pm.test(\"payerfsp data should have the same ilpPacket as request\", function () {\r",
																	"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));\r",
																	"                });\r",
																	"                pm.test(\"payerfsp data should have the same condition as request\", function () {\r",
																	"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));\r",
																	"                });\r",
																	"                \r",
																	"          } else {\r",
																	"              pm.test(\"Transfer FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on payee side');\r",
																	"              });\r",
																	"              postman.setNextRequest(null)\r",
																	"          }\r",
																	"  });\r",
																	"}, 1100)\r",
																	"\r",
																	"//Check the callback response that Switch forwards to testfsp2\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"TESTFSP2_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"            //Checking headers\r",
																	"            var headers = response.json().headers;\r",
																	"            pm.test(\"testfsp2 fspiop-source is goldenpayerfsp \", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('payerfsp');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp2 fspiop-destination is goldentestfsp2\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('testfsp2');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp2 content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp2 accept is empty\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql(undefined);\r",
																	"            });\r",
																	"            \r",
																	"            \r",
																	"            pm.test(\"testfsp2 fspiop-uri includes /transfers/{{transfer_ID}}\", function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp2 fspiop-http-method is PUT\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
																	"            });\r",
																	"            \r",
																	"            var jsonData = response.json().data;\r",
																	"            pm.test(\"Response data does not have transferId\", function () {\r",
																	"               pm.expect(jsonData.transferId).to.eql(undefined);\r",
																	"            });\r",
																	"            pm.test(\"Response status is COMMITTED\", function () {\r",
																	"                pm.expect(jsonData.transferState).to.eql('COMMITTED');\r",
																	"            });\r",
																	"          } else {\r",
																	"              pm.test(\"Transfer FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on payer side');\r",
																	"              });\r",
																	"              postman.setNextRequest(null)\r",
																	"          }\r",
																	"   });\r",
																	"}, 1500)\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TESTFSP2_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "testfsp2",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "payerfsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Quote 5 (payeefsp to testfsp2)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"var navigator = {}; \r",
																	"var window = {}; \r",
																	"eval(pm.environment.get('jrsassign'));\r",
																	"\r",
																	"\r",
																	"var uuid = require('uuid');\r",
																	"var generatedUUID = uuid.v4();\r",
																	"pm.environment.set('quoteId', generatedUUID);\r",
																	"generatedUUID = uuid.v4();\r",
																	"pm.environment.set('transactionId', generatedUUID);\r",
																	"\r",
																	"pm.variables.set('quoteDate', (new Date()).toUTCString());\r",
																	"pm.variables.set('payerName', 'PayerFirst PayerLast');\r",
																	"pm.variables.set('payerMSISDN', '918381008987');\r",
																	"\r",
																	"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');\r",
																	"pm.variables.set('expectedPayeeLastName', 'GoldenLast');\r",
																	"pm.variables.set('expectedPayeeDOB', '2010-10-10');\r",
																	"\r",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payeefsp\",\"FSPIOP-Destination\":\"testfsp2\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};\r",
																	"var sHeader = JSON.stringify(oHeader);\r",
																	"console.log(`sHeader: ${sHeader}`)\r",
																	"\r",
																	"var objPayload = {\r",
																	"  \"quoteId\": pm.environment.get('quoteId'),\r",
																	"  \"transactionId\": pm.environment.get('transactionId'),\r",
																	"  \"payer\": {\r",
																	"    \"partyIdInfo\": {\r",
																	"      \"partyIdType\": \"MSISDN\",\r",
																	"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),\r",
																	"      \"fspId\": \"payeefsp\"\r",
																	"    },\r",
																	"    \"personalInfo\": {\r",
																	"      \"complexName\": {\r",
																	"        \"firstName\": \"Mats\",\r",
																	"        \"lastName\": \"Hagman\"\r",
																	"      },\r",
																	"      \"dateOfBirth\": \"1983-10-25\"\r",
																	"    }\r",
																	"  },\r",
																	"  \"payee\": {\r",
																	"    \"partyIdInfo\": {\r",
																	"      \"partyIdType\": \"MSISDN\",\r",
																	"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),\r",
																	"      \"fspId\": \"testfsp2\"\r",
																	"    }\r",
																	"  },\r",
																	"  \"amountType\": \"RECEIVE\",\r",
																	"  \"amount\": {\r",
																	"    \"amount\": \"35\",\r",
																	"    \"currency\": pm.environment.get('currency')\r",
																	"  },\r",
																	"  \"transactionType\": {\r",
																	"    \"scenario\": \"TRANSFER\",\r",
																	"    \"initiator\": \"PAYER\",\r",
																	"    \"initiatorType\": \"CONSUMER\"\r",
																	"  },\r",
																	"  \"note\": \"hej\"\r",
																	"}\r",
																	"\r",
																	"var sPayload = JSON.stringify(objPayload)\r",
																	"console.log(`sPayload: ${sPayload}`)\r",
																	"pm.variables.set(\"quoteRequest\", sPayload);\r",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payeefspJWSKey'));\r",
																	"console.log(`token: ${token}`)\r",
																	"\r",
																	"// var encodedHeaders = btoa(sHeader)\r",
																	"\r",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
																	"// var token = JSON.stringify(ofspiopSignature)\r",
																	"\r",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
																	"\r",
																	"const signatureObject = {\r",
																	"    signature: signature.replace('\"', ''),\r",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
																	"};\r",
																	"\r",
																	"console.log(JSON.stringify(signatureObject))\r",
																	"\r",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"TESTFSP2_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"              \r",
																	"              //Check the Headers\r",
																	"              var headers = response.json().headers;\r",
																	"              \r",
																	"                pm.test(\"testfsp2 fspiop-source is payeefsp\", function () {\r",
																	"                    pm.expect(headers['fspiop-source']).to.eql('payeefsp');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-destination is testfsp2\", function () {\r",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('testfsp2');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-signature is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 accept is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 content-typeis same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-uri is /quotes\", function () {\r",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-http-method is POST\", function () {\r",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
																	"                });\r",
																	"                \r",
																	"          } else {\r",
																	"              pm.test(\"Quote FAILED\", function () {\r",
																	"                throw new Error('Did not receive request on payee side');\r",
																	"              });\r",
																	"              postman.setNextRequest(null)\r",
																	"          }\r",
																	"   });\r",
																	"}, 1100)\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {\r",
																	"      if(response.responseSize !== 0) {\r",
																	"          //Checking headers\r",
																	"            var headers = response.json().headers;\r",
																	"            pm.test(\"payeefsp fspiop-source is testfsp2\", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('testfsp2');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp accept is empty\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql(undefined);\r",
																	"            });\r",
																	"            \r",
																	"            \r",
																	"            \r",
																	"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])\r",
																	"            // var strData = JSON.stringify(response.json().data)\r",
																	"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`\r",
																	"            // console.log(`token: ${token}`)\r",
																	"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldentestfsp2JWSPubKey'), {alg: ['RS256']})\r",
																	"            // console.log(`isValid: ${isValid}`)\r",
																	"            // pm.test(\"Check if the response is JWS valid\", function () {\r",
																	"            //     pm.expect(isValid).to.eql(true);\r",
																	"            // });\r",
																	"            \r",
																	"            //Validate protected header inside Signature\r",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))\r",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)\r",
																	"            \r",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
																	"            });\r",
																	"            \r",
																	"\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldentestfsp2\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('testfsp2');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payeefsp\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payeefsp');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);\r",
																	"            });\r",
																	"           \r",
																	"            pm.test(\"payeefsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp fspiop-http-method is PUT\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
																	"            });\r",
																	"            \r",
																	"            var jsonData = response.json().data;\r",
																	"            \r",
																	"            pm.test(\"Response quoteId is  null\", function () {\r",
																	"                pm.expect(jsonData.quoteId).to.eql(undefined);\r",
																	"                \r",
																	"            });\r",
																	"          \r",
																	"            pm.test(\"Response ilpPacket is not null\", function () {\r",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);\r",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);\r",
																	"            });\r",
																	"       \r",
																	"           pm.test(\"Response condition is not null\", function () {\r",
																	"               pm.expect(jsonData.condition).not.equal(undefined);\r",
																	"               pm.environment.set(\"condition\", jsonData.condition);\r",
																	"           });\r",
																	"      } else {\r",
																	"          pm.test(\"Quote FAILED\", function () {\r",
																	"            throw new Error('Did not receive response on Payer side');\r",
																	"           });\r",
																	"           postman.setNextRequest(null);\r",
																	"      }\r",
																	"       \r",
																	"   });\r",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "testfsp2",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/quotes",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{quoteRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Transfer 5 (payeefsp to testfsp2)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
																"exec": [
																	"var navigator = {}; //fake a navigator object for the lib\r",
																	"var window = {}; //fake a window object for the lib\r",
																	"eval(pm.environment.get('jrsassign'));\r",
																	"\r",
																	"var uuid = require('uuid');\r",
																	"var generatedUUID = uuid.v4();\r",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
																	"\r",
																	"\r",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
																	"\r",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
																	"\r",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payeefsp\",\"FSPIOP-Destination\":\"testfsp2\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};\r",
																	"var sHeader = JSON.stringify(oHeader);\r",
																	"console.log(`sHeader: ${sHeader}`)\r",
																	"\r",
																	"var objPayload = {\r",
																	"  \"transferId\": pm.environment.get('transfer_ID'),\r",
																	"  \"payerFsp\": \"payeefsp\",\r",
																	"  \"payeeFsp\": \"testfsp2\",\r",
																	"  \"amount\": {\r",
																	"    \"amount\": \"35\",\r",
																	"    \"currency\": pm.environment.get('currency')\r",
																	"  },\r",
																	"  \"expiration\": pm.environment.get('transferExpiration'),\r",
																	"  \"ilpPacket\": pm.environment.get('ilpPacket'),\r",
																	"  \"condition\": pm.environment.get('condition')\r",
																	"}\r",
																	"var sPayload = JSON.stringify(objPayload)\r",
																	"console.log(`sPayload: ${sPayload}`)\r",
																	"pm.variables.set(\"transferRequest\", sPayload);\r",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payeefspJWSKey'));\r",
																	"//console.log(`token: ${token}`)\r",
																	"\r",
																	"// var encodedHeaders = btoa(sHeader)\r",
																	"\r",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
																	"// var token = JSON.stringify(ofspiopSignature)\r",
																	"\r",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
																	"\r",
																	"const signatureObject = {\r",
																	"    signature: signature.replace('\"', ''),\r",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
																	"};\r",
																	"\r",
																	"console.log(JSON.stringify(signatureObject))\r",
																	"\r",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});\r",
																	"\r",
																	"// //Check the request that Switch forwards to testfsp2\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"TESTFSP2_SDK_INBOUND_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"              \r",
																	"              //Check the Headers\r",
																	"              var headers = response.json().headers;\r",
																	"              \r",
																	"                pm.test(\"testfsp2 fspiop-source is goldenpayeefsp\", function () {\r",
																	"                    pm.expect(headers['fspiop-source']).to.eql('payeefsp');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-destination is goldentestfsp2\", function () {\r",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('testfsp2');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 content-typeis same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 accept is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-signature is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-http-method is POST\", function () {\r",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-uri is /transfers\", function () {\r",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');\r",
																	"                });\r",
																	"                \r",
																	"                \r",
																	"                //Check the data\r",
																	"                var jsonData = response.json().data;\r",
																	"                pm.test(\"testfsp2 data should have the same transferId as request\", function () {\r",
																	"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));\r",
																	"                });\r",
																	"                pm.test(\"testfsp2 data should have the same amount as request\", function () {\r",
																	"                  pm.expect(jsonData.amount.amount).to.eql('35');\r",
																	"                });\r",
																	"                pm.test(\"testfsp2 data should have the same currency as request\", function () {\r",
																	"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));\r",
																	"                });\r",
																	"                pm.test(\"testfsp2 data should have the same expiration as request\", function () {\r",
																	"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));\r",
																	"                });\r",
																	"                pm.test(\"testfsp2 data should have the same ilpPacket as request\", function () {\r",
																	"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));\r",
																	"                });\r",
																	"                pm.test(\"testfsp2 data should have the same condition as request\", function () {\r",
																	"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));\r",
																	"                });\r",
																	"                \r",
																	"          } else {\r",
																	"              pm.test(\"Transfer FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on payee side');\r",
																	"              });\r",
																	"              postman.setNextRequest(null)\r",
																	"          }\r",
																	"  });\r",
																	"}, 1100)\r",
																	"\r",
																	"//Check the callback response that Switch forwards to payeefsp\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"            //Checking headers\r",
																	"            var headers = response.json().headers;\r",
																	"            pm.test(\"payeefsp fspiop-source is goldentestfsp2 \", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('testfsp2');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp fspiop-destination is goldenpayeefsp\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp accept is empty\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql(undefined);\r",
																	"            });\r",
																	"            \r",
																	"            \r",
																	"            pm.test(\"payeefsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp fspiop-http-method is PUT\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
																	"            });\r",
																	"            \r",
																	"            var jsonData = response.json().data;\r",
																	"            pm.test(\"Response data does not have transferId\", function () {\r",
																	"               pm.expect(jsonData.transferId).to.eql(undefined);\r",
																	"            });\r",
																	"            pm.test(\"Response status is COMMITTED\", function () {\r",
																	"                pm.expect(jsonData.transferState).to.eql('COMMITTED');\r",
																	"            });\r",
																	"          } else {\r",
																	"              pm.test(\"Transfer FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on payer side');\r",
																	"              });\r",
																	"              postman.setNextRequest(null)\r",
																	"          }\r",
																	"   });\r",
																	"}, 1500)\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "testfsp2",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Quote 6 (payeefsp to payerfsp)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"var navigator = {}; \r",
																	"var window = {}; \r",
																	"eval(pm.environment.get('jrsassign'));\r",
																	"\r",
																	"\r",
																	"var uuid = require('uuid');\r",
																	"var generatedUUID = uuid.v4();\r",
																	"pm.environment.set('quoteId', generatedUUID);\r",
																	"generatedUUID = uuid.v4();\r",
																	"pm.environment.set('transactionId', generatedUUID);\r",
																	"\r",
																	"pm.variables.set('quoteDate', (new Date()).toUTCString());\r",
																	"pm.variables.set('payerName', 'PayerFirst PayerLast');\r",
																	"pm.variables.set('payerMSISDN', '918381008987');\r",
																	"\r",
																	"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');\r",
																	"pm.variables.set('expectedPayeeLastName', 'GoldenLast');\r",
																	"pm.variables.set('expectedPayeeDOB', '2010-10-10');\r",
																	"\r",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payeefsp\",\"FSPIOP-Destination\":\"payerfsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};\r",
																	"var sHeader = JSON.stringify(oHeader);\r",
																	"console.log(`sHeader: ${sHeader}`)\r",
																	"\r",
																	"var objPayload = {\r",
																	"  \"quoteId\": pm.environment.get('quoteId'),\r",
																	"  \"transactionId\": pm.environment.get('transactionId'),\r",
																	"  \"payer\": {\r",
																	"    \"partyIdInfo\": {\r",
																	"      \"partyIdType\": \"MSISDN\",\r",
																	"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),\r",
																	"      \"fspId\": \"payeefsp\"\r",
																	"    },\r",
																	"    \"personalInfo\": {\r",
																	"      \"complexName\": {\r",
																	"        \"firstName\": \"Mats\",\r",
																	"        \"lastName\": \"Hagman\"\r",
																	"      },\r",
																	"      \"dateOfBirth\": \"1983-10-25\"\r",
																	"    }\r",
																	"  },\r",
																	"  \"payee\": {\r",
																	"    \"partyIdInfo\": {\r",
																	"      \"partyIdType\": \"MSISDN\",\r",
																	"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),\r",
																	"      \"fspId\": \"payerfsp\"\r",
																	"    }\r",
																	"  },\r",
																	"  \"amountType\": \"RECEIVE\",\r",
																	"  \"amount\": {\r",
																	"    \"amount\": \"25\",\r",
																	"    \"currency\": pm.environment.get('currency')\r",
																	"  },\r",
																	"  \"transactionType\": {\r",
																	"    \"scenario\": \"TRANSFER\",\r",
																	"    \"initiator\": \"PAYER\",\r",
																	"    \"initiatorType\": \"CONSUMER\"\r",
																	"  },\r",
																	"  \"note\": \"hej\"\r",
																	"}\r",
																	"\r",
																	"var sPayload = JSON.stringify(objPayload)\r",
																	"console.log(`sPayload: ${sPayload}`)\r",
																	"pm.variables.set(\"quoteRequest\", sPayload);\r",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payeefspJWSKey'));\r",
																	"console.log(`token: ${token}`)\r",
																	"\r",
																	"// var encodedHeaders = btoa(sHeader)\r",
																	"\r",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
																	"// var token = JSON.stringify(ofspiopSignature)\r",
																	"\r",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
																	"\r",
																	"const signatureObject = {\r",
																	"    signature: signature.replace('\"', ''),\r",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
																	"};\r",
																	"\r",
																	"console.log(JSON.stringify(signatureObject))\r",
																	"\r",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"              \r",
																	"              //Check the Headers\r",
																	"              var headers = response.json().headers;\r",
																	"              \r",
																	"                pm.test(\"payerfsp fspiop-source is payeefsp\", function () {\r",
																	"                    pm.expect(headers['fspiop-source']).to.eql('payeefsp');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {\r",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-signature is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp accept is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp content-typeis same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-uri is /quotes\", function () {\r",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-http-method is POST\", function () {\r",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
																	"                });\r",
																	"                \r",
																	"          } else {\r",
																	"              pm.test(\"Quote FAILED\", function () {\r",
																	"                throw new Error('Did not receive request on payee side');\r",
																	"              });\r",
																	"              postman.setNextRequest(null)\r",
																	"          }\r",
																	"   });\r",
																	"}, 1100)\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {\r",
																	"      if(response.responseSize !== 0) {\r",
																	"          //Checking headers\r",
																	"            var headers = response.json().headers;\r",
																	"            pm.test(\"payeefsp fspiop-source is payerfsp\", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('payerfsp');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp accept is empty\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql(undefined);\r",
																	"            });\r",
																	"            \r",
																	"            \r",
																	"            \r",
																	"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])\r",
																	"            // var strData = JSON.stringify(response.json().data)\r",
																	"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`\r",
																	"            // console.log(`token: ${token}`)\r",
																	"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayerfspJWSPubKey'), {alg: ['RS256']})\r",
																	"            // console.log(`isValid: ${isValid}`)\r",
																	"            // pm.test(\"Check if the response is JWS valid\", function () {\r",
																	"            //     pm.expect(isValid).to.eql(true);\r",
																	"            // });\r",
																	"            \r",
																	"            //Validate protected header inside Signature\r",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))\r",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)\r",
																	"            \r",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
																	"            });\r",
																	"            \r",
																	"\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayerfsp\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payerfsp');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payeefsp\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payeefsp');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);\r",
																	"            });\r",
																	"           \r",
																	"            pm.test(\"payeefsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp fspiop-http-method is PUT\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
																	"            });\r",
																	"            \r",
																	"            var jsonData = response.json().data;\r",
																	"            \r",
																	"            pm.test(\"Response quoteId is  null\", function () {\r",
																	"                pm.expect(jsonData.quoteId).to.eql(undefined);\r",
																	"                \r",
																	"            });\r",
																	"          \r",
																	"            pm.test(\"Response ilpPacket is not null\", function () {\r",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);\r",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);\r",
																	"            });\r",
																	"       \r",
																	"           pm.test(\"Response condition is not null\", function () {\r",
																	"               pm.expect(jsonData.condition).not.equal(undefined);\r",
																	"               pm.environment.set(\"condition\", jsonData.condition);\r",
																	"           });\r",
																	"      } else {\r",
																	"          pm.test(\"Quote FAILED\", function () {\r",
																	"            throw new Error('Did not receive response on Payer side');\r",
																	"           });\r",
																	"           postman.setNextRequest(null);\r",
																	"      }\r",
																	"       \r",
																	"   });\r",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "payeefsp"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "payerfsp"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiopSignature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/quotes"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{quoteRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Transfer 6 (payeefsp to payerfsp)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
																"exec": [
																	"var navigator = {}; //fake a navigator object for the lib\r",
																	"var window = {}; //fake a window object for the lib\r",
																	"eval(pm.environment.get('jrsassign'));\r",
																	"\r",
																	"var uuid = require('uuid');\r",
																	"var generatedUUID = uuid.v4();\r",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
																	"\r",
																	"\r",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
																	"\r",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
																	"\r",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payeefsp\",\"FSPIOP-Destination\":\"payerfsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};\r",
																	"var sHeader = JSON.stringify(oHeader);\r",
																	"console.log(`sHeader: ${sHeader}`)\r",
																	"\r",
																	"var objPayload = {\r",
																	"  \"transferId\": pm.environment.get('transfer_ID'),\r",
																	"  \"payerFsp\": \"payeefsp\",\r",
																	"  \"payeeFsp\": \"payerfsp\",\r",
																	"  \"amount\": {\r",
																	"    \"amount\": \"25\",\r",
																	"    \"currency\": pm.environment.get('currency')\r",
																	"  },\r",
																	"  \"expiration\": pm.environment.get('transferExpiration'),\r",
																	"  \"ilpPacket\": pm.environment.get('ilpPacket'),\r",
																	"  \"condition\": pm.environment.get('condition')\r",
																	"}\r",
																	"var sPayload = JSON.stringify(objPayload)\r",
																	"console.log(`sPayload: ${sPayload}`)\r",
																	"pm.variables.set(\"transferRequest\", sPayload);\r",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payeefspJWSKey'));\r",
																	"//console.log(`token: ${token}`)\r",
																	"\r",
																	"// var encodedHeaders = btoa(sHeader)\r",
																	"\r",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
																	"// var token = JSON.stringify(ofspiopSignature)\r",
																	"\r",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
																	"\r",
																	"const signatureObject = {\r",
																	"    signature: signature.replace('\"', ''),\r",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
																	"};\r",
																	"\r",
																	"console.log(JSON.stringify(signatureObject))\r",
																	"\r",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});\r",
																	"\r",
																	"// //Check the request that Switch forwards to payerfsp\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"              \r",
																	"              //Check the Headers\r",
																	"              var headers = response.json().headers;\r",
																	"              \r",
																	"                pm.test(\"payerfsp fspiop-source is goldenpayeefsp\", function () {\r",
																	"                    pm.expect(headers['fspiop-source']).to.eql('payeefsp');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {\r",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp content-typeis same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp accept is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-signature is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-http-method is POST\", function () {\r",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-uri is /transfers\", function () {\r",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');\r",
																	"                });\r",
																	"                \r",
																	"                \r",
																	"                //Check the data\r",
																	"                var jsonData = response.json().data;\r",
																	"                pm.test(\"payerfsp data should have the same transferId as request\", function () {\r",
																	"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));\r",
																	"                });\r",
																	"                pm.test(\"payerfsp data should have the same payeefspId as request\", function () {\r",
																	"                  pm.expect(jsonData.payeeFsp).to.eql('payerfsp');\r",
																	"                });\r",
																	"                pm.test(\"payerfsp data should have the same payerfspId as request\", function () {\r",
																	"                  pm.expect(jsonData.payerFsp).to.eql('payeefsp');\r",
																	"                });\r",
																	"                pm.test(\"payerfsp data should have the same amount as request\", function () {\r",
																	"                  pm.expect(jsonData.amount.amount).to.eql('25');\r",
																	"                });\r",
																	"                pm.test(\"payerfsp data should have the same currency as request\", function () {\r",
																	"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));\r",
																	"                });\r",
																	"                pm.test(\"payerfsp data should have the same expiration as request\", function () {\r",
																	"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));\r",
																	"                });\r",
																	"                pm.test(\"payerfsp data should have the same ilpPacket as request\", function () {\r",
																	"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));\r",
																	"                });\r",
																	"                pm.test(\"payerfsp data should have the same condition as request\", function () {\r",
																	"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));\r",
																	"                });\r",
																	"                \r",
																	"          } else {\r",
																	"              pm.test(\"Transfer FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on payee side');\r",
																	"              });\r",
																	"              postman.setNextRequest(null)\r",
																	"          }\r",
																	"  });\r",
																	"}, 1100)\r",
																	"\r",
																	"//Check the callback response that Switch forwards to payeefsp\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"            //Checking headers\r",
																	"            var headers = response.json().headers;\r",
																	"            pm.test(\"payeefsp fspiop-source is goldenpayerfsp \", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('payerfsp');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp fspiop-destination is goldenpayeefsp\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp accept is empty\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql(undefined);\r",
																	"            });\r",
																	"            \r",
																	"            \r",
																	"            pm.test(\"payeefsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp fspiop-http-method is PUT\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
																	"            });\r",
																	"            \r",
																	"            var jsonData = response.json().data;\r",
																	"            pm.test(\"Response data does not have transferId\", function () {\r",
																	"               pm.expect(jsonData.transferId).to.eql(undefined);\r",
																	"            });\r",
																	"            pm.test(\"Response status is COMMITTED\", function () {\r",
																	"                pm.expect(jsonData.transferState).to.eql('COMMITTED');\r",
																	"            });\r",
																	"          } else {\r",
																	"              pm.test(\"Transfer FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on payer side');\r",
																	"              });\r",
																	"              postman.setNextRequest(null)\r",
																	"          }\r",
																	"   });\r",
																	"}, 1500)\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.transfers+json;version=1"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.transfers+json;version=1.0"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{transferDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "payeefsp"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "payerfsp"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiopSignature}}"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/transfers"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Create Settlement",
											"item": [
												{
													"name": "Get Existing Open Window",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "06ca836d-99c7-49c7-844e-fe68090e14a4",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"State should be OPEN\", function () {",
																	"    var jsonData = pm.response.json();",
																	"    pm.expect(jsonData[0].state).to.eql('OPEN');",
																	"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
																	"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
															"host": [
																"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
															],
															"path": [
																"settlementWindows"
															],
															"query": [
																{
																	"key": "state",
																	"value": "OPEN"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Close Existing Window",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "5b16f7ed-2212-419d-a43b-e2b38cf2b718",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"New window State should be OPEN\", function () {",
																	"    console.log(pm.response.json());",
																	"    pm.expect(pm.response.json().state).to.eql('OPEN');",
																	"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
																	"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
																	"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
																	"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
														},
														"url": {
															"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
															"host": [
																"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
															],
															"path": [
																"settlementWindows",
																"{{openWindowID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Settlement for Closed Window",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "2fd9c949-c268-4b8a-b924-724a54c9295d",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.environment.set(\"settlementId\", pm.response.json().id);",
																	"var jsonData = pm.response.json();",
																	"    ",
																	"pm.test(\"Settlement State should be PENDING_SETTLEMENT\", function () {",
																	"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
																	"});",
																	"",
																	"pm.test(\"Number of associated windows should be 1\", function () {",
																	"    pm.expect(jsonData.settlementWindows.length).to.eql(1);",
																	"});",
																	"",
																	"pm.test(\"Associated Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
																	"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
																	"});",
																	"",
																	"pm.test(\"Associated Settlement Window state should be PENDING_SETTLEMENT \", function () {",
																	"    pm.expect(jsonData.settlementWindows[0].state).to.eql('PENDING_SETTLEMENT');",
																	"});",
																	"",
																	"pm.test(\"Associated number of participants should be 4 \", function () {",
																	"    pm.expect(jsonData.participants.length).to.eql(4);",
																	"});",
																	"",
																	"for(var j in jsonData.participants) {",
																	"    for(var k in jsonData.participants[j].accounts) {",
																	"        console.log(jsonData.participants[j].accounts[k].id)",
																	"        if(jsonData.participants[j].accounts[k].id === Number(pm.environment.get(\"payerFspAccountId\"))) {",
																	"            console.log('payerfspNetSettlementAmount:',jsonData.participants[j].accounts[k].netSettlementAmount.amount)",
																	"            pm.environment.set(\"payerfspNetSettlementAmount\",jsonData.participants[j].accounts[k].netSettlementAmount.amount);",
																	"        } else if(jsonData.participants[j].accounts[k].id === Number(pm.environment.get(\"payeeFspAccountId\"))) {",
																	"            console.log('payeefspNetSettlementAmount:',jsonData.participants[j].accounts[k].netSettlementAmount.amount)",
																	"            pm.environment.set(\"payeefspNetSettlementAmount\",jsonData.participants[j].accounts[k].netSettlementAmount.amount);",
																	"        }",
																	"        ",
																	"    }",
																	"}",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"reason\": \"TESTING\",\n  \"settlementWindows\": [\n    {\n      \"id\": {{closedWindowID}}\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
															"host": [
																"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
															],
															"path": [
																"settlements"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Store Settlement&Position Account Balances After Transfers",
											"item": [
												{
													"name": "testfsp1 balances",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "22c316ff-8ffd-4e54-b450-d12deb6e40b0",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"jsonData",
																	"    .filter(account => account.currency === pm.environment.get('currency'))",
																	"    .forEach(curAccount => {",
																	"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
																	"            pm.environment.set(\"testfsp1SettleAccountBalanceAfterTransfer\", curAccount.value);",
																	"        }",
																	"        if(curAccount.ledgerAccountType === \"POSITION\") {",
																	"            pm.environment.set(\"testfsp1PositionAccountBalanceAfterTransfer\", curAccount.value);",
																	"        }",
																	"    })",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
															"host": [
																"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
															],
															"path": [
																"participants",
																"testfsp1",
																"accounts"
															]
														}
													},
													"response": []
												},
												{
													"name": "testfsp2 balances",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"jsonData",
																	"    .filter(account => account.currency === pm.environment.get('currency'))",
																	"    .map(curAccount => {",
																	"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
																	"            pm.environment.set(\"testfsp2SettleAccountBalanceAfterTransfer\", curAccount.value);",
																	"        }",
																	"        if(curAccount.ledgerAccountType === \"POSITION\") {",
																	"            pm.environment.set(\"testfsp2PositionAccountBalanceAfterTransfer\", curAccount.value);",
																	"        }",
																	"    })",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
															"host": [
																"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
															],
															"path": [
																"participants",
																"testfsp2",
																"accounts"
															]
														}
													},
													"response": []
												},
												{
													"name": "payerfsp balances",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"jsonData",
																	"    .filter(account => account.currency === pm.environment.get('currency'))",
																	"    .map(curAccount => {",
																	"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
																	"            pm.environment.set(\"payerfspSettleAccountBalanceAfterTransfer\", curAccount.value);",
																	"        }",
																	"        if(curAccount.ledgerAccountType === \"POSITION\") {",
																	"            pm.environment.set(\"payerfspPositionAccountBalanceAfterTransfer\", curAccount.value);",
																	"        }",
																	"    })",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payerfsp/accounts",
															"host": [
																"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
															],
															"path": [
																"participants",
																"payerfsp",
																"accounts"
															]
														}
													},
													"response": []
												},
												{
													"name": "payeefsp balances",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"jsonData",
																	"    .filter(account => account.currency === pm.environment.get('currency'))",
																	"    .map(curAccount => {",
																	"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
																	"            pm.environment.set(\"payeefspSettleAccountBalanceAfterTransfer\", curAccount.value);",
																	"        }",
																	"        if(curAccount.ledgerAccountType === \"POSITION\") {",
																	"            pm.environment.set(\"payeefspPositionAccountBalanceAfterTransfer\", curAccount.value);",
																	"        }",
																	"    })",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "payerfsp"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payeefsp/accounts",
															"host": [
																"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
															],
															"path": [
																"participants",
																"payeefsp",
																"accounts"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Prepare Settlement",
									"item": [
										{
											"name": "Prepare Settlement",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
														"exec": [
															"",
															"var jsonData = pm.response.json();",
															"jsonData.participants.map(participant => {",
															"    participant.accounts",
															"                    .filter(account => account.netSettlementAmount.currency === pm.environment.get('currency'))",
															"                    .forEach(curAccount => {",
															"                        const participantPutRequest = {",
															"                          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
															"                          method: 'PUT',",
															"                          header: {",
															"                              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
															"                              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
															"                              \"Content-Type\": \"application/json\"",
															"                          },",
															"                          body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(",
															"                                {",
															"                                  \"participants\": [",
															"                                    {",
															"                                      \"id\": participant.id,",
															"                                      \"accounts\": [",
															"                                        {",
															"                                          \"id\": curAccount.id,",
															"                                          \"reason\": \"Transfers recorded for payer\",",
															"                                          \"state\": \"PS_TRANSFERS_RECORDED\"",
															"                                        }",
															"                                      ]",
															"                                    }",
															"                                  ]",
															"                                }",
															"                            )",
															"                          }",
															"                        };",
															"                        pm.sendRequest(participantPutRequest, function (err, response) {",
															"                            console.log(response.json());",
															"                        });",
															"                    })",
															"})",
															"// for(var j in jsonData.participants) {",
															"//     for(var k in jsonData.participants[j].accounts) {",
															"//         console.log(jsonData.participants[j].accounts[k].id)",
															"//         if(jsonData.participants[j].accounts[k].currency === 'XOF') {",
															"//             const participantPutRequest = {",
															"//               url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
															"//               method: 'PUT',",
															"//               header: {",
															"//                   \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
															"//                   \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
															"//                   \"Content-Type\": \"application/json\"",
															"//               },",
															"//               body: {",
															"//                 mode: 'raw',",
															"//                 raw: JSON.stringify(",
															"//                     {",
															"//                       \"participants\": [",
															"//                         {",
															"//                           \"id\": jsonData.participants[j].id,",
															"//                           \"accounts\": [",
															"//                             {",
															"//                               \"id\": jsonData.participants[j].accounts[k].id,",
															"//                               \"reason\": \"Transfers recorded for payer\",",
															"//                               \"state\": \"PS_TRANSFERS_RECORDED\"",
															"//                             }",
															"//                           ]",
															"//                         }",
															"//                       ]",
															"//                     }",
															"//                 )",
															"//               }",
															"//             };",
															"//             pm.sendRequest(participantPutRequest, function (err, response) {",
															"//                 console.log(response.json());",
															"//             });",
															"//         }",
															"        ",
															"        ",
															"//     }",
															"// }"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYERFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements",
														"{{settlementId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "check state for participants after prepare",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1d0f3b99-4ab4-4e9a-8655-30297675b802",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"    ",
															"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
															"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
															"});",
															"",
															"pm.test(\"Settlement state should be PS_TRANSFERS_RECORDED\", function () {",
															"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_RECORDED\");",
															"});",
															"",
															"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
															"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
															"});",
															"",
															"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
															"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
															"});",
															"",
															"jsonData.participants.map(participant => {",
															"    participant.accounts",
															"                    .filter(account => account.netSettlementAmount.currency === pm.environment.get('currency'))",
															"                    .forEach(curAccount => {",
															"                        pm.test(`Participant Account ${curAccount.id} state is PS_TRANSFERS_RECORDED`, function () {",
															"                            pm.expect(curAccount.state).to.eql(\"PS_TRANSFERS_RECORDED\");",
															"                        });",
															"                    })",
															"})",
															"",
															"// for(var j in jsonData.participants) {",
															"//     for(var k in jsonData.participants[j].accounts) {",
															"//         pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_RECORDED`, function () {",
															"//             pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_RECORDED\");",
															"//         });",
															"//     }",
															"// }",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements",
														"{{settlementId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp1 settlement&position accont balance after prepare",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "55a678e6-1992-4024-82cc-046646d63bf7",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var testfsp1SettleAccountBalanceAfterPrepare;",
															"var testfsp1PositionAccountBalanceAfterPrepare;",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            testfsp1SettleAccountBalanceAfterPrepare = curAccount.value",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            testfsp1PositionAccountBalanceAfterPrepare = curAccount.value",
															"        }",
															"    })",
															"",
															"",
															"pm.test(\"Testfsp1 settlement account balance before and  after prepare should be the same.\", function () {",
															"    pm.expect(testfsp1SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
															"});",
															"",
															"",
															"pm.test(\"Testfsp1 position account balance before and  after prepare should be the same.\", function () {",
															"    pm.expect(testfsp1PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceAfterTransfer\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2 settlement&position accont balance after prepare",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "55a678e6-1992-4024-82cc-046646d63bf7",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var testfsp2SettleAccountBalanceAfterPrepare;",
															"var testfsp2PositionAccountBalanceAfterPrepare;",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            testfsp2SettleAccountBalanceAfterPrepare = curAccount.value",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            testfsp2PositionAccountBalanceAfterPrepare = curAccount.value",
															"        }",
															"    })",
															"",
															"pm.test(\"Testfsp2 settlement account balance before and  after prepare should be the same.\", function () {",
															"    pm.expect(testfsp2SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
															"});",
															"",
															"pm.test(\"Testfsp2 position account balance before and  after prepare should be the same.\", function () {",
															"    pm.expect(testfsp2PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceAfterTransfer\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "payerfsp settlement&position accont balance after prepare",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "55a678e6-1992-4024-82cc-046646d63bf7",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"var payerfspSettleAccountBalanceAfterPrepare;\r",
															"var payerfspPositionAccountBalanceAfterPrepare;\r",
															"jsonData\r",
															"    .filter(account => account.currency === pm.environment.get('currency'))\r",
															"    .forEach(curAccount => {\r",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {\r",
															"            payerfspSettleAccountBalanceAfterPrepare = curAccount.value\r",
															"        }\r",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {\r",
															"            payerfspPositionAccountBalanceAfterPrepare = curAccount.value\r",
															"        }\r",
															"    })\r",
															"\r",
															"\r",
															"pm.test(\"payerfsp settlement account balance before and  after reserve should be the same.\", function () {\r",
															"    pm.expect(payerfspSettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"payerfspSettleAccountBalanceAfterTransfer\"));\r",
															"});\r",
															"\r",
															"pm.test(\"payerfsp position account balance before and  after prepare should be the same.\", function () {\r",
															"    pm.expect(payerfspPositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"payerfspPositionAccountBalanceAfterTransfer\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payerfsp/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"payerfsp",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "payeefsp settlement&position accont balance after prepare",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "55a678e6-1992-4024-82cc-046646d63bf7",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"var payeefspSettleAccountBalanceAfterPrepare;\r",
															"var payeefspPositionAccountBalanceAfterPrepare;\r",
															"jsonData\r",
															"    .filter(account => account.currency === pm.environment.get('currency'))\r",
															"    .forEach(curAccount => {\r",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {\r",
															"            payeefspSettleAccountBalanceAfterPrepare = curAccount.value\r",
															"        }\r",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {\r",
															"            payeefspPositionAccountBalanceAfterPrepare = curAccount.value\r",
															"        }\r",
															"    })\r",
															"\r",
															"pm.test(\"payeefsp settlement account balance before and  after prepare should be the same.\", function () {\r",
															"    pm.expect(payeefspSettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"payeefspSettleAccountBalanceAfterTransfer\"));\r",
															"});\r",
															"\r",
															"pm.test(\"payeefsp position account balance before and  after prepare should be the same.\", function () {\r",
															"    pm.expect(payeefspPositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"payeefspPositionAccountBalanceAfterTransfer\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payeefsp/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"payeefsp",
														"accounts"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Reserve Settlement",
									"item": [
										{
											"name": "Reserve Settlement",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
														"exec": [
															"",
															"var jsonData = pm.response.json();",
															"jsonData.participants.map(participant => {",
															"    participant.accounts",
															"                    .filter(account => account.netSettlementAmount.currency === pm.environment.get('currency'))",
															"                    .forEach(curAccount => {",
															"                        const participantPutRequest = {",
															"                          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
															"                          method: 'PUT',",
															"                          header: {",
															"                              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
															"                              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
															"                              \"Content-Type\": \"application/json\"",
															"                          },",
															"                          body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(",
															"                                {",
															"                                  \"participants\": [",
															"                                    {",
															"                                      \"id\": participant.id,",
															"                                      \"accounts\": [",
															"                                        {",
															"                                          \"id\": curAccount.id,",
															"                                          \"reason\": \"Transfers reserved\",",
															"                                          \"state\": \"PS_TRANSFERS_RESERVED\"",
															"                                        }",
															"                                      ]",
															"                                    }",
															"                                  ]",
															"                                }",
															"                            )",
															"                          }",
															"                        };",
															"                        pm.sendRequest(participantPutRequest, function (err, response) {",
															"                            console.log(response.json());",
															"                        });",
															"                    })",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYERFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "payerfsp"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements",
														"{{settlementId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "check state for participants after reserve",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1d0f3b99-4ab4-4e9a-8655-30297675b802",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"    ",
															"pm.test(\"Settlement Id should be: \" + pm.environment.get('settlementId'), function () {",
															"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
															"});",
															"",
															"pm.test(\"Settlement state should be PS_TRANSFERS_RESERVED\", function () {",
															"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_RESERVED\");",
															"});",
															"",
															"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
															"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
															"});",
															"",
															"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
															"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
															"});",
															"",
															"jsonData.participants.map(participant => {",
															"    participant.accounts",
															"                    .filter(account => account.netSettlementAmount.currency === pm.environment.get('currency'))",
															"                    .forEach(curAccount => {",
															"                        pm.test(`Participant Account ${curAccount.id} state is PS_TRANSFERS_RESERVED`, function () {",
															"                            pm.expect(curAccount.state).to.eql(\"PS_TRANSFERS_RESERVED\");",
															"                        });",
															"                    })",
															"})",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements",
														"{{settlementId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp1 settlement&position accont balance after reserve",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "55a678e6-1992-4024-82cc-046646d63bf7",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var testfsp1SettleAccountBalanceAfterReserve;",
															"var testfsp1PositionAccountBalanceAfterReserve;",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            testfsp1SettleAccountBalanceAfterReserve = curAccount.value",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            testfsp1PositionAccountBalanceAfterReserve = curAccount.value",
															"        }",
															"    })",
															"",
															"",
															"pm.test(\"Testfsp1 settlement account balance before and  after reserve should be the same.\", function () {",
															"    pm.expect(testfsp1SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
															"});",
															"",
															"pm.test(\"Testfsp1 position account balance before and  after reserve should be the same.\", function () {",
															"    pm.expect(testfsp1PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceAfterTransfer\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2 settlement&position accont balance after reserve",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "55a678e6-1992-4024-82cc-046646d63bf7",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var testfsp2SettleAccountBalanceAfterReserve;",
															"var testfsp2PositionAccountBalanceAfterReserve;",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            testfsp2SettleAccountBalanceAfterReserve = curAccount.value",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            testfsp2PositionAccountBalanceAfterReserve = curAccount.value",
															"        }",
															"    })",
															"",
															"pm.test(\"Testfsp2 settlement account balance before and  after reserve should be the same.\", function () {",
															"    pm.expect(testfsp2SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceBeforeTransfer\"));",
															"});",
															"",
															"pm.test(\"Testfsp2 position account balance after reserve gets increased by its net settlement  amount.\", function () {",
															"    pm.expect(testfsp2PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "payerfsp settlement&position accont balance after reserve",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "55a678e6-1992-4024-82cc-046646d63bf7",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"var payerfspSettleAccountBalanceAfterReserve;\r",
															"var payerfspPositionAccountBalanceAfterReserve;\r",
															"jsonData\r",
															"    .filter(account => account.currency === pm.environment.get('currency'))\r",
															"    .map(curAccount => {\r",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {\r",
															"            payerfspSettleAccountBalanceAfterReserve = curAccount.value\r",
															"        }\r",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {\r",
															"            payerfspPositionAccountBalanceAfterReserve = curAccount.value\r",
															"        }\r",
															"    })\r",
															"\r",
															"pm.test(\"payerfsp settlement account balance before and  after reserve should be the same.\", function () {\r",
															"    pm.expect(payerfspSettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"payerfspSettleAccountBalanceAfterTransfer\"));\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"payerfsp position account balance after reserve gets increased by its net settlement  amount.\", function () {\r",
															"    pm.expect(payerfspPositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"payerfspPositionAccountBalanceBeforeTransfer\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payerfsp/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"payerfsp",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "payeefsp settlement&position accont balance after reserve",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "55a678e6-1992-4024-82cc-046646d63bf7",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"var payeefspSettleAccountBalanceAfterReserve;\r",
															"var payeefspPositionAccountBalanceAfterReserve;\r",
															"jsonData\r",
															"    .filter(account => account.currency === pm.environment.get('currency'))\r",
															"    .map(curAccount => {\r",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {\r",
															"            payeefspSettleAccountBalanceAfterReserve = curAccount.value\r",
															"        }\r",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {\r",
															"            payeefspPositionAccountBalanceAfterReserve = curAccount.value\r",
															"        }\r",
															"    })\r",
															"\r",
															"\r",
															"pm.test(\"payeefsp settlement account balance before and  after reserve should be the same.\", function () {\r",
															"    pm.expect(payeefspSettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"payeefspSettleAccountBalanceAfterTransfer\"));\r",
															"});\r",
															"\r",
															"pm.test(\"payeefsp position account balance before and  after reserve should be the same.\", function () {\r",
															"    pm.expect(payeefspPositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"payeefspPositionAccountBalanceAfterTransfer\"));\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payeefsp/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"payeefsp",
														"accounts"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Commit Settlement",
									"item": [
										{
											"name": "Commit Settlement",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"var jsonData = pm.response.json();",
															"jsonData.participants.map(participant => {",
															"    participant.accounts",
															"                    .filter(account => account.netSettlementAmount.currency === pm.environment.get('currency'))",
															"                    .forEach(curAccount => {",
															"                        const participantPutRequest = {",
															"                          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
															"                          method: 'PUT',",
															"                          header: {",
															"                              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
															"                              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
															"                              \"Content-Type\": \"application/json\"",
															"                          },",
															"                          body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(",
															"                                {",
															"                                  \"participants\": [",
															"                                    {",
															"                                      \"id\": participant.id,",
															"                                      \"accounts\": [",
															"                                        {",
															"                                          \"id\": curAccount.id,",
															"                                          \"reason\": \"Transfers committed\",",
															"                                          \"state\": \"PS_TRANSFERS_COMMITTED\"",
															"                                        }",
															"                                      ]",
															"                                    }",
															"                                  ]",
															"                                }",
															"                            )",
															"                          }",
															"                        };",
															"                        pm.sendRequest(participantPutRequest, function (err, response) {",
															"                            console.log(response.json());",
															"                        });",
															"                    })",
															"})",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYERFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "payerfsp"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements",
														"{{settlementId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "check state for participants after commit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1d0f3b99-4ab4-4e9a-8655-30297675b802",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"    ",
															"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
															"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
															"});",
															"",
															"pm.test(\"Settlement state should be PS_TRANSFERS_COMMITTED\", function () {",
															"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_COMMITTED\");",
															"});",
															"",
															"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
															"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
															"});",
															"",
															"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
															"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
															"});",
															"",
															"jsonData.participants.map(participant => {",
															"    participant.accounts",
															"                    .filter(account => account.netSettlementAmount.currency === 'XOF')",
															"                    .forEach(xofAccount => {",
															"                        pm.test(`Participant Account ${xofAccount.id} state is PS_TRANSFERS_COMMITTED`, function () {",
															"                            pm.expect(xofAccount.state).to.eql(\"PS_TRANSFERS_COMMITTED\");",
															"                        });",
															"                    })",
															"})",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements",
														"{{settlementId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp1 settlement&position accont balance after commit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "55a678e6-1992-4024-82cc-046646d63bf7",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var testfsp1SettleAccountBalanceAfterCommit;",
															"var testfsp1PositionAccountBalanceAfterCommit;",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            testfsp1SettleAccountBalanceAfterCommit = curAccount.value",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            testfsp1PositionAccountBalanceAfterCommit = curAccount.value",
															"        }",
															"    })",
															"",
															"",
															"pm.test(\"Testfsp1 settlement account balance before and  after commit should be the same.\", function () {",
															"    pm.expect(testfsp1SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
															"});",
															"",
															"pm.test(\"Testfsp1 position account balance after commit should be reduced by its net settlement amount.\", function () {",
															"    pm.expect(testfsp1PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceBeforeTransfer\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2 settlement&position accont balance after commit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "55a678e6-1992-4024-82cc-046646d63bf7",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var testfsp2SettleAccountBalanceAfterCommit;",
															"var testfsp2PositionAccountBalanceAfterCommit;",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            testfsp2SettleAccountBalanceAfterCommit = curAccount.value",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            testfsp2PositionAccountBalanceAfterCommit = curAccount.value",
															"        }",
															"    })",
															"",
															"pm.test(\"Testfsp2 settlement account balance before and  after commit should be the same.\", function () {",
															"    pm.expect(testfsp2SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceBeforeTransfer\"));",
															"});",
															"",
															"pm.test(\"Testfsp2 position account balance before and after commit should be the same.\", function () {",
															"    pm.expect(testfsp2PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "payerfsp settlement&position accont balance after commit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "55a678e6-1992-4024-82cc-046646d63bf7",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"var payerfspSettleAccountBalanceAfterCommit;\r",
															"var payerfspPositionAccountBalanceAfterCommit;\r",
															"jsonData\r",
															"    .filter(account => account.currency === pm.environment.get('currency'))\r",
															"    .forEach(curAccount => {\r",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {\r",
															"            payerfspSettleAccountBalanceAfterCommit = curAccount.value\r",
															"        }\r",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {\r",
															"            payerfspPositionAccountBalanceAfterCommit = curAccount.value\r",
															"        }\r",
															"    })\r",
															"\r",
															"pm.test(\"payerfsp settlement account balance before and  after commit should be the same.\", function () {\r",
															"    pm.expect(payerfspSettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"payerfspSettleAccountBalanceAfterTransfer\"));\r",
															"});\r",
															"\r",
															"pm.test(\"payerfsp position account balance before and  after commit should be the same.\", function () {\r",
															"    pm.expect(payerfspPositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"payerfspPositionAccountBalanceBeforeTransfer\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payerfsp/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"payerfsp",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "payeefsp settlement&position accont balance after commit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "55a678e6-1992-4024-82cc-046646d63bf7",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"var payeefspSettleAccountBalanceAfterCommit;\r",
															"var payeefspPositionAccountBalanceAfterCommit;\r",
															"jsonData\r",
															"    .filter(account => account.currency === pm.environment.get('currency'))\r",
															"    .forEach(curAccount => {\r",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {\r",
															"            payeefspSettleAccountBalanceAfterCommit = curAccount.value\r",
															"        }\r",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {\r",
															"            payeefspPositionAccountBalanceAfterCommit = curAccount.value\r",
															"        }\r",
															"    })\r",
															"\r",
															"pm.test(\"payeefsp settlement account balance before and  after commit should be the same.\", function () {\r",
															"    pm.expect(payeefspSettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"payeefspSettleAccountBalanceAfterTransfer\"));\r",
															"});\r",
															"\r",
															"pm.test(\"payeefsp position account balance after commit should be reduced by its net settlement amount.\", function () {\r",
															"    pm.expect(payeefspPositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"payeefspPositionAccountBalanceBeforeTransfer\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payeefsp/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"payeefsp",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "hub account balance check",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "05d1deae-1e15-42d9-b142-4f4a25d640d6",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"var hubReconciliationAccountBalanceAfterCommit;\r",
															"var hubMultilateralAccountBalanceAfterCommit;\r",
															"jsonData\r",
															"    .filter(account => account.currency === pm.environment.get('currency'))\r",
															"    .forEach(curAccount => {\r",
															"        if(curAccount.ledgerAccountType === \"HUB_RECONCILIATION\") {\r",
															"            hubReconciliationAccountBalanceAfterCommit = curAccount.value;\r",
															"        }\r",
															"        if(curAccount.ledgerAccountType === \"HUB_MULTILATERAL_SETTLEMENT\") {\r",
															"            hubMultilateralAccountBalanceAfterCommit = curAccount.value;\r",
															"        }\r",
															"    })\r",
															"\r",
															"\r",
															"pm.test(\"hub reconciliation account balance before transfer and  after commit should be the same.\", function () {\r",
															"    pm.expect(hubReconciliationAccountBalanceAfterCommit).to.eql(pm.environment.get(\"hubReconciliationAccountBalanceBeforeTransfer\"));\r",
															"});\r",
															"\r",
															"pm.test(\"hub multilateral account balance before transfer and  after commit should be the same.\", function () {\r",
															"    pm.expect(hubMultilateralAccountBalanceAfterCommit).to.eql(pm.environment.get(\"hubMultilateralAccountBalanceBeforeTransfer\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/hub/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"hub",
														"accounts"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Settle Settlement",
									"item": [
										{
											"name": "Settle Settlement",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"jsonData.participants.map(participant => {",
															"    participant.accounts",
															"                    .filter(account => account.netSettlementAmount.currency === pm.environment.get('currency'))",
															"                    .forEach(curAccount => {",
															"                        const participantPutRequest = {",
															"                          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
															"                          method: 'PUT',",
															"                          header: {",
															"                              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
															"                              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
															"                              \"Content-Type\": \"application/json\"",
															"                          },",
															"                          body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(",
															"                                {",
															"                                  \"participants\": [",
															"                                    {",
															"                                      \"id\": participant.id,",
															"                                      \"accounts\": [",
															"                                        {",
															"                                          \"id\": curAccount.id,",
															"                                          \"reason\": \"Transfers settled for payer\",",
															"                                          \"state\": \"SETTLED\"",
															"                                        }",
															"                                      ]",
															"                                    }",
															"                                  ]",
															"                                }",
															"                            )",
															"                          }",
															"                        };",
															"                        pm.sendRequest(participantPutRequest, function (err, response) {",
															"                            console.log(response.json());",
															"                        });",
															"                    })",
															"})",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYERFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "payerfsp"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements",
														"{{settlementId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "check state for participants after settle",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1d0f3b99-4ab4-4e9a-8655-30297675b802",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"    ",
															"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
															"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
															"});",
															"",
															"pm.test(\"Settlement state should be SETTLED\", function () {",
															"    pm.expect(jsonData.state).to.eql(\"SETTLED\");",
															"});",
															"",
															"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
															"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
															"});",
															"",
															"pm.test(\"Settlement Window State should be SETTLED\", function () {",
															"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"SETTLED\");",
															"});",
															"",
															"jsonData.participants.map(participant => {",
															"    participant.accounts",
															"                    .filter(account => account.netSettlementAmount.currency === pm.environment.get('currency'))",
															"                    .forEach(curAccount => {",
															"                        pm.test(`Participant Account ${curAccount.id} state is SETTLED`, function () {",
															"                            pm.expect(curAccount.state).to.eql(\"SETTLED\");",
															"                        });",
															"                    })",
															"})",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYERFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements",
														"{{settlementId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp1 settlement&position accont balance after settle",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "55a678e6-1992-4024-82cc-046646d63bf7",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var testfsp1SettleAccountBalanceAfterSettle;",
															"var testfsp1PositionAccountBalanceAfterSettle;",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            testfsp1SettleAccountBalanceAfterSettle = curAccount.value",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            testfsp1PositionAccountBalanceAfterSettle = curAccount.value",
															"        }",
															"    })",
															"",
															"pm.test(\"Testfsp1 settlement account balance before and  after settle should be the same.\", function () {",
															"    pm.expect(testfsp1SettleAccountBalanceAfterSettle).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceBeforeTransfer\"));",
															"});",
															"",
															"pm.test(\"Testfsp1 position account balance before and  after settle should be the same.\", function () {",
															"    pm.expect(testfsp1PositionAccountBalanceAfterSettle).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceBeforeTransfer\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2 settlement&position accont balance after settle",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "55a678e6-1992-4024-82cc-046646d63bf7",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var testfsp2SettleAccountBalanceAfterCommit;",
															"var testfsp2PositionAccountBalanceAfterCommit;",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            testfsp2SettleAccountBalanceAfterCommit = curAccount.value",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            testfsp2PositionAccountBalanceAfterCommit = curAccount.value",
															"        }",
															"    })",
															"",
															"pm.test(\"Testfsp2 settlement account balance before and  after commit should be the same.\", function () {",
															"    pm.expect(testfsp2SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceBeforeTransfer\"));",
															"});",
															"",
															"pm.test(\"Testfsp2 position account balance before and  after commit should be the same.\", function () {",
															"    pm.expect(testfsp2PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "payerfsp settlement&position accont balance after settle",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "55a678e6-1992-4024-82cc-046646d63bf7",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"var payerfspSettleAccountBalanceAfterCommit;\r",
															"var payerfspPositionAccountBalanceAfterCommit;\r",
															"jsonData\r",
															"    .filter(account => account.currency === pm.environment.get('currency'))\r",
															"    .forEach(curAccount => {\r",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {\r",
															"            payerfspSettleAccountBalanceAfterCommit = curAccount.value\r",
															"        }\r",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {\r",
															"            payerfspPositionAccountBalanceAfterCommit = curAccount.value\r",
															"        }\r",
															"    })\r",
															"\r",
															"\r",
															"pm.test(\"payerfsp settlement account balance before and  after commit should be the same.\", function () {\r",
															"    pm.expect(payerfspSettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"payerfspSettleAccountBalanceAfterTransfer\"));\r",
															"});\r",
															"\r",
															"pm.test(\"payerfsp position account balance before and  after commit should be the same.\", function () {\r",
															"    pm.expect(payerfspPositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"payerfspPositionAccountBalanceBeforeTransfer\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payerfsp/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"payerfsp",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "payeefsp settlement&position accont balance after settle",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "55a678e6-1992-4024-82cc-046646d63bf7",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"var payeefspSettleAccountBalanceAfterCommit;\r",
															"var payeefspPositionAccountBalanceAfterCommit;\r",
															"jsonData\r",
															"    .filter(account => account.currency === pm.environment.get('currency'))\r",
															"    .forEach(curAccount => {\r",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {\r",
															"            payeefspSettleAccountBalanceAfterCommit = curAccount.value\r",
															"        }\r",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {\r",
															"            payeefspPositionAccountBalanceAfterCommit = curAccount.value\r",
															"        }\r",
															"    })\r",
															"\r",
															"pm.test(\"payeefsp settlement account balance before and  after commit should be the same.\", function () {\r",
															"    pm.expect(payeefspSettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"payeefspSettleAccountBalanceAfterTransfer\"));\r",
															"});\r",
															"\r",
															"pm.test(\"payeefsp position account balance before and  after commit should be the same.\", function () {\r",
															"    pm.expect(payeefspPositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"payeefspPositionAccountBalanceBeforeTransfer\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payeefsp/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"payeefsp",
														"accounts"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Author: Sridevi Miriyala",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "308e0d73-5af8-4f1a-ae74-8547c7909504",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4d93e7eb-ca04-48aa-8be1-0c9617bfe1b2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "transfer_negative_scenarios (complete)",
					"item": [
						{
							"name": "payee_abort",
							"item": [
								{
									"name": "Store Payerfsp position before prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"jsonData",
													"    .filter(position => position.currency === pm.environment.get('currency'))",
													"    .forEach(position => {",
													"        pm.environment.set(\"payerfspPositionBeforePrepare\", position.value);",
													"    })",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "52a7b3f2-656d-45a5-b1f9-69414966f11b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"positions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Store Payeefsp position before prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"jsonData",
													"    .filter(position => position.currency === pm.environment.get('currency'))",
													"    .forEach(position => {",
													"        pm.environment.set(\"payeefspPositionBeforePrepare\", position.value);",
													"    })",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "52a7b3f2-656d-45a5-b1f9-69414966f11b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payeefsp}}",
												"positions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Quote - RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"var navigator = {}; ",
													"var window = {}; ",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
													"      \"fspId\": \"payerfsp\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"      \"dateOfBirth\": \"1983-10-25\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
													"      \"fspId\": \"payeefsp\"",
													"    }",
													"  },",
													"  \"amountType\": \"RECEIVE\",",
													"  \"amount\": {",
													"    \"amount\": \"60\",",
													"    \"currency\": pm.environment.get('currency')",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              ",
													"              //Check the Headers",
													"              var headers = response.json().headers;",
													"              ",
													"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
													"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
													"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
													"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
													"                });",
													"                ",
													"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
													"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
													"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {",
													"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
													"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
													"                });",
													"                ",
													"          } else {",
													"              pm.test(\"Quote FAILED\", function () {",
													"                throw new Error('Did not receive request on payee side');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 1100)",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
													"      if(response.responseSize !== 0) {",
													"          //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            ",
													"            ",
													"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"            // var strData = JSON.stringify(response.json().data)",
													"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
													"            // console.log(`token: ${token}`)",
													"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
													"            // console.log(`isValid: ${isValid}`)",
													"            // pm.test(\"Check if the response is JWS valid\", function () {",
													"            //     pm.expect(isValid).to.eql(true);",
													"            // });",
													"            ",
													"            //Validate protected header inside Signature",
													"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"            ",
													"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"            });",
													"            ",
													"",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);",
													"            });",
													"           ",
													"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            ",
													"            pm.test(\"Response quoteId is  null\", function () {",
													"                pm.expect(jsonData.quoteId).to.eql(undefined);",
													"                ",
													"            });",
													"          ",
													"            pm.test(\"Response ilpPacket is not null\", function () {",
													"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
													"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
													"            });",
													"       ",
													"           pm.test(\"Response condition is not null\", function () {",
													"               pm.expect(jsonData.condition).not.equal(undefined);",
													"               pm.environment.set(\"condition\", jsonData.condition);",
													"           });",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('Did not receive response on Payer side');",
													"           });",
													"           postman.setNextRequest(null);",
													"      }",
													"       ",
													"   });",
													"}, 1000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "payeefsp"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Prepare",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib\r",
													"var window = {}; //fake a window object for the lib\r",
													"eval(pm.environment.get('jrsassign'));\r",
													"\r",
													"var uuid = require('uuid');\r",
													"var generatedUUID = uuid.v4();\r",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
													"\r",
													"\r",
													"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
													"\r",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
													"\r",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"noresponsepayeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};\r",
													"var sHeader = JSON.stringify(oHeader);\r",
													"console.log(`sHeader: ${sHeader}`)\r",
													"\r",
													"var objPayload = {\r",
													"  \"transferId\": pm.environment.get('transfer_ID'),\r",
													"  \"payerFsp\": \"payerfsp\",\r",
													"  \"payeeFsp\": \"noresponsepayeefsp\",\r",
													"  \"amount\": {\r",
													"    \"amount\": \"10\",\r",
													"    \"currency\": pm.environment.get('currency')\r",
													"  },\r",
													"  \"expiration\": pm.environment.get('transferExpiration'),\r",
													"  \"ilpPacket\": pm.environment.get('ilpPacket'),\r",
													"  \"condition\": pm.environment.get('validCondition')\r",
													"}\r",
													"var sPayload = JSON.stringify(objPayload)\r",
													"console.log(`sPayload: ${sPayload}`)\r",
													"pm.variables.set(\"transferRequest\", sPayload);\r",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));\r",
													"//console.log(`token: ${token}`)\r",
													"\r",
													"// var encodedHeaders = btoa(sHeader)\r",
													"\r",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
													"// var token = JSON.stringify(ofspiopSignature)\r",
													"\r",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
													"\r",
													"const signatureObject = {\r",
													"    signature: signature.replace('\"', ''),\r",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
													"};\r",
													"\r",
													"console.log(JSON.stringify(signatureObject))\r",
													"\r",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp",
												"type": "text"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "noresponsepayeefsp",
												"type": "text"
											},
											{
												"key": "FSPIOP-Signature",
												"value": "{{fspiopSignature}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-URI",
												"value": "/transfers",
												"type": "text"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"value": "POST",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transferRequest}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Store Payerfsp position after Prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"jsonData",
													"    .filter(position => position.currency === pm.environment.get('currency'))",
													"    .forEach(position => {",
													"        pm.environment.set(\"payerfspPositionAfterPrepare\", position.value);",
													"    })",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "52a7b3f2-656d-45a5-b1f9-69414966f11b",
												"exec": [
													"setTimeout(function () {",
													"  pm.sendRequest('www.google.com', function (err, response) {}",
													"    );",
													"}, 3000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"positions"
											]
										}
									},
									"response": []
								},
								{
									"name": "(BUG) Send Payee Abort",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2e244cfd-ff69-448a-8b62-176d4dd0b28d",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib\r",
													"var window = {}; //fake a window object for the lib\r",
													"eval(pm.environment.get('jrsassign'));\r",
													"\r",
													"var uuid = require('uuid');\r",
													"var generatedUUID = uuid.v4();\r",
													"//pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
													"pm.environment.set(\"completedTimestamp\",new Date().toISOString());\r",
													"\r",
													"\r",
													"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
													"\r",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
													"\r",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"noresponsepayeefsp\",\"FSPIOP-Destination\":\"payerfsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"PUT\", \"Date\":pm.variables.get('transferDate')};\r",
													"var sHeader = JSON.stringify(oHeader);\r",
													"console.log(`sHeader: ${sHeader}`)\r",
													"\r",
													"var objPayload = {\r",
													"  \"fulfilment\": pm.environment.get('validFulfillment'),\r",
													"  \"completedTimestamp\": pm.environment.get('completedTimestamp'),\r",
													"  \"transferState\": \"ABORTED\"\r",
													"}\r",
													"\r",
													"\r",
													"var sPayload = JSON.stringify(objPayload)\r",
													"console.log(`sPayload: ${sPayload}`)\r",
													"pm.variables.set(\"transferResponse\", sPayload);\r",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payeefspJWSKey'));\r",
													"\r",
													"\r",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
													"\r",
													"const signatureObject = {\r",
													"    signature: signature.replace('\"', ''),\r",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
													"};\r",
													"\r",
													"console.log(JSON.stringify(signatureObject))\r",
													"\r",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "358f8ed8-6882-4c54-8dfd-177607c9e07b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"            //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is noresponsepayeefsp \", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-signature is not null\", function () {",
													"                pm.expect(headers['fspiop-signature']).not.eql(undefined);",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            pm.test(\"Response data does not have transferId\", function () {",
													"               pm.expect(jsonData.transferId).to.eql(undefined);",
													"            });",
													"            pm.test(\"Response status is ABORTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
													"            });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response on payer side');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 3000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{NORESPONSEPAYEEFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{dateHeader}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-Source",
												"value": "noresponsepayeefsp",
												"type": "text"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payerfsp}}",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"type": "text"
											},
											{
												"key": "FSPIOP-Signature",
												"value": "{{fspiopSignature}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-URI",
												"value": "/transfers",
												"type": "text"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"value": "PUT",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transferResponse}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers",
												"{{transfer_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "(BUG) Check Transfer status - ABORTED",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6c54bbb2-0b33-4301-86ae-751142923a4c",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// pm.test(\"Check that Content-Type is present\", function () {",
													"//     pm.response.to.have.header(\"Content-Type\");",
													"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
													"// });",
													"",
													"/*setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
													"          if(response !== null) {",
													"              var jsonData = response.json();",
													"              ",
													"              pm.test(\"Response status is ABORTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
													"              });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 3000)*/",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"            //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is switch \", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"         /* THIS TEST WAS SUCCESSFUL IN LEGACY SIM   ",
													"            pm.test(\"fspiop-signature is empty\", function () {",
													"             pm.expect(headers['fspiop-signature']).to.eql(undefined);",
													"            });",
													"            */",
													"",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-signature is not null\", function () {",
													"                pm.expect(headers['fspiop-signature']).not.eql(undefined);",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            pm.test(\"Response data does not have transferId\", function () {",
													"               pm.expect(jsonData.transferId).to.eql(undefined);",
													"            });",
													"            pm.test(\"Response status is ABORTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
													"            });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response on payer side');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 1300)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "testfsp1"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers",
												"{{transfer_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check Payerfsp position after Abort",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"jsonData",
													"    .filter(position => position.currency === pm.environment.get('currency'))",
													"    .forEach(position => {",
													"        pm.test(\"Payerfsp position after Payee ABORT should be same as position before prepare.\", function () {",
													"            pm.expect(position.value).to.equal(Number(pm.environment.get('payerfspPositionBeforePrepare')));",
													"        });",
													"    })",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "53c7e6de-d4c1-428e-a1c7-70fad0f3bed1",
												"exec": [
													"setTimeout(function () {",
													"  pm.sendRequest('www.google.com', function (err, response) {}",
													"    );",
													"}, 10000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"positions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check Payeefsp position after Abort",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"jsonData",
													"    .filter(position => position.currency === pm.environment.get('currency'))",
													"    .forEach(position => {",
													"        pm.test(\"Payeefsp position after Payee ABORT should be same as position before prepare.\", function () {",
													"            pm.expect(position.value).to.equal(Number(pm.environment.get('payeefspPositionBeforePrepare')));",
													"        });",
													"    })",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "53c7e6de-d4c1-428e-a1c7-70fad0f3bed1",
												"exec": [
													"setTimeout(function () {",
													"  pm.sendRequest('www.google.com', function (err, response) {}",
													"    );",
													"}, 10000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payeefsp}}",
												"positions"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "payee_invalid_fulfillment",
							"item": [
								{
									"name": "Store Payerfsp position",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"jsonData",
													"    .filter(position => position.currency === pm.environment.get('currency'))",
													"    .forEach(position => {",
													"        pm.environment.set(\"payerfspPositionBeforeTransfer\", position.value);",
													"    })",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "52a7b3f2-656d-45a5-b1f9-69414966f11b",
												"exec": [
													"setTimeout(function () {",
													"  pm.sendRequest('www.google.com', function (err, response) {}",
													"    );",
													"}, 3000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"positions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Store Payeefsp position",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"jsonData",
													"    .filter(position => position.currency === pm.environment.get('currency'))",
													"    .forEach(position => {",
													"        pm.environment.set(\"payeefspPositionBeforeTransfer\", position.value);",
													"    })",
													"    ",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "52a7b3f2-656d-45a5-b1f9-69414966f11b",
												"exec": [
													"setTimeout(function () {",
													"  pm.sendRequest('www.google.com', function (err, response) {}",
													"    );",
													"}, 3000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payeefsp}}",
												"positions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Quote - RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"var navigator = {}; ",
													"var window = {}; ",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
													"      \"fspId\": \"payerfsp\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"      \"dateOfBirth\": \"1983-10-25\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
													"      \"fspId\": \"payeefsp\"",
													"    }",
													"  },",
													"  \"amountType\": \"RECEIVE\",",
													"  \"amount\": {",
													"    \"amount\": \"60\",",
													"    \"currency\": pm.environment.get('currency')",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              ",
													"              //Check the Headers",
													"              var headers = response.json().headers;",
													"              ",
													"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
													"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
													"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
													"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
													"                });",
													"                ",
													"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
													"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
													"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {",
													"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
													"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
													"                });",
													"                ",
													"          } else {",
													"              pm.test(\"Quote FAILED\", function () {",
													"                throw new Error('Did not receive request on payee side');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 1100)",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
													"      if(response.responseSize !== 0) {",
													"          //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            ",
													"            ",
													"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"            // var strData = JSON.stringify(response.json().data)",
													"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
													"            // console.log(`token: ${token}`)",
													"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
													"            // console.log(`isValid: ${isValid}`)",
													"            // pm.test(\"Check if the response is JWS valid\", function () {",
													"            //     pm.expect(isValid).to.eql(true);",
													"            // });",
													"            ",
													"            //Validate protected header inside Signature",
													"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"            ",
													"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"            });",
													"            ",
													"",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);",
													"            });",
													"           ",
													"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            ",
													"            pm.test(\"Response quoteId is  null\", function () {",
													"                pm.expect(jsonData.quoteId).to.eql(undefined);",
													"                ",
													"            });",
													"          ",
													"            pm.test(\"Response ilpPacket is not null\", function () {",
													"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
													"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
													"            });",
													"       ",
													"           pm.test(\"Response condition is not null\", function () {",
													"               pm.expect(jsonData.condition).not.equal(undefined);",
													"               pm.environment.set(\"condition\", jsonData.condition);",
													"           });",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('Did not receive response on Payer side');",
													"           });",
													"           postman.setNextRequest(null);",
													"      }",
													"       ",
													"   });",
													"}, 1000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "payeefsp"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Prepare",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib\r",
													"var window = {}; //fake a window object for the lib\r",
													"eval(pm.environment.get('jrsassign'));\r",
													"\r",
													"var uuid = require('uuid');\r",
													"var generatedUUID = uuid.v4();\r",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
													"\r",
													"\r",
													"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
													"\r",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
													"\r",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"noresponsepayeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};\r",
													"var sHeader = JSON.stringify(oHeader);\r",
													"console.log(`sHeader: ${sHeader}`)\r",
													"\r",
													"var objPayload = {\r",
													"  \"transferId\": pm.environment.get('transfer_ID'),\r",
													"  \"payerFsp\": \"payerfsp\",\r",
													"  \"payeeFsp\": \"noresponsepayeefsp\",\r",
													"  \"amount\": {\r",
													"    \"amount\": \"10\",\r",
													"    \"currency\": pm.environment.get('currency')\r",
													"  },\r",
													"  \"expiration\": pm.environment.get('transferExpiration'),\r",
													"  \"ilpPacket\": pm.environment.get('ilpPacket'),\r",
													"  \"condition\": pm.environment.get('condition')\r",
													"}\r",
													"var sPayload = JSON.stringify(objPayload)\r",
													"console.log(`sPayload: ${sPayload}`)\r",
													"pm.variables.set(\"transferRequest\", sPayload);\r",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));\r",
													"//console.log(`token: ${token}`)\r",
													"\r",
													"// var encodedHeaders = btoa(sHeader)\r",
													"\r",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
													"// var token = JSON.stringify(ofspiopSignature)\r",
													"\r",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
													"\r",
													"const signatureObject = {\r",
													"    signature: signature.replace('\"', ''),\r",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
													"};\r",
													"\r",
													"console.log(JSON.stringify(signatureObject))\r",
													"\r",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp",
												"type": "text"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "noresponsepayeefsp",
												"type": "text"
											},
											{
												"key": "FSPIOP-Signature",
												"value": "{{fspiopSignature}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-URI",
												"value": "/transfers",
												"type": "text"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"value": "POST",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transferRequest}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Payee Invalid Fulfillment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2e244cfd-ff69-448a-8b62-176d4dd0b28d",
												"exec": [
													"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "358f8ed8-6882-4c54-8dfd-177607c9e07b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"            //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payeefsp fspiop-source is switch \", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('switch');",
													"            });",
													"            ",
													"            pm.test(\"payeefsp fspiop-destination is noresponsepayeefsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('noresponsepayeefsp');",
													"            });",
													"            ",
													"            pm.test(\"payeefsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payeefsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            ",
													"            pm.test(\"payeefsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
													"            });",
													"            ",
													"            pm.test(\"payeefsp fspiop-signature is not null\", function () {",
													"                pm.expect(headers['fspiop-signature']).not.eql(undefined);",
													"            });",
													"            ",
													"            pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            pm.test(\"Response Error Code is 3100\", function () {",
													"               pm.expect(jsonData.errorInformation.errorCode).to.eql('3100');",
													"            });",
													"            pm.test(\"Response Error Description is Generic validation error - invalid fulfilment\", function () {",
													"               pm.expect(jsonData.errorInformation.errorDescription).to.eql('Generic validation error - invalid fulfilment');",
													"            });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response on payer side');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 3000)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{NORESPONSEPAYEEFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{dateHeader}}"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "noresponsepayeefsp"
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"fulfilment\": \"{{invalidFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers",
												"{{transfer_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check Transfer status - ABORTED",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6c54bbb2-0b33-4301-86ae-751142923a4c",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// pm.test(\"Check that Content-Type is present\", function () {",
													"//     pm.response.to.have.header(\"Content-Type\");",
													"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
													"// });",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
													"          if(response !== null) {",
													"              var jsonData = response.json().data;",
													"              ",
													"              pm.test(\"Response status is ABORTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
													"              });",
													"              pm.test(\"Extension List value is 3100: Generic validation error - invalid fulfilment\", function () {",
													"                pm.expect(jsonData.extensionList.extension[0].value).to.eql('3100: Generic validation error - invalid fulfilment');",
													"              });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 3000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers",
												"{{transfer_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check Payerfsp&Payeefsp position",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Payerfsp position after transfer and after Payee ABORT should be same as position before transfer.\", function () {",
													"    ",
													"    pm.expect(jsonData[0].value).to.equal(Number(pm.environment.get('payerfspPositionBeforeTransfer')));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "53c7e6de-d4c1-428e-a1c7-70fad0f3bed1",
												"exec": [
													"setTimeout(function () {",
													"  pm.sendRequest('www.google.com', function (err, response) {}",
													"    );",
													"}, 10000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"positions"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Author: Sridevi Miriyala",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cf834ce7-c6bf-476a-a78b-1955d247aac8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "50c31700-180b-4494-9eef-3a538ad7c5e6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "duplicate_handling (Inprogress)",
					"item": [
						{
							"name": "transfers",
							"item": [
								{
									"name": "original_transfer_at_committed",
									"item": [
										{
											"name": "Send Quote - RECEIVE",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"var navigator = {}; ",
															"var window = {}; ",
															"eval(pm.environment.get('jrsassign'));",
															"",
															"",
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"generatedUUID = uuid.v4();",
															"pm.environment.set('transactionId', generatedUUID);",
															"",
															"pm.variables.set('quoteDate', (new Date()).toUTCString());",
															"pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"pm.variables.set('payerMSISDN', '918381008987');",
															"",
															"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
															"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
															"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
															"var sHeader = JSON.stringify(oHeader);",
															"console.log(`sHeader: ${sHeader}`)",
															"",
															"var objPayload = {",
															"  \"quoteId\": pm.environment.get('quoteId'),",
															"  \"transactionId\": pm.environment.get('transactionId'),",
															"  \"payer\": {",
															"    \"partyIdInfo\": {",
															"      \"partyIdType\": \"MSISDN\",",
															"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
															"      \"fspId\": \"payerfsp\"",
															"    },",
															"    \"personalInfo\": {",
															"      \"complexName\": {",
															"        \"firstName\": \"Mats\",",
															"        \"lastName\": \"Hagman\"",
															"      },",
															"      \"dateOfBirth\": \"1983-10-25\"",
															"    }",
															"  },",
															"  \"payee\": {",
															"    \"partyIdInfo\": {",
															"      \"partyIdType\": \"MSISDN\",",
															"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
															"      \"fspId\": \"payeefsp\"",
															"    }",
															"  },",
															"  \"amountType\": \"RECEIVE\",",
															"  \"amount\": {",
															"    \"amount\": \"1\",",
															"    \"currency\": pm.environment.get('currency')",
															"  },",
															"  \"transactionType\": {",
															"    \"scenario\": \"TRANSFER\",",
															"    \"initiator\": \"PAYER\",",
															"    \"initiatorType\": \"CONSUMER\"",
															"  },",
															"  \"note\": \"hej\"",
															"}",
															"",
															"var sPayload = JSON.stringify(objPayload)",
															"console.log(`sPayload: ${sPayload}`)",
															"pm.variables.set(\"quoteRequest\", sPayload);",
															"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
															"console.log(`token: ${token}`)",
															"",
															"// var encodedHeaders = btoa(sHeader)",
															"",
															"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
															"// var token = JSON.stringify(ofspiopSignature)",
															"",
															"const [ protectedHeaderBase64, , signature ] = token.split('.');",
															"",
															"const signatureObject = {",
															"    signature: signature.replace('\"', ''),",
															"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
															"};",
															"",
															"console.log(JSON.stringify(signatureObject))",
															"",
															"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              ",
															"              //Check the Headers",
															"              var headers = response.json().headers;",
															"              ",
															"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
															"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
															"                });",
															"                ",
															"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
															"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
															"                });",
															"                ",
															"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
															"                });",
															"                ",
															"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
															"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
															"                });",
															"                ",
															"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
															"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
															"                });",
															"                ",
															"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {",
															"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');",
															"                });",
															"                ",
															"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
															"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
															"                });",
															"                ",
															"          } else {",
															"              pm.test(\"Quote FAILED\", function () {",
															"                throw new Error('Did not receive request on payee side');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 1100)",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          //Checking headers",
															"            var headers = response.json().headers;",
															"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
															"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
															"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
															"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp accept is empty\", function () {",
															"                pm.expect(headers['accept']).to.eql(undefined);",
															"            });",
															"            ",
															"            ",
															"            ",
															"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
															"            // var strData = JSON.stringify(response.json().data)",
															"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
															"            // console.log(`token: ${token}`)",
															"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
															"            // console.log(`isValid: ${isValid}`)",
															"            // pm.test(\"Check if the response is JWS valid\", function () {",
															"            //     pm.expect(isValid).to.eql(true);",
															"            // });",
															"            ",
															"            //Validate protected header inside Signature",
															"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
															"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
															"            ",
															"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
															"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
															"            });",
															"            ",
															"",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
															"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);",
															"            });",
															"           ",
															"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
															"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
															"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
															"            });",
															"            ",
															"            var jsonData = response.json().data;",
															"            ",
															"            pm.test(\"Response quoteId is  null\", function () {",
															"                pm.expect(jsonData.quoteId).to.eql(undefined);",
															"                ",
															"            });",
															"          ",
															"            pm.test(\"Response ilpPacket is not null\", function () {",
															"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
															"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
															"            });",
															"       ",
															"           pm.test(\"Response condition is not null\", function () {",
															"               pm.expect(jsonData.condition).not.equal(undefined);",
															"               pm.environment.set(\"condition\", jsonData.condition);",
															"           });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response on Payer side');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 1000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYERFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "payeefsp"
													},
													{
														"key": "FSPIOP-Signature",
														"type": "text",
														"value": "{{fspiopSignature}}"
													},
													{
														"key": "FSPIOP-HTTP-Method",
														"type": "text",
														"value": "POST"
													},
													{
														"key": "FSPIOP-URI",
														"type": "text",
														"value": "/quotes"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{quoteRequest}}"
												},
												"url": {
													"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
													"host": [
														"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "900142b0-e4d7-43a4-a751-38202b600661",
														"exec": [
															"pm.test(\"Status code is 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});\r",
															"\r",
															"// //Check the request that Switch forwards to payeefsp\r",
															"setTimeout(function () {\r",
															"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
															"          if(response.responseSize !== 0) {\r",
															"              \r",
															"              //Check the Headers\r",
															"              var headers = response.json().headers;\r",
															"              \r",
															"                pm.test(\"payeefsp fspiop-source is goldenpayerfsp\", function () {\r",
															"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');\r",
															"                });\r",
															"                \r",
															"                pm.test(\"payeefsp fspiop-destination is goldenpayeefsp\", function () {\r",
															"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');\r",
															"                });\r",
															"                \r",
															"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {\r",
															"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
															"                });\r",
															"                \r",
															"                pm.test(\"payeefsp accept is same as sent in the request\", function () {\r",
															"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');\r",
															"                });\r",
															"                \r",
															"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {\r",
															"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
															"                });\r",
															"                \r",
															"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {\r",
															"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
															"                });\r",
															"                \r",
															"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {\r",
															"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');\r",
															"                });\r",
															"                \r",
															"                \r",
															"                //Check the data\r",
															"                var jsonData = response.json().data;\r",
															"                pm.test(\"payeefsp data should have the same transferId as request\", function () {\r",
															"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));\r",
															"                });\r",
															"                pm.test(\"payeefsp data should have the same payerfspId as request\", function () {\r",
															"                  pm.expect(jsonData.payerFsp).to.eql('payerfsp');\r",
															"                });\r",
															"                pm.test(\"payeefsp data should have the same payeefspId as request\", function () {\r",
															"                  pm.expect('payeefsp');\r",
															"                });\r",
															"                pm.test(\"payeefsp data should have the same amount as request\", function () {\r",
															"                  pm.expect(jsonData.amount.amount).to.eql('1');\r",
															"                });\r",
															"                pm.test(\"payeefsp data should have the same currency as request\", function () {\r",
															"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));\r",
															"                });\r",
															"                pm.test(\"payeefsp data should have the same expiration as request\", function () {\r",
															"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));\r",
															"                });\r",
															"                pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {\r",
															"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));\r",
															"                });\r",
															"                pm.test(\"payeefsp data should have the same condition as request\", function () {\r",
															"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));\r",
															"                });\r",
															"                \r",
															"          } else {\r",
															"              pm.test(\"Transfer FAILED\", function () {\r",
															"                throw new Error('Did not receive response on payee side');\r",
															"              });\r",
															"              postman.setNextRequest(null)\r",
															"          }\r",
															"  });\r",
															"}, 1500)\r",
															"\r",
															"//Check the callback response that Switch forwards to payerfsp\r",
															"setTimeout(function () {\r",
															"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
															"          if(response.responseSize !== 0) {\r",
															"            //Checking headers\r",
															"            var headers = response.json().headers;\r",
															"            pm.test(\"payerfsp fspiop-source is goldenpayeefsp \", function () {\r",
															"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');\r",
															"            });\r",
															"            \r",
															"            pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {\r",
															"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');\r",
															"            });\r",
															"            \r",
															"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {\r",
															"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
															"            });\r",
															"            \r",
															"            pm.test(\"payerfsp accept is empty\", function () {\r",
															"                pm.expect(headers['accept']).to.eql(undefined);\r",
															"            });\r",
															"            \r",
															"            \r",
															"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {\r",
															"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));\r",
															"            });\r",
															"            \r",
															"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {\r",
															"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
															"            });\r",
															"            \r",
															"            var jsonData = response.json().data;\r",
															"            pm.test(\"Response data does not have transferId\", function () {\r",
															"               pm.expect(jsonData.transferId).to.eql(undefined);\r",
															"            });\r",
															"            pm.test(\"Response status is COMMITTED\", function () {\r",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');\r",
															"            });\r",
															"            pm.test(\"Response fulfillment is not null\", function () {\r",
															"                pm.expect(jsonData.fulfilment).not.eql(undefined);\r",
															"                pm.environment.set('DupTransferFulfillment',jsonData.fulfilment)\r",
															"            });\r",
															"          } else {\r",
															"              pm.test(\"Transfer FAILED\", function () {\r",
															"                throw new Error('Did not receive response on payer side');\r",
															"              });\r",
															"              postman.setNextRequest(null)\r",
															"          }\r",
															"   });\r",
															"}, 1500)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "20820c95-0a24-4906-a6ba-708d6ecf4a61",
														"exec": [
															"var navigator = {}; //fake a navigator object for the lib\r",
															"var window = {}; //fake a window object for the lib\r",
															"eval(pm.environment.get('jrsassign'));\r",
															"\r",
															"var uuid = require('uuid');\r",
															"var generatedUUID = uuid.v4();\r",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
															"\r",
															"\r",
															"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
															"\r",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
															"\r",
															"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};\r",
															"var sHeader = JSON.stringify(oHeader);\r",
															"console.log(`sHeader: ${sHeader}`)\r",
															"\r",
															"var objPayload = {\r",
															"  \"transferId\": pm.environment.get('transfer_ID'),\r",
															"  \"payerFsp\": \"payerfsp\",\r",
															"  \"payeeFsp\": \"payeefsp\",\r",
															"  \"amount\": {\r",
															"    \"amount\": \"1\",\r",
															"    \"currency\": pm.environment.get('currency')\r",
															"  },\r",
															"  \"expiration\": pm.environment.get('transferExpiration'),\r",
															"  \"ilpPacket\": pm.environment.get('ilpPacket'),\r",
															"  \"condition\": pm.environment.get('condition')\r",
															"}\r",
															"var sPayload = JSON.stringify(objPayload)\r",
															"console.log(`sPayload: ${sPayload}`)\r",
															"pm.variables.set(\"transferRequest\", sPayload);\r",
															"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));\r",
															"//console.log(`token: ${token}`)\r",
															"\r",
															"// var encodedHeaders = btoa(sHeader)\r",
															"\r",
															"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
															"// var token = JSON.stringify(ofspiopSignature)\r",
															"\r",
															"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
															"\r",
															"const signatureObject = {\r",
															"    signature: signature.replace('\"', ''),\r",
															"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
															"};\r",
															"\r",
															"console.log(JSON.stringify(signatureObject))\r",
															"\r",
															"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYERFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"type": "text"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}",
														"type": "text"
													},
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "payeefsp",
														"type": "text"
													},
													{
														"key": "FSPIOP-Signature",
														"value": "{{fspiopSignature}}",
														"type": "text"
													},
													{
														"key": "FSPIOP-URI",
														"value": "/transfers",
														"type": "text"
													},
													{
														"key": "FSPIOP-HTTP-Method",
														"value": "POST",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{transferRequest}}"
												},
												"url": {
													"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers",
													"host": [
														"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Duplicate Transfer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "900142b0-e4d7-43a4-a751-38202b600661",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"           var jsonData = response.json().data;",
															"              var headers = response.json().headers",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"          ",
															"              pm.test(\"fspiop-source is switch\", function () {",
															"                pm.expect(headers['fspiop-source']).to.eql('switch');",
															"              });",
															"              ",
															"              pm.test(\"fspiop-destination is payerfsp\", function () {",
															"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"              });",
															"              ",
															"              pm.test(\"content-type is application/vnd.interoperability.transfers+json;version=1.0\", function () {",
															"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"                });",
															"                ",
															"                pm.test(\"accept is empty\", function () {",
															"                    pm.expect(headers['accept']).to.eql(undefined);",
															"                });",
															"                ",
															"                pm.test(\"fspiop-signature is not null\", function () {",
															"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
															"                });",
															"                ",
															"                pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
															"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
															"                });",
															"                ",
															"                pm.test(`payeefsp fspiop-uri is /transfers/${pm.environment.get('transfer_ID')}`, function () {",
															"                    pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${pm.environment.get('transfer_ID')}`);",
															"                });",
															"              ",
															"               //Check data    ",
															"             ",
															"              ",
															"              pm.test(\"Response State is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql(\"COMMITTED\");",
															"              });",
															"              ",
															"              pm.test(\"Response fulfillmet is same as sent in request'\", function () {",
															"                pm.expect(jsonData.fulfilment).to.eql(pm.environment.get('DupTransferFulfillment'));",
															"              });",
															"              ",
															"              ",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response on payer side');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 1500)",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "20820c95-0a24-4906-a6ba-708d6ecf4a61",
														"exec": [
															"var navigator = {}; //fake a navigator object for the lib\r",
															"var window = {}; //fake a window object for the lib\r",
															"eval(pm.environment.get('jrsassign'));\r",
															"\r",
															"var uuid = require('uuid');\r",
															"var generatedUUID = uuid.v4();\r",
															"//pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
															"\r",
															"\r",
															"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
															"\r",
															"//pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
															"\r",
															"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};\r",
															"var sHeader = JSON.stringify(oHeader);\r",
															"console.log(`sHeader: ${sHeader}`)\r",
															"\r",
															"var objPayload = {\r",
															"  \"transferId\": pm.environment.get('transfer_ID'),\r",
															"  \"payerFsp\": \"payerfsp\",\r",
															"  \"payeeFsp\": \"payeefsp\",\r",
															"  \"amount\": {\r",
															"    \"amount\": \"1\",\r",
															"    \"currency\": pm.environment.get('currency')\r",
															"  },\r",
															"  \"expiration\": pm.environment.get('transferExpiration'),\r",
															"  \"ilpPacket\": pm.environment.get('ilpPacket'),\r",
															"  \"condition\": pm.environment.get('condition')\r",
															"}\r",
															"var sPayload = JSON.stringify(objPayload)\r",
															"console.log(`sPayload: ${sPayload}`)\r",
															"pm.variables.set(\"transferRequest\", sPayload);\r",
															"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));\r",
															"//console.log(`token: ${token}`)\r",
															"\r",
															"// var encodedHeaders = btoa(sHeader)\r",
															"\r",
															"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
															"// var token = JSON.stringify(ofspiopSignature)\r",
															"\r",
															"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
															"\r",
															"const signatureObject = {\r",
															"    signature: signature.replace('\"', ''),\r",
															"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
															"};\r",
															"\r",
															"console.log(JSON.stringify(signatureObject))\r",
															"\r",
															"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYERFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"type": "text"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}",
														"type": "text"
													},
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "payeefsp",
														"type": "text"
													},
													{
														"key": "FSPIOP-Signature",
														"value": "{{fspiopSignature}}",
														"type": "text"
													},
													{
														"key": "FSPIOP-URI",
														"value": "/transfers",
														"type": "text"
													},
													{
														"key": "FSPIOP-HTTP-Method",
														"value": "POST",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{transferRequest}}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "fulfill_commit",
									"item": [
										{
											"name": "positive",
											"item": [
												{
													"name": "Send Quote - RECEIVE",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"var navigator = {}; ",
																	"var window = {}; ",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('quoteId', generatedUUID);",
																	"generatedUUID = uuid.v4();",
																	"pm.environment.set('transactionId', generatedUUID);",
																	"",
																	"pm.variables.set('quoteDate', (new Date()).toUTCString());",
																	"pm.variables.set('payerName', 'PayerFirst PayerLast');",
																	"pm.variables.set('payerMSISDN', '918381008987');",
																	"",
																	"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
																	"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
																	"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"  \"quoteId\": pm.environment.get('quoteId'),",
																	"  \"transactionId\": pm.environment.get('transactionId'),",
																	"  \"payer\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
																	"      \"fspId\": \"payerfsp\"",
																	"    },",
																	"    \"personalInfo\": {",
																	"      \"complexName\": {",
																	"        \"firstName\": \"Mats\",",
																	"        \"lastName\": \"Hagman\"",
																	"      },",
																	"      \"dateOfBirth\": \"1983-10-25\"",
																	"    }",
																	"  },",
																	"  \"payee\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
																	"      \"fspId\": \"payeefsp\"",
																	"    }",
																	"  },",
																	"  \"amountType\": \"RECEIVE\",",
																	"  \"amount\": {",
																	"    \"amount\": \"1\",",
																	"    \"currency\": pm.environment.get('currency')",
																	"  },",
																	"  \"transactionType\": {",
																	"    \"scenario\": \"TRANSFER\",",
																	"    \"initiator\": \"PAYER\",",
																	"    \"initiatorType\": \"CONSUMER\"",
																	"  },",
																	"  \"note\": \"hej\"",
																	"}",
																	"",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"quoteRequest\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
																	"console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              ",
																	"              //Check the Headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
																	"                });",
																	"                ",
																	"          } else {",
																	"              pm.test(\"Quote FAILED\", function () {",
																	"                throw new Error('Did not receive request on payee side');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 1100)",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
																	"      if(response.responseSize !== 0) {",
																	"          //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"            // var strData = JSON.stringify(response.json().data)",
																	"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
																	"            // console.log(`token: ${token}`)",
																	"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
																	"            // console.log(`isValid: ${isValid}`)",
																	"            // pm.test(\"Check if the response is JWS valid\", function () {",
																	"            //     pm.expect(isValid).to.eql(true);",
																	"            // });",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);",
																	"            });",
																	"           ",
																	"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            ",
																	"            pm.test(\"Response quoteId is  null\", function () {",
																	"                pm.expect(jsonData.quoteId).to.eql(undefined);",
																	"                ",
																	"            });",
																	"          ",
																	"            pm.test(\"Response ilpPacket is not null\", function () {",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
																	"            });",
																	"       ",
																	"           pm.test(\"Response condition is not null\", function () {",
																	"               pm.expect(jsonData.condition).not.equal(undefined);",
																	"               pm.environment.set(\"condition\", jsonData.condition);",
																	"           });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response on Payer side');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 1000)",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "payeefsp"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiopSignature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/quotes"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{quoteRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Transfer-Prepare",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
																"exec": [
																	"",
																	"var navigator = {}; //fake a navigator object for the lib",
																	"var window = {}; //fake a window object for the lib",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																	"",
																	"",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"noresponsepayeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"  \"transferId\": pm.environment.get('transfer_ID'),",
																	"  \"payerFsp\": \"payerfsp\",",
																	"  \"payeeFsp\": \"noresponsepayeefsp\",",
																	"  \"amount\": {",
																	"    \"amount\": \"1\",",
																	"    \"currency\": pm.environment.get('currency')",
																	"  },",
																	"  \"expiration\": pm.environment.get('transferExpiration'),",
																	"  \"ilpPacket\": pm.environment.get('ilpPacket'),",
																	"  \"condition\": pm.environment.get('validCondition')",
																	"}",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"transferRequest\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
																	"//console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "noresponsepayeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Fulfill",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2e244cfd-ff69-448a-8b62-176d4dd0b28d",
																"exec": [
																	"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
																	"var navigator = {}; //fake a navigator object for the lib",
																	"var window = {}; //fake a window object for the lib",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"//pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																	"",
																	"",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payeefsp\",\"FSPIOP-Destination\":\"payerfsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"PUT\", \"Date\":pm.variables.get('transferDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"    ",
																	"  \"fulfilment\": pm.environment.get('validFulfillment'),",
																	"  \"completedTimestamp\": pm.environment.get('completedTimestamp'),",
																	"  \"transferState\": \"COMMITTED\"",
																	"}",
																	"",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"transferResponse\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payeefspJWSKey'));",
																	"//console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "358f8ed8-6882-4c54-8dfd-177607c9e07b",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                //Uncomment after JWS is implemented",
																	"                // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
																	"                //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
																	"                // });",
																	"                ",
																	"                ",
																	"                pm.test(\"payeefsp content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"              //Check data",
																	"              var jsonData = response.json().data;",
																	"              pm.test(\"Response transferState should be COMMITTED\", function () {",
																	"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
																	"              });",
																	"              ",
																	"              pm.test(\"Response fulfilment should be same as in request\", function () {",
																	"                pm.expect(jsonData.fulfilment).to.eql(pm.environment.get(\"validFulfillment\"));",
																	"              });",
																	"              ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 5000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{NORESPONSEPAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "noresponsepayeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "payerfsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "PUT",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferResponse}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Duplicate Fulfill",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2e244cfd-ff69-448a-8b62-176d4dd0b28d",
																"exec": [
																	"var navigator = {}; //fake a navigator object for the lib",
																	"var window = {}; //fake a window object for the lib",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"//pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																	"",
																	"",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());",
																	"",
																	"//pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"noresponsepayeefsp\",\"FSPIOP-Destination\":\"payerfsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"PUT\", \"Date\":pm.variables.get('transferDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`);",
																	"",
																	"var objPayload = {",
																	"    ",
																	"  \"fulfilment\": pm.environment.get('validFulfillment'),",
																	"  \"completedTimestamp\": pm.environment.get('completedTimestamp'),",
																	"  \"transferState\": \"COMMITTED\"",
																	"}",
																	"",
																	"var sPayload = JSON.stringify(objPayload);",
																	"console.log(`sPayload: ${sPayload}`);",
																	"pm.variables.set(\"transferResponse2\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payeefspJWSKey'));",
																	"//console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "358f8ed8-6882-4c54-8dfd-177607c9e07b",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"            //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is switch\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('switch');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is noresponsepayeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('noresponsepayeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\" content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-signature is not null\", function () {",
																	"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"                });",
																	"                ",
																	"                pm.test(`payeefsp fspiop-uri is /transfers/${pm.environment.get('transfer_ID')}`, function () {",
																	"                    pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${pm.environment.get('transfer_ID')}`);",
																	"                });",
																	"                ",
																	"             //Check data    ",
																	"              var jsonData = response.json().data;",
																	"              pm.test(\"Response transferState should be COMMITTED\", function () {",
																	"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
																	"              });",
																	"              ",
																	"              pm.test(\"Response fulfilment should be same as in request\", function () {",
																	"                pm.expect(jsonData.fulfilment).to.eql(pm.environment.get(\"validFulfillment\"));",
																	"              });",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response on payer side');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 1300)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{NORESPONSEPAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "noresponsepayeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "payerfsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "PUT",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferResponse2}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nTo test this feature, since there is no simulator as noresponsepayeefsp, the endpoints for it is set to payeefsp's endpoint. so in the tests, you get the response from payeefsp/callbacks and do assertions."
													},
													"response": []
												},
												{
													"name": "Check Transfer status",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
																"exec": [
																	"",
																	"   pm.variables.set('transferDate', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "6c54bbb2-0b33-4301-86ae-751142923a4c",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"            //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is switch\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('switch');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                pm.test(\" content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-signature is not null\", function () {",
																	"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\" fspiop-http-method is PUT\", function () {",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"                });",
																	"                ",
																	"                pm.test(` fspiop-uri is /transfers/${pm.environment.get('transfer_ID')}`, function () {",
																	"                    pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${pm.environment.get('transfer_ID')}`);",
																	"                });",
																	"                ",
																	"             //Check data    ",
																	"              var jsonData = response.json().data;",
																	"              pm.test(\"Response transferState should be COMMITTED\", function () {",
																	"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
																	"              });",
																	"              ",
																	"              pm.test(\"Response fulfilment should be same as in request\", function () {",
																	"                pm.expect(jsonData.fulfilment).to.eql(pm.environment.get(\"validFulfillment\"));",
																	"              });",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response on payer side');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 1300)",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "negative",
											"item": [
												{
													"name": "Send Quote - RECEIVE",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"var navigator = {}; ",
																	"var window = {}; ",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('quoteId', generatedUUID);",
																	"generatedUUID = uuid.v4();",
																	"pm.environment.set('transactionId', generatedUUID);",
																	"",
																	"pm.variables.set('quoteDate', (new Date()).toUTCString());",
																	"pm.variables.set('payerName', 'PayerFirst PayerLast');",
																	"pm.variables.set('payerMSISDN', '918381008987');",
																	"",
																	"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
																	"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
																	"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"  \"quoteId\": pm.environment.get('quoteId'),",
																	"  \"transactionId\": pm.environment.get('transactionId'),",
																	"  \"payer\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
																	"      \"fspId\": \"payerfsp\"",
																	"    },",
																	"    \"personalInfo\": {",
																	"      \"complexName\": {",
																	"        \"firstName\": \"Mats\",",
																	"        \"lastName\": \"Hagman\"",
																	"      },",
																	"      \"dateOfBirth\": \"1983-10-25\"",
																	"    }",
																	"  },",
																	"  \"payee\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
																	"      \"fspId\": \"payeefsp\"",
																	"    }",
																	"  },",
																	"  \"amountType\": \"RECEIVE\",",
																	"  \"amount\": {",
																	"    \"amount\": \"1\",",
																	"    \"currency\": pm.environment.get('currency')",
																	"  },",
																	"  \"transactionType\": {",
																	"    \"scenario\": \"TRANSFER\",",
																	"    \"initiator\": \"PAYER\",",
																	"    \"initiatorType\": \"CONSUMER\"",
																	"  },",
																	"  \"note\": \"hej\"",
																	"}",
																	"",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"quoteRequest\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
																	"console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              ",
																	"              //Check the Headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
																	"                });",
																	"                ",
																	"          } else {",
																	"              pm.test(\"Quote FAILED\", function () {",
																	"                throw new Error('Did not receive request on payee side');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 1100)",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
																	"      if(response.responseSize !== 0) {",
																	"          //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"            // var strData = JSON.stringify(response.json().data)",
																	"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
																	"            // console.log(`token: ${token}`)",
																	"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
																	"            // console.log(`isValid: ${isValid}`)",
																	"            // pm.test(\"Check if the response is JWS valid\", function () {",
																	"            //     pm.expect(isValid).to.eql(true);",
																	"            // });",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);",
																	"            });",
																	"           ",
																	"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            ",
																	"            pm.test(\"Response quoteId is  null\", function () {",
																	"                pm.expect(jsonData.quoteId).to.eql(undefined);",
																	"                ",
																	"            });",
																	"          ",
																	"            pm.test(\"Response ilpPacket is not null\", function () {",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
																	"            });",
																	"       ",
																	"           pm.test(\"Response condition is not null\", function () {",
																	"               pm.expect(jsonData.condition).not.equal(undefined);",
																	"               pm.environment.set(\"condition\", jsonData.condition);",
																	"           });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response on Payer side');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 1000)",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "payeefsp"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiopSignature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/quotes"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{quoteRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Transfer-Prepare",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
																"exec": [
																	"",
																	"var navigator = {}; //fake a navigator object for the lib",
																	"var window = {}; //fake a window object for the lib",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																	"",
																	"",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"noresponsepayeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"  \"transferId\": pm.environment.get('transfer_ID'),",
																	"  \"payerFsp\": \"payerfsp\",",
																	"  \"payeeFsp\": \"noresponsepayeefsp\",",
																	"  \"amount\": {",
																	"    \"amount\": \"10\",",
																	"    \"currency\": pm.environment.get('currency')",
																	"  },",
																	"  \"expiration\": pm.environment.get('transferExpiration'),",
																	"  \"ilpPacket\": pm.environment.get('ilpPacket'),",
																	"  \"condition\": pm.environment.get('validCondition')",
																	"}",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"transferRequest\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
																	"//console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "noresponsepayeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Fulfill",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2e244cfd-ff69-448a-8b62-176d4dd0b28d",
																"exec": [
																	"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
																	"var navigator = {}; //fake a navigator object for the lib",
																	"var window = {}; //fake a window object for the lib",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																	"",
																	"",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"noresponsepayeefsp\",\"FSPIOP-Destination\":\"payerfsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"PUT\", \"Date\":pm.variables.get('transferDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"    ",
																	"  \"fulfilment\": pm.environment.get('validFulfillment'),",
																	"  \"completedTimestamp\": pm.environment.get('completedTimestamp'),",
																	"  \"transferState\": \"COMMITTED\"",
																	"}",
																	"",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"transferResponse\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('noresponsepayeefspJWSKey'));",
																	"//console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "358f8ed8-6882-4c54-8dfd-177607c9e07b",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"             //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-signature is not empty\", function () {",
																	"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-uri contains\"+pm.environment.get('transfer_ID'), function () {",
																	"                    pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${pm.environment.get('transfer_ID')}`);",
																	"                });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"                ",
																	"             //Check data    ",
																	"              var jsonData = response.json().data;",
																	"              ",
																	"              pm.test(\"Response transferState should be COMMITTED\", function () {",
																	"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
																	"              });",
																	"              ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response on payer side');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 1000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{NORESPONSEPAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "noresponsepayeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "payerfsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "PUT",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferResponse}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers/{{transfer_ID}}",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Invalid Duplicate Fulfill",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2e244cfd-ff69-448a-8b62-176d4dd0b28d",
																"exec": [
																	"pm.variables.set(\"updatedTimestamp\",new Date().toISOString());",
																	"var navigator = {}; //fake a navigator object for the lib",
																	"var window = {}; //fake a window object for the lib",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																	"",
																	"",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"noresponsepayeefsp\",\"FSPIOP-Destination\":\"payerfsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"PUT\", \"Date\":pm.variables.get('transferDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"    ",
																	"  \"fulfilment\": pm.environment.get('invalidFulfillment'),",
																	"  \"completedTimestamp\": pm.variables.get('updatedTimestamp'),",
																	"  \"transferState\": \"COMMITTED\"",
																	"}",
																	"",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"transferResponse\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payeefspJWSKey'));",
																	"//console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "358f8ed8-6882-4c54-8dfd-177607c9e07b",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"             //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is switch\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('switch');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is noresponsepayeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('noresponsepayeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-signature is not empty\", function () {",
																	"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-uri contains\"+pm.environment.get('transfer_ID'), function () {",
																	"                    pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${pm.environment.get('transfer_ID')}/error`);",
																	"                });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"                ",
																	"             //Check data    ",
																	"              var jsonData = response.json().data;",
																	"              ",
																	"              pm.test(\"Response Error Code is 3106\", function () {",
																	"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3106');",
																	"              });",
																	"              ",
																	"              pm.test(\"Response Error Desription is 'Modified request'\", function () {",
																	"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Modified request');",
																	"              });",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response on payer side');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 1300)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{NORESPONSEPAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "noresponsepayeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "payerfsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "PUT",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferResponse}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers/{{transfer_ID}}",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"description": "Send a transfer-prepare from payerfsp to payeefsp\nDo not send transfer-fulfil from payeefsp.\n\nSend a duplicate transfer-prepare with same params.\ncheck the simulator logs to make sure that there should not be any response for the duplicate transfer when the actual transfer is not at terminal state which means neither committed nor aborted but in process.\n\nThis is same as sending duplicate transfer when actual transfer is at ABORTED state.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb820baa-0cb0-4c41-9955-8f96395d68a6",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "61fcc61f-21fc-4b4f-b320-c64702d73893",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "fulfill_reject (not complete)",
									"item": [
										{
											"name": "positive",
											"item": [
												{
													"name": "Send Quote - RECEIVE",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"var navigator = {}; ",
																	"var window = {}; ",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('quoteId', generatedUUID);",
																	"generatedUUID = uuid.v4();",
																	"pm.environment.set('transactionId', generatedUUID);",
																	"",
																	"pm.variables.set('quoteDate', (new Date()).toUTCString());",
																	"pm.variables.set('payerName', 'PayerFirst PayerLast');",
																	"pm.variables.set('payerMSISDN', '918381008987');",
																	"",
																	"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
																	"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
																	"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"  \"quoteId\": pm.environment.get('quoteId'),",
																	"  \"transactionId\": pm.environment.get('transactionId'),",
																	"  \"payer\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
																	"      \"fspId\": \"payerfsp\"",
																	"    },",
																	"    \"personalInfo\": {",
																	"      \"complexName\": {",
																	"        \"firstName\": \"Mats\",",
																	"        \"lastName\": \"Hagman\"",
																	"      },",
																	"      \"dateOfBirth\": \"1983-10-25\"",
																	"    }",
																	"  },",
																	"  \"payee\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
																	"      \"fspId\": \"payeefsp\"",
																	"    }",
																	"  },",
																	"  \"amountType\": \"RECEIVE\",",
																	"  \"amount\": {",
																	"    \"amount\": \"1\",",
																	"    \"currency\": pm.environment.get('currency')",
																	"  },",
																	"  \"transactionType\": {",
																	"    \"scenario\": \"TRANSFER\",",
																	"    \"initiator\": \"PAYER\",",
																	"    \"initiatorType\": \"CONSUMER\"",
																	"  },",
																	"  \"note\": \"hej\"",
																	"}",
																	"",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"quoteRequest\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
																	"console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              ",
																	"              //Check the Headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
																	"                });",
																	"                ",
																	"          } else {",
																	"              pm.test(\"Quote FAILED\", function () {",
																	"                throw new Error('Did not receive request on payee side');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 1100)",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
																	"      if(response.responseSize !== 0) {",
																	"          //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"            // var strData = JSON.stringify(response.json().data)",
																	"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
																	"            // console.log(`token: ${token}`)",
																	"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
																	"            // console.log(`isValid: ${isValid}`)",
																	"            // pm.test(\"Check if the response is JWS valid\", function () {",
																	"            //     pm.expect(isValid).to.eql(true);",
																	"            // });",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);",
																	"            });",
																	"           ",
																	"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            ",
																	"            pm.test(\"Response quoteId is  null\", function () {",
																	"                pm.expect(jsonData.quoteId).to.eql(undefined);",
																	"                ",
																	"            });",
																	"          ",
																	"            pm.test(\"Response ilpPacket is not null\", function () {",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
																	"            });",
																	"       ",
																	"           pm.test(\"Response condition is not null\", function () {",
																	"               pm.expect(jsonData.condition).not.equal(undefined);",
																	"               pm.environment.set(\"condition\", jsonData.condition);",
																	"           });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response on Payer side');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 1000)",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "payeefsp"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiopSignature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/quotes"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{quoteRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Transfer-Prepare",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
																"exec": [
																	"",
																	"var navigator = {}; //fake a navigator object for the lib",
																	"var window = {}; //fake a window object for the lib",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																	"",
																	"",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"noresponsepayeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"  \"transferId\": pm.environment.get('transfer_ID'),",
																	"  \"payerFsp\": \"payerfsp\",",
																	"  \"payeeFsp\": \"noresponsepayeefsp\",",
																	"  \"amount\": {",
																	"    \"amount\": \"10\",",
																	"    \"currency\": pm.environment.get('currency')",
																	"  },",
																	"  \"expiration\": pm.environment.get('transferExpiration'),",
																	"  \"ilpPacket\": pm.environment.get('ilpPacket'),",
																	"  \"condition\": pm.environment.get('validCondition')",
																	"}",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"transferRequest\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
																	"//console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "noresponsepayeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Fulfill-Reject",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2e244cfd-ff69-448a-8b62-176d4dd0b28d",
																"exec": [
																	"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
																	"var navigator = {}; //fake a navigator object for the lib",
																	"var window = {}; //fake a window object for the lib",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																	"",
																	"",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"\t\"errorInformation\": {",
																	"\t\t\"errorCode\": \"5101\",",
																	"\t\t\"errorDescription\": \"Payee transaction limit reached\",",
																	"\t\t\"extensionList\": {",
																	"\t\t\t\"extension\": [{",
																	"\t\t\t\t\"key\": \"errorDetail\",",
																	"\t\t\t\t\"value\": \"This is an abort extension\"",
																	"\t\t\t}]",
																	"\t\t}",
																	"\t}",
																	"}",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"fulfillResponse\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('noresponsepayeefspJWSKey'));",
																	"//console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "358f8ed8-6882-4c54-8dfd-177607c9e07b",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payerfsp content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"payerfsp fspiop-signature is not null\", function () {",
																	"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"                });",
																	"                ",
																	"                pm.test(`payerfsp fspiop-uri is /transfers/${pm.environment.get('transfer_ID')}`, function () {",
																	"                    pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${pm.environment.get('transfer_ID')}`);",
																	"                });",
																	"                ",
																	"              //Check data",
																	"              var jsonData = response.json().data;",
																	"              pm.test(\"Response Error Code is 5101\", function () {",
																	"                pm.expect(jsonData.errorInformation.errorCode).to.eql('5101');",
																	"              });",
																	"              ",
																	"              pm.test(\"Response Error Desription is 'Payee transaction limit reached'\", function () {",
																	"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Payee transaction limit reached');",
																	"              });",
																	"              ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 5000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{NORESPONSEPAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.transfers+json;version=1.0"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "noresponsepayeefsp"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "PUT",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers/{{transfer_ID}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{fulfillResponse}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers/{{transfer_ID}}/error",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}",
																"error"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Duplicate Fulfill-Reject",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2e244cfd-ff69-448a-8b62-176d4dd0b28d",
																"exec": [
																	"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
																	"var navigator = {}; //fake a navigator object for the lib",
																	"var window = {}; //fake a window object for the lib",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																	"",
																	"",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"\t\"errorInformation\": {",
																	"\t\t\"errorCode\": \"5101\",",
																	"\t\t\"errorDescription\": \"Payee transaction limit reached\",",
																	"\t\t\"extensionList\": {",
																	"\t\t\t\"extension\": [{",
																	"\t\t\t\t\"key\": \"errorDetail\",",
																	"\t\t\t\t\"value\": \"This is an abort extension\"",
																	"\t\t\t}]",
																	"\t\t}",
																	"\t}",
																	"}",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"fulfillResponse\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('noresponsepayeefspJWSKey'));",
																	"//console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "358f8ed8-6882-4c54-8dfd-177607c9e07b",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payerfsp content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"payerfsp fspiop-signature is not null\", function () {",
																	"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"                });",
																	"                ",
																	"                pm.test(`payerfsp fspiop-uri is /transfers/${pm.environment.get('transfer_ID')}`, function () {",
																	"                    pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${pm.environment.get('transfer_ID')}`);",
																	"                });",
																	"                ",
																	"              //Check data",
																	"              var jsonData = response.json().data;",
																	"              pm.test(\"Response Error Code is 5101\", function () {",
																	"                pm.expect(jsonData.errorInformation.errorCode).to.eql('5101');",
																	"              });",
																	"              ",
																	"              pm.test(\"Response Error Desription is 'Payee transaction limit reached'\", function () {",
																	"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Payee transaction limit reached');",
																	"              });",
																	"              ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 5000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{NORESPONSEPAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "noresponsepayeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "PUT",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers/{{transfer_ID}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{fulfillResponse}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers/{{transfer_ID}}/error",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}",
																"error"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "negative",
											"item": [
												{
													"name": "Send Quote - RECEIVE",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"var navigator = {}; ",
																	"var window = {}; ",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('quoteId', generatedUUID);",
																	"generatedUUID = uuid.v4();",
																	"pm.environment.set('transactionId', generatedUUID);",
																	"",
																	"pm.variables.set('quoteDate', (new Date()).toUTCString());",
																	"pm.variables.set('payerName', 'PayerFirst PayerLast');",
																	"pm.variables.set('payerMSISDN', '918381008987');",
																	"",
																	"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
																	"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
																	"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"  \"quoteId\": pm.environment.get('quoteId'),",
																	"  \"transactionId\": pm.environment.get('transactionId'),",
																	"  \"payer\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
																	"      \"fspId\": \"payerfsp\"",
																	"    },",
																	"    \"personalInfo\": {",
																	"      \"complexName\": {",
																	"        \"firstName\": \"Mats\",",
																	"        \"lastName\": \"Hagman\"",
																	"      },",
																	"      \"dateOfBirth\": \"1983-10-25\"",
																	"    }",
																	"  },",
																	"  \"payee\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
																	"      \"fspId\": \"payeefsp\"",
																	"    }",
																	"  },",
																	"  \"amountType\": \"RECEIVE\",",
																	"  \"amount\": {",
																	"    \"amount\": \"1\",",
																	"    \"currency\": pm.environment.get('currency')",
																	"  },",
																	"  \"transactionType\": {",
																	"    \"scenario\": \"TRANSFER\",",
																	"    \"initiator\": \"PAYER\",",
																	"    \"initiatorType\": \"CONSUMER\"",
																	"  },",
																	"  \"note\": \"hej\"",
																	"}",
																	"",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"quoteRequest\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
																	"console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              ",
																	"              //Check the Headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
																	"                });",
																	"                ",
																	"          } else {",
																	"              pm.test(\"Quote FAILED\", function () {",
																	"                throw new Error('Did not receive request on payee side');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 1100)",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
																	"      if(response.responseSize !== 0) {",
																	"          //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"            // var strData = JSON.stringify(response.json().data)",
																	"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
																	"            // console.log(`token: ${token}`)",
																	"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
																	"            // console.log(`isValid: ${isValid}`)",
																	"            // pm.test(\"Check if the response is JWS valid\", function () {",
																	"            //     pm.expect(isValid).to.eql(true);",
																	"            // });",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);",
																	"            });",
																	"           ",
																	"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            ",
																	"            pm.test(\"Response quoteId is  null\", function () {",
																	"                pm.expect(jsonData.quoteId).to.eql(undefined);",
																	"                ",
																	"            });",
																	"          ",
																	"            pm.test(\"Response ilpPacket is not null\", function () {",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
																	"            });",
																	"       ",
																	"           pm.test(\"Response condition is not null\", function () {",
																	"               pm.expect(jsonData.condition).not.equal(undefined);",
																	"               pm.environment.set(\"condition\", jsonData.condition);",
																	"           });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response on Payer side');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 1000)",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "payeefsp"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiopSignature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/quotes"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{quoteRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Transfer-Prepare",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
																"exec": [
																	"",
																	"var navigator = {}; //fake a navigator object for the lib",
																	"var window = {}; //fake a window object for the lib",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																	"",
																	"",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"noresponsepayeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"  \"transferId\": pm.environment.get('transfer_ID'),",
																	"  \"payerFsp\": \"payerfsp\",",
																	"  \"payeeFsp\": \"noresponsepayeefsp\",",
																	"  \"amount\": {",
																	"    \"amount\": \"10\",",
																	"    \"currency\": pm.environment.get('currency')",
																	"  },",
																	"  \"expiration\": pm.environment.get('transferExpiration'),",
																	"  \"ilpPacket\": pm.environment.get('ilpPacket'),",
																	"  \"condition\": pm.environment.get('validCondition')",
																	"}",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"transferRequest\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
																	"//console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "noresponsepayeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Fulfill-Reject",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2e244cfd-ff69-448a-8b62-176d4dd0b28d",
																"exec": [
																	"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
																	"var navigator = {}; //fake a navigator object for the lib",
																	"var window = {}; //fake a window object for the lib",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																	"",
																	"",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"\t\"errorInformation\": {",
																	"\t\t\"errorCode\": \"5101\",",
																	"\t\t\"errorDescription\": \"Payee transaction limit reached\",",
																	"\t\t\"extensionList\": {",
																	"\t\t\t\"extension\": [{",
																	"\t\t\t\t\"key\": \"errorDetail\",",
																	"\t\t\t\t\"value\": \"This is an abort extension\"",
																	"\t\t\t}]",
																	"\t\t}",
																	"\t}",
																	"}",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"fulfillResponse\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('noresponsepayeefspJWSKey'));",
																	"//console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "358f8ed8-6882-4c54-8dfd-177607c9e07b",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payerfsp content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"payerfsp fspiop-signature is not null\", function () {",
																	"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"                });",
																	"                ",
																	"                pm.test(`payerfsp fspiop-uri is /transfers/${pm.environment.get('transfer_ID')}`, function () {",
																	"                    pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${pm.environment.get('transfer_ID')}`);",
																	"                });",
																	"                ",
																	"              //Check data",
																	"              var jsonData = response.json().data;",
																	"              pm.test(\"Response Error Code is 5101\", function () {",
																	"                pm.expect(jsonData.errorInformation.errorCode).to.eql('5101');",
																	"              });",
																	"              ",
																	"              pm.test(\"Response Error Desription is 'Payee transaction limit reached'\", function () {",
																	"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Payee transaction limit reached');",
																	"              });",
																	"              ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 5000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{NORESPONSEPAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "noresponsepayeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "PUT",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers/{{transfer_ID}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{fulfillResponse}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers/{{transfer_ID}}/error",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}",
																"error"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Invalid Duplicate Fulfill-Reject",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2e244cfd-ff69-448a-8b62-176d4dd0b28d",
																"exec": [
																	"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
																	"var navigator = {}; //fake a navigator object for the lib",
																	"var window = {}; //fake a window object for the lib",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																	"",
																	"",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"\t\"errorInformation\": {",
																	"\t\t\"errorCode\": \"5101\",",
																	"\t\t\"errorDescription\": \"This is an invalid duplicate request\",",
																	"\t\t\"extensionList\": {",
																	"\t\t\t\"extension\": [{",
																	"\t\t\t\t\"key\": \"errorDetail\",",
																	"\t\t\t\t\"value\": \"This is an abort extension\"",
																	"\t\t\t}]",
																	"\t\t}",
																	"\t}",
																	"}",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"fulfillResponse\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('noresponsepayeefspJWSKey'));",
																	"//console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "358f8ed8-6882-4c54-8dfd-177607c9e07b",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payerfsp content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"payerfsp fspiop-signature is not null\", function () {",
																	"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"                });",
																	"                ",
																	"                pm.test(`payerfsp fspiop-uri is /transfers/${pm.environment.get('transfer_ID')}`, function () {",
																	"                    pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${pm.environment.get('transfer_ID')}`);",
																	"                });",
																	"                ",
																	"              //Check data",
																	"              var jsonData = response.json().data;",
																	"              pm.test(\"Response Error Code is 5101\", function () {",
																	"                pm.expect(jsonData.errorInformation.errorCode).to.eql('5101');",
																	"              });",
																	"              ",
																	"              pm.test(\"Response Error Desription is 'Payee transaction limit reached'\", function () {",
																	"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Payee transaction limit reached');",
																	"              });",
																	"              ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 5000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{NORESPONSEPAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "noresponsepayeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "PUT",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers/{{transfer_ID}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{fulfillResponse}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers/{{transfer_ID}}/error",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}",
																"error"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"description": "Send a transfer-prepare from payerfsp to payeefsp\nDo not send transfer-fulfil from payeefsp.\n\nSend a duplicate transfer-prepare with same params.\ncheck the simulator logs to make sure that there should not be any response for the duplicate transfer when the actual transfer is not at terminal state which means neither committed nor aborted but in process.\n\nThis is same as sending duplicate transfer when actual transfer is at ABORTED state.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eb820baa-0cb0-4c41-9955-8f96395d68a6",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "61fcc61f-21fc-4b4f-b320-c64702d73893",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Active / Inactive participants (complete)",
					"item": [
						{
							"name": "089 - Active and inactive participant",
							"item": [
								{
									"name": "Update participant (testfsp2 to inactive)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cdcddd46-b72a-409d-aa0e-e9ec120e1ff8",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "FSPIOP-Source",
												"value": "hub_operator",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"isActive\": false\r\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2"
											]
										},
										"description": "Inactives participant testfsp4"
									},
									"response": []
								},
								{
									"name": "(BUG) Send Quote fail (testfsp1 to testfsp2)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"var navigator = {}; ",
													"var window = {}; ",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp1\",\"FSPIOP-Destination\":\"testfsp2\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
													"      \"fspId\": \"testfsp1\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"      \"dateOfBirth\": \"1983-10-25\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
													"      \"fspId\": \"testfsp2\"",
													"    }",
													"  },",
													"  \"amountType\": \"RECEIVE\",",
													"  \"amount\": {",
													"    \"amount\": \"60\",",
													"    \"currency\": pm.environment.get('currency')",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp1JWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
													"      if(response.responseSize !== 0) {",
													"          //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"testfsp1 fspiop-source is switch\", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('switch');",
													"            });",
													"            ",
													"            pm.test(\"testfsp1 fspiop-destination is testfsp1\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');",
													"            });",
													"            ",
													"            pm.test(\"testfsp1 content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"testfsp1 accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            ",
													"            ",
													"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"            // var strData = JSON.stringify(response.json().data)",
													"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
													"            // console.log(`token: ${token}`)",
													"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
													"            // console.log(`isValid: ${isValid}`)",
													"            // pm.test(\"Check if the response is JWS valid\", function () {",
													"            //     pm.expect(isValid).to.eql(true);",
													"            // });",
													"            ",
													"            //Validate protected header inside Signature",
													"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"            ",
													"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\")+'/error');",
													"            });",
													"            ",
													"",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be switch\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('switch');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be testfsp1\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('testfsp1');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);",
													"            });",
													"           ",
													"            pm.test(\"testfsp1 FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\")+'/error');",
													"            });",
													"            ",
													"            pm.test(\"testfsp1 fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            ",
													"            pm.test(\"Error code is 3201\", function () {",
													"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3201');",
													"            });",
													"           ",
													"           pm.test(\"Error Description is Destination FSP Error - Unsupported participant \", function () {",
													"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Destination FSP Error - Unsupported');",
													"           });",
													"           ",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('Did not receive response on Payer side');",
													"           });",
													"           postman.setNextRequest(null);",
													"      }",
													"       ",
													"   });",
													"}, 1000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "testfsp1"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "testfsp2"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "(BUG) Send Transfer fail(testfsp1 to testfsp2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "900142b0-e4d7-43a4-a751-38202b600661",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"//Check the callback response that Switch forwards to payerfsp",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"            //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"fspiop-source is switch \", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('switch');",
													"            });",
													"            ",
													"            pm.test(\"fspiop-destination is testfsp1\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');",
													"            });",
													"            ",
													"            pm.test(\"content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            pm.test(\"fspiop-signature is not empty\", function () {",
													"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
													"                });",
													"            ",
													"            ",
													"            pm.test(\"fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\")+'/error');",
													"            });",
													"            ",
													"            pm.test(\"fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            pm.test(\"Error code is 2001\", function () {",
													"                pm.expect(jsonData.errorInformation.errorCode).to.eql('2001');",
													"            });",
													"           ",
													"           pm.test(\"Error Description is Internal server error \", function () {",
													"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Internal server error');",
													"           });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response on payer side');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 1300)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "20820c95-0a24-4906-a6ba-708d6ecf4a61",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp1\",\"FSPIOP-Destination\":\"testfsp2\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"transferId\": pm.environment.get('transfer_ID'),",
													"  \"payerFsp\": \"testfsp1\",",
													"  \"payeeFsp\": \"testfsp2\",",
													"  \"amount\": {",
													"    \"amount\": \"10\",",
													"    \"currency\": pm.environment.get('currency')",
													"  },",
													"  \"expiration\": pm.environment.get('transferExpiration'),",
													"  \"ilpPacket\": pm.environment.get('ilpPacket'),",
													"  \"condition\": pm.environment.get('condition')",
													"}",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"transferRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp1JWSKey'));",
													"//console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "testfsp1"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "testfsp2"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/transfers"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transferRequest}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update participant (testfsp2 to active)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cdcddd46-b72a-409d-aa0e-e9ec120e1ff8",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "hub_operator"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n              \"isActive\": true\r\n            }"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2"
											]
										},
										"description": "Reactivate participant testfsp4"
									},
									"response": []
								},
								{
									"name": "Send Quote (testfsp1 to testfsp2) - pass",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"  var navigator = {}; ",
													"var window = {}; ",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp1\",\"FSPIOP-Destination\":\"testfsp2\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
													"      \"fspId\": \"testfsp1\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"      \"dateOfBirth\": \"1983-10-25\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
													"      \"fspId\": \"testfsp2\"",
													"    }",
													"  },",
													"  \"amountType\": \"RECEIVE\",",
													"  \"amount\": {",
													"    \"amount\": \"60\",",
													"    \"currency\": pm.environment.get('currency')",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp1JWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
												"exec": [
													"pm.test(\"Status code is 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});\r",
													"\r",
													"setTimeout(function () {\r",
													"  pm.sendRequest(pm.environment.get(\"TESTFSP2_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {\r",
													"          if(response.responseSize !== 0) {\r",
													"              \r",
													"              //Check the Headers\r",
													"              var headers = response.json().headers;\r",
													"              \r",
													"                pm.test(\"testfsp2 fspiop-source is testfsp1\", function () {\r",
													"                    pm.expect(headers['fspiop-source']).to.eql('testfsp1');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-destination is testfsp2\", function () {\r",
													"                    pm.expect(headers['fspiop-destination']).to.eql('testfsp2');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-signature is same as sent in the request\", function () {\r",
													"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 accept is same as sent in the request\", function () {\r",
													"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 content-typeis same as sent in the request\", function () {\r",
													"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-uri is /quotes\", function () {\r",
													"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-http-method is POST\", function () {\r",
													"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
													"                });\r",
													"                \r",
													"          } else {\r",
													"              pm.test(\"Quote FAILED\", function () {\r",
													"                throw new Error('Did not receive request on payee side');\r",
													"              });\r",
													"              postman.setNextRequest(null)\r",
													"          }\r",
													"   });\r",
													"}, 1100)\r",
													"\r",
													"setTimeout(function () {\r",
													"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {\r",
													"      if(response.responseSize !== 0) {\r",
													"          //Checking headers\r",
													"            var headers = response.json().headers;\r",
													"            pm.test(\"testfsp1 fspiop-source is testfsp2\", function () {\r",
													"                pm.expect(headers['fspiop-source']).to.eql('testfsp2');\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 fspiop-destination is testfsp1\", function () {\r",
													"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {\r",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 accept is empty\", function () {\r",
													"                pm.expect(headers['accept']).to.eql(undefined);\r",
													"            });\r",
													"            \r",
													"            \r",
													"            \r",
													"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])\r",
													"            // var strData = JSON.stringify(response.json().data)\r",
													"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`\r",
													"            // console.log(`token: ${token}`)\r",
													"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldentestfsp2JWSPubKey'), {alg: ['RS256']})\r",
													"            // console.log(`isValid: ${isValid}`)\r",
													"            // pm.test(\"Check if the response is JWS valid\", function () {\r",
													"            //     pm.expect(isValid).to.eql(true);\r",
													"            // });\r",
													"            \r",
													"            //Validate protected header inside Signature\r",
													"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))\r",
													"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)\r",
													"            \r",
													"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {\r",
													"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');\r",
													"            });\r",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
													"            });\r",
													"            \r",
													"\r",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {\r",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');\r",
													"            });\r",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldentestfsp2\", function () {\r",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('testfsp2');\r",
													"            });\r",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be testfsp1\", function () {\r",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('testfsp1');\r",
													"            });\r",
													"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {\r",
													"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);\r",
													"            });\r",
													"           \r",
													"            pm.test(\"testfsp1 FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
													"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 fspiop-http-method is PUT\", function () {\r",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
													"            });\r",
													"            \r",
													"            var jsonData = response.json().data;\r",
													"            \r",
													"            pm.test(\"Response quoteId is  null\", function () {\r",
													"                pm.expect(jsonData.quoteId).to.eql(undefined);\r",
													"                \r",
													"            });\r",
													"          \r",
													"            pm.test(\"Response ilpPacket is not null\", function () {\r",
													"                pm.expect(jsonData.ilpPacket).not.equal(undefined);\r",
													"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);\r",
													"            });\r",
													"       \r",
													"           pm.test(\"Response condition is not null\", function () {\r",
													"               pm.expect(jsonData.condition).not.equal(undefined);\r",
													"               pm.environment.set(\"condition\", jsonData.condition);\r",
													"           });\r",
													"      } else {\r",
													"          pm.test(\"Quote FAILED\", function () {\r",
													"            throw new Error('Did not receive response on Payer side');\r",
													"           });\r",
													"           postman.setNextRequest(null);\r",
													"      }\r",
													"       \r",
													"   });\r",
													"}, 1000)\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-Source",
												"value": "testfsp1",
												"type": "text"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "testfsp2",
												"type": "text"
											},
											{
												"key": "FSPIOP-Signature",
												"value": "{{fspiopSignature}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"value": "POST",
												"type": "text"
											},
											{
												"key": "FSPIOP-URI",
												"value": "/quotes",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Transfer ( testfsp1 to testfsp2 ) - pass",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib\r",
													"var window = {}; //fake a window object for the lib\r",
													"eval(pm.environment.get('jrsassign'));\r",
													"\r",
													"var uuid = require('uuid');\r",
													"var generatedUUID = uuid.v4();\r",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
													"\r",
													"\r",
													"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
													"\r",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
													"\r",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp1\",\"FSPIOP-Destination\":\"testfsp2\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};\r",
													"var sHeader = JSON.stringify(oHeader);\r",
													"console.log(`sHeader: ${sHeader}`)\r",
													"\r",
													"var objPayload = {\r",
													"  \"transferId\": pm.environment.get('transfer_ID'),\r",
													"  \"payerFsp\": \"testfsp1\",\r",
													"  \"payeeFsp\": \"testfsp2\",\r",
													"  \"amount\": {\r",
													"    \"amount\": \"60\",\r",
													"    \"currency\": pm.environment.get('currency')\r",
													"  },\r",
													"  \"expiration\": pm.environment.get('transferExpiration'),\r",
													"  \"ilpPacket\": pm.environment.get('ilpPacket'),\r",
													"  \"condition\": pm.environment.get('condition')\r",
													"}\r",
													"var sPayload = JSON.stringify(objPayload)\r",
													"console.log(`sPayload: ${sPayload}`)\r",
													"pm.variables.set(\"transferRequest\", sPayload);\r",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp1JWSKey'));\r",
													"//console.log(`token: ${token}`)\r",
													"\r",
													"// var encodedHeaders = btoa(sHeader)\r",
													"\r",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
													"// var token = JSON.stringify(ofspiopSignature)\r",
													"\r",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
													"\r",
													"const signatureObject = {\r",
													"    signature: signature.replace('\"', ''),\r",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
													"};\r",
													"\r",
													"console.log(JSON.stringify(signatureObject))\r",
													"\r",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});\r",
													"\r",
													"// //Check the request that Switch forwards to testfsp2\r",
													"setTimeout(function () {\r",
													"  pm.sendRequest(pm.environment.get(\"TESTFSP2_SDK_INBOUND_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
													"          if(response.responseSize !== 0) {\r",
													"              \r",
													"              //Check the Headers\r",
													"              var headers = response.json().headers;\r",
													"              \r",
													"                pm.test(\"testfsp2 fspiop-source is goldentestfsp1\", function () {\r",
													"                    pm.expect(headers['fspiop-source']).to.eql('testfsp1');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-destination is goldentestfsp2\", function () {\r",
													"                    pm.expect(headers['fspiop-destination']).to.eql('testfsp2');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 content-typeis same as sent in the request\", function () {\r",
													"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 accept is same as sent in the request\", function () {\r",
													"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-signature is same as sent in the request\", function () {\r",
													"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-http-method is POST\", function () {\r",
													"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-uri is /transfers\", function () {\r",
													"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');\r",
													"                });\r",
													"                \r",
													"                \r",
													"                //Check the data\r",
													"                var jsonData = response.json().data;\r",
													"                pm.test(\"testfsp2 data should have the same transferId as request\", function () {\r",
													"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));\r",
													"                });\r",
													"                pm.test(\"testfsp2 data should have the same amount as request\", function () {\r",
													"                  pm.expect(jsonData.amount.amount).to.eql('60');\r",
													"                });\r",
													"                pm.test(\"testfsp2 data should have the same currency as request\", function () {\r",
													"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));\r",
													"                });\r",
													"                pm.test(\"testfsp2 data should have the same expiration as request\", function () {\r",
													"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));\r",
													"                });\r",
													"                pm.test(\"testfsp2 data should have the same ilpPacket as request\", function () {\r",
													"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));\r",
													"                });\r",
													"                pm.test(\"testfsp2 data should have the same condition as request\", function () {\r",
													"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));\r",
													"                });\r",
													"                \r",
													"          } else {\r",
													"              pm.test(\"Transfer FAILED\", function () {\r",
													"                throw new Error('Did not receive response on payee side');\r",
													"              });\r",
													"              postman.setNextRequest(null)\r",
													"          }\r",
													"  });\r",
													"}, 1100)\r",
													"\r",
													"//Check the callback response that Switch forwards to testfsp1\r",
													"setTimeout(function () {\r",
													"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
													"          if(response.responseSize !== 0) {\r",
													"            //Checking headers\r",
													"            var headers = response.json().headers;\r",
													"            pm.test(\"testfsp1 fspiop-source is goldentestfsp2 \", function () {\r",
													"                pm.expect(headers['fspiop-source']).to.eql('testfsp2');\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 fspiop-destination is goldentestfsp1\", function () {\r",
													"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {\r",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 accept is empty\", function () {\r",
													"                pm.expect(headers['accept']).to.eql(undefined);\r",
													"            });\r",
													"            \r",
													"            \r",
													"            pm.test(\"testfsp1 fspiop-uri includes /transfers/{{transfer_ID}}\", function () {\r",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 fspiop-http-method is PUT\", function () {\r",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
													"            });\r",
													"            \r",
													"            var jsonData = response.json().data;\r",
													"            pm.test(\"Response data does not have transferId\", function () {\r",
													"               pm.expect(jsonData.transferId).to.eql(undefined);\r",
													"            });\r",
													"            pm.test(\"Response status is COMMITTED\", function () {\r",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');\r",
													"            });\r",
													"          } else {\r",
													"              pm.test(\"Transfer FAILED\", function () {\r",
													"                throw new Error('Did not receive response on payer side');\r",
													"              });\r",
													"              postman.setNextRequest(null)\r",
													"          }\r",
													"   });\r",
													"}, 1500)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-Source",
												"value": "testfsp1",
												"type": "text"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "testfsp2",
												"type": "text"
											},
											{
												"key": "FSPIOP-Signature",
												"value": "{{fspiopSignature}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-URI",
												"value": "/transfers",
												"type": "text"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"value": "POST",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transferRequest}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "090 - Active and inactive participants accounts",
							"item": [
								{
									"name": "3. Get testfsp2 Participant Account",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "678552e9-40be-4016-82d7-7bf3827dde82",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "715434bf-73bd-4d33-93bd-da639a7f3b6c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"jsonData",
													"    .filter(account => account.currency === pm.environment.get('currency'))",
													"    .forEach(curAccount => {",
													"        if(curAccount.ledgerAccountType === \"POSITION\") {",
													"            pm.environment.set(\"testfsp2PositionAccountId\", curAccount.id);",
													"            ",
													"        }",
													"    })",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "hub_operator"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": [
										{
											"name": "Get Participant",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "http://{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{participant}}",
													"protocol": "http",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"{{participant}}"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Connection",
													"value": "keep-alive",
													"name": "Connection",
													"description": "Options that are desired for the connection"
												},
												{
													"key": "Content-Length",
													"value": "251",
													"name": "Content-Length",
													"description": "The length of the response body in octets (8-bit bytes)"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8",
													"name": "Content-Type",
													"description": "The mime type of this content"
												},
												{
													"key": "Date",
													"value": "Wed, 22 Aug 2018 15:25:18 GMT",
													"name": "Date",
													"description": "The date and time that the message was sent"
												},
												{
													"key": "Server",
													"value": "nginx/1.13.8",
													"name": "Server",
													"description": "A name for the server"
												},
												{
													"key": "accept-ranges",
													"value": "bytes",
													"name": "accept-ranges",
													"description": "Content-Types that are acceptable"
												},
												{
													"key": "cache-control",
													"value": "no-cache",
													"name": "cache-control",
													"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
												}
											],
											"cookie": [],
											"body": "{\"name\":\"testfsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/testfsp\",\"created\":\"2018-08-22T08:16:50.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/testfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]}"
										}
									]
								},
								{
									"name": "Update participant (testfsp2 to inactive) account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cdcddd46-b72a-409d-aa0e-e9ec120e1ff8",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "hub_operator"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"isActive\": false\r\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts/{{testfsp2PositionAccountId}}",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts",
												"{{testfsp2PositionAccountId}}"
											]
										},
										"description": "inactives testfsp4 position account"
									},
									"response": []
								},
								{
									"name": "(BUG) Send Quote fail (testfsp1 to testfsp2)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"var navigator = {}; ",
													"var window = {}; ",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp1\",\"FSPIOP-Destination\":\"testfsp2\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
													"      \"fspId\": \"testfsp1\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"      \"dateOfBirth\": \"1983-10-25\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
													"      \"fspId\": \"testfsp2\"",
													"    }",
													"  },",
													"  \"amountType\": \"RECEIVE\",",
													"  \"amount\": {",
													"    \"amount\": \"60\",",
													"    \"currency\": pm.environment.get('currency')",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp1JWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
													"      if(response.responseSize !== 0) {",
													"          //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"testfsp1 fspiop-source is switch\", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('switch');",
													"            });",
													"            ",
													"            pm.test(\"testfsp1 fspiop-destination is testfsp1\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');",
													"            });",
													"            ",
													"            pm.test(\"testfsp1 content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"testfsp1 accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            ",
													"            ",
													"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"            // var strData = JSON.stringify(response.json().data)",
													"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
													"            // console.log(`token: ${token}`)",
													"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
													"            // console.log(`isValid: ${isValid}`)",
													"            // pm.test(\"Check if the response is JWS valid\", function () {",
													"            //     pm.expect(isValid).to.eql(true);",
													"            // });",
													"            ",
													"            //Validate protected header inside Signature",
													"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"            ",
													"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\")+'/errror');",
													"            });",
													"            ",
													"",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('switch');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('testfsp1');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);",
													"            });",
													"           ",
													"            pm.test(\"testfsp1 FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\")+'/error');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            ",
													"            pm.test(\"Error code is 3201\", function () {",
													"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3201');",
													"            });",
													"           ",
													"           pm.test(\"Error Description is Destination FSP Error - Unsupported participant \", function () {",
													"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Destination FSP Error - Unsupported');",
													"           });",
													"           ",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('Did not receive response on Payer side');",
													"           });",
													"           postman.setNextRequest(null);",
													"      }",
													"       ",
													"   });",
													"}, 1000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "testfsp1"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "testfsp2"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "(BUG) Send Transfer fail(testfsp1 to testfsp2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "900142b0-e4d7-43a4-a751-38202b600661",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"//Check the callback response that Switch forwards to payerfsp",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"            //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"fspiop-source is switch \", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('switch');",
													"            });",
													"            ",
													"            pm.test(\"fspiop-destination is testfsp1\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');",
													"            });",
													"            ",
													"            pm.test(\"content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            pm.test(\"fspiop-signature is not empty\", function () {",
													"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
													"                });",
													"            ",
													"            ",
													"            pm.test(\"fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\")+'/error');",
													"            });",
													"            ",
													"            pm.test(\"fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            pm.test(\"Error code is 3100\", function () {",
													"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3100');",
													"            });",
													"           ",
													"           pm.test(\"Error Description is GENERIC VALIDATION ERROR \", function () {",
													"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Generic validation error - Participant testfsp2 USD account is inactive');",
													"           });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response on payer side');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 1300)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "20820c95-0a24-4906-a6ba-708d6ecf4a61",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp1\",\"FSPIOP-Destination\":\"testfsp2\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"transferId\": pm.environment.get('transfer_ID'),",
													"  \"payerFsp\": \"testfsp1\",",
													"  \"payeeFsp\": \"testfsp2\",",
													"  \"amount\": {",
													"    \"amount\": \"10\",",
													"    \"currency\": pm.environment.get('currency')",
													"  },",
													"  \"expiration\": pm.environment.get('transferExpiration'),",
													"  \"ilpPacket\": pm.environment.get('ilpPacket'),",
													"  \"condition\": pm.environment.get('condition')",
													"}",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"transferRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp1JWSKey'));",
													"//console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "testfsp1"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "testfsp2"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/transfers"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transferRequest}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update participant (testfsp2 to active) account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cdcddd46-b72a-409d-aa0e-e9ec120e1ff8",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "hub_operator"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"isActive\": true\r\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts/{{testfsp2PositionAccountId}}",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts",
												"{{testfsp2PositionAccountId}}"
											]
										},
										"description": "inactives testfsp4 position account"
									},
									"response": []
								},
								{
									"name": "Send Quote (testfsp1 to testfsp2) - pass",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"  var navigator = {}; ",
													"var window = {}; ",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp1\",\"FSPIOP-Destination\":\"testfsp2\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
													"      \"fspId\": \"testfsp1\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"      \"dateOfBirth\": \"1983-10-25\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
													"      \"fspId\": \"testfsp2\"",
													"    }",
													"  },",
													"  \"amountType\": \"RECEIVE\",",
													"  \"amount\": {",
													"    \"amount\": \"60\",",
													"    \"currency\": pm.environment.get('currency')",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp1JWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
												"exec": [
													"pm.test(\"Status code is 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});\r",
													"\r",
													"setTimeout(function () {\r",
													"  pm.sendRequest(pm.environment.get(\"TESTFSP2_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {\r",
													"          if(response.responseSize !== 0) {\r",
													"              \r",
													"              //Check the Headers\r",
													"              var headers = response.json().headers;\r",
													"              \r",
													"                pm.test(\"testfsp2 fspiop-source is testfsp1\", function () {\r",
													"                    pm.expect(headers['fspiop-source']).to.eql('testfsp1');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-destination is testfsp2\", function () {\r",
													"                    pm.expect(headers['fspiop-destination']).to.eql('testfsp2');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-signature is same as sent in the request\", function () {\r",
													"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 accept is same as sent in the request\", function () {\r",
													"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 content-typeis same as sent in the request\", function () {\r",
													"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-uri is /quotes\", function () {\r",
													"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-http-method is POST\", function () {\r",
													"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
													"                });\r",
													"                \r",
													"          } else {\r",
													"              pm.test(\"Quote FAILED\", function () {\r",
													"                throw new Error('Did not receive request on payee side');\r",
													"              });\r",
													"              postman.setNextRequest(null)\r",
													"          }\r",
													"   });\r",
													"}, 1100)\r",
													"\r",
													"setTimeout(function () {\r",
													"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {\r",
													"      if(response.responseSize !== 0) {\r",
													"          //Checking headers\r",
													"            var headers = response.json().headers;\r",
													"            pm.test(\"testfsp1 fspiop-source is testfsp2\", function () {\r",
													"                pm.expect(headers['fspiop-source']).to.eql('testfsp2');\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 fspiop-destination is testfsp1\", function () {\r",
													"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {\r",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 accept is empty\", function () {\r",
													"                pm.expect(headers['accept']).to.eql(undefined);\r",
													"            });\r",
													"            \r",
													"            \r",
													"            \r",
													"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])\r",
													"            // var strData = JSON.stringify(response.json().data)\r",
													"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`\r",
													"            // console.log(`token: ${token}`)\r",
													"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldentestfsp2JWSPubKey'), {alg: ['RS256']})\r",
													"            // console.log(`isValid: ${isValid}`)\r",
													"            // pm.test(\"Check if the response is JWS valid\", function () {\r",
													"            //     pm.expect(isValid).to.eql(true);\r",
													"            // });\r",
													"            \r",
													"            //Validate protected header inside Signature\r",
													"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))\r",
													"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)\r",
													"            \r",
													"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {\r",
													"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');\r",
													"            });\r",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
													"            });\r",
													"            \r",
													"\r",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {\r",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');\r",
													"            });\r",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldentestfsp2\", function () {\r",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('testfsp2');\r",
													"            });\r",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be testfsp1\", function () {\r",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('testfsp1');\r",
													"            });\r",
													"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {\r",
													"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);\r",
													"            });\r",
													"           \r",
													"            pm.test(\"testfsp1 FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
													"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 fspiop-http-method is PUT\", function () {\r",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
													"            });\r",
													"            \r",
													"            var jsonData = response.json().data;\r",
													"            \r",
													"            pm.test(\"Response quoteId is  null\", function () {\r",
													"                pm.expect(jsonData.quoteId).to.eql(undefined);\r",
													"                \r",
													"            });\r",
													"          \r",
													"            pm.test(\"Response ilpPacket is not null\", function () {\r",
													"                pm.expect(jsonData.ilpPacket).not.equal(undefined);\r",
													"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);\r",
													"            });\r",
													"       \r",
													"           pm.test(\"Response condition is not null\", function () {\r",
													"               pm.expect(jsonData.condition).not.equal(undefined);\r",
													"               pm.environment.set(\"condition\", jsonData.condition);\r",
													"           });\r",
													"      } else {\r",
													"          pm.test(\"Quote FAILED\", function () {\r",
													"            throw new Error('Did not receive response on Payer side');\r",
													"           });\r",
													"           postman.setNextRequest(null);\r",
													"      }\r",
													"       \r",
													"   });\r",
													"}, 1000)\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-Source",
												"value": "testfsp1",
												"type": "text"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "testfsp2",
												"type": "text"
											},
											{
												"key": "FSPIOP-Signature",
												"value": "{{fspiopSignature}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"value": "POST",
												"type": "text"
											},
											{
												"key": "FSPIOP-URI",
												"value": "/quotes",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Transfer ( testfsp1 to testfsp2 ) - pass",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib\r",
													"var window = {}; //fake a window object for the lib\r",
													"eval(pm.environment.get('jrsassign'));\r",
													"\r",
													"var uuid = require('uuid');\r",
													"var generatedUUID = uuid.v4();\r",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
													"\r",
													"\r",
													"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
													"\r",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
													"\r",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp1\",\"FSPIOP-Destination\":\"testfsp2\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};\r",
													"var sHeader = JSON.stringify(oHeader);\r",
													"console.log(`sHeader: ${sHeader}`)\r",
													"\r",
													"var objPayload = {\r",
													"  \"transferId\": pm.environment.get('transfer_ID'),\r",
													"  \"payerFsp\": \"testfsp1\",\r",
													"  \"payeeFsp\": \"testfsp2\",\r",
													"  \"amount\": {\r",
													"    \"amount\": \"60\",\r",
													"    \"currency\": pm.environment.get('currency')\r",
													"  },\r",
													"  \"expiration\": pm.environment.get('transferExpiration'),\r",
													"  \"ilpPacket\": pm.environment.get('ilpPacket'),\r",
													"  \"condition\": pm.environment.get('condition')\r",
													"}\r",
													"var sPayload = JSON.stringify(objPayload)\r",
													"console.log(`sPayload: ${sPayload}`)\r",
													"pm.variables.set(\"transferRequest\", sPayload);\r",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp1JWSKey'));\r",
													"//console.log(`token: ${token}`)\r",
													"\r",
													"// var encodedHeaders = btoa(sHeader)\r",
													"\r",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
													"// var token = JSON.stringify(ofspiopSignature)\r",
													"\r",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
													"\r",
													"const signatureObject = {\r",
													"    signature: signature.replace('\"', ''),\r",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
													"};\r",
													"\r",
													"console.log(JSON.stringify(signatureObject))\r",
													"\r",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});\r",
													"\r",
													"// //Check the request that Switch forwards to testfsp2\r",
													"setTimeout(function () {\r",
													"  pm.sendRequest(pm.environment.get(\"TESTFSP2_SDK_INBOUND_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
													"          if(response.responseSize !== 0) {\r",
													"              \r",
													"              //Check the Headers\r",
													"              var headers = response.json().headers;\r",
													"              \r",
													"                pm.test(\"testfsp2 fspiop-source is goldentestfsp1\", function () {\r",
													"                    pm.expect(headers['fspiop-source']).to.eql('testfsp1');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-destination is goldentestfsp2\", function () {\r",
													"                    pm.expect(headers['fspiop-destination']).to.eql('testfsp2');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 content-typeis same as sent in the request\", function () {\r",
													"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 accept is same as sent in the request\", function () {\r",
													"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-signature is same as sent in the request\", function () {\r",
													"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-http-method is POST\", function () {\r",
													"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-uri is /transfers\", function () {\r",
													"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');\r",
													"                });\r",
													"                \r",
													"                \r",
													"                //Check the data\r",
													"                var jsonData = response.json().data;\r",
													"                pm.test(\"testfsp2 data should have the same transferId as request\", function () {\r",
													"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));\r",
													"                });\r",
													"                pm.test(\"testfsp2 data should have the same amount as request\", function () {\r",
													"                  pm.expect(jsonData.amount.amount).to.eql('60');\r",
													"                });\r",
													"                pm.test(\"testfsp2 data should have the same currency as request\", function () {\r",
													"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));\r",
													"                });\r",
													"                pm.test(\"testfsp2 data should have the same expiration as request\", function () {\r",
													"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));\r",
													"                });\r",
													"                pm.test(\"testfsp2 data should have the same ilpPacket as request\", function () {\r",
													"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));\r",
													"                });\r",
													"                pm.test(\"testfsp2 data should have the same condition as request\", function () {\r",
													"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));\r",
													"                });\r",
													"                \r",
													"          } else {\r",
													"              pm.test(\"Transfer FAILED\", function () {\r",
													"                throw new Error('Did not receive response on payee side');\r",
													"              });\r",
													"              postman.setNextRequest(null)\r",
													"          }\r",
													"  });\r",
													"}, 1100)\r",
													"\r",
													"//Check the callback response that Switch forwards to testfsp1\r",
													"setTimeout(function () {\r",
													"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
													"          if(response.responseSize !== 0) {\r",
													"            //Checking headers\r",
													"            var headers = response.json().headers;\r",
													"            pm.test(\"testfsp1 fspiop-source is goldentestfsp2 \", function () {\r",
													"                pm.expect(headers['fspiop-source']).to.eql('testfsp2');\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 fspiop-destination is goldentestfsp1\", function () {\r",
													"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {\r",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 accept is empty\", function () {\r",
													"                pm.expect(headers['accept']).to.eql(undefined);\r",
													"            });\r",
													"            \r",
													"            \r",
													"            pm.test(\"testfsp1 fspiop-uri includes /transfers/{{transfer_ID}}\", function () {\r",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 fspiop-http-method is PUT\", function () {\r",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
													"            });\r",
													"            \r",
													"            var jsonData = response.json().data;\r",
													"            pm.test(\"Response data does not have transferId\", function () {\r",
													"               pm.expect(jsonData.transferId).to.eql(undefined);\r",
													"            });\r",
													"            pm.test(\"Response status is COMMITTED\", function () {\r",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');\r",
													"            });\r",
													"          } else {\r",
													"              pm.test(\"Transfer FAILED\", function () {\r",
													"                throw new Error('Did not receive response on payer side');\r",
													"              });\r",
													"              postman.setNextRequest(null)\r",
													"          }\r",
													"   });\r",
													"}, 1500)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-Source",
												"value": "testfsp1",
												"type": "text"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "testfsp2",
												"type": "text"
											},
											{
												"key": "FSPIOP-Signature",
												"value": "{{fspiopSignature}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-URI",
												"value": "/transfers",
												"type": "text"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"value": "POST",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transferRequest}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/transfers",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "api-tests (Complete)",
			"item": [
				{
					"name": "admin-api-tests",
					"item": [
						{
							"name": "Get participants List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3a6e9554-78e6-4ae8-a533-2cb793f20be8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{hub_operator}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Get Participant",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "256b48ed-6b90-4656-affb-7221b9b5c55d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{hub_operator}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}"
									]
								}
							},
							"response": [
								{
									"name": "Get Participant",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{participant}}",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{participant}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "251",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 22 Aug 2018 15:25:18 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "nginx/1.13.8",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "accept-ranges",
											"value": "bytes",
											"name": "accept-ranges",
											"description": "Content-Types that are acceptable"
										},
										{
											"key": "cache-control",
											"value": "no-cache",
											"name": "cache-control",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										}
									],
									"cookie": [],
									"body": "{\"name\":\"testfsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/testfsp\",\"created\":\"2018-08-22T08:16:50.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/testfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]}"
								}
							]
						},
						{
							"name": "3. Get Hub Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "620c61ae-7b06-4d59-82fe-35ffd5a81469",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{hub_operator}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/Hub/accounts",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"Hub",
										"accounts"
									]
								}
							},
							"response": [
								{
									"name": "Get Participant",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{participant}}",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{participant}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "251",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 22 Aug 2018 15:25:18 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "nginx/1.13.8",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "accept-ranges",
											"value": "bytes",
											"name": "accept-ranges",
											"description": "Content-Types that are acceptable"
										},
										{
											"key": "cache-control",
											"value": "no-cache",
											"name": "cache-control",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										}
									],
									"cookie": [],
									"body": "{\"name\":\"testfsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/testfsp\",\"created\":\"2018-08-22T08:16:50.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/testfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]}"
								}
							]
						},
						{
							"name": "11. Get Endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88ed368c-227c-41c8-bfe8-489449eba6bb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{hub_operator}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payerfsp/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"payerfsp",
										"endpoints"
									]
								},
								"description": "Generated from a curl request: \ncurl -i -X POST     http://test-central-ledger.mojaloop.test/admin/participants/testfsp2/initialPositionAndLimits     -H 'Cache-Control: no-cache'     -H 'Content-Type: application/json'     -d '{\n    \\\"currency\\\": \\\"USD\\\",\n    \\\"limit\\\": {\n      \\\"type\\\": \\\"NET_DEBIT_CAP\\\",\n      \\\"value\\\": 1000\n    },\n    \\\"initialPosition\\\": 0\n  }'"
							},
							"response": [
								{
									"name": "2. Create Initial Position and Limits",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Cache-Control",
												"value": "no-cache"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"currency\": \"USD\",\n    \"limit\": {\n      \"type\": \"NET_DEBIT_CAP\",\n      \"value\": 1000\n    },\n    \"initialPosition\": 0\n  }"
										},
										"url": {
											"raw": "http://test-central-ledger.mojaloop.live/admin/participants/testfsp/initialPositionAndLimits",
											"protocol": "http",
											"host": [
												"test-central-ledger",
												"mojaloop",
												"live"
											],
											"path": [
												"admin",
												"participants",
												"testfsp",
												"initialPositionAndLimits"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get - limits - All FSPs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25e4c348-ec7c-4818-851b-33012759689e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{hub_operator}}",
										"type": "text"
									},
									{
										"key": "currency",
										"value": "{{currency}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/limits?currency={{currency}}&type=NET_DEBIT_CAP",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"limits"
									],
									"query": [
										{
											"key": "currency",
											"value": "{{currency}}"
										},
										{
											"key": "type",
											"value": "NET_DEBIT_CAP"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get payerfsp position",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d17ec2ad-d858-4b92-a665-a899f113de1b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.variables.set(\"payerfspPositionBeforeTransfer\", jsonData[0].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{hub_operator}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						}
					],
					"description": "Author: Sridevi Miriyala\n\nThese are the requests that only HUB operator can run.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cbf1a910-cdc4-4a35-8459-dc15c90fd1e0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bb796957-31b9-44fa-b054-e5ac9fd8cdc5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "ALS - GET /parties",
					"item": [
						{
							"name": "Add User - {{merchantId}} to payeefsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e3f505ea-4c76-4c5c-944c-c9188b39b699",
										"exec": [
											"pm.environment.set('fullName', 'Sweet Frog');",
											"pm.environment.set('firstName', 'Sweet');",
											"pm.environment.set('lastName', 'Frog');",
											"pm.environment.set('dob', '3/3/1973');",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a34ed0a6-ec7f-4147-8103-ec17cefcb9e7",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"party\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"BUSINESS\",\n            \"partyIdentifier\": \"{{merchantId}}\",\n            \"fspId\": \"{{payeefsp}}\"\n        },\n        \"name\": \"{{fullName}}\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"dateOfBirth\": \"{{dob}}\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{HOST_SIMULATOR}}/payeefsp/parties/BUSINESS/{{merchantId}}",
									"host": [
										"{{HOST_SIMULATOR}}"
									],
									"path": [
										"payeefsp",
										"parties",
										"BUSINESS",
										"{{merchantId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Party Receiver - BUSINESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "decab794-66d7-4b03-b6da-4191441206a8",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.environment.get(\"merchantId\"), function (err, response) {",
											"       //console.log(response.json());",
											"       pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
											"           pm.expect(response.json().party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
											"        });",
											"        pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
											"          pm.expect(response.json().party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
											"        });",
											"        pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
											"          pm.expect(response.json().party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
											"        });   ",
											"      ",
											"    });",
											"}, 4000)",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
										"exec": [
											"pm.variables.set('expectedFullName', 'Sweet Frog');",
											"pm.variables.set('expectedFirstName', 'Sweet');",
											"pm.variables.set('expectedLastName', 'Frog');",
											"pm.variables.set('expectedDOB', '3/3/1973');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.parties+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.parties+json;version=1.0"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									}
								],
								"url": {
									"raw": "{{HOST_BACKEND}}/parties/BUSINESS/{{merchantId}}",
									"host": [
										"{{HOST_BACKEND}}"
									],
									"path": [
										"parties",
										"BUSINESS",
										"{{merchantId}}"
									]
								},
								"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
							},
							"response": []
						},
						{
							"name": "Add User - {{pathfinderMSISDN}} to payeefsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e3f505ea-4c76-4c5c-944c-c9188b39b699",
										"exec": [
											"pm.environment.set('fullName', 'SimFirst SimLast');",
											"pm.environment.set('firstName', 'SimFirst');",
											"pm.environment.set('lastName', 'SimLast');",
											"pm.environment.set('dob', '2010-10-10');",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a34ed0a6-ec7f-4147-8103-ec17cefcb9e7",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"party\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"MSISDN\",\n            \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n            \"fspId\": \"{{payeefsp}}\"\n        },\n        \"name\": \"{{fullName}}\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"dateOfBirth\": \"{{dob}}\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{HOST_SIMULATOR}}/payeefsp/parties/MSISDN/{{pathfinderMSISDN}}",
									"host": [
										"{{HOST_SIMULATOR}}"
									],
									"path": [
										"payeefsp",
										"parties",
										"MSISDN",
										"{{pathfinderMSISDN}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Party Receiver - MSISDN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "decab794-66d7-4b03-b6da-4191441206a8",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
											"// });",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
											"       //console.log(response.json());",
											"       pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
											"           pm.expect(response.json().party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
											"        });",
											"        pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
											"          pm.expect(response.json().party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
											"        });",
											"        pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
											"          pm.expect(response.json().party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
											"        });   ",
											"      ",
											"    });",
											"}, 4000)",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
										"exec": [
											"pm.variables.set('expectedFullName', 'SimFirst SimLast');",
											"pm.variables.set('expectedFirstName', 'SimFirst');",
											"pm.variables.set('expectedLastName', 'SimLast');",
											"pm.variables.set('expectedDOB', '2010-10-10');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.parties+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.parties+json;version=1.0"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									}
								],
								"url": {
									"raw": "{{HOST_BACKEND}}/parties/MSISDN/{{pathfinderMSISDN}}",
									"host": [
										"{{HOST_BACKEND}}"
									],
									"path": [
										"parties",
										"MSISDN",
										"{{pathfinderMSISDN}}"
									]
								},
								"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Quotes",
					"item": [
						{
							"name": "DOB",
							"item": [
								{
									"name": "Send Quote - Malformed DOB1 -",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId2', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"ERROR code is 3101\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3101\");",
													"});",
													"",
													"pm.test(\"ERROR msg is Malformed Payer DOB\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.eql(\"Malformed Payer dateOfBirth\"",
													");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{SIMDFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "simdfsp1"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "simdfsp2"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{simdfsp2}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{simdfsp1}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-25-25\"\n    }\n  },\n  \"amountType\": \"RECEIVE\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_BACKEND}}/quotes",
											"host": [
												"{{HOST_BACKEND}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "#Author: Sridevi Miriyala#"
									},
									"response": []
								},
								{
									"name": "RECEIVE Quote - empty string in DOB",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId2', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"ERROR code is 3101\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3101\");",
													"});",
													"",
													"pm.test(\"ERROR msg is Malformed Payer DOB\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.eql(\"Malformed Payer dateOfBirth\"",
													");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{SIMDFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "simdfsp1"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "simdfsp2"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{hub_operator}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"\"\n    }\n  },\n  \"amountType\": \"RECEIVE\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_BACKEND}}/quotes",
											"host": [
												"{{HOST_BACKEND}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "#Author: Sridevi Miriyala#"
									},
									"response": []
								},
								{
									"name": "Send Quote - null DOB -",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId2', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"ERROR code is 3101\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3101\");",
													"});",
													"",
													"pm.test(\"ERROR msg is Malformed Payer DOB\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.eql(\"Malformed Payer dateOfBirth\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{SIMDFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "simdfsp1"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{hub_operator}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": null\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_BACKEND}}/quotes",
											"host": [
												"{{HOST_BACKEND}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "#Author: Sridevi Miriyala#"
									},
									"response": []
								},
								{
									"name": "Send Quote - invalid DOB format -",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId2', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"ERROR code is 3101\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3101\");",
													"});",
													"",
													"pm.test(\"ERROR msg is Malformed Payer DOB\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.eql(\"Malformed Payer dateOfBirth\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{SIMDFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "simdfsp1"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "simdfsp2"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{hub_operator}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983/10/25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_BACKEND}}/quotes",
											"host": [
												"{{HOST_BACKEND}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "#Author: Sridevi Miriyala#"
									},
									"response": []
								},
								{
									"name": "Send Quote - missing DOB in payer object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId2', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"ERROR code is 3102\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3102\");",
													"});",
													"",
													"pm.test(\"ERROR msg is Missing Payer DOB\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.eql(\"Missing Payer dateOfBirth\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{SIMDFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "simdfsp1"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "simdfsp2"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"simdfsp2\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"simdfsp1\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      }\n      \n    }\n  },\n  \"amountType\": \"RECEIVE\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_BACKEND}}/quotes",
											"host": [
												"{{HOST_BACKEND}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "#Author: Sridevi Miriyala#"
									},
									"response": []
								},
								{
									"name": "Send Quote - Malformed DOB3 -",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId2', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"  pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"ERROR code is 3101\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3101\");",
													"});",
													"",
													"pm.test(\"ERROR msg is Malformed Payer DOB\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.eql(\"Malformed Payer dateOfBirth\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{SIMDFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "simdfsp1"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "simdfsp2"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{hub_operator}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"abc@3#\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_BACKEND}}/quotes",
											"host": [
												"{{HOST_BACKEND}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "#Author: Sridevi Miriyala#"
									},
									"response": []
								},
								{
									"name": "Send Quote - Malformed DOB2 -",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId2', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"ERROR code is 3101\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3101\");",
													"});",
													"",
													"pm.test(\"ERROR msg is Malformed Payer DOB\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.eql(\"Malformed Payer dateOfBirth\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{SIMDFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "simdfsp1"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "simdfsp2"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"simdfsp2\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"simdfsp1\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"83-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_BACKEND}}/quotes",
											"host": [
												"{{HOST_BACKEND}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "#Author: Sridevi Miriyala#"
									},
									"response": []
								},
								{
									"name": "Send Quote - RECEIVE_NoForexQuote",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId', generatedUUID);",
													"   generatedUUID = uuid.v4();",
													"   pm.environment.set('transactionId', generatedUUID);",
													"",
													"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"//Check the request that Switch forwards to payeefsp",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              ",
													"              //Check the Headers",
													"              var headers = response.json().headers;",
													"              ",
													"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
													"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-destination is payerfsp\", function () {",
													"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
													"                    pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
													"                });",
													"                ",
													"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
													"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
													"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"                });",
													"                ",
													"          } else {",
													"              pm.test(\"Quote FAILED\", function () {",
													"                throw new Error('Did not receive request on payee side');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 1100)",
													"",
													"//Check Data on payer side",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"      if(response.responseSize !== 0) {",
													"          //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            ",
													"            ",
													"            //Validate protected header inside Signature",
													"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"            ",
													"            // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
													"            //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
													"            // });",
													"            ",
													"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"            });",
													"            ",
													"",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
													"            });",
													"           ",
													"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"          ",
													"            pm.test(\"Response ilpPacket is not undefined\", function () {",
													"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
													"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
													"            });",
													"       ",
													"           pm.test(\"Response condition is not undefined\", function () {",
													"               pm.expect(jsonData.condition).not.equal(undefined);",
													"               pm.environment.set(\"condition\", jsonData.condition);",
													"           });",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('Did not receive response');",
													"           });",
													"",
													"      }",
													"       ",
													"   });",
													"}, 1000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "payeefsp"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiop-signature}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \n      }\n      \n    }\n  },\n  \"amountType\": \"RECEIVE\",\n  \"amount\": {\n    \"amount\": \"1\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "FN, LN",
							"item": [
								{
									"name": "Send Quote - payerFN missing -",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId2', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"ERROR code is 3102\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3102\");",
													"});",
													"",
													"pm.test(\"ERROR msg is Missing Payer firstName\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.eql(\"Missing Payer firstName\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{SIMDFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "simdfsp1"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "simdfsp2"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"simdfsp2\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"simdfsp1\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"RECEIVE\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_BACKEND}}/quotes",
											"host": [
												"{{HOST_BACKEND}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "#Author: Sridevi Miriyala#"
									},
									"response": []
								},
								{
									"name": "Send Quote - payerLN missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId2', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"ERROR code is 3102\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3102\");",
													"});",
													"",
													"pm.test(\"ERROR Description is Missing Payer lastName\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.eql(\"Missing Payer lastName\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{SIMDFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "simdfsp1"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "simdfsp2"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"simdfsp2\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"simdfsp1\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\"\n        \n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"RECEIVE\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_BACKEND}}/quotes",
											"host": [
												"{{HOST_BACKEND}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "#Author: Sridevi Miriyala#"
									},
									"response": []
								},
								{
									"name": "Send Quote - Invalid payerLN (not a string)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId2', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"ERROR code is 3101\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3101\");",
													"});",
													"",
													"pm.test(\"ERROR msg is Malformed Payer Lastname\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.eql(\"Malformed Payer lastName\"",
													");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{SIMDFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "simdfsp1"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "simdfsp2"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"simdfsp2\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"simdfsp1\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"@#4768\"\n        \n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_BACKEND}}/quotes",
											"host": [
												"{{HOST_BACKEND}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "#Author: Sridevi Miriyala#"
									},
									"response": []
								},
								{
									"name": "Send Quote Payer personal info missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId2', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"ERROR code is 3102\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3102\");",
													"});",
													"",
													"pm.test(\"ERROR msg is Missing Payer personalInfo\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.eql(\"Missing Payer personalInfo\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{SIMDFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "simdfsp1"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "simdfsp2"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"simdfsp2\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"simdfsp1\"\n    }\n    \n  },\n  \"amountType\": \"RECEIVE\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_BACKEND}}/quotes",
											"host": [
												"{{HOST_BACKEND}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "#Author: Sridevi Miriyala#"
									},
									"response": []
								},
								{
									"name": "Send Quote - String payerFN (Mats123) -",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// pm.test(\"Check that Content-Type is present\", function () {",
													"//     pm.response.to.have.header(\"Content-Type\");",
													"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
													"// });",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{SIMDFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "simdfsp1"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "simdfsp2"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"simdfsp2\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"simdfsp1\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats123\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"RECEIVE\",\n  \"amount\": {\n    \"amount\": \"2300\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_BACKEND}}/quotes",
											"host": [
												"{{HOST_BACKEND}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "#Author: Sridevi Miriyala#"
									},
									"response": []
								},
								{
									"name": "Send Quote - String payerFN (Mats123@#$)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"ERROR code is 3101\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3101\");",
													"});",
													"",
													"pm.test(\"ERROR Description is Malformed Payer firstName\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.eql(\"Malformed Payer firstName\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{SIMDFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "simdfsp1"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "simdfsp2"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"simdfsp2\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"simdfsp1\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats12@#$3\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"RECEIVE\",\n  \"amount\": {\n    \"amount\": \"2300\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_BACKEND}}/quotes",
											"host": [
												"{{HOST_BACKEND}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "#Author: Sridevi Miriyala#"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Reporting-api",
					"item": [
						{
							"name": "311_DFSP_daily_txn",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91a833c8-bb65-4dd9-8390-f494b42fc950",
										"exec": [
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"var schema =   '{\"definitions\":{},\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"$id\":\"http://example.com/root.json\",\"type\":\"array\",\"title\":\"The Root Schema\",\"items\":{\"$id\":\"#/items\",\"type\":\"object\",\"title\":\"The Items Schema\",\"required\":[\"senderDFSPId\",\"senderDFSPName\",\"receiverDFSPId\",\"receiverDFSPName\",\"hubTxnID\",\"transactionType\",\"natureOfTxnType\",\"requestDate\",\"createdDate\",\"modificationDate\",\"settlementDate\",\"senderCountryCurrencyCode\",\"receiverCountryCurrencyCode\",\"senderId\",\"receiverId\",\"reconciliationAmount\",\"receiverNameStatus\",\"pricingOption\",\"receiverKYCLevelStatus\",\"status\",\"errorCode\",\"senderDFSPTxnID\",\"receiverDFSPTxnID\",\"settlementWindowId\",\"test\"],\"properties\":{\"senderDFSPId\":{\"$id\":\"#/items/properties/senderDFSPId\",\"type\":\"string\",\"title\":\"The Senderdfspid Schema\",\"default\":\"\",\"examples\":[\"payerfsp\"],\"pattern\":\"^(.*)$\"},\"senderDFSPName\":{\"$id\":\"#/items/properties/senderDFSPName\",\"type\":\"string\",\"title\":\"The Senderdfspname Schema\",\"default\":\"\",\"examples\":[\"payerfsp\"],\"pattern\":\"^(.*)$\"},\"receiverDFSPId\":{\"$id\":\"#/items/properties/receiverDFSPId\",\"type\":\"string\",\"title\":\"The Receiverdfspid Schema\",\"default\":\"\",\"examples\":[\"payeefsp\"],\"pattern\":\"^(.*)$\"},\"receiverDFSPName\":{\"$id\":\"#/items/properties/receiverDFSPName\",\"type\":\"string\",\"title\":\"The Receiverdfspname Schema\",\"default\":\"\",\"examples\":[\"payeefsp\"],\"pattern\":\"^(.*)$\"},\"hubTxnID\":{\"$id\":\"#/items/properties/hubTxnID\",\"type\":\"string\",\"title\":\"The Hubtxnid Schema\",\"default\":\"\",\"examples\":[\"472794d2-19d4-464a-821a-63f7bfe13c01\"],\"pattern\":\"^(.*)$\"},\"transactionType\":{\"$id\":\"#/items/properties/transactionType\",\"type\":\"string\",\"title\":\"The Transactiontype Schema\",\"default\":\"\",\"examples\":[\"P2P\"],\"pattern\":\"^(.*)$\"},\"natureOfTxnType\":{\"$id\":\"#/items/properties/natureOfTxnType\",\"type\":\"string\",\"title\":\"The Natureoftxntype Schema\",\"default\":\"\",\"examples\":[\"Original\"],\"pattern\":\"^(.*)$\"},\"requestDate\":{\"$id\":\"#/items/properties/requestDate\",\"type\":\"string\",\"title\":\"The Requestdate Schema\",\"default\":\"\",\"examples\":[\"2019-04-02T15:23:16\"],\"pattern\":\"^(.*)$\"},\"createdDate\":{\"$id\":\"#/items/properties/createdDate\",\"type\":\"string\",\"title\":\"The Createddate Schema\",\"default\":\"\",\"examples\":[\"2019-04-02T15:23:16\"],\"pattern\":\"^(.*)$\"},\"modificationDate\":{\"$id\":\"#/items/properties/modificationDate\",\"type\":\"string\",\"title\":\"The Modificationdate Schema\",\"default\":\"\",\"examples\":[\"2019-04-02T16:18:11\"],\"pattern\":\"^(.*)$\"},\"settlementDate\":{\"$id\":\"#/items/properties/settlementDate\",\"type\":\"string\",\"title\":\"The Settlementdate Schema\",\"default\":\"\",\"examples\":[\"null\"],\"pattern\":\"^(.*)$\"},\"senderCountryCurrencyCode\":{\"$id\":\"#/items/properties/senderCountryCurrencyCode\",\"type\":\"string\",\"title\":\"The Sendercountrycurrencycode Schema\",\"default\":\"\",\"examples\":[\"XOF\"],\"pattern\":\"^(.*)$\"},\"receiverCountryCurrencyCode\":{\"$id\":\"#/items/properties/receiverCountryCurrencyCode\",\"type\":\"string\",\"title\":\"The Receivercountrycurrencycode Schema\",\"default\":\"\",\"examples\":[\"XOF\"],\"pattern\":\"^(.*)$\"},\"senderId\":{\"$id\":\"#/items/properties/senderId\",\"type\":\"string\",\"title\":\"The Senderid Schema\",\"default\":\"\",\"examples\":[\"22507008181\"],\"pattern\":\"^(.*)$\"},\"receiverId\":{\"$id\":\"#/items/properties/receiverId\",\"type\":\"string\",\"title\":\"The Receiverid Schema\",\"default\":\"\",\"examples\":[\"22556999125\"],\"pattern\":\"^(.*)$\"},\"reconciliationAmount\":{\"$id\":\"#/items/properties/reconciliationAmount\",\"type\":\"integer\",\"title\":\"The Reconciliationamount Schema\",\"default\":0,\"examples\":[10]},\"receiverNameStatus\":{\"$id\":\"#/items/properties/receiverNameStatus\",\"type\":\"string\",\"title\":\"The Receivernamestatus Schema\",\"default\":\"\",\"examples\":[\"RNND\"],\"pattern\":\"^(.*)$\"},\"pricingOption\":{\"$id\":\"#/items/properties/pricingOption\",\"type\":\"string\",\"title\":\"The Pricingoption Schema\",\"default\":\"\",\"examples\":[\"\"],\"pattern\":\"^(.*)$\"},\"receiverKYCLevelStatus\":{\"$id\":\"#/items/properties/receiverKYCLevelStatus\",\"type\":\"string\",\"title\":\"The Receiverkyclevelstatus Schema\",\"default\":\"\",\"examples\":[\"\"],\"pattern\":\"^(.*)$\"},\"status\":{\"$id\":\"#/items/properties/status\",\"type\":\"string\",\"title\":\"The Status Schema\",\"default\":\"\",\"examples\":[\"INVALID\"],\"pattern\":\"^(.*)$\"},\"errorCode\":{\"$id\":\"#/items/properties/errorCode\",\"type\":\"string\",\"title\":\"The Errorcode Schema\",\"default\":\"\",\"examples\":[\"\"],\"pattern\":\"^(.*)$\"},\"senderDFSPTxnID\":{\"$id\":\"#/items/properties/senderDFSPTxnID\",\"type\":\"string\",\"title\":\"The Senderdfsptxnid Schema\",\"default\":\"\",\"examples\":[\"472794d2-19d4-464a-821a-63f7bfe13c01\"],\"pattern\":\"^(.*)$\"},\"receiverDFSPTxnID\":{\"$id\":\"#/items/properties/receiverDFSPTxnID\",\"type\":\"string\",\"title\":\"The Receiverdfsptxnid Schema\",\"default\":\"\",\"examples\":[\"472794d2-19d4-464a-821a-63f7bfe13c01\"],\"pattern\":\"^(.*)$\"},\"settlementWindowId\":{\"$id\":\"#/items/properties/settlementWindowId\",\"type\":\"string\",\"title\":\"The Settlementwindowid Schema\",\"default\":\"\",\"examples\":[\"\"],\"pattern\":\"^(.*)$\"}}}}'",
											"",
											"",
											"//Validate Schema",
											"pm.test('Schema Validation', function() {",
											"     console.log('response: ', pm.response.json())",
											"    ",
											"    var result=tv4.validateResult(pm.response.json(), schema);",
											"    console.log(result);",
											"    if(!result.valid){",
											"        console.log(result);",
											"    }",
											" ",
											"    pm.expect(result.valid).to.be.true;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{hub_operator}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{REPORTING_API}}/Casablanca/311_dfspDailyTxnReport.json?START_DATE_TIME=2019-07-12&END_DATE_TIME=2019-07-12T20:10:20&FSP_ID=payerfsp",
									"host": [
										"{{REPORTING_API}}"
									],
									"path": [
										"Casablanca",
										"311_dfspDailyTxnReport.json"
									],
									"query": [
										{
											"key": "START_DATE_TIME",
											"value": "2019-07-12"
										},
										{
											"key": "END_DATE_TIME",
											"value": "2019-07-12T20:10:20"
										},
										{
											"key": "FSP_ID",
											"value": "payerfsp"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "312_HUB_daily_txn",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52b14106-f356-4978-bc10-bfaeac04bec7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var schema =   '{\"definitions\":{},\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"$id\":\"http://example.com/root.json\",\"type\":\"array\",\"title\":\"The Root Schema\",\"items\":{\"$id\":\"#/items\",\"type\":\"object\",\"title\":\"The Items Schema\",\"required\":[\"senderDFSPId\",\"senderDFSPName\",\"receiverDFSPId\",\"receiverDFSPName\",\"hubTxnID\",\"transactionType\",\"natureOfTxnType\",\"requestDate\",\"createdDate\",\"modificationDate\",\"settlementDate\",\"senderCountryCurrencyCode\",\"receiverCountryCurrencyCode\",\"senderId\",\"receiverId\",\"reconciliationAmount\",\"receiverNameStatus\",\"pricingOption\",\"receiverKYCLevelStatus\",\"status\",\"errorCode\",\"senderDFSPTxnID\",\"receiverDFSPTxnID\",\"settlementWindowId\",\"test\"],\"properties\":{\"senderDFSPId\":{\"$id\":\"#/items/properties/senderDFSPId\",\"type\":\"string\",\"title\":\"The Senderdfspid Schema\",\"default\":\"\",\"examples\":[\"payerfsp\"],\"pattern\":\"^(.*)$\"},\"senderDFSPName\":{\"$id\":\"#/items/properties/senderDFSPName\",\"type\":\"string\",\"title\":\"The Senderdfspname Schema\",\"default\":\"\",\"examples\":[\"payerfsp\"],\"pattern\":\"^(.*)$\"},\"receiverDFSPId\":{\"$id\":\"#/items/properties/receiverDFSPId\",\"type\":\"string\",\"title\":\"The Receiverdfspid Schema\",\"default\":\"\",\"examples\":[\"payeefsp\"],\"pattern\":\"^(.*)$\"},\"receiverDFSPName\":{\"$id\":\"#/items/properties/receiverDFSPName\",\"type\":\"string\",\"title\":\"The Receiverdfspname Schema\",\"default\":\"\",\"examples\":[\"payeefsp\"],\"pattern\":\"^(.*)$\"},\"hubTxnID\":{\"$id\":\"#/items/properties/hubTxnID\",\"type\":\"string\",\"title\":\"The Hubtxnid Schema\",\"default\":\"\",\"examples\":[\"472794d2-19d4-464a-821a-63f7bfe13c01\"],\"pattern\":\"^(.*)$\"},\"transactionType\":{\"$id\":\"#/items/properties/transactionType\",\"type\":\"string\",\"title\":\"The Transactiontype Schema\",\"default\":\"\",\"examples\":[\"P2P\"],\"pattern\":\"^(.*)$\"},\"natureOfTxnType\":{\"$id\":\"#/items/properties/natureOfTxnType\",\"type\":\"string\",\"title\":\"The Natureoftxntype Schema\",\"default\":\"\",\"examples\":[\"Original\"],\"pattern\":\"^(.*)$\"},\"requestDate\":{\"$id\":\"#/items/properties/requestDate\",\"type\":\"string\",\"title\":\"The Requestdate Schema\",\"default\":\"\",\"examples\":[\"2019-04-02T15:23:16\"],\"pattern\":\"^(.*)$\"},\"createdDate\":{\"$id\":\"#/items/properties/createdDate\",\"type\":\"string\",\"title\":\"The Createddate Schema\",\"default\":\"\",\"examples\":[\"2019-04-02T15:23:16\"],\"pattern\":\"^(.*)$\"},\"modificationDate\":{\"$id\":\"#/items/properties/modificationDate\",\"type\":\"string\",\"title\":\"The Modificationdate Schema\",\"default\":\"\",\"examples\":[\"2019-04-02T16:18:11\"],\"pattern\":\"^(.*)$\"},\"settlementDate\":{\"$id\":\"#/items/properties/settlementDate\",\"type\":\"string\",\"title\":\"The Settlementdate Schema\",\"default\":\"\",\"examples\":[\"null\"],\"pattern\":\"^(.*)$\"},\"senderCountryCurrencyCode\":{\"$id\":\"#/items/properties/senderCountryCurrencyCode\",\"type\":\"string\",\"title\":\"The Sendercountrycurrencycode Schema\",\"default\":\"\",\"examples\":[\"XOF\"],\"pattern\":\"^(.*)$\"},\"receiverCountryCurrencyCode\":{\"$id\":\"#/items/properties/receiverCountryCurrencyCode\",\"type\":\"string\",\"title\":\"The Receivercountrycurrencycode Schema\",\"default\":\"\",\"examples\":[\"XOF\"],\"pattern\":\"^(.*)$\"},\"senderId\":{\"$id\":\"#/items/properties/senderId\",\"type\":\"string\",\"title\":\"The Senderid Schema\",\"default\":\"\",\"examples\":[\"22507008181\"],\"pattern\":\"^(.*)$\"},\"receiverId\":{\"$id\":\"#/items/properties/receiverId\",\"type\":\"string\",\"title\":\"The Receiverid Schema\",\"default\":\"\",\"examples\":[\"22556999125\"],\"pattern\":\"^(.*)$\"},\"reconciliationAmount\":{\"$id\":\"#/items/properties/reconciliationAmount\",\"type\":\"integer\",\"title\":\"The Reconciliationamount Schema\",\"default\":0,\"examples\":[10]},\"receiverNameStatus\":{\"$id\":\"#/items/properties/receiverNameStatus\",\"type\":\"string\",\"title\":\"The Receivernamestatus Schema\",\"default\":\"\",\"examples\":[\"RNND\"],\"pattern\":\"^(.*)$\"},\"pricingOption\":{\"$id\":\"#/items/properties/pricingOption\",\"type\":\"string\",\"title\":\"The Pricingoption Schema\",\"default\":\"\",\"examples\":[\"\"],\"pattern\":\"^(.*)$\"},\"receiverKYCLevelStatus\":{\"$id\":\"#/items/properties/receiverKYCLevelStatus\",\"type\":\"string\",\"title\":\"The Receiverkyclevelstatus Schema\",\"default\":\"\",\"examples\":[\"\"],\"pattern\":\"^(.*)$\"},\"status\":{\"$id\":\"#/items/properties/status\",\"type\":\"string\",\"title\":\"The Status Schema\",\"default\":\"\",\"examples\":[\"INVALID\"],\"pattern\":\"^(.*)$\"},\"errorCode\":{\"$id\":\"#/items/properties/errorCode\",\"type\":\"string\",\"title\":\"The Errorcode Schema\",\"default\":\"\",\"examples\":[\"\"],\"pattern\":\"^(.*)$\"},\"senderDFSPTxnID\":{\"$id\":\"#/items/properties/senderDFSPTxnID\",\"type\":\"string\",\"title\":\"The Senderdfsptxnid Schema\",\"default\":\"\",\"examples\":[\"472794d2-19d4-464a-821a-63f7bfe13c01\"],\"pattern\":\"^(.*)$\"},\"receiverDFSPTxnID\":{\"$id\":\"#/items/properties/receiverDFSPTxnID\",\"type\":\"string\",\"title\":\"The Receiverdfsptxnid Schema\",\"default\":\"\",\"examples\":[\"472794d2-19d4-464a-821a-63f7bfe13c01\"],\"pattern\":\"^(.*)$\"},\"settlementWindowId\":{\"$id\":\"#/items/properties/settlementWindowId\",\"type\":\"string\",\"title\":\"The Settlementwindowid Schema\",\"default\":\"\",\"examples\":[\"\"],\"pattern\":\"^(.*)$\"}}}}'",
											"",
											"",
											"//Validate Schema",
											"pm.test('Schema Validation', function() {",
											"     console.log('response: ', pm.response.json())",
											"    ",
											"    var result=tv4.validateResult(pm.response.json(), schema);",
											"    console.log(result);",
											"    if(!result.valid){",
											"        console.log(result);",
											"    }",
											" ",
											"    pm.expect(result.valid).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{hub_operator}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{REPORTING_API}}/Casablanca/312_hubDailyTxnReport.json?START_DATE_TIME=2019-05-03T12:10:20&END_DATE_TIME=2019-05-07T20:10:20",
									"host": [
										"{{REPORTING_API}}"
									],
									"path": [
										"Casablanca",
										"312_hubDailyTxnReport.json"
									],
									"query": [
										{
											"key": "START_DATE_TIME",
											"value": "2019-05-03T12:10:20"
										},
										{
											"key": "END_DATE_TIME",
											"value": "2019-05-07T20:10:20"
										}
									]
								}
							},
							"response": [
								{
									"name": "200 - OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "{{hub_operator}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{REPORTING_API}}/Casablanca/312_hubDailyTxnReport.json?START_DATE_TIME=2019-04-01T22:10:20&END_DATE_TIME=2019-04-30T22:10:20",
											"host": [
												"{{REPORTING_API}}"
											],
											"path": [
												"Casablanca",
												"312_hubDailyTxnReport.json"
											],
											"query": [
												{
													"key": "START_DATE_TIME",
													"value": "2019-04-01T22:10:20"
												},
												{
													"key": "END_DATE_TIME",
													"value": "2019-04-30T22:10:20"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Access-Control-Allow-Methods",
											"value": "GET"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "X-Content-Type-Options",
											"value": "nosniff"
										},
										{
											"key": "P3P",
											"value": "CP=\"ALL\""
										},
										{
											"key": "Access-Control-Allow-Headers",
											"value": "authorization,Access-Control-Allow-Origin,Content-Type,SOAPAction"
										},
										{
											"key": "Date",
											"value": "Wed, 01 May 2019 16:17:57 GMT"
										},
										{
											"key": "Referrer-Policy",
											"value": "strict-origin"
										},
										{
											"key": "Referrer-Policy",
											"value": "strict-origin"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "X-Frame-Options",
											"value": "SAMEORIGIN"
										},
										{
											"key": "activityID",
											"value": "53063521862262151316812"
										},
										{
											"key": "output-final",
											"value": "true"
										},
										{
											"key": "Cache-Control",
											"value": "private"
										},
										{
											"key": "Content-Disposition",
											"value": "attachment; filename=\"312_hubDailyTxnReport.json\""
										},
										{
											"key": "Content-Security-Policy",
											"value": ""
										},
										{
											"key": "Content-Security-Policy",
											"value": ""
										},
										{
											"key": "Content-Encoding",
											"value": "gzip"
										},
										{
											"key": "Set-Cookie",
											"value": "JSESSIONID=1303DF138DA368918A3871962242F046; Path=/jasperserver; HttpOnly"
										},
										{
											"key": "Set-Cookie",
											"value": "userLocale=en_US;Expires=Thu, 2-May-2019 16:17:56 GMT;Path=/jasperserver/;HttpOnly"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Expires",
											"value": "Thu, 01 Jan 1970 00:00:00 GMT"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1; mode=block"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1;mode=block"
										},
										{
											"key": "X-XSS-Protection",
											"value": "1;mode=block"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=UTF-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Host",
											"value": "devdmz0wso2am.casahub.live"
										},
										{
											"key": "Strict-Transport-Security",
											"value": "max-age=31536000; includeSubDomains; preload"
										}
									],
									"cookie": [],
									"body": "[\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"61088826-a1b4-49c4-a2af-bd8ee1ca8a5a\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-12T16:53:46.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"61088826-a1b4-49c4-a2af-bd8ee1ca8a5a\",\n        \"receiverDFSPTxnID\": \"61088826-a1b4-49c4-a2af-bd8ee1ca8a5a\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"4c3cfd9c-27e6-4d5c-9838-6232922cf53f\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-30T14:05:41.000Z\",\n        \"settlementDate\": \"2019-04-30T14:11:47.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"4c3cfd9c-27e6-4d5c-9838-6232922cf53f\",\n        \"receiverDFSPTxnID\": \"4c3cfd9c-27e6-4d5c-9838-6232922cf53f\",\n        \"settlementWindowId\": \"96\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"a53b9d61-57a8-4061-a581-e45c137fc315\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-12T16:23:30.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"a53b9d61-57a8-4061-a581-e45c137fc315\",\n        \"receiverDFSPTxnID\": \"a53b9d61-57a8-4061-a581-e45c137fc315\",\n        \"settlementWindowId\": \"53\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"0213dddb-0ee4-4b11-a10b-59c7909222ba\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T13:25:00.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"0213dddb-0ee4-4b11-a10b-59c7909222ba\",\n        \"receiverDFSPTxnID\": \"0213dddb-0ee4-4b11-a10b-59c7909222ba\",\n        \"settlementWindowId\": \"86\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"bc2953ca-ec46-427a-b4e5-b3bf51f5e05b\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T18:42:45.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"bc2953ca-ec46-427a-b4e5-b3bf51f5e05b\",\n        \"receiverDFSPTxnID\": \"bc2953ca-ec46-427a-b4e5-b3bf51f5e05b\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"03a0a361-5949-4152-9c26-b52babd4d5b7\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T18:35:46.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"03a0a361-5949-4152-9c26-b52babd4d5b7\",\n        \"receiverDFSPTxnID\": \"03a0a361-5949-4152-9c26-b52babd4d5b7\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"9fbeeb88-8edf-49be-baee-a8051a99ec4b\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-11T22:19:43.000Z\",\n        \"settlementDate\": \"2019-04-12T19:26:38.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"9fbeeb88-8edf-49be-baee-a8051a99ec4b\",\n        \"receiverDFSPTxnID\": \"9fbeeb88-8edf-49be-baee-a8051a99ec4b\",\n        \"settlementWindowId\": \"52\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"063ac6f7-2049-462e-a295-c8e44ab88d27\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-07T02:19:30.000Z\",\n        \"settlementDate\": \"2019-04-07T02:19:51.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"063ac6f7-2049-462e-a295-c8e44ab88d27\",\n        \"receiverDFSPTxnID\": \"063ac6f7-2049-462e-a295-c8e44ab88d27\",\n        \"settlementWindowId\": \"41\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"b460f40f-c905-4db0-a235-9171d747f5ec\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-14T23:49:04.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"b460f40f-c905-4db0-a235-9171d747f5ec\",\n        \"receiverDFSPTxnID\": \"b460f40f-c905-4db0-a235-9171d747f5ec\",\n        \"settlementWindowId\": \"56\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"aa0843de-0845-4065-ac4c-ed5bbf2c678d\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T15:36:16.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"aa0843de-0845-4065-ac4c-ed5bbf2c678d\",\n        \"receiverDFSPTxnID\": \"aa0843de-0845-4065-ac4c-ed5bbf2c678d\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"d246ed1a-8130-4856-a394-5b8f462679d2\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-09T12:25:50.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"d246ed1a-8130-4856-a394-5b8f462679d2\",\n        \"receiverDFSPTxnID\": \"d246ed1a-8130-4856-a394-5b8f462679d2\",\n        \"settlementWindowId\": \"48\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"8bf979b9-561e-4b66-8ea1-a0da2a0efc17\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T18:07:11.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"8bf979b9-561e-4b66-8ea1-a0da2a0efc17\",\n        \"receiverDFSPTxnID\": \"8bf979b9-561e-4b66-8ea1-a0da2a0efc17\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"408d5514-b6a7-4d5d-bfc8-8954964d7ee1\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T19:46:23.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"408d5514-b6a7-4d5d-bfc8-8954964d7ee1\",\n        \"receiverDFSPTxnID\": \"408d5514-b6a7-4d5d-bfc8-8954964d7ee1\",\n        \"settlementWindowId\": \"16\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"ba3cc05b-1d9d-47f2-be40-d7fbd3c4c957\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T13:13:46.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"ba3cc05b-1d9d-47f2-be40-d7fbd3c4c957\",\n        \"receiverDFSPTxnID\": \"ba3cc05b-1d9d-47f2-be40-d7fbd3c4c957\",\n        \"settlementWindowId\": \"64\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"09149d7f-dfa0-4ae3-a412-52a9392868ee\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-30T13:55:58.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"09149d7f-dfa0-4ae3-a412-52a9392868ee\",\n        \"receiverDFSPTxnID\": \"09149d7f-dfa0-4ae3-a412-52a9392868ee\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"09de18bf-6cb1-48b8-8f65-f03c8616306e\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T17:35:55.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"09de18bf-6cb1-48b8-8f65-f03c8616306e\",\n        \"receiverDFSPTxnID\": \"09de18bf-6cb1-48b8-8f65-f03c8616306e\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"2c295fe2-fd64-4a0d-82f3-0f406e765e27\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-14T23:51:53.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"2c295fe2-fd64-4a0d-82f3-0f406e765e27\",\n        \"receiverDFSPTxnID\": \"2c295fe2-fd64-4a0d-82f3-0f406e765e27\",\n        \"settlementWindowId\": \"56\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"99207916-d1b2-4025-8eda-9fa50cdd4341\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-11T05:04:52.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"99207916-d1b2-4025-8eda-9fa50cdd4341\",\n        \"receiverDFSPTxnID\": \"99207916-d1b2-4025-8eda-9fa50cdd4341\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"c1de7e62-269b-437e-b433-6c1038519359\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-10T01:37:50.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"c1de7e62-269b-437e-b433-6c1038519359\",\n        \"receiverDFSPTxnID\": \"c1de7e62-269b-437e-b433-6c1038519359\",\n        \"settlementWindowId\": \"51\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"0d2d7669-0ed3-4d23-9b9f-3f5314e37926\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-30T13:57:10.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"0d2d7669-0ed3-4d23-9b9f-3f5314e37926\",\n        \"receiverDFSPTxnID\": \"0d2d7669-0ed3-4d23-9b9f-3f5314e37926\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"c6f8e1d2-ffaa-481e-aeca-c9edaadcbae4\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T03:59:00.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"c6f8e1d2-ffaa-481e-aeca-c9edaadcbae4\",\n        \"receiverDFSPTxnID\": \"c6f8e1d2-ffaa-481e-aeca-c9edaadcbae4\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"0e3b36b4-c2d2-4951-b886-194b4944c41f\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T17:04:35.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"0e3b36b4-c2d2-4951-b886-194b4944c41f\",\n        \"receiverDFSPTxnID\": \"0e3b36b4-c2d2-4951-b886-194b4944c41f\",\n        \"settlementWindowId\": \"68\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"ad81b529-d8d5-4851-b609-ab8908367926\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-08T02:50:13.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"ad81b529-d8d5-4851-b609-ab8908367926\",\n        \"receiverDFSPTxnID\": \"ad81b529-d8d5-4851-b609-ab8908367926\",\n        \"settlementWindowId\": \"45\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"29f54249-3bbc-403f-b9b1-4c5366eeb0c9\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T14:29:10.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"234\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"29f54249-3bbc-403f-b9b1-4c5366eeb0c9\",\n        \"receiverDFSPTxnID\": \"29f54249-3bbc-403f-b9b1-4c5366eeb0c9\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"5b683a6f-f068-43f4-9af9-e935ee7bc007\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T14:25:16.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"5b683a6f-f068-43f4-9af9-e935ee7bc007\",\n        \"receiverDFSPTxnID\": \"5b683a6f-f068-43f4-9af9-e935ee7bc007\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"5644628b-d316-4af3-b1df-290a081d8d20\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T17:29:12.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"5644628b-d316-4af3-b1df-290a081d8d20\",\n        \"receiverDFSPTxnID\": \"5644628b-d316-4af3-b1df-290a081d8d20\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"eadd161f-6ec7-46db-8240-d330890fbe18\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T03:00:14.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"eadd161f-6ec7-46db-8240-d330890fbe18\",\n        \"receiverDFSPTxnID\": \"eadd161f-6ec7-46db-8240-d330890fbe18\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"47340c96-63fb-4f5d-ac69-6ad3e4b94091\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T14:27:33.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"47340c96-63fb-4f5d-ac69-6ad3e4b94091\",\n        \"receiverDFSPTxnID\": \"47340c96-63fb-4f5d-ac69-6ad3e4b94091\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"11321534-c679-4616-9c3d-8217481e5a6d\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T03:47:16.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"11321534-c679-4616-9c3d-8217481e5a6d\",\n        \"receiverDFSPTxnID\": \"11321534-c679-4616-9c3d-8217481e5a6d\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"8ddfe387-ff0f-4f9f-9013-e71b23b213be\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T18:22:48.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"8ddfe387-ff0f-4f9f-9013-e71b23b213be\",\n        \"receiverDFSPTxnID\": \"8ddfe387-ff0f-4f9f-9013-e71b23b213be\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"c922c6e1-2588-4a59-94fc-25986e24da9a\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-25T20:23:16.000Z\",\n        \"settlementDate\": \"2019-04-25T20:23:59.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"c922c6e1-2588-4a59-94fc-25986e24da9a\",\n        \"receiverDFSPTxnID\": \"c922c6e1-2588-4a59-94fc-25986e24da9a\",\n        \"settlementWindowId\": \"78\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"4d5a0c02-5343-4943-9074-3ebe16483dd8\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-10T01:53:53.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"4d5a0c02-5343-4943-9074-3ebe16483dd8\",\n        \"receiverDFSPTxnID\": \"4d5a0c02-5343-4943-9074-3ebe16483dd8\",\n        \"settlementWindowId\": \"51\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"57f97ba9-2db4-456e-8258-74f39f360df1\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-09T13:01:02.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"57f97ba9-2db4-456e-8258-74f39f360df1\",\n        \"receiverDFSPTxnID\": \"57f97ba9-2db4-456e-8258-74f39f360df1\",\n        \"settlementWindowId\": \"50\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"12ea1bd2-ef62-4ee9-b854-483fc86a6e95\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-30T13:54:46.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"12ea1bd2-ef62-4ee9-b854-483fc86a6e95\",\n        \"receiverDFSPTxnID\": \"12ea1bd2-ef62-4ee9-b854-483fc86a6e95\",\n        \"settlementWindowId\": \"95\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"13f907f2-ff22-4df0-8ef4-2d1452cae2ce\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T03:46:05.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"13f907f2-ff22-4df0-8ef4-2d1452cae2ce\",\n        \"receiverDFSPTxnID\": \"13f907f2-ff22-4df0-8ef4-2d1452cae2ce\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"e2c2da5d-9675-4a1d-bb88-d30718b3461f\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T15:54:39.000Z\",\n        \"settlementDate\": \"2019-04-29T16:00:39.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"e2c2da5d-9675-4a1d-bb88-d30718b3461f\",\n        \"receiverDFSPTxnID\": \"e2c2da5d-9675-4a1d-bb88-d30718b3461f\",\n        \"settlementWindowId\": \"92\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"50502380-957c-4410-99cf-44dcf4b2622b\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-12T16:25:10.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"50502380-957c-4410-99cf-44dcf4b2622b\",\n        \"receiverDFSPTxnID\": \"50502380-957c-4410-99cf-44dcf4b2622b\",\n        \"settlementWindowId\": \"53\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"41813529-eaef-4c73-957a-5b21ef033662\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:42:58.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"41813529-eaef-4c73-957a-5b21ef033662\",\n        \"receiverDFSPTxnID\": \"41813529-eaef-4c73-957a-5b21ef033662\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"de4ff02d-fa92-475f-95f9-e4e48fe19f91\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T18:40:46.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"de4ff02d-fa92-475f-95f9-e4e48fe19f91\",\n        \"receiverDFSPTxnID\": \"de4ff02d-fa92-475f-95f9-e4e48fe19f91\",\n        \"settlementWindowId\": \"13\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"5a6071a7-0bd7-43af-b84f-c1a184a06e31\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-24T09:45:36.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"5a6071a7-0bd7-43af-b84f-c1a184a06e31\",\n        \"receiverDFSPTxnID\": \"5a6071a7-0bd7-43af-b84f-c1a184a06e31\",\n        \"settlementWindowId\": \"70\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"8d947afa-c0fa-49da-8867-2f08435ef232\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T13:37:26.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"8d947afa-c0fa-49da-8867-2f08435ef232\",\n        \"receiverDFSPTxnID\": \"8d947afa-c0fa-49da-8867-2f08435ef232\",\n        \"settlementWindowId\": \"87\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"ac35b32f-4a64-4dd1-b8ed-7b03d9f425b2\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T16:56:14.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"ac35b32f-4a64-4dd1-b8ed-7b03d9f425b2\",\n        \"receiverDFSPTxnID\": \"ac35b32f-4a64-4dd1-b8ed-7b03d9f425b2\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"1fe015bc-4f03-427d-9dbb-3690dfbea599\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-07T02:19:19.000Z\",\n        \"settlementDate\": \"2019-04-07T02:19:51.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"1fe015bc-4f03-427d-9dbb-3690dfbea599\",\n        \"receiverDFSPTxnID\": \"1fe015bc-4f03-427d-9dbb-3690dfbea599\",\n        \"settlementWindowId\": \"41\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"17427a6a-d207-4e9c-a579-f010e8d660f3\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T03:43:39.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"17427a6a-d207-4e9c-a579-f010e8d660f3\",\n        \"receiverDFSPTxnID\": \"17427a6a-d207-4e9c-a579-f010e8d660f3\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"37fe099c-706b-4cee-88ec-34ecc19b3b2a\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T03:03:22.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"37fe099c-706b-4cee-88ec-34ecc19b3b2a\",\n        \"receiverDFSPTxnID\": \"37fe099c-706b-4cee-88ec-34ecc19b3b2a\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"318844bb-0adc-472b-bff1-8eff15a3bce2\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:35:38.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"318844bb-0adc-472b-bff1-8eff15a3bce2\",\n        \"receiverDFSPTxnID\": \"318844bb-0adc-472b-bff1-8eff15a3bce2\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"28543361-c904-4010-9b47-2296931829bd\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:36:50.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"28543361-c904-4010-9b47-2296931829bd\",\n        \"receiverDFSPTxnID\": \"28543361-c904-4010-9b47-2296931829bd\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"4531f20f-f823-416e-b524-5a1e3b8a5f53\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T17:51:10.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"4531f20f-f823-416e-b524-5a1e3b8a5f53\",\n        \"receiverDFSPTxnID\": \"4531f20f-f823-416e-b524-5a1e3b8a5f53\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"7162ca6d-86af-447c-9b5b-63e554b01147\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T03:02:10.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"7162ca6d-86af-447c-9b5b-63e554b01147\",\n        \"receiverDFSPTxnID\": \"7162ca6d-86af-447c-9b5b-63e554b01147\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"463e38c4-9f96-40ac-b401-baa21bb46352\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-30T14:05:08.000Z\",\n        \"settlementDate\": \"2019-04-30T14:11:47.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"463e38c4-9f96-40ac-b401-baa21bb46352\",\n        \"receiverDFSPTxnID\": \"463e38c4-9f96-40ac-b401-baa21bb46352\",\n        \"settlementWindowId\": \"96\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"155c8cc0-fbcb-473a-8b32-59ea1262956a\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T03:01:16.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"155c8cc0-fbcb-473a-8b32-59ea1262956a\",\n        \"receiverDFSPTxnID\": \"155c8cc0-fbcb-473a-8b32-59ea1262956a\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"96331867-9752-4367-b612-f1baa3b58ece\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T17:18:51.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"96331867-9752-4367-b612-f1baa3b58ece\",\n        \"receiverDFSPTxnID\": \"96331867-9752-4367-b612-f1baa3b58ece\",\n        \"settlementWindowId\": \"68\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"286e91e3-01ac-4b76-8173-e5ac0efa47e5\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T01:55:19.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"286e91e3-01ac-4b76-8173-e5ac0efa47e5\",\n        \"receiverDFSPTxnID\": \"286e91e3-01ac-4b76-8173-e5ac0efa47e5\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"712d6666-7986-4516-b0e5-7ffdb8f37e3c\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-02T21:02:29.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"712d6666-7986-4516-b0e5-7ffdb8f37e3c\",\n        \"receiverDFSPTxnID\": \"712d6666-7986-4516-b0e5-7ffdb8f37e3c\",\n        \"settlementWindowId\": \"7\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"3775e274-498c-4ea2-86e2-60e69089cb66\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T13:23:30.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"3775e274-498c-4ea2-86e2-60e69089cb66\",\n        \"receiverDFSPTxnID\": \"3775e274-498c-4ea2-86e2-60e69089cb66\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"1bf37db4-3ef1-4dbb-9c6d-fe5e4f14a2b4\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T02:32:43.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"1bf37db4-3ef1-4dbb-9c6d-fe5e4f14a2b4\",\n        \"receiverDFSPTxnID\": \"1bf37db4-3ef1-4dbb-9c6d-fe5e4f14a2b4\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"da641472-1976-475a-a53b-8414021530b6\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T21:16:55.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"da641472-1976-475a-a53b-8414021530b6\",\n        \"receiverDFSPTxnID\": \"da641472-1976-475a-a53b-8414021530b6\",\n        \"settlementWindowId\": \"26\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"8d54d60f-3f6a-4447-a16f-67045ef4a7b7\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T00:47:58.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"8d54d60f-3f6a-4447-a16f-67045ef4a7b7\",\n        \"receiverDFSPTxnID\": \"8d54d60f-3f6a-4447-a16f-67045ef4a7b7\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"6c91bdd7-ba24-4d83-beaa-3c7bd3edf524\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-25T16:23:00.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"6c91bdd7-ba24-4d83-beaa-3c7bd3edf524\",\n        \"receiverDFSPTxnID\": \"6c91bdd7-ba24-4d83-beaa-3c7bd3edf524\",\n        \"settlementWindowId\": \"77\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"e9f53c1b-58e7-4f7d-b427-d49a18a51fba\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-12T16:21:07.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"e9f53c1b-58e7-4f7d-b427-d49a18a51fba\",\n        \"receiverDFSPTxnID\": \"e9f53c1b-58e7-4f7d-b427-d49a18a51fba\",\n        \"settlementWindowId\": \"53\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"de9fb3cf-c755-492f-b9e5-06b315a6d8c7\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T14:26:59.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"de9fb3cf-c755-492f-b9e5-06b315a6d8c7\",\n        \"receiverDFSPTxnID\": \"de9fb3cf-c755-492f-b9e5-06b315a6d8c7\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"e5b58ef7-bf3b-4d07-a2ab-ffa85fd804d7\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T21:32:33.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"e5b58ef7-bf3b-4d07-a2ab-ffa85fd804d7\",\n        \"receiverDFSPTxnID\": \"e5b58ef7-bf3b-4d07-a2ab-ffa85fd804d7\",\n        \"settlementWindowId\": \"28\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"0955693f-ad63-4791-a226-e96b0c377b0d\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T15:54:05.000Z\",\n        \"settlementDate\": \"2019-04-29T16:00:39.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"0955693f-ad63-4791-a226-e96b0c377b0d\",\n        \"receiverDFSPTxnID\": \"0955693f-ad63-4791-a226-e96b0c377b0d\",\n        \"settlementWindowId\": \"92\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"1e1091d0-5bb3-46c8-ab98-5144f85e8ab3\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T02:36:10.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"1e1091d0-5bb3-46c8-ab98-5144f85e8ab3\",\n        \"receiverDFSPTxnID\": \"1e1091d0-5bb3-46c8-ab98-5144f85e8ab3\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"72129be4-f982-47ae-80f9-0d429b8e09f7\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T16:27:56.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"72129be4-f982-47ae-80f9-0d429b8e09f7\",\n        \"receiverDFSPTxnID\": \"72129be4-f982-47ae-80f9-0d429b8e09f7\",\n        \"settlementWindowId\": \"10\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"bb8594bb-de6b-40b8-8a09-cc9cbfa6fe5a\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T17:26:29.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"bb8594bb-de6b-40b8-8a09-cc9cbfa6fe5a\",\n        \"receiverDFSPTxnID\": \"bb8594bb-de6b-40b8-8a09-cc9cbfa6fe5a\",\n        \"settlementWindowId\": \"61\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"2266f5d6-4931-4e25-ad37-e048fa7df266\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-02T16:26:03.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"2266f5d6-4931-4e25-ad37-e048fa7df266\",\n        \"receiverDFSPTxnID\": \"2266f5d6-4931-4e25-ad37-e048fa7df266\",\n        \"settlementWindowId\": \"7\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"503e25a0-ae19-46e7-b0f2-e5ebc1f6bf99\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T17:51:46.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"503e25a0-ae19-46e7-b0f2-e5ebc1f6bf99\",\n        \"receiverDFSPTxnID\": \"503e25a0-ae19-46e7-b0f2-e5ebc1f6bf99\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"31f85bd6-8fcf-4013-8c7f-5f244003c1bd\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T15:07:11.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"4994880\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"31f85bd6-8fcf-4013-8c7f-5f244003c1bd\",\n        \"receiverDFSPTxnID\": \"31f85bd6-8fcf-4013-8c7f-5f244003c1bd\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"a82d718f-6902-4156-b437-4615b0979c83\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-12T16:38:22.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"a82d718f-6902-4156-b437-4615b0979c83\",\n        \"receiverDFSPTxnID\": \"a82d718f-6902-4156-b437-4615b0979c83\",\n        \"settlementWindowId\": \"53\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"228b883d-f9a9-43d4-8d36-f74518ff4396\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T02:33:46.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"228b883d-f9a9-43d4-8d36-f74518ff4396\",\n        \"receiverDFSPTxnID\": \"228b883d-f9a9-43d4-8d36-f74518ff4396\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"af2236a8-b3f7-4190-8d99-e10caa6a2354\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T22:31:14.000Z\",\n        \"settlementDate\": \"2019-04-06T22:31:28.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"af2236a8-b3f7-4190-8d99-e10caa6a2354\",\n        \"receiverDFSPTxnID\": \"af2236a8-b3f7-4190-8d99-e10caa6a2354\",\n        \"settlementWindowId\": \"35\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"b44d1fb9-d8f0-4b5a-b916-b222515ff232\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T15:53:32.000Z\",\n        \"settlementDate\": \"2019-04-29T16:00:39.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"b44d1fb9-d8f0-4b5a-b916-b222515ff232\",\n        \"receiverDFSPTxnID\": \"b44d1fb9-d8f0-4b5a-b916-b222515ff232\",\n        \"settlementWindowId\": \"92\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"9b6899d9-d92a-4497-b5ba-1994ef953dd9\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-25T20:23:09.000Z\",\n        \"settlementDate\": \"2019-04-25T20:23:59.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"9b6899d9-d92a-4497-b5ba-1994ef953dd9\",\n        \"receiverDFSPTxnID\": \"9b6899d9-d92a-4497-b5ba-1994ef953dd9\",\n        \"settlementWindowId\": \"78\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"6af9a47d-7444-4354-96f2-5914b1120395\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T14:52:19.000Z\",\n        \"settlementDate\": \"2019-04-29T14:58:21.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"6af9a47d-7444-4354-96f2-5914b1120395\",\n        \"receiverDFSPTxnID\": \"6af9a47d-7444-4354-96f2-5914b1120395\",\n        \"settlementWindowId\": \"89\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"f78d1369-8e59-42b1-8130-702147b8ea2a\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T22:51:06.000Z\",\n        \"settlementDate\": \"2019-04-06T22:54:39.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"f78d1369-8e59-42b1-8130-702147b8ea2a\",\n        \"receiverDFSPTxnID\": \"f78d1369-8e59-42b1-8130-702147b8ea2a\",\n        \"settlementWindowId\": \"37\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"67e0c500-84a6-4569-961e-beacf845ba08\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:01:20.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"67e0c500-84a6-4569-961e-beacf845ba08\",\n        \"receiverDFSPTxnID\": \"67e0c500-84a6-4569-961e-beacf845ba08\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"d8ba697f-aae0-4146-9165-c7f72b0a3a9f\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T16:57:54.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"d8ba697f-aae0-4146-9165-c7f72b0a3a9f\",\n        \"receiverDFSPTxnID\": \"d8ba697f-aae0-4146-9165-c7f72b0a3a9f\",\n        \"settlementWindowId\": \"68\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"a8cf5e59-aca9-407d-84b1-2f0819cfc3fb\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T14:57:25.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"a8cf5e59-aca9-407d-84b1-2f0819cfc3fb\",\n        \"receiverDFSPTxnID\": \"a8cf5e59-aca9-407d-84b1-2f0819cfc3fb\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"7b135b03-2083-4874-a7c8-dc46976c8f18\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T18:06:39.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"7b135b03-2083-4874-a7c8-dc46976c8f18\",\n        \"receiverDFSPTxnID\": \"7b135b03-2083-4874-a7c8-dc46976c8f18\",\n        \"settlementWindowId\": \"61\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"e935df3b-7a3c-4019-a317-05c620088a78\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-10T00:41:37.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"e935df3b-7a3c-4019-a317-05c620088a78\",\n        \"receiverDFSPTxnID\": \"e935df3b-7a3c-4019-a317-05c620088a78\",\n        \"settlementWindowId\": \"51\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"0e310a48-ebd0-45be-87be-b56bd190bbc5\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T04:22:23.000Z\",\n        \"settlementDate\": \"2019-04-29T04:30:06.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"0e310a48-ebd0-45be-87be-b56bd190bbc5\",\n        \"receiverDFSPTxnID\": \"0e310a48-ebd0-45be-87be-b56bd190bbc5\",\n        \"settlementWindowId\": \"85\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"c0d6c721-a0fb-41cd-930a-7772ba1de667\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-30T13:14:38.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"c0d6c721-a0fb-41cd-930a-7772ba1de667\",\n        \"receiverDFSPTxnID\": \"c0d6c721-a0fb-41cd-930a-7772ba1de667\",\n        \"settlementWindowId\": \"95\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"0084eb69-fa44-44e8-9f6f-47473390031e\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T03:35:00.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"0084eb69-fa44-44e8-9f6f-47473390031e\",\n        \"receiverDFSPTxnID\": \"0084eb69-fa44-44e8-9f6f-47473390031e\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"8655737b-273d-48f7-906c-dd7a0a1010f0\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T13:35:38.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"8655737b-273d-48f7-906c-dd7a0a1010f0\",\n        \"receiverDFSPTxnID\": \"8655737b-273d-48f7-906c-dd7a0a1010f0\",\n        \"settlementWindowId\": \"87\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"27e1bb70-1a40-46ab-9690-b93e9e3e876d\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-24T14:52:39.000Z\",\n        \"settlementDate\": \"2019-04-24T14:53:07.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"27e1bb70-1a40-46ab-9690-b93e9e3e876d\",\n        \"receiverDFSPTxnID\": \"27e1bb70-1a40-46ab-9690-b93e9e3e876d\",\n        \"settlementWindowId\": \"71\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"fc3da0c1-0ad4-4806-9000-683ad859eb4c\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-09T12:51:40.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"fc3da0c1-0ad4-4806-9000-683ad859eb4c\",\n        \"receiverDFSPTxnID\": \"fc3da0c1-0ad4-4806-9000-683ad859eb4c\",\n        \"settlementWindowId\": \"48\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"acd6fd9c-525a-4ea3-a10a-05f8f7ce06cf\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:18:16.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"acd6fd9c-525a-4ea3-a10a-05f8f7ce06cf\",\n        \"receiverDFSPTxnID\": \"acd6fd9c-525a-4ea3-a10a-05f8f7ce06cf\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"b522b8b3-98f1-4add-8c19-cb67b9a2cdf0\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T13:47:48.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"b522b8b3-98f1-4add-8c19-cb67b9a2cdf0\",\n        \"receiverDFSPTxnID\": \"b522b8b3-98f1-4add-8c19-cb67b9a2cdf0\",\n        \"settlementWindowId\": \"9\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"4c60c56c-9101-447a-904f-9c9301e93808\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T13:41:30.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"4c60c56c-9101-447a-904f-9c9301e93808\",\n        \"receiverDFSPTxnID\": \"4c60c56c-9101-447a-904f-9c9301e93808\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"040c39cd-cd11-4c3c-9b27-4e9073efdd1f\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T21:32:50.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"040c39cd-cd11-4c3c-9b27-4e9073efdd1f\",\n        \"receiverDFSPTxnID\": \"040c39cd-cd11-4c3c-9b27-4e9073efdd1f\",\n        \"settlementWindowId\": \"28\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"80b9a56f-0f3d-426d-b498-491ef0d61909\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T03:36:43.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"80b9a56f-0f3d-426d-b498-491ef0d61909\",\n        \"receiverDFSPTxnID\": \"80b9a56f-0f3d-426d-b498-491ef0d61909\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"b0e0a028-874d-4072-9055-5f40ccbf8f20\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-11T04:34:37.000Z\",\n        \"settlementDate\": \"2019-04-12T19:26:38.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"b0e0a028-874d-4072-9055-5f40ccbf8f20\",\n        \"receiverDFSPTxnID\": \"b0e0a028-874d-4072-9055-5f40ccbf8f20\",\n        \"settlementWindowId\": \"52\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"806358f6-d1b4-4197-be34-c877ddc26308\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T15:38:40.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"806358f6-d1b4-4197-be34-c877ddc26308\",\n        \"receiverDFSPTxnID\": \"806358f6-d1b4-4197-be34-c877ddc26308\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"7755f806-3cdc-4d70-96db-cb41db4ee08c\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T13:13:08.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"7755f806-3cdc-4d70-96db-cb41db4ee08c\",\n        \"receiverDFSPTxnID\": \"7755f806-3cdc-4d70-96db-cb41db4ee08c\",\n        \"settlementWindowId\": \"64\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"d3bfcd6a-52b0-41da-aa6e-156aacd41056\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-12T16:22:05.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"d3bfcd6a-52b0-41da-aa6e-156aacd41056\",\n        \"receiverDFSPTxnID\": \"d3bfcd6a-52b0-41da-aa6e-156aacd41056\",\n        \"settlementWindowId\": \"53\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"f8e64452-b934-43ed-a70f-84203dd1c2b1\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T00:46:49.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"f8e64452-b934-43ed-a70f-84203dd1c2b1\",\n        \"receiverDFSPTxnID\": \"f8e64452-b934-43ed-a70f-84203dd1c2b1\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"fd99bae4-96f2-4e3a-9c64-0b1bb6941526\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:42:39.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"fd99bae4-96f2-4e3a-9c64-0b1bb6941526\",\n        \"receiverDFSPTxnID\": \"fd99bae4-96f2-4e3a-9c64-0b1bb6941526\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"f0fabeb1-de24-46ea-bfb3-e6a543fe9770\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T17:17:11.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"f0fabeb1-de24-46ea-bfb3-e6a543fe9770\",\n        \"receiverDFSPTxnID\": \"f0fabeb1-de24-46ea-bfb3-e6a543fe9770\",\n        \"settlementWindowId\": \"68\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"72d50a7c-d3ce-4065-a5bd-5850c1fb2cab\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-25T16:25:23.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"72d50a7c-d3ce-4065-a5bd-5850c1fb2cab\",\n        \"receiverDFSPTxnID\": \"72d50a7c-d3ce-4065-a5bd-5850c1fb2cab\",\n        \"settlementWindowId\": \"77\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"da0c502f-2da6-4bd7-b12c-11c536e0b046\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T13:38:01.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"da0c502f-2da6-4bd7-b12c-11c536e0b046\",\n        \"receiverDFSPTxnID\": \"da0c502f-2da6-4bd7-b12c-11c536e0b046\",\n        \"settlementWindowId\": \"87\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"c94d0e0c-11d9-41ff-a590-4c2717ecfdcf\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-11T22:34:59.000Z\",\n        \"settlementDate\": \"2019-04-12T19:26:38.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"c94d0e0c-11d9-41ff-a590-4c2717ecfdcf\",\n        \"receiverDFSPTxnID\": \"c94d0e0c-11d9-41ff-a590-4c2717ecfdcf\",\n        \"settlementWindowId\": \"52\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"48b49850-b5ab-4057-be07-4c2aada5a8d5\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T01:53:37.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"48b49850-b5ab-4057-be07-4c2aada5a8d5\",\n        \"receiverDFSPTxnID\": \"48b49850-b5ab-4057-be07-4c2aada5a8d5\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"0c0756ce-b3ed-47e5-9e67-39d1f099fc91\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T18:06:05.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"0c0756ce-b3ed-47e5-9e67-39d1f099fc91\",\n        \"receiverDFSPTxnID\": \"0c0756ce-b3ed-47e5-9e67-39d1f099fc91\",\n        \"settlementWindowId\": \"61\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"5e70efc9-05a5-4e19-acb2-0803b417ab24\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T18:36:50.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"5e70efc9-05a5-4e19-acb2-0803b417ab24\",\n        \"receiverDFSPTxnID\": \"5e70efc9-05a5-4e19-acb2-0803b417ab24\",\n        \"settlementWindowId\": \"12\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"9154c9de-5af8-4c73-8831-7de2487d1015\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T03:47:32.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"9154c9de-5af8-4c73-8831-7de2487d1015\",\n        \"receiverDFSPTxnID\": \"9154c9de-5af8-4c73-8831-7de2487d1015\",\n        \"settlementWindowId\": \"84\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"1df60746-b3fb-40f0-a603-3b43947b104e\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T01:47:05.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"1df60746-b3fb-40f0-a603-3b43947b104e\",\n        \"receiverDFSPTxnID\": \"1df60746-b3fb-40f0-a603-3b43947b104e\",\n        \"settlementWindowId\": \"22\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"5ee9561e-53ac-4514-a624-29e8964ee4b9\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T03:06:02.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"224\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"5ee9561e-53ac-4514-a624-29e8964ee4b9\",\n        \"receiverDFSPTxnID\": \"5ee9561e-53ac-4514-a624-29e8964ee4b9\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"cfd148fd-28d1-45ef-9fd6-89638c0d3f64\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T19:06:05.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"cfd148fd-28d1-45ef-9fd6-89638c0d3f64\",\n        \"receiverDFSPTxnID\": \"cfd148fd-28d1-45ef-9fd6-89638c0d3f64\",\n        \"settlementWindowId\": \"15\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"372a1380-7f29-4944-a772-56966dc0a176\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T18:33:13.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"372a1380-7f29-4944-a772-56966dc0a176\",\n        \"receiverDFSPTxnID\": \"372a1380-7f29-4944-a772-56966dc0a176\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"cf591f0a-224c-4614-b4b1-a9e73249e1aa\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T16:16:12.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"cf591f0a-224c-4614-b4b1-a9e73249e1aa\",\n        \"receiverDFSPTxnID\": \"cf591f0a-224c-4614-b4b1-a9e73249e1aa\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"79d4a2c2-5af2-47bb-9179-7cda39d738b9\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T18:07:12.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"79d4a2c2-5af2-47bb-9179-7cda39d738b9\",\n        \"receiverDFSPTxnID\": \"79d4a2c2-5af2-47bb-9179-7cda39d738b9\",\n        \"settlementWindowId\": \"61\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"3922d454-00ab-4328-85ec-3d9631270eb2\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T04:15:45.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"3922d454-00ab-4328-85ec-3d9631270eb2\",\n        \"receiverDFSPTxnID\": \"3922d454-00ab-4328-85ec-3d9631270eb2\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"e43a1b0c-634e-4e05-87ff-4d831685e421\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T19:46:03.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"e43a1b0c-634e-4e05-87ff-4d831685e421\",\n        \"receiverDFSPTxnID\": \"e43a1b0c-634e-4e05-87ff-4d831685e421\",\n        \"settlementWindowId\": \"16\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"d0fdf9ef-119e-4204-8870-744f40f95114\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-05T20:14:00.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"d0fdf9ef-119e-4204-8870-744f40f95114\",\n        \"receiverDFSPTxnID\": \"d0fdf9ef-119e-4204-8870-744f40f95114\",\n        \"settlementWindowId\": \"18\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"e88088ad-f753-4d24-a6a3-fe9810f4e43c\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T14:51:46.000Z\",\n        \"settlementDate\": \"2019-04-29T14:58:21.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"e88088ad-f753-4d24-a6a3-fe9810f4e43c\",\n        \"receiverDFSPTxnID\": \"e88088ad-f753-4d24-a6a3-fe9810f4e43c\",\n        \"settlementWindowId\": \"89\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"187e976d-4f00-436b-a98c-45c4005b39bf\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-07T02:05:51.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"4000\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"187e976d-4f00-436b-a98c-45c4005b39bf\",\n        \"receiverDFSPTxnID\": \"187e976d-4f00-436b-a98c-45c4005b39bf\",\n        \"settlementWindowId\": \"40\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"3aaedb2c-b6b0-4e6c-b126-fe017fe22026\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T18:45:26.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"3aaedb2c-b6b0-4e6c-b126-fe017fe22026\",\n        \"receiverDFSPTxnID\": \"3aaedb2c-b6b0-4e6c-b126-fe017fe22026\",\n        \"settlementWindowId\": \"61\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"3ac3572d-6a23-438c-a348-ca5da4426ccc\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-24T10:26:29.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"3ac3572d-6a23-438c-a348-ca5da4426ccc\",\n        \"receiverDFSPTxnID\": \"3ac3572d-6a23-438c-a348-ca5da4426ccc\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"39501d53-7034-4a79-b080-b3a921e52ece\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-11T04:35:45.000Z\",\n        \"settlementDate\": \"2019-04-12T19:26:38.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"39501d53-7034-4a79-b080-b3a921e52ece\",\n        \"receiverDFSPTxnID\": \"39501d53-7034-4a79-b080-b3a921e52ece\",\n        \"settlementWindowId\": \"52\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"3cffc2cf-738d-4331-bede-92fa71c9199a\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T18:49:08.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"3cffc2cf-738d-4331-bede-92fa71c9199a\",\n        \"receiverDFSPTxnID\": \"3cffc2cf-738d-4331-bede-92fa71c9199a\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"4b6f8657-2a8d-4e84-a112-64488564b65c\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:32:33.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"4b6f8657-2a8d-4e84-a112-64488564b65c\",\n        \"receiverDFSPTxnID\": \"4b6f8657-2a8d-4e84-a112-64488564b65c\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"218944bd-4734-4948-898d-1343b71c27bf\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-14T23:52:28.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"218944bd-4734-4948-898d-1343b71c27bf\",\n        \"receiverDFSPTxnID\": \"218944bd-4734-4948-898d-1343b71c27bf\",\n        \"settlementWindowId\": \"56\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"60b4d801-b333-4dab-9163-ed96ff24a87f\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-30T14:03:27.000Z\",\n        \"settlementDate\": \"2019-04-30T14:11:47.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"60b4d801-b333-4dab-9163-ed96ff24a87f\",\n        \"receiverDFSPTxnID\": \"60b4d801-b333-4dab-9163-ed96ff24a87f\",\n        \"settlementWindowId\": \"96\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"4268e59c-fe11-4557-b1ca-9f1bc7327eb3\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T01:26:39.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"4268e59c-fe11-4557-b1ca-9f1bc7327eb3\",\n        \"receiverDFSPTxnID\": \"4268e59c-fe11-4557-b1ca-9f1bc7327eb3\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"9ef9c961-3603-41e1-a768-b9bcbecf4773\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T15:21:15.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"9ef9c961-3603-41e1-a768-b9bcbecf4773\",\n        \"receiverDFSPTxnID\": \"9ef9c961-3603-41e1-a768-b9bcbecf4773\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"4af52e2d-19b5-4c52-a646-bb043e7de870\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-24T09:47:03.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"206\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"4af52e2d-19b5-4c52-a646-bb043e7de870\",\n        \"receiverDFSPTxnID\": \"4af52e2d-19b5-4c52-a646-bb043e7de870\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"4212f2f9-6d79-47cc-bc07-ab70e063e2fb\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-11T22:20:54.000Z\",\n        \"settlementDate\": \"2019-04-12T19:26:38.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"4212f2f9-6d79-47cc-bc07-ab70e063e2fb\",\n        \"receiverDFSPTxnID\": \"4212f2f9-6d79-47cc-bc07-ab70e063e2fb\",\n        \"settlementWindowId\": \"52\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"351c3dc4-142b-4998-9ca1-91ec875300cd\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:34:17.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"351c3dc4-142b-4998-9ca1-91ec875300cd\",\n        \"receiverDFSPTxnID\": \"351c3dc4-142b-4998-9ca1-91ec875300cd\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"43300975-4219-4021-a65e-f052aadae8f5\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T17:39:29.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"43300975-4219-4021-a65e-f052aadae8f5\",\n        \"receiverDFSPTxnID\": \"43300975-4219-4021-a65e-f052aadae8f5\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"70c388a8-9d16-423f-9f2f-ae6e996941d5\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T15:38:06.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"70c388a8-9d16-423f-9f2f-ae6e996941d5\",\n        \"receiverDFSPTxnID\": \"70c388a8-9d16-423f-9f2f-ae6e996941d5\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"31414b5c-5b8a-4ec0-aaef-01a08ba7b84b\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T17:49:00.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"31414b5c-5b8a-4ec0-aaef-01a08ba7b84b\",\n        \"receiverDFSPTxnID\": \"31414b5c-5b8a-4ec0-aaef-01a08ba7b84b\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"b3948218-cac3-429d-90a8-2efed5368c26\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T17:17:45.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"b3948218-cac3-429d-90a8-2efed5368c26\",\n        \"receiverDFSPTxnID\": \"b3948218-cac3-429d-90a8-2efed5368c26\",\n        \"settlementWindowId\": \"68\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"b7732b8e-3d50-48d0-b17b-54c47aabfbf2\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T18:49:10.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"b7732b8e-3d50-48d0-b17b-54c47aabfbf2\",\n        \"receiverDFSPTxnID\": \"b7732b8e-3d50-48d0-b17b-54c47aabfbf2\",\n        \"settlementWindowId\": \"13\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"e1c17a00-a36d-4b61-b7d2-1462856b7af1\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T16:28:44.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"215\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"e1c17a00-a36d-4b61-b7d2-1462856b7af1\",\n        \"receiverDFSPTxnID\": \"e1c17a00-a36d-4b61-b7d2-1462856b7af1\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"c92e2246-305c-4abb-b481-94c265c71e70\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T15:05:18.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"c92e2246-305c-4abb-b481-94c265c71e70\",\n        \"receiverDFSPTxnID\": \"c92e2246-305c-4abb-b481-94c265c71e70\",\n        \"settlementWindowId\": \"90\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"9ca42c26-216c-45b7-be85-5603a63740ae\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-10T00:38:27.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"9ca42c26-216c-45b7-be85-5603a63740ae\",\n        \"receiverDFSPTxnID\": \"9ca42c26-216c-45b7-be85-5603a63740ae\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"5fa21019-839d-4a2e-8c9b-106603822d41\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-24T10:20:30.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"5fa21019-839d-4a2e-8c9b-106603822d41\",\n        \"receiverDFSPTxnID\": \"5fa21019-839d-4a2e-8c9b-106603822d41\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"481fb6ff-4439-48f7-aa4c-33de41b65291\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T17:08:05.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"481fb6ff-4439-48f7-aa4c-33de41b65291\",\n        \"receiverDFSPTxnID\": \"481fb6ff-4439-48f7-aa4c-33de41b65291\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"b2beb48a-5dbd-44f3-8ba5-c256bbd8e38e\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T22:47:43.000Z\",\n        \"settlementDate\": \"2019-04-17T22:53:56.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"b2beb48a-5dbd-44f3-8ba5-c256bbd8e38e\",\n        \"receiverDFSPTxnID\": \"b2beb48a-5dbd-44f3-8ba5-c256bbd8e38e\",\n        \"settlementWindowId\": \"66\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"487f9be9-45c1-4a5d-a44e-e478795cca06\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T18:34:28.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"487f9be9-45c1-4a5d-a44e-e478795cca06\",\n        \"receiverDFSPTxnID\": \"487f9be9-45c1-4a5d-a44e-e478795cca06\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"f82c00c5-078c-4f4a-8c79-0276da18f3ba\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T16:25:33.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"f82c00c5-078c-4f4a-8c79-0276da18f3ba\",\n        \"receiverDFSPTxnID\": \"f82c00c5-078c-4f4a-8c79-0276da18f3ba\",\n        \"settlementWindowId\": \"68\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"6110c316-2e03-4102-ba49-3df8c04e1d3d\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-14T23:50:40.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"6110c316-2e03-4102-ba49-3df8c04e1d3d\",\n        \"receiverDFSPTxnID\": \"6110c316-2e03-4102-ba49-3df8c04e1d3d\",\n        \"settlementWindowId\": \"56\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"6a2557dd-d47f-446c-83d0-e4f0b00f0634\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-11T05:14:13.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"435\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"6a2557dd-d47f-446c-83d0-e4f0b00f0634\",\n        \"receiverDFSPTxnID\": \"6a2557dd-d47f-446c-83d0-e4f0b00f0634\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"54bf110d-f3c6-4c2b-af3a-87f7a96f137f\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T15:40:20.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"54bf110d-f3c6-4c2b-af3a-87f7a96f137f\",\n        \"receiverDFSPTxnID\": \"54bf110d-f3c6-4c2b-af3a-87f7a96f137f\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"076e4630-f481-4789-9553-063a8a3fd72e\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T15:51:33.000Z\",\n        \"settlementDate\": \"2019-04-29T16:00:39.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"076e4630-f481-4789-9553-063a8a3fd72e\",\n        \"receiverDFSPTxnID\": \"076e4630-f481-4789-9553-063a8a3fd72e\",\n        \"settlementWindowId\": \"92\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"ba650e93-277d-4e43-b7a4-aa6ba79e32dd\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-25T16:23:58.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"ba650e93-277d-4e43-b7a4-aa6ba79e32dd\",\n        \"receiverDFSPTxnID\": \"ba650e93-277d-4e43-b7a4-aa6ba79e32dd\",\n        \"settlementWindowId\": \"77\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"0d58e9cf-b511-4182-8d38-fdb3b9ddcc74\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-25T14:59:02.000Z\",\n        \"settlementDate\": \"2019-04-25T14:59:30.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"0d58e9cf-b511-4182-8d38-fdb3b9ddcc74\",\n        \"receiverDFSPTxnID\": \"0d58e9cf-b511-4182-8d38-fdb3b9ddcc74\",\n        \"settlementWindowId\": \"74\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"857ce0e4-4d6e-4454-98fa-ac6590d4b8a6\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-08T02:50:02.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"857ce0e4-4d6e-4454-98fa-ac6590d4b8a6\",\n        \"receiverDFSPTxnID\": \"857ce0e4-4d6e-4454-98fa-ac6590d4b8a6\",\n        \"settlementWindowId\": \"45\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"4b18d77c-3051-481a-8d21-a0b46c6de250\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-30T13:53:35.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"4b18d77c-3051-481a-8d21-a0b46c6de250\",\n        \"receiverDFSPTxnID\": \"4b18d77c-3051-481a-8d21-a0b46c6de250\",\n        \"settlementWindowId\": \"95\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"3af30999-0ce1-4853-bdd2-bd6b9f28667b\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T00:49:06.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"3af30999-0ce1-4853-bdd2-bd6b9f28667b\",\n        \"receiverDFSPTxnID\": \"3af30999-0ce1-4853-bdd2-bd6b9f28667b\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"9b9ce136-25d2-4f44-bd74-20121dd69bbd\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T18:48:50.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"9b9ce136-25d2-4f44-bd74-20121dd69bbd\",\n        \"receiverDFSPTxnID\": \"9b9ce136-25d2-4f44-bd74-20121dd69bbd\",\n        \"settlementWindowId\": \"13\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"647eb5c1-2787-464c-b770-95dd9bf442fe\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-30T14:04:34.000Z\",\n        \"settlementDate\": \"2019-04-30T14:11:47.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"647eb5c1-2787-464c-b770-95dd9bf442fe\",\n        \"receiverDFSPTxnID\": \"647eb5c1-2787-464c-b770-95dd9bf442fe\",\n        \"settlementWindowId\": \"96\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"b1b80bc8-0566-47d4-b4a0-acbaf02d2206\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-10T01:41:02.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"432\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"b1b80bc8-0566-47d4-b4a0-acbaf02d2206\",\n        \"receiverDFSPTxnID\": \"b1b80bc8-0566-47d4-b4a0-acbaf02d2206\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"f7140092-7b65-43c4-9d4e-d6d4efca573e\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-25T14:58:56.000Z\",\n        \"settlementDate\": \"2019-04-25T14:59:30.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"f7140092-7b65-43c4-9d4e-d6d4efca573e\",\n        \"receiverDFSPTxnID\": \"f7140092-7b65-43c4-9d4e-d6d4efca573e\",\n        \"settlementWindowId\": \"74\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"4debd248-4f09-4d19-ad20-062951a41a49\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T17:03:34.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"4debd248-4f09-4d19-ad20-062951a41a49\",\n        \"receiverDFSPTxnID\": \"4debd248-4f09-4d19-ad20-062951a41a49\",\n        \"settlementWindowId\": \"68\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"4de50399-519a-4c54-9dbe-e9124507c56c\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T16:26:07.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"4de50399-519a-4c54-9dbe-e9124507c56c\",\n        \"receiverDFSPTxnID\": \"4de50399-519a-4c54-9dbe-e9124507c56c\",\n        \"settlementWindowId\": \"68\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"b238102f-1600-4490-8a32-cdc61434ae0f\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T02:31:30.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"b238102f-1600-4490-8a32-cdc61434ae0f\",\n        \"receiverDFSPTxnID\": \"b238102f-1600-4490-8a32-cdc61434ae0f\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"4f23d836-e312-451b-b41a-a8b157b0f8f9\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T17:34:54.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"4f23d836-e312-451b-b41a-a8b157b0f8f9\",\n        \"receiverDFSPTxnID\": \"4f23d836-e312-451b-b41a-a8b157b0f8f9\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"04b57c7c-8761-4ccd-b980-20ab7b6828cf\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:07:15.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"04b57c7c-8761-4ccd-b980-20ab7b6828cf\",\n        \"receiverDFSPTxnID\": \"04b57c7c-8761-4ccd-b980-20ab7b6828cf\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"3bb0abc2-af9c-48e2-8168-a6047475f460\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T16:32:53.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"3bb0abc2-af9c-48e2-8168-a6047475f460\",\n        \"receiverDFSPTxnID\": \"3bb0abc2-af9c-48e2-8168-a6047475f460\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"ad0ebe20-4fbb-4d53-be0d-a517b0685204\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T14:26:25.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"ad0ebe20-4fbb-4d53-be0d-a517b0685204\",\n        \"receiverDFSPTxnID\": \"ad0ebe20-4fbb-4d53-be0d-a517b0685204\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"af9c9b0e-a574-4ebe-995a-04600e9a9b9a\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T19:45:44.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"af9c9b0e-a574-4ebe-995a-04600e9a9b9a\",\n        \"receiverDFSPTxnID\": \"af9c9b0e-a574-4ebe-995a-04600e9a9b9a\",\n        \"settlementWindowId\": \"16\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"3e55968d-ae62-4e60-969c-be84256d01ed\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T17:15:47.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"3e55968d-ae62-4e60-969c-be84256d01ed\",\n        \"receiverDFSPTxnID\": \"3e55968d-ae62-4e60-969c-be84256d01ed\",\n        \"settlementWindowId\": \"68\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"686668c4-4b86-4bc3-af7c-01d2f8fcb8f8\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T17:16:37.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"686668c4-4b86-4bc3-af7c-01d2f8fcb8f8\",\n        \"receiverDFSPTxnID\": \"686668c4-4b86-4bc3-af7c-01d2f8fcb8f8\",\n        \"settlementWindowId\": \"68\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"ecfd1473-49bd-4b81-b318-b02dc8234dce\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-10T00:47:24.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"434\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"ecfd1473-49bd-4b81-b318-b02dc8234dce\",\n        \"receiverDFSPTxnID\": \"ecfd1473-49bd-4b81-b318-b02dc8234dce\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"dabf8c37-c638-4667-acc5-ac8be72743d8\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-25T16:26:30.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"dabf8c37-c638-4667-acc5-ac8be72743d8\",\n        \"receiverDFSPTxnID\": \"dabf8c37-c638-4667-acc5-ac8be72743d8\",\n        \"settlementWindowId\": \"77\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"54658844-6181-4e1c-b593-4e756519a459\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T04:14:35.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"54658844-6181-4e1c-b593-4e756519a459\",\n        \"receiverDFSPTxnID\": \"54658844-6181-4e1c-b593-4e756519a459\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"7bee789f-78a5-4b16-943d-13a34b5684e9\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-30T14:09:00.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"7bee789f-78a5-4b16-943d-13a34b5684e9\",\n        \"receiverDFSPTxnID\": \"7bee789f-78a5-4b16-943d-13a34b5684e9\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"1981de72-40f5-4ea3-b2f2-7b2a51a559ee\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T22:48:25.000Z\",\n        \"settlementDate\": \"2019-04-17T22:53:56.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"1981de72-40f5-4ea3-b2f2-7b2a51a559ee\",\n        \"receiverDFSPTxnID\": \"1981de72-40f5-4ea3-b2f2-7b2a51a559ee\",\n        \"settlementWindowId\": \"66\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"de6ae485-a5d2-4445-bcf2-e6020f264894\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-24T09:43:22.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"de6ae485-a5d2-4445-bcf2-e6020f264894\",\n        \"receiverDFSPTxnID\": \"de6ae485-a5d2-4445-bcf2-e6020f264894\",\n        \"settlementWindowId\": \"70\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"17c9eec5-8f44-4312-9cd7-1bab055bb8b8\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T13:36:47.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"17c9eec5-8f44-4312-9cd7-1bab055bb8b8\",\n        \"receiverDFSPTxnID\": \"17c9eec5-8f44-4312-9cd7-1bab055bb8b8\",\n        \"settlementWindowId\": \"87\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"55bbb7f1-9825-4aa8-a2ef-2e1bc1976c12\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-24T10:25:19.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"55bbb7f1-9825-4aa8-a2ef-2e1bc1976c12\",\n        \"receiverDFSPTxnID\": \"55bbb7f1-9825-4aa8-a2ef-2e1bc1976c12\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"6f4bdceb-a9de-4a54-b117-8b51db7d4119\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T15:53:55.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"6f4bdceb-a9de-4a54-b117-8b51db7d4119\",\n        \"receiverDFSPTxnID\": \"6f4bdceb-a9de-4a54-b117-8b51db7d4119\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"78dcfdf4-f6d2-4e67-a593-c4c559a31968\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T17:27:20.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"78dcfdf4-f6d2-4e67-a593-c4c559a31968\",\n        \"receiverDFSPTxnID\": \"78dcfdf4-f6d2-4e67-a593-c4c559a31968\",\n        \"settlementWindowId\": \"61\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"2965a5bc-3c57-4c9a-9733-94a17c630d5a\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T19:00:30.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"2965a5bc-3c57-4c9a-9733-94a17c630d5a\",\n        \"receiverDFSPTxnID\": \"2965a5bc-3c57-4c9a-9733-94a17c630d5a\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"d5ed26a0-954c-448e-af9d-ae8b221846bc\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T15:34:29.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"d5ed26a0-954c-448e-af9d-ae8b221846bc\",\n        \"receiverDFSPTxnID\": \"d5ed26a0-954c-448e-af9d-ae8b221846bc\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"6434eafc-eae8-4772-9943-5ebf84f120b3\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T01:47:12.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"6434eafc-eae8-4772-9943-5ebf84f120b3\",\n        \"receiverDFSPTxnID\": \"6434eafc-eae8-4772-9943-5ebf84f120b3\",\n        \"settlementWindowId\": \"22\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"1b17ebbb-dbb4-4ba7-a1d3-dfbf9c57a682\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-09T12:56:26.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"1b17ebbb-dbb4-4ba7-a1d3-dfbf9c57a682\",\n        \"receiverDFSPTxnID\": \"1b17ebbb-dbb4-4ba7-a1d3-dfbf9c57a682\",\n        \"settlementWindowId\": \"49\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"58250303-c37a-42f6-a892-211205641d0e\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T03:44:52.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"58250303-c37a-42f6-a892-211205641d0e\",\n        \"receiverDFSPTxnID\": \"58250303-c37a-42f6-a892-211205641d0e\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"58c569fe-2bda-4f38-b417-87cdbe1f3fc4\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T13:29:40.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"58c569fe-2bda-4f38-b417-87cdbe1f3fc4\",\n        \"receiverDFSPTxnID\": \"58c569fe-2bda-4f38-b417-87cdbe1f3fc4\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"c883b97d-b211-46cd-bdfa-ebcc3b2aaf30\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T18:41:05.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"c883b97d-b211-46cd-bdfa-ebcc3b2aaf30\",\n        \"receiverDFSPTxnID\": \"c883b97d-b211-46cd-bdfa-ebcc3b2aaf30\",\n        \"settlementWindowId\": \"13\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"91f4ba1f-0636-4c15-aba4-3d3f7e917282\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T17:12:17.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"91f4ba1f-0636-4c15-aba4-3d3f7e917282\",\n        \"receiverDFSPTxnID\": \"91f4ba1f-0636-4c15-aba4-3d3f7e917282\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"6682c38a-6e34-46d5-8059-c4d9e80144cb\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T01:18:11.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"6682c38a-6e34-46d5-8059-c4d9e80144cb\",\n        \"receiverDFSPTxnID\": \"6682c38a-6e34-46d5-8059-c4d9e80144cb\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"8f908ba5-a4be-4ce0-b117-82c6727cb364\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T22:22:17.000Z\",\n        \"settlementDate\": \"2019-04-06T22:22:41.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"8f908ba5-a4be-4ce0-b117-82c6727cb364\",\n        \"receiverDFSPTxnID\": \"8f908ba5-a4be-4ce0-b117-82c6727cb364\",\n        \"settlementWindowId\": \"33\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"4a508fa9-6c5e-430a-b393-bebc0c07f465\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:13:17.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"4a508fa9-6c5e-430a-b393-bebc0c07f465\",\n        \"receiverDFSPTxnID\": \"4a508fa9-6c5e-430a-b393-bebc0c07f465\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"c213ecd8-1a10-4e98-b395-d3be4d9add2c\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T00:47:24.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"c213ecd8-1a10-4e98-b395-d3be4d9add2c\",\n        \"receiverDFSPTxnID\": \"c213ecd8-1a10-4e98-b395-d3be4d9add2c\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"97867c2d-0521-44e0-bd25-0851bb48b7e4\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-15T00:47:15.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"97867c2d-0521-44e0-bd25-0851bb48b7e4\",\n        \"receiverDFSPTxnID\": \"97867c2d-0521-44e0-bd25-0851bb48b7e4\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"5c868552-ab29-4b1f-8b8e-9880db168449\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T01:25:38.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"5c868552-ab29-4b1f-8b8e-9880db168449\",\n        \"receiverDFSPTxnID\": \"5c868552-ab29-4b1f-8b8e-9880db168449\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"4b713486-bea0-4c4d-a9e6-158899fd7e03\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T01:47:20.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"4b713486-bea0-4c4d-a9e6-158899fd7e03\",\n        \"receiverDFSPTxnID\": \"4b713486-bea0-4c4d-a9e6-158899fd7e03\",\n        \"settlementWindowId\": \"22\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"5d10702a-ae64-4878-b4c2-1a387b9fff53\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T01:30:14.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"5d10702a-ae64-4878-b4c2-1a387b9fff53\",\n        \"receiverDFSPTxnID\": \"5d10702a-ae64-4878-b4c2-1a387b9fff53\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"3c2926cb-e28e-4b8e-b39e-7c844ca1372b\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:43:36.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"3c2926cb-e28e-4b8e-b39e-7c844ca1372b\",\n        \"receiverDFSPTxnID\": \"3c2926cb-e28e-4b8e-b39e-7c844ca1372b\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"794f097a-1636-4733-a2eb-8b69f365b4fe\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-11T22:18:14.000Z\",\n        \"settlementDate\": \"2019-04-12T19:26:38.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"794f097a-1636-4733-a2eb-8b69f365b4fe\",\n        \"receiverDFSPTxnID\": \"794f097a-1636-4733-a2eb-8b69f365b4fe\",\n        \"settlementWindowId\": \"52\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"62689590-3d69-40f1-a1a8-fb3b2bb5c878\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T14:41:42.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"62689590-3d69-40f1-a1a8-fb3b2bb5c878\",\n        \"receiverDFSPTxnID\": \"62689590-3d69-40f1-a1a8-fb3b2bb5c878\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"472794d2-19d4-464a-821a-63f7bfe13c01\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-02T16:18:11.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"472794d2-19d4-464a-821a-63f7bfe13c01\",\n        \"receiverDFSPTxnID\": \"472794d2-19d4-464a-821a-63f7bfe13c01\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"f123fcde-6eb4-4359-abcc-80ec386f8e52\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T04:21:49.000Z\",\n        \"settlementDate\": \"2019-04-29T04:30:06.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"f123fcde-6eb4-4359-abcc-80ec386f8e52\",\n        \"receiverDFSPTxnID\": \"f123fcde-6eb4-4359-abcc-80ec386f8e52\",\n        \"settlementWindowId\": \"85\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"5d1d1794-88f8-44b9-82f5-c82e6ecdd8d1\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-15T00:29:30.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"5d1d1794-88f8-44b9-82f5-c82e6ecdd8d1\",\n        \"receiverDFSPTxnID\": \"5d1d1794-88f8-44b9-82f5-c82e6ecdd8d1\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"c08d1f3e-8375-435d-b902-d494d6fd472d\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T18:04:58.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"c08d1f3e-8375-435d-b902-d494d6fd472d\",\n        \"receiverDFSPTxnID\": \"c08d1f3e-8375-435d-b902-d494d6fd472d\",\n        \"settlementWindowId\": \"61\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"4a32bba5-b151-4139-a689-8464e2b933ea\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T18:35:15.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"4a32bba5-b151-4139-a689-8464e2b933ea\",\n        \"receiverDFSPTxnID\": \"4a32bba5-b151-4139-a689-8464e2b933ea\",\n        \"settlementWindowId\": \"12\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"8da71c44-3608-42b2-a1c5-109e511a0c35\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T04:24:03.000Z\",\n        \"settlementDate\": \"2019-04-29T04:30:06.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"8da71c44-3608-42b2-a1c5-109e511a0c35\",\n        \"receiverDFSPTxnID\": \"8da71c44-3608-42b2-a1c5-109e511a0c35\",\n        \"settlementWindowId\": \"85\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"6c2cc28f-c43d-49c4-9769-af64c6bbdd44\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T17:32:49.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"6c2cc28f-c43d-49c4-9769-af64c6bbdd44\",\n        \"receiverDFSPTxnID\": \"6c2cc28f-c43d-49c4-9769-af64c6bbdd44\",\n        \"settlementWindowId\": \"68\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"61c5d154-1200-4db8-947d-8a1afbf6c8eb\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T03:42:34.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"61c5d154-1200-4db8-947d-8a1afbf6c8eb\",\n        \"receiverDFSPTxnID\": \"61c5d154-1200-4db8-947d-8a1afbf6c8eb\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"62129d9f-5fe3-4152-be0b-30c3b0315346\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T17:38:15.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"62129d9f-5fe3-4152-be0b-30c3b0315346\",\n        \"receiverDFSPTxnID\": \"62129d9f-5fe3-4152-be0b-30c3b0315346\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"c4a0c9c0-6bd5-4998-b869-8c89a662d313\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:43:55.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"c4a0c9c0-6bd5-4998-b869-8c89a662d313\",\n        \"receiverDFSPTxnID\": \"c4a0c9c0-6bd5-4998-b869-8c89a662d313\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"69482f36-c9d2-4166-88d5-982056cbaf0f\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-11T22:19:08.000Z\",\n        \"settlementDate\": \"2019-04-12T19:26:38.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"69482f36-c9d2-4166-88d5-982056cbaf0f\",\n        \"receiverDFSPTxnID\": \"69482f36-c9d2-4166-88d5-982056cbaf0f\",\n        \"settlementWindowId\": \"52\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"601b242e-adaf-42a5-8d92-ae174aea6606\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-11T04:33:13.000Z\",\n        \"settlementDate\": \"2019-04-12T19:26:38.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"601b242e-adaf-42a5-8d92-ae174aea6606\",\n        \"receiverDFSPTxnID\": \"601b242e-adaf-42a5-8d92-ae174aea6606\",\n        \"settlementWindowId\": \"52\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"26dd437c-efe0-4688-a955-8609cb828537\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-24T09:42:31.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"26dd437c-efe0-4688-a955-8609cb828537\",\n        \"receiverDFSPTxnID\": \"26dd437c-efe0-4688-a955-8609cb828537\",\n        \"settlementWindowId\": \"70\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"2015c163-5b5c-44ec-89cb-674ffa5ac469\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-09T12:56:15.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"2015c163-5b5c-44ec-89cb-674ffa5ac469\",\n        \"receiverDFSPTxnID\": \"2015c163-5b5c-44ec-89cb-674ffa5ac469\",\n        \"settlementWindowId\": \"49\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"65cb810a-49d9-4b20-9df1-1281db4e7460\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T13:27:16.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"65cb810a-49d9-4b20-9df1-1281db4e7460\",\n        \"receiverDFSPTxnID\": \"65cb810a-49d9-4b20-9df1-1281db4e7460\",\n        \"settlementWindowId\": \"86\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"fe82fc76-5b69-4850-8d3c-52483d07d5f0\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T14:59:05.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"fe82fc76-5b69-4850-8d3c-52483d07d5f0\",\n        \"receiverDFSPTxnID\": \"fe82fc76-5b69-4850-8d3c-52483d07d5f0\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"71120a28-9b2e-4e9b-8c8d-e3178799987c\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-25T16:28:31.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"4994892\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"71120a28-9b2e-4e9b-8c8d-e3178799987c\",\n        \"receiverDFSPTxnID\": \"71120a28-9b2e-4e9b-8c8d-e3178799987c\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"92c72848-3991-4e62-9bf0-285083a8d123\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T14:49:15.000Z\",\n        \"settlementDate\": \"2019-04-29T14:58:21.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"92c72848-3991-4e62-9bf0-285083a8d123\",\n        \"receiverDFSPTxnID\": \"92c72848-3991-4e62-9bf0-285083a8d123\",\n        \"settlementWindowId\": \"89\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"aef7d1b4-0d24-4185-96a0-9bf1bf154e8a\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T01:52:11.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"aef7d1b4-0d24-4185-96a0-9bf1bf154e8a\",\n        \"receiverDFSPTxnID\": \"aef7d1b4-0d24-4185-96a0-9bf1bf154e8a\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"30fab576-1894-4a7b-b25f-5fce132cbf29\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T22:05:41.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"30fab576-1894-4a7b-b25f-5fce132cbf29\",\n        \"receiverDFSPTxnID\": \"30fab576-1894-4a7b-b25f-5fce132cbf29\",\n        \"settlementWindowId\": \"30\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"5e47fab4-f732-4afe-b0b3-31f931460e8d\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-24T14:52:50.000Z\",\n        \"settlementDate\": \"2019-04-24T14:53:07.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"5e47fab4-f732-4afe-b0b3-31f931460e8d\",\n        \"receiverDFSPTxnID\": \"5e47fab4-f732-4afe-b0b3-31f931460e8d\",\n        \"settlementWindowId\": \"71\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"684b5b2e-ec3a-41ed-bd19-85a9d5a3d00b\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-24T10:21:58.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"684b5b2e-ec3a-41ed-bd19-85a9d5a3d00b\",\n        \"receiverDFSPTxnID\": \"684b5b2e-ec3a-41ed-bd19-85a9d5a3d00b\",\n        \"settlementWindowId\": \"70\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"66fca992-59d4-4011-9d27-44e9d930b941\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T12:49:18.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"4994885\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"66fca992-59d4-4011-9d27-44e9d930b941\",\n        \"receiverDFSPTxnID\": \"66fca992-59d4-4011-9d27-44e9d930b941\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"1e5808ad-b77b-492b-8369-f859fd9d92ec\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T02:26:56.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"1e5808ad-b77b-492b-8369-f859fd9d92ec\",\n        \"receiverDFSPTxnID\": \"1e5808ad-b77b-492b-8369-f859fd9d92ec\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"11a3f650-ad5a-4ec2-ac65-27c6bbbe6958\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T19:05:45.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"11a3f650-ad5a-4ec2-ac65-27c6bbbe6958\",\n        \"receiverDFSPTxnID\": \"11a3f650-ad5a-4ec2-ac65-27c6bbbe6958\",\n        \"settlementWindowId\": \"15\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"fedaac7f-7042-4cc5-9d5d-4bdb35e552b7\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T14:25:50.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"fedaac7f-7042-4cc5-9d5d-4bdb35e552b7\",\n        \"receiverDFSPTxnID\": \"fedaac7f-7042-4cc5-9d5d-4bdb35e552b7\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"6af1cda8-015a-4bee-9dc4-514cb17259fb\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-30T14:02:36.000Z\",\n        \"settlementDate\": \"2019-04-30T14:11:47.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"6af1cda8-015a-4bee-9dc4-514cb17259fb\",\n        \"receiverDFSPTxnID\": \"6af1cda8-015a-4bee-9dc4-514cb17259fb\",\n        \"settlementWindowId\": \"96\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"c869dde6-d399-499c-b856-4315ae42f08d\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:24:35.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"c869dde6-d399-499c-b856-4315ae42f08d\",\n        \"receiverDFSPTxnID\": \"c869dde6-d399-499c-b856-4315ae42f08d\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"6c179916-8590-4c12-aafd-441d093b1e20\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T15:46:19.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"6c179916-8590-4c12-aafd-441d093b1e20\",\n        \"receiverDFSPTxnID\": \"6c179916-8590-4c12-aafd-441d093b1e20\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"010cb006-fd8f-4f5f-9523-b77ff7f99e10\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T02:49:15.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"010cb006-fd8f-4f5f-9523-b77ff7f99e10\",\n        \"receiverDFSPTxnID\": \"010cb006-fd8f-4f5f-9523-b77ff7f99e10\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"6ccbe791-77fd-43d8-b3e4-0d9766e8d979\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T18:31:56.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"6ccbe791-77fd-43d8-b3e4-0d9766e8d979\",\n        \"receiverDFSPTxnID\": \"6ccbe791-77fd-43d8-b3e4-0d9766e8d979\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"6d2f9f65-cff9-4366-beb6-fbf8af60fc29\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-15T00:32:00.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"6d2f9f65-cff9-4366-beb6-fbf8af60fc29\",\n        \"receiverDFSPTxnID\": \"6d2f9f65-cff9-4366-beb6-fbf8af60fc29\",\n        \"settlementWindowId\": \"58\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"d7dcc535-1f3c-427a-81f5-48eadc0f666a\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-30T13:16:32.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"4994863\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"d7dcc535-1f3c-427a-81f5-48eadc0f666a\",\n        \"receiverDFSPTxnID\": \"d7dcc535-1f3c-427a-81f5-48eadc0f666a\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"a018b608-5e40-4469-aa54-e8fa90f22b01\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T22:22:28.000Z\",\n        \"settlementDate\": \"2019-04-06T22:22:41.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"a018b608-5e40-4469-aa54-e8fa90f22b01\",\n        \"receiverDFSPTxnID\": \"a018b608-5e40-4469-aa54-e8fa90f22b01\",\n        \"settlementWindowId\": \"33\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"e9e4fc27-f13b-46f6-b02e-d609330c8093\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T15:52:24.000Z\",\n        \"settlementDate\": \"2019-04-29T16:00:39.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"e9e4fc27-f13b-46f6-b02e-d609330c8093\",\n        \"receiverDFSPTxnID\": \"e9e4fc27-f13b-46f6-b02e-d609330c8093\",\n        \"settlementWindowId\": \"92\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"0ffc671a-f857-45a5-bf97-92c6869c239c\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-10T01:39:31.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"0ffc671a-f857-45a5-bf97-92c6869c239c\",\n        \"receiverDFSPTxnID\": \"0ffc671a-f857-45a5-bf97-92c6869c239c\",\n        \"settlementWindowId\": \"51\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"f7ae6119-93d3-4b2e-a904-f286481fede1\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-10T00:22:16.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"f7ae6119-93d3-4b2e-a904-f286481fede1\",\n        \"receiverDFSPTxnID\": \"f7ae6119-93d3-4b2e-a904-f286481fede1\",\n        \"settlementWindowId\": \"51\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"b91ddd42-55eb-4318-a258-28e29cdb8967\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-07T02:19:35.000Z\",\n        \"settlementDate\": \"2019-04-07T02:19:51.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"b91ddd42-55eb-4318-a258-28e29cdb8967\",\n        \"receiverDFSPTxnID\": \"b91ddd42-55eb-4318-a258-28e29cdb8967\",\n        \"settlementWindowId\": \"41\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"0efc9028-3ad9-4204-b5a7-c4c05a51a7fd\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T17:31:01.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"233\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"0efc9028-3ad9-4204-b5a7-c4c05a51a7fd\",\n        \"receiverDFSPTxnID\": \"0efc9028-3ad9-4204-b5a7-c4c05a51a7fd\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"ddcb5c8a-b057-445b-8644-0a4e091d59c3\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T13:11:53.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"ddcb5c8a-b057-445b-8644-0a4e091d59c3\",\n        \"receiverDFSPTxnID\": \"ddcb5c8a-b057-445b-8644-0a4e091d59c3\",\n        \"settlementWindowId\": \"64\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"1f0d411a-6954-4caf-ab42-8feb9b80efef\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T01:51:09.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"1f0d411a-6954-4caf-ab42-8feb9b80efef\",\n        \"receiverDFSPTxnID\": \"1f0d411a-6954-4caf-ab42-8feb9b80efef\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"b496cf15-de68-492e-b9a2-eb4bcab724d5\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T15:39:47.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"b496cf15-de68-492e-b9a2-eb4bcab724d5\",\n        \"receiverDFSPTxnID\": \"b496cf15-de68-492e-b9a2-eb4bcab724d5\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"9c469f58-7dcd-4c58-b0f8-b022c04779b3\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T19:46:42.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"9c469f58-7dcd-4c58-b0f8-b022c04779b3\",\n        \"receiverDFSPTxnID\": \"9c469f58-7dcd-4c58-b0f8-b022c04779b3\",\n        \"settlementWindowId\": \"16\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"3c87ac2a-0c8a-486f-a4d2-e9f520548f56\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T03:04:31.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"3c87ac2a-0c8a-486f-a4d2-e9f520548f56\",\n        \"receiverDFSPTxnID\": \"3c87ac2a-0c8a-486f-a4d2-e9f520548f56\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"58fdc4ce-36ae-493d-b6eb-8cad2fa67060\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T04:03:21.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"58fdc4ce-36ae-493d-b6eb-8cad2fa67060\",\n        \"receiverDFSPTxnID\": \"58fdc4ce-36ae-493d-b6eb-8cad2fa67060\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"ea750e79-88be-4c08-9f35-af1b91d38114\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T01:24:39.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"ea750e79-88be-4c08-9f35-af1b91d38114\",\n        \"receiverDFSPTxnID\": \"ea750e79-88be-4c08-9f35-af1b91d38114\",\n        \"settlementWindowId\": \"21\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"97eb2ca8-8bc2-4042-ae72-1a4fdd67b5da\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-12T16:26:38.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"436\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"97eb2ca8-8bc2-4042-ae72-1a4fdd67b5da\",\n        \"receiverDFSPTxnID\": \"97eb2ca8-8bc2-4042-ae72-1a4fdd67b5da\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"4292a390-de12-49a6-8d0d-d8d0ea5c53f4\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T17:49:57.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"4292a390-de12-49a6-8d0d-d8d0ea5c53f4\",\n        \"receiverDFSPTxnID\": \"4292a390-de12-49a6-8d0d-d8d0ea5c53f4\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"2e11e2fa-249b-4af1-9d65-df7ac6038b77\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-10T01:36:23.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"2e11e2fa-249b-4af1-9d65-df7ac6038b77\",\n        \"receiverDFSPTxnID\": \"2e11e2fa-249b-4af1-9d65-df7ac6038b77\",\n        \"settlementWindowId\": \"51\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"d8c2f8b0-3cc4-4aa2-84ee-7b10cba49610\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-30T13:29:15.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"d8c2f8b0-3cc4-4aa2-84ee-7b10cba49610\",\n        \"receiverDFSPTxnID\": \"d8c2f8b0-3cc4-4aa2-84ee-7b10cba49610\",\n        \"settlementWindowId\": \"95\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"7a31594d-9e87-49fc-aa1b-ca57a03e8070\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-14T23:33:44.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"7a31594d-9e87-49fc-aa1b-ca57a03e8070\",\n        \"receiverDFSPTxnID\": \"7a31594d-9e87-49fc-aa1b-ca57a03e8070\",\n        \"settlementWindowId\": \"56\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"d3208df7-332f-4f81-b002-0d3b6ccaa11d\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-08T23:14:05.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"d3208df7-332f-4f81-b002-0d3b6ccaa11d\",\n        \"receiverDFSPTxnID\": \"d3208df7-332f-4f81-b002-0d3b6ccaa11d\",\n        \"settlementWindowId\": \"47\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"95244877-9815-42e3-a5c9-1b3eb8f708aa\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:03:57.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"95244877-9815-42e3-a5c9-1b3eb8f708aa\",\n        \"receiverDFSPTxnID\": \"95244877-9815-42e3-a5c9-1b3eb8f708aa\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"7af716fc-3e94-408f-8a9f-012be05651f1\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T04:12:15.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"7af716fc-3e94-408f-8a9f-012be05651f1\",\n        \"receiverDFSPTxnID\": \"7af716fc-3e94-408f-8a9f-012be05651f1\",\n        \"settlementWindowId\": \"84\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"e3c4c84c-1491-41fb-a95d-0590f7206157\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-24T10:16:15.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"e3c4c84c-1491-41fb-a95d-0590f7206157\",\n        \"receiverDFSPTxnID\": \"e3c4c84c-1491-41fb-a95d-0590f7206157\",\n        \"settlementWindowId\": \"70\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"50feace5-9a4c-4080-98a7-178b0a6e098e\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-11T04:32:14.000Z\",\n        \"settlementDate\": \"2019-04-12T19:26:38.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"50feace5-9a4c-4080-98a7-178b0a6e098e\",\n        \"receiverDFSPTxnID\": \"50feace5-9a4c-4080-98a7-178b0a6e098e\",\n        \"settlementWindowId\": \"52\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"c04068e3-cba5-4f2c-8537-fecf3fbaf230\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-24T09:45:03.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"c04068e3-cba5-4f2c-8537-fecf3fbaf230\",\n        \"receiverDFSPTxnID\": \"c04068e3-cba5-4f2c-8537-fecf3fbaf230\",\n        \"settlementWindowId\": \"70\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"40a61753-63dc-4fc2-af9e-365b0250d0dc\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T13:12:29.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"40a61753-63dc-4fc2-af9e-365b0250d0dc\",\n        \"receiverDFSPTxnID\": \"40a61753-63dc-4fc2-af9e-365b0250d0dc\",\n        \"settlementWindowId\": \"64\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"432cac4f-e235-47c7-8f4e-7fa50ddf112c\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-09T12:47:30.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"432cac4f-e235-47c7-8f4e-7fa50ddf112c\",\n        \"receiverDFSPTxnID\": \"432cac4f-e235-47c7-8f4e-7fa50ddf112c\",\n        \"settlementWindowId\": \"48\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"40345ce9-4aeb-4dee-be58-0c156d3e55c2\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T17:53:58.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"220\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"40345ce9-4aeb-4dee-be58-0c156d3e55c2\",\n        \"receiverDFSPTxnID\": \"40345ce9-4aeb-4dee-be58-0c156d3e55c2\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"65bb5a63-606f-4f9b-8c2d-7b51117a9a6a\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-24T09:37:07.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"65bb5a63-606f-4f9b-8c2d-7b51117a9a6a\",\n        \"receiverDFSPTxnID\": \"65bb5a63-606f-4f9b-8c2d-7b51117a9a6a\",\n        \"settlementWindowId\": \"70\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"39c3b6e5-dc78-45df-9ede-b8cd67e9089f\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T22:31:04.000Z\",\n        \"settlementDate\": \"2019-04-06T22:31:28.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"39c3b6e5-dc78-45df-9ede-b8cd67e9089f\",\n        \"receiverDFSPTxnID\": \"39c3b6e5-dc78-45df-9ede-b8cd67e9089f\",\n        \"settlementWindowId\": \"35\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"7f20b8bd-26a1-4108-8f75-62913649fd37\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-24T10:24:09.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"7f20b8bd-26a1-4108-8f75-62913649fd37\",\n        \"receiverDFSPTxnID\": \"7f20b8bd-26a1-4108-8f75-62913649fd37\",\n        \"settlementWindowId\": \"70\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"1264b73f-a36a-43be-a1c5-6c56c8c69581\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T18:29:15.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"1264b73f-a36a-43be-a1c5-6c56c8c69581\",\n        \"receiverDFSPTxnID\": \"1264b73f-a36a-43be-a1c5-6c56c8c69581\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"7f5abb00-1e82-4d8b-b01a-f6394e5b4bfd\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T01:27:50.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"7f5abb00-1e82-4d8b-b01a-f6394e5b4bfd\",\n        \"receiverDFSPTxnID\": \"7f5abb00-1e82-4d8b-b01a-f6394e5b4bfd\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"e6300ebd-349f-41d0-8646-5599ab1623fb\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T00:48:32.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"e6300ebd-349f-41d0-8646-5599ab1623fb\",\n        \"receiverDFSPTxnID\": \"e6300ebd-349f-41d0-8646-5599ab1623fb\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"21a8ec9d-ee3d-4f56-b6ee-6089aedf5a20\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T04:23:30.000Z\",\n        \"settlementDate\": \"2019-04-29T04:30:06.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"21a8ec9d-ee3d-4f56-b6ee-6089aedf5a20\",\n        \"receiverDFSPTxnID\": \"21a8ec9d-ee3d-4f56-b6ee-6089aedf5a20\",\n        \"settlementWindowId\": \"85\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"812275c1-75c3-41b2-868e-5cfd1b324fbc\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T18:46:40.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"812275c1-75c3-41b2-868e-5cfd1b324fbc\",\n        \"receiverDFSPTxnID\": \"812275c1-75c3-41b2-868e-5cfd1b324fbc\",\n        \"settlementWindowId\": \"61\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"e179a681-24ee-43fd-8977-50fd7e3f790d\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T16:58:38.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"225\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"e179a681-24ee-43fd-8977-50fd7e3f790d\",\n        \"receiverDFSPTxnID\": \"e179a681-24ee-43fd-8977-50fd7e3f790d\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"f74c7d21-0441-40bc-90a4-11afe39e7af4\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T01:42:15.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"f74c7d21-0441-40bc-90a4-11afe39e7af4\",\n        \"receiverDFSPTxnID\": \"f74c7d21-0441-40bc-90a4-11afe39e7af4\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"82f17f00-ff38-497e-afc1-fa27d3be5545\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T15:05:47.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"82f17f00-ff38-497e-afc1-fa27d3be5545\",\n        \"receiverDFSPTxnID\": \"82f17f00-ff38-497e-afc1-fa27d3be5545\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"5b72d8cd-59db-4e1e-97e5-4eefab341b12\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T16:55:52.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"5b72d8cd-59db-4e1e-97e5-4eefab341b12\",\n        \"receiverDFSPTxnID\": \"5b72d8cd-59db-4e1e-97e5-4eefab341b12\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"3f9ac22a-3571-4c80-85f7-6a058e8bba46\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T22:30:58.000Z\",\n        \"settlementDate\": \"2019-04-06T22:31:28.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"3f9ac22a-3571-4c80-85f7-6a058e8bba46\",\n        \"receiverDFSPTxnID\": \"3f9ac22a-3571-4c80-85f7-6a058e8bba46\",\n        \"settlementWindowId\": \"35\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"5c9df83e-78e0-4e6a-8898-f583ae32278b\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:20:11.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"5c9df83e-78e0-4e6a-8898-f583ae32278b\",\n        \"receiverDFSPTxnID\": \"5c9df83e-78e0-4e6a-8898-f583ae32278b\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"3c3183d8-a70c-4fae-a0a3-cff230679e26\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T14:23:17.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"3c3183d8-a70c-4fae-a0a3-cff230679e26\",\n        \"receiverDFSPTxnID\": \"3c3183d8-a70c-4fae-a0a3-cff230679e26\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"053de426-c496-4339-8fd2-9b3fa95d4374\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T13:19:01.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"053de426-c496-4339-8fd2-9b3fa95d4374\",\n        \"receiverDFSPTxnID\": \"053de426-c496-4339-8fd2-9b3fa95d4374\",\n        \"settlementWindowId\": \"86\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"fd905315-6639-4798-97f9-73d16f106ab2\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T13:17:20.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"fd905315-6639-4798-97f9-73d16f106ab2\",\n        \"receiverDFSPTxnID\": \"fd905315-6639-4798-97f9-73d16f106ab2\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"39730407-cd6d-4181-b609-01c9f55776d3\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:38:06.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"39730407-cd6d-4181-b609-01c9f55776d3\",\n        \"receiverDFSPTxnID\": \"39730407-cd6d-4181-b609-01c9f55776d3\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"1bb76fd8-9fe3-4684-bc30-5e4e80d1ed36\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T15:40:30.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"1bb76fd8-9fe3-4684-bc30-5e4e80d1ed36\",\n        \"receiverDFSPTxnID\": \"1bb76fd8-9fe3-4684-bc30-5e4e80d1ed36\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"ebf2ed86-4a3a-4c53-b464-79fbdd14277d\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-03T20:17:27.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"ebf2ed86-4a3a-4c53-b464-79fbdd14277d\",\n        \"receiverDFSPTxnID\": \"ebf2ed86-4a3a-4c53-b464-79fbdd14277d\",\n        \"settlementWindowId\": \"8\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"86c88dec-2bad-49bc-9665-02159ef05b97\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T18:47:55.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"86c88dec-2bad-49bc-9665-02159ef05b97\",\n        \"receiverDFSPTxnID\": \"86c88dec-2bad-49bc-9665-02159ef05b97\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"c9e1adef-27fa-4d8a-ae65-ec15bac46481\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-25T16:25:57.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"c9e1adef-27fa-4d8a-ae65-ec15bac46481\",\n        \"receiverDFSPTxnID\": \"c9e1adef-27fa-4d8a-ae65-ec15bac46481\",\n        \"settlementWindowId\": \"77\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"74e156e8-501c-4065-84db-93f10b79bc98\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-10T00:04:54.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"74e156e8-501c-4065-84db-93f10b79bc98\",\n        \"receiverDFSPTxnID\": \"74e156e8-501c-4065-84db-93f10b79bc98\",\n        \"settlementWindowId\": \"51\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"8989d792-d096-4bc4-bef3-c3f3ce42609c\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:37:46.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"8989d792-d096-4bc4-bef3-c3f3ce42609c\",\n        \"receiverDFSPTxnID\": \"8989d792-d096-4bc4-bef3-c3f3ce42609c\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"6d8e66b2-adeb-4733-a314-36009b816ea5\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T17:14:48.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"6d8e66b2-adeb-4733-a314-36009b816ea5\",\n        \"receiverDFSPTxnID\": \"6d8e66b2-adeb-4733-a314-36009b816ea5\",\n        \"settlementWindowId\": \"68\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"8bb14594-51e1-423c-a6b8-679555e4263f\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T17:37:04.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"8bb14594-51e1-423c-a6b8-679555e4263f\",\n        \"receiverDFSPTxnID\": \"8bb14594-51e1-423c-a6b8-679555e4263f\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"49a55bef-5f36-4dc4-ae9d-b710c86f2b15\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T22:05:46.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"49a55bef-5f36-4dc4-ae9d-b710c86f2b15\",\n        \"receiverDFSPTxnID\": \"49a55bef-5f36-4dc4-ae9d-b710c86f2b15\",\n        \"settlementWindowId\": \"30\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"5d58d6b1-69c5-41aa-a375-90fc530e9e94\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T18:40:08.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"5d58d6b1-69c5-41aa-a375-90fc530e9e94\",\n        \"receiverDFSPTxnID\": \"5d58d6b1-69c5-41aa-a375-90fc530e9e94\",\n        \"settlementWindowId\": \"13\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"578e4b65-a24e-4009-b3bb-eac91d495710\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-11T22:23:00.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"424\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"578e4b65-a24e-4009-b3bb-eac91d495710\",\n        \"receiverDFSPTxnID\": \"578e4b65-a24e-4009-b3bb-eac91d495710\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"cce97160-51c5-48fb-96f8-09c4d86d3dfa\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T22:05:36.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"cce97160-51c5-48fb-96f8-09c4d86d3dfa\",\n        \"receiverDFSPTxnID\": \"cce97160-51c5-48fb-96f8-09c4d86d3dfa\",\n        \"settlementWindowId\": \"30\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"e2081d2e-2668-4f7e-a81d-d924b42aeb8e\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T01:24:30.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"e2081d2e-2668-4f7e-a81d-d924b42aeb8e\",\n        \"receiverDFSPTxnID\": \"e2081d2e-2668-4f7e-a81d-d924b42aeb8e\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"b892043d-9270-43da-86f9-020d30a4fd75\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T15:36:08.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"b892043d-9270-43da-86f9-020d30a4fd75\",\n        \"receiverDFSPTxnID\": \"b892043d-9270-43da-86f9-020d30a4fd75\",\n        \"settlementWindowId\": \"91\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"950ba0e3-f56c-462b-b608-7f14b4cda287\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T01:54:11.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"950ba0e3-f56c-462b-b608-7f14b4cda287\",\n        \"receiverDFSPTxnID\": \"950ba0e3-f56c-462b-b608-7f14b4cda287\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"08bdf80a-4c11-4362-b801-513d856f2fb2\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T15:19:17.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"08bdf80a-4c11-4362-b801-513d856f2fb2\",\n        \"receiverDFSPTxnID\": \"08bdf80a-4c11-4362-b801-513d856f2fb2\",\n        \"settlementWindowId\": \"90\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"b2ff5227-6d20-4664-a62b-79eb22c15485\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-09T13:01:44.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"b2ff5227-6d20-4664-a62b-79eb22c15485\",\n        \"receiverDFSPTxnID\": \"b2ff5227-6d20-4664-a62b-79eb22c15485\",\n        \"settlementWindowId\": \"50\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"cc5bb2a2-3760-48d8-9bf3-140b329a8462\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-10T01:35:23.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"cc5bb2a2-3760-48d8-9bf3-140b329a8462\",\n        \"receiverDFSPTxnID\": \"cc5bb2a2-3760-48d8-9bf3-140b329a8462\",\n        \"settlementWindowId\": \"51\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"c3e142ca-bce2-4ef4-a437-f0f0a2950370\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-08T22:53:56.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"977\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"c3e142ca-bce2-4ef4-a437-f0f0a2950370\",\n        \"receiverDFSPTxnID\": \"c3e142ca-bce2-4ef4-a437-f0f0a2950370\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"a3abc5cc-17d4-4200-8527-aefa976902ca\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T01:24:46.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"a3abc5cc-17d4-4200-8527-aefa976902ca\",\n        \"receiverDFSPTxnID\": \"a3abc5cc-17d4-4200-8527-aefa976902ca\",\n        \"settlementWindowId\": \"21\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"41a6a2a2-9f85-4235-886d-d09567ef34f2\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T02:25:13.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"41a6a2a2-9f85-4235-886d-d09567ef34f2\",\n        \"receiverDFSPTxnID\": \"41a6a2a2-9f85-4235-886d-d09567ef34f2\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"78e39705-ab8f-424c-b1b0-8c808cb22098\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T22:50:43.000Z\",\n        \"settlementDate\": \"2019-04-06T22:54:39.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"78e39705-ab8f-424c-b1b0-8c808cb22098\",\n        \"receiverDFSPTxnID\": \"78e39705-ab8f-424c-b1b0-8c808cb22098\",\n        \"settlementWindowId\": \"37\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"ac610324-8bb3-4700-91ca-2cb9a57cd422\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T22:05:51.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"ac610324-8bb3-4700-91ca-2cb9a57cd422\",\n        \"receiverDFSPTxnID\": \"ac610324-8bb3-4700-91ca-2cb9a57cd422\",\n        \"settlementWindowId\": \"30\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"3cb591c6-b8fe-49a7-88e8-a340e6b0a5dd\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T14:51:13.000Z\",\n        \"settlementDate\": \"2019-04-29T14:58:21.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"3cb591c6-b8fe-49a7-88e8-a340e6b0a5dd\",\n        \"receiverDFSPTxnID\": \"3cb591c6-b8fe-49a7-88e8-a340e6b0a5dd\",\n        \"settlementWindowId\": \"89\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"5755e47f-0add-4719-94bb-56af2c8f8632\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T21:32:39.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"5755e47f-0add-4719-94bb-56af2c8f8632\",\n        \"receiverDFSPTxnID\": \"5755e47f-0add-4719-94bb-56af2c8f8632\",\n        \"settlementWindowId\": \"28\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"9a19af81-2d68-49fc-9689-6a8f5aca2fc5\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T01:24:32.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"9a19af81-2d68-49fc-9689-6a8f5aca2fc5\",\n        \"receiverDFSPTxnID\": \"9a19af81-2d68-49fc-9689-6a8f5aca2fc5\",\n        \"settlementWindowId\": \"21\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"8c72f82a-9b24-41c9-98c6-818322a07040\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-11T04:35:11.000Z\",\n        \"settlementDate\": \"2019-04-12T19:26:38.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"8c72f82a-9b24-41c9-98c6-818322a07040\",\n        \"receiverDFSPTxnID\": \"8c72f82a-9b24-41c9-98c6-818322a07040\",\n        \"settlementWindowId\": \"52\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"7edf6291-b96a-43f1-ab7d-662f28605cd1\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T03:03:57.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"7edf6291-b96a-43f1-ab7d-662f28605cd1\",\n        \"receiverDFSPTxnID\": \"7edf6291-b96a-43f1-ab7d-662f28605cd1\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"e8b5ec67-b35c-425d-bc87-4ea17ec1aeae\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T18:05:32.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"e8b5ec67-b35c-425d-bc87-4ea17ec1aeae\",\n        \"receiverDFSPTxnID\": \"e8b5ec67-b35c-425d-bc87-4ea17ec1aeae\",\n        \"settlementWindowId\": \"61\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"b1b68c28-6262-4a17-b05a-c9339244fbaf\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-30T14:04:01.000Z\",\n        \"settlementDate\": \"2019-04-30T14:11:47.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"b1b68c28-6262-4a17-b05a-c9339244fbaf\",\n        \"receiverDFSPTxnID\": \"b1b68c28-6262-4a17-b05a-c9339244fbaf\",\n        \"settlementWindowId\": \"96\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"ca632ebd-be3f-463b-adc7-a47cd8332ba5\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-30T13:46:49.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"ca632ebd-be3f-463b-adc7-a47cd8332ba5\",\n        \"receiverDFSPTxnID\": \"ca632ebd-be3f-463b-adc7-a47cd8332ba5\",\n        \"settlementWindowId\": \"95\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"de7af716-ca0c-4404-848b-aea11a6bf702\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-15T00:24:55.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"de7af716-ca0c-4404-848b-aea11a6bf702\",\n        \"receiverDFSPTxnID\": \"de7af716-ca0c-4404-848b-aea11a6bf702\",\n        \"settlementWindowId\": \"58\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"7c2e4693-341e-4309-b98f-3af271d73804\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-09T12:56:31.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"7c2e4693-341e-4309-b98f-3af271d73804\",\n        \"receiverDFSPTxnID\": \"7c2e4693-341e-4309-b98f-3af271d73804\",\n        \"settlementWindowId\": \"49\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"204f1939-d018-44e6-aff0-4d2cde3af5ad\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:17:31.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"204f1939-d018-44e6-aff0-4d2cde3af5ad\",\n        \"receiverDFSPTxnID\": \"204f1939-d018-44e6-aff0-4d2cde3af5ad\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"8d6dd0ca-5696-491e-830d-1d0b5f463117\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T19:05:26.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"8d6dd0ca-5696-491e-830d-1d0b5f463117\",\n        \"receiverDFSPTxnID\": \"8d6dd0ca-5696-491e-830d-1d0b5f463117\",\n        \"settlementWindowId\": \"15\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"9c937219-8858-47b7-9c49-a2a725e917e6\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-14T23:36:52.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"9c937219-8858-47b7-9c49-a2a725e917e6\",\n        \"receiverDFSPTxnID\": \"9c937219-8858-47b7-9c49-a2a725e917e6\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"9d17def0-eae9-47a6-aeca-cc5bf8eb21e6\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T02:37:22.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"9d17def0-eae9-47a6-aeca-cc5bf8eb21e6\",\n        \"receiverDFSPTxnID\": \"9d17def0-eae9-47a6-aeca-cc5bf8eb21e6\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"315ee3e3-7c8e-41f9-b340-5be416fe49d4\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T13:39:15.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"315ee3e3-7c8e-41f9-b340-5be416fe49d4\",\n        \"receiverDFSPTxnID\": \"315ee3e3-7c8e-41f9-b340-5be416fe49d4\",\n        \"settlementWindowId\": \"87\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"3e333ad5-c5c8-41fb-82b3-a17ac788eff3\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T18:40:27.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"3e333ad5-c5c8-41fb-82b3-a17ac788eff3\",\n        \"receiverDFSPTxnID\": \"3e333ad5-c5c8-41fb-82b3-a17ac788eff3\",\n        \"settlementWindowId\": \"13\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"cb0701eb-64ae-445c-9056-ed8eed9e5ff2\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-30T13:51:15.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"cb0701eb-64ae-445c-9056-ed8eed9e5ff2\",\n        \"receiverDFSPTxnID\": \"cb0701eb-64ae-445c-9056-ed8eed9e5ff2\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"8285985a-f661-4845-afef-c040957eeb3c\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-11T22:20:19.000Z\",\n        \"settlementDate\": \"2019-04-12T19:26:38.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"8285985a-f661-4845-afef-c040957eeb3c\",\n        \"receiverDFSPTxnID\": \"8285985a-f661-4845-afef-c040957eeb3c\",\n        \"settlementWindowId\": \"52\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"8a6fb773-8b73-49c5-9f17-86dd0f178dcb\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T13:01:52.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"8a6fb773-8b73-49c5-9f17-86dd0f178dcb\",\n        \"receiverDFSPTxnID\": \"8a6fb773-8b73-49c5-9f17-86dd0f178dcb\",\n        \"settlementWindowId\": \"86\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"a03d61bc-af39-4337-bff4-cda5fe8926f3\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T17:05:45.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"a03d61bc-af39-4337-bff4-cda5fe8926f3\",\n        \"receiverDFSPTxnID\": \"a03d61bc-af39-4337-bff4-cda5fe8926f3\",\n        \"settlementWindowId\": \"68\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"db565035-8144-4821-a4a3-56bce98de9b7\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T16:17:11.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"db565035-8144-4821-a4a3-56bce98de9b7\",\n        \"receiverDFSPTxnID\": \"db565035-8144-4821-a4a3-56bce98de9b7\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"af980192-c712-409b-b360-fae8fd7f5c58\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T03:19:06.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"af980192-c712-409b-b360-fae8fd7f5c58\",\n        \"receiverDFSPTxnID\": \"af980192-c712-409b-b360-fae8fd7f5c58\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"9ce68afa-adab-4241-96a7-b0521e734d24\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T19:45:24.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"9ce68afa-adab-4241-96a7-b0521e734d24\",\n        \"receiverDFSPTxnID\": \"9ce68afa-adab-4241-96a7-b0521e734d24\",\n        \"settlementWindowId\": \"16\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"65c365a1-f8c2-4397-941f-2286cc7414d6\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T18:49:48.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"65c365a1-f8c2-4397-941f-2286cc7414d6\",\n        \"receiverDFSPTxnID\": \"65c365a1-f8c2-4397-941f-2286cc7414d6\",\n        \"settlementWindowId\": \"13\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"90de2558-1925-45a0-a4dd-a9594681c253\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-03T20:14:17.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"90de2558-1925-45a0-a4dd-a9594681c253\",\n        \"receiverDFSPTxnID\": \"90de2558-1925-45a0-a4dd-a9594681c253\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"a4c0ba03-30b1-4d5c-bc82-1a6f178d11c3\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-25T15:41:51.000Z\",\n        \"settlementDate\": \"2019-04-25T15:42:56.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"a4c0ba03-30b1-4d5c-bc82-1a6f178d11c3\",\n        \"receiverDFSPTxnID\": \"a4c0ba03-30b1-4d5c-bc82-1a6f178d11c3\",\n        \"settlementWindowId\": \"76\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"13cf97d5-781a-4baf-9a1c-ad9216368041\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T01:47:26.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"13cf97d5-781a-4baf-9a1c-ad9216368041\",\n        \"receiverDFSPTxnID\": \"13cf97d5-781a-4baf-9a1c-ad9216368041\",\n        \"settlementWindowId\": \"22\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"88d3c3be-3a89-439c-9ab7-dbdb769d6bd9\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T15:25:47.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"88d3c3be-3a89-439c-9ab7-dbdb769d6bd9\",\n        \"receiverDFSPTxnID\": \"88d3c3be-3a89-439c-9ab7-dbdb769d6bd9\",\n        \"settlementWindowId\": \"91\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"a64c18d3-986a-4004-9523-b698806cb118\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T17:06:55.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"a64c18d3-986a-4004-9523-b698806cb118\",\n        \"receiverDFSPTxnID\": \"a64c18d3-986a-4004-9523-b698806cb118\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"a739f366-af7c-4a51-85e4-530a3ec306c3\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T03:33:07.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"a739f366-af7c-4a51-85e4-530a3ec306c3\",\n        \"receiverDFSPTxnID\": \"a739f366-af7c-4a51-85e4-530a3ec306c3\",\n        \"settlementWindowId\": \"84\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"1b62c9e9-0106-4a78-8d10-9a77771b3e38\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-02T16:21:48.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"1b62c9e9-0106-4a78-8d10-9a77771b3e38\",\n        \"receiverDFSPTxnID\": \"1b62c9e9-0106-4a78-8d10-9a77771b3e38\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"10595958-9e29-4876-879c-4e6c4932d41f\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-24T09:59:13.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"10595958-9e29-4876-879c-4e6c4932d41f\",\n        \"receiverDFSPTxnID\": \"10595958-9e29-4876-879c-4e6c4932d41f\",\n        \"settlementWindowId\": \"70\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"3e850689-b5ef-4836-97d8-29a092cb3562\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T18:36:25.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"3e850689-b5ef-4836-97d8-29a092cb3562\",\n        \"receiverDFSPTxnID\": \"3e850689-b5ef-4836-97d8-29a092cb3562\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"a77023a4-2805-4991-ad5c-7ec67bcb1b5e\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T15:42:49.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"a77023a4-2805-4991-ad5c-7ec67bcb1b5e\",\n        \"receiverDFSPTxnID\": \"a77023a4-2805-4991-ad5c-7ec67bcb1b5e\",\n        \"settlementWindowId\": \"91\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"4fa09cfe-8062-4529-8ec7-8a5676887cef\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T16:23:10.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"4fa09cfe-8062-4529-8ec7-8a5676887cef\",\n        \"receiverDFSPTxnID\": \"4fa09cfe-8062-4529-8ec7-8a5676887cef\",\n        \"settlementWindowId\": \"68\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"dbbe5190-f0db-46a5-9530-b4751af16601\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T15:37:15.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"dbbe5190-f0db-46a5-9530-b4751af16601\",\n        \"receiverDFSPTxnID\": \"dbbe5190-f0db-46a5-9530-b4751af16601\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"8782b593-8d87-46d7-b5b5-b647b0d45073\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-11T22:17:14.000Z\",\n        \"settlementDate\": \"2019-04-12T19:26:38.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"8782b593-8d87-46d7-b5b5-b647b0d45073\",\n        \"receiverDFSPTxnID\": \"8782b593-8d87-46d7-b5b5-b647b0d45073\",\n        \"settlementWindowId\": \"52\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"571a9e5b-a7f0-4d61-9d50-0ebe84b79fe0\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:43:17.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"571a9e5b-a7f0-4d61-9d50-0ebe84b79fe0\",\n        \"receiverDFSPTxnID\": \"571a9e5b-a7f0-4d61-9d50-0ebe84b79fe0\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"6c0fd452-1603-4d7e-83a3-ce41f82495ea\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T19:04:50.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"6c0fd452-1603-4d7e-83a3-ce41f82495ea\",\n        \"receiverDFSPTxnID\": \"6c0fd452-1603-4d7e-83a3-ce41f82495ea\",\n        \"settlementWindowId\": \"15\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"b05ae383-34da-42fa-9efe-af32b5fbcbb3\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-25T15:41:43.000Z\",\n        \"settlementDate\": \"2019-04-25T15:42:56.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"b05ae383-34da-42fa-9efe-af32b5fbcbb3\",\n        \"receiverDFSPTxnID\": \"b05ae383-34da-42fa-9efe-af32b5fbcbb3\",\n        \"settlementWindowId\": \"76\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"2ee31178-8054-4c00-b5c2-09b1902be9fd\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T17:51:30.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"2ee31178-8054-4c00-b5c2-09b1902be9fd\",\n        \"receiverDFSPTxnID\": \"2ee31178-8054-4c00-b5c2-09b1902be9fd\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"774e6b98-b0bf-4bd3-a769-5d21c9aa4926\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:04:16.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"774e6b98-b0bf-4bd3-a769-5d21c9aa4926\",\n        \"receiverDFSPTxnID\": \"774e6b98-b0bf-4bd3-a769-5d21c9aa4926\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"4befb087-aab9-45fd-b0ec-a816f3203cc5\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-14T23:43:30.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"4befb087-aab9-45fd-b0ec-a816f3203cc5\",\n        \"receiverDFSPTxnID\": \"4befb087-aab9-45fd-b0ec-a816f3203cc5\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"fe14ff8d-3975-4740-a405-00f41bd56185\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T18:39:32.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"fe14ff8d-3975-4740-a405-00f41bd56185\",\n        \"receiverDFSPTxnID\": \"fe14ff8d-3975-4740-a405-00f41bd56185\",\n        \"settlementWindowId\": \"13\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"ac7b4918-f69e-4c65-8ff4-2a0a428e408e\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T15:04:46.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"ac7b4918-f69e-4c65-8ff4-2a0a428e408e\",\n        \"receiverDFSPTxnID\": \"ac7b4918-f69e-4c65-8ff4-2a0a428e408e\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"3e1578f1-50d6-460e-bbdc-53ea49860e46\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-08T02:49:56.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"3e1578f1-50d6-460e-bbdc-53ea49860e46\",\n        \"receiverDFSPTxnID\": \"3e1578f1-50d6-460e-bbdc-53ea49860e46\",\n        \"settlementWindowId\": \"45\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"097d5631-fd4b-44d1-8639-2a044f21fe93\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T16:24:08.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"097d5631-fd4b-44d1-8639-2a044f21fe93\",\n        \"receiverDFSPTxnID\": \"097d5631-fd4b-44d1-8639-2a044f21fe93\",\n        \"settlementWindowId\": \"68\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"78645684-8c15-4587-bb35-20737c3eba48\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-09T12:56:21.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"78645684-8c15-4587-bb35-20737c3eba48\",\n        \"receiverDFSPTxnID\": \"78645684-8c15-4587-bb35-20737c3eba48\",\n        \"settlementWindowId\": \"49\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"0244f0dc-c0a6-48b8-bf34-5a35059ecb37\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-25T15:41:59.000Z\",\n        \"settlementDate\": \"2019-04-25T15:42:56.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"0244f0dc-c0a6-48b8-bf34-5a35059ecb37\",\n        \"receiverDFSPTxnID\": \"0244f0dc-c0a6-48b8-bf34-5a35059ecb37\",\n        \"settlementWindowId\": \"76\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"116097df-596c-4e89-abb5-55d42231f787\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T17:20:15.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"116097df-596c-4e89-abb5-55d42231f787\",\n        \"receiverDFSPTxnID\": \"116097df-596c-4e89-abb5-55d42231f787\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"f28fad6e-f246-4002-89c9-ceac1fe41f2c\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-08T22:52:17.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"f28fad6e-f246-4002-89c9-ceac1fe41f2c\",\n        \"receiverDFSPTxnID\": \"f28fad6e-f246-4002-89c9-ceac1fe41f2c\",\n        \"settlementWindowId\": \"47\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"0c24d327-fd5b-44c7-ab93-9a9e083299de\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T18:03:08.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"0c24d327-fd5b-44c7-ab93-9a9e083299de\",\n        \"receiverDFSPTxnID\": \"0c24d327-fd5b-44c7-ab93-9a9e083299de\",\n        \"settlementWindowId\": \"61\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"5f846f11-0969-46c0-9f0d-d6d6d930238a\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T17:50:33.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"5f846f11-0969-46c0-9f0d-d6d6d930238a\",\n        \"receiverDFSPTxnID\": \"5f846f11-0969-46c0-9f0d-d6d6d930238a\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"bc52a472-602d-4ae3-8aa4-bbf8d21ba468\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-14T23:39:58.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"bc52a472-602d-4ae3-8aa4-bbf8d21ba468\",\n        \"receiverDFSPTxnID\": \"bc52a472-602d-4ae3-8aa4-bbf8d21ba468\",\n        \"settlementWindowId\": \"56\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"97b001a9-4f9b-46d2-9a63-287af6170332\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-12T16:24:03.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"97b001a9-4f9b-46d2-9a63-287af6170332\",\n        \"receiverDFSPTxnID\": \"97b001a9-4f9b-46d2-9a63-287af6170332\",\n        \"settlementWindowId\": \"53\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"fb4ff1af-be13-4e14-a846-7e7d9d511940\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:10:05.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"fb4ff1af-be13-4e14-a846-7e7d9d511940\",\n        \"receiverDFSPTxnID\": \"fb4ff1af-be13-4e14-a846-7e7d9d511940\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"1b4751fc-8bcf-4bb0-9e91-3ff0cc512c22\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-25T14:59:12.000Z\",\n        \"settlementDate\": \"2019-04-25T14:59:30.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"1b4751fc-8bcf-4bb0-9e91-3ff0cc512c22\",\n        \"receiverDFSPTxnID\": \"1b4751fc-8bcf-4bb0-9e91-3ff0cc512c22\",\n        \"settlementWindowId\": \"74\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"5e6c9613-b694-4732-82c9-b0feeb85db92\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T00:45:57.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"5e6c9613-b694-4732-82c9-b0feeb85db92\",\n        \"receiverDFSPTxnID\": \"5e6c9613-b694-4732-82c9-b0feeb85db92\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"05097a84-9d99-4458-adfe-4469970d72d5\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:11:44.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"05097a84-9d99-4458-adfe-4469970d72d5\",\n        \"receiverDFSPTxnID\": \"05097a84-9d99-4458-adfe-4469970d72d5\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"194a73e6-6c04-4214-ab47-f52117b95562\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T01:24:53.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"194a73e6-6c04-4214-ab47-f52117b95562\",\n        \"receiverDFSPTxnID\": \"194a73e6-6c04-4214-ab47-f52117b95562\",\n        \"settlementWindowId\": \"21\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"2ac1b98b-0727-4fca-9b65-6db3b4e86092\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T15:39:13.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"2ac1b98b-0727-4fca-9b65-6db3b4e86092\",\n        \"receiverDFSPTxnID\": \"2ac1b98b-0727-4fca-9b65-6db3b4e86092\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"75d9ecd8-cd65-4e00-ac68-d640b6baffa4\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T16:26:42.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"75d9ecd8-cd65-4e00-ac68-d640b6baffa4\",\n        \"receiverDFSPTxnID\": \"75d9ecd8-cd65-4e00-ac68-d640b6baffa4\",\n        \"settlementWindowId\": \"68\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"e0d6a299-39c0-421c-93c2-5c822e62170f\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-24T14:52:45.000Z\",\n        \"settlementDate\": \"2019-04-24T14:53:07.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"e0d6a299-39c0-421c-93c2-5c822e62170f\",\n        \"receiverDFSPTxnID\": \"e0d6a299-39c0-421c-93c2-5c822e62170f\",\n        \"settlementWindowId\": \"71\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"79d0ac68-f6f7-4bbf-9845-374c2a26a64a\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-10T00:10:16.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"426\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"79d0ac68-f6f7-4bbf-9845-374c2a26a64a\",\n        \"receiverDFSPTxnID\": \"79d0ac68-f6f7-4bbf-9845-374c2a26a64a\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"9b111af7-73b5-49dd-a1d6-dce1425f3f8c\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-10T01:38:57.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"9b111af7-73b5-49dd-a1d6-dce1425f3f8c\",\n        \"receiverDFSPTxnID\": \"9b111af7-73b5-49dd-a1d6-dce1425f3f8c\",\n        \"settlementWindowId\": \"51\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"07a9c3de-cff5-40c6-8c33-d70633651cb2\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T16:32:04.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"07a9c3de-cff5-40c6-8c33-d70633651cb2\",\n        \"receiverDFSPTxnID\": \"07a9c3de-cff5-40c6-8c33-d70633651cb2\",\n        \"settlementWindowId\": \"10\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"b942f337-8ff4-4b8c-b452-e56250884bfe\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T15:43:59.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"b942f337-8ff4-4b8c-b452-e56250884bfe\",\n        \"receiverDFSPTxnID\": \"b942f337-8ff4-4b8c-b452-e56250884bfe\",\n        \"settlementWindowId\": \"91\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"8ec39dba-7987-4597-840b-44b34bcef372\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T18:35:51.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"8ec39dba-7987-4597-840b-44b34bcef372\",\n        \"receiverDFSPTxnID\": \"8ec39dba-7987-4597-840b-44b34bcef372\",\n        \"settlementWindowId\": \"12\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"e667ee39-d374-4156-a91c-a7d06702bc9c\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-14T23:51:17.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"e667ee39-d374-4156-a91c-a7d06702bc9c\",\n        \"receiverDFSPTxnID\": \"e667ee39-d374-4156-a91c-a7d06702bc9c\",\n        \"settlementWindowId\": \"56\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"53827320-37fc-43ef-aab8-9948e1a445a0\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T18:48:29.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"53827320-37fc-43ef-aab8-9948e1a445a0\",\n        \"receiverDFSPTxnID\": \"53827320-37fc-43ef-aab8-9948e1a445a0\",\n        \"settlementWindowId\": \"13\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"91b7f9f7-6304-477d-a890-ca3b5b6d0b0d\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-24T14:52:34.000Z\",\n        \"settlementDate\": \"2019-04-24T14:53:07.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"91b7f9f7-6304-477d-a890-ca3b5b6d0b0d\",\n        \"receiverDFSPTxnID\": \"91b7f9f7-6304-477d-a890-ca3b5b6d0b0d\",\n        \"settlementWindowId\": \"71\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"586942d8-bc9f-4905-ac9c-927d680d33be\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T22:22:23.000Z\",\n        \"settlementDate\": \"2019-04-06T22:22:41.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"586942d8-bc9f-4905-ac9c-927d680d33be\",\n        \"receiverDFSPTxnID\": \"586942d8-bc9f-4905-ac9c-927d680d33be\",\n        \"settlementWindowId\": \"33\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"bc81276a-bca6-49fa-9a47-4128723364aa\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T02:34:58.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"bc81276a-bca6-49fa-9a47-4128723364aa\",\n        \"receiverDFSPTxnID\": \"bc81276a-bca6-49fa-9a47-4128723364aa\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"1e77ef27-aff1-4f0a-b2dc-b85b27882772\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-15T00:23:10.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"1e77ef27-aff1-4f0a-b2dc-b85b27882772\",\n        \"receiverDFSPTxnID\": \"1e77ef27-aff1-4f0a-b2dc-b85b27882772\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"df899945-ae8c-4128-bf6c-ed7c18027e86\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:05:35.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"df899945-ae8c-4128-bf6c-ed7c18027e86\",\n        \"receiverDFSPTxnID\": \"df899945-ae8c-4128-bf6c-ed7c18027e86\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"6ef57c41-f592-4052-bcab-3357ebe86f40\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T18:36:10.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"6ef57c41-f592-4052-bcab-3357ebe86f40\",\n        \"receiverDFSPTxnID\": \"6ef57c41-f592-4052-bcab-3357ebe86f40\",\n        \"settlementWindowId\": \"12\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"7d495adb-05b6-4d18-a659-d75f6438cdfb\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T15:58:30.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"7d495adb-05b6-4d18-a659-d75f6438cdfb\",\n        \"receiverDFSPTxnID\": \"7d495adb-05b6-4d18-a659-d75f6438cdfb\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"45e3dbbd-eff2-49ec-a621-4826441ce5ec\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T18:47:00.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"45e3dbbd-eff2-49ec-a621-4826441ce5ec\",\n        \"receiverDFSPTxnID\": \"45e3dbbd-eff2-49ec-a621-4826441ce5ec\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"548dcd54-974f-4102-b5cf-cea7d059b939\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-25T15:42:07.000Z\",\n        \"settlementDate\": \"2019-04-25T15:42:56.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"548dcd54-974f-4102-b5cf-cea7d059b939\",\n        \"receiverDFSPTxnID\": \"548dcd54-974f-4102-b5cf-cea7d059b939\",\n        \"settlementWindowId\": \"76\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"d7e1c99c-480b-4edf-ac00-5d0cfbb2689a\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T02:55:00.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"d7e1c99c-480b-4edf-ac00-5d0cfbb2689a\",\n        \"receiverDFSPTxnID\": \"d7e1c99c-480b-4edf-ac00-5d0cfbb2689a\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"2b6e13ef-b884-41ac-9f2e-fc2ab0c5bb0a\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:03:36.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"2b6e13ef-b884-41ac-9f2e-fc2ab0c5bb0a\",\n        \"receiverDFSPTxnID\": \"2b6e13ef-b884-41ac-9f2e-fc2ab0c5bb0a\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"bed6097b-4798-428e-a1ff-de3f33e3e562\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-14T23:35:58.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"bed6097b-4798-428e-a1ff-de3f33e3e562\",\n        \"receiverDFSPTxnID\": \"bed6097b-4798-428e-a1ff-de3f33e3e562\",\n        \"settlementWindowId\": \"56\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"bee5c2f5-1d60-47d1-9040-ff1ec95d8c51\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T15:41:49.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"bee5c2f5-1d60-47d1-9040-ff1ec95d8c51\",\n        \"receiverDFSPTxnID\": \"bee5c2f5-1d60-47d1-9040-ff1ec95d8c51\",\n        \"settlementWindowId\": \"91\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"ff8e52bc-de9b-43aa-b0b5-579433c21261\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T18:01:34.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"ff8e52bc-de9b-43aa-b0b5-579433c21261\",\n        \"receiverDFSPTxnID\": \"ff8e52bc-de9b-43aa-b0b5-579433c21261\",\n        \"settlementWindowId\": \"12\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"b1d73240-9ec0-47ff-bc36-8b0fccc0d398\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-15T00:01:45.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"b1d73240-9ec0-47ff-bc36-8b0fccc0d398\",\n        \"receiverDFSPTxnID\": \"b1d73240-9ec0-47ff-bc36-8b0fccc0d398\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"5552a1e8-5ca8-433e-8357-1f97aa87f298\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-05T20:13:50.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"5552a1e8-5ca8-433e-8357-1f97aa87f298\",\n        \"receiverDFSPTxnID\": \"5552a1e8-5ca8-433e-8357-1f97aa87f298\",\n        \"settlementWindowId\": \"18\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"e252e6a7-d50f-47d0-9cc9-7b0b5636c673\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:10:52.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"e252e6a7-d50f-47d0-9cc9-7b0b5636c673\",\n        \"receiverDFSPTxnID\": \"e252e6a7-d50f-47d0-9cc9-7b0b5636c673\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"9677aa86-9e7e-4a66-8564-a478d9e86403\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-11T22:50:41.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"9677aa86-9e7e-4a66-8564-a478d9e86403\",\n        \"receiverDFSPTxnID\": \"9677aa86-9e7e-4a66-8564-a478d9e86403\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"4ee7b245-823b-496a-8142-57731b5e3f99\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T18:37:09.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"4ee7b245-823b-496a-8142-57731b5e3f99\",\n        \"receiverDFSPTxnID\": \"4ee7b245-823b-496a-8142-57731b5e3f99\",\n        \"settlementWindowId\": \"12\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"f6549701-984f-4cd6-a070-fd982aa21a9e\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T21:17:00.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"f6549701-984f-4cd6-a070-fd982aa21a9e\",\n        \"receiverDFSPTxnID\": \"f6549701-984f-4cd6-a070-fd982aa21a9e\",\n        \"settlementWindowId\": \"26\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"9621eb56-7bb9-4580-bf30-bebdddbc9a30\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T15:03:30.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"9621eb56-7bb9-4580-bf30-bebdddbc9a30\",\n        \"receiverDFSPTxnID\": \"9621eb56-7bb9-4580-bf30-bebdddbc9a30\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"e5ee84b1-e25a-4585-a100-7086e04af4fd\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T18:38:11.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"e5ee84b1-e25a-4585-a100-7086e04af4fd\",\n        \"receiverDFSPTxnID\": \"e5ee84b1-e25a-4585-a100-7086e04af4fd\",\n        \"settlementWindowId\": \"61\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"92177320-d9f6-4da0-91d6-d67cd96a0e9f\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T00:44:57.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"92177320-d9f6-4da0-91d6-d67cd96a0e9f\",\n        \"receiverDFSPTxnID\": \"92177320-d9f6-4da0-91d6-d67cd96a0e9f\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"b70a9520-c1c0-469c-99f4-2afbf7f66455\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T17:29:01.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"b70a9520-c1c0-469c-99f4-2afbf7f66455\",\n        \"receiverDFSPTxnID\": \"b70a9520-c1c0-469c-99f4-2afbf7f66455\",\n        \"settlementWindowId\": \"61\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"dfb9c7a3-ae00-4a4d-a50b-c6bfe53dd3d3\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T14:50:06.000Z\",\n        \"settlementDate\": \"2019-04-29T14:58:21.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"dfb9c7a3-ae00-4a4d-a50b-c6bfe53dd3d3\",\n        \"receiverDFSPTxnID\": \"dfb9c7a3-ae00-4a4d-a50b-c6bfe53dd3d3\",\n        \"settlementWindowId\": \"89\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"0c2173f5-e152-488f-870a-91a8695e5093\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-25T16:18:20.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"0c2173f5-e152-488f-870a-91a8695e5093\",\n        \"receiverDFSPTxnID\": \"0c2173f5-e152-488f-870a-91a8695e5093\",\n        \"settlementWindowId\": \"77\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"35225351-1a7b-4ad5-b114-42a0f968bab0\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T22:51:42.000Z\",\n        \"settlementDate\": \"2019-04-06T22:54:39.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"35225351-1a7b-4ad5-b114-42a0f968bab0\",\n        \"receiverDFSPTxnID\": \"35225351-1a7b-4ad5-b114-42a0f968bab0\",\n        \"settlementWindowId\": \"37\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"c94b8ac8-b194-4af8-bc65-16b35acc08c4\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T13:28:28.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"c94b8ac8-b194-4af8-bc65-16b35acc08c4\",\n        \"receiverDFSPTxnID\": \"c94b8ac8-b194-4af8-bc65-16b35acc08c4\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"c95b2ce9-58c4-4655-abe2-20d54314b5c7\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T13:26:03.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"c95b2ce9-58c4-4655-abe2-20d54314b5c7\",\n        \"receiverDFSPTxnID\": \"c95b2ce9-58c4-4655-abe2-20d54314b5c7\",\n        \"settlementWindowId\": \"86\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"d8e55af7-0c21-47f1-908e-ef9682c857b7\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-08T02:50:08.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"d8e55af7-0c21-47f1-908e-ef9682c857b7\",\n        \"receiverDFSPTxnID\": \"d8e55af7-0c21-47f1-908e-ef9682c857b7\",\n        \"settlementWindowId\": \"45\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"b279d2c9-fb5e-4087-be43-22692592a26c\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-24T10:38:30.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"b279d2c9-fb5e-4087-be43-22692592a26c\",\n        \"receiverDFSPTxnID\": \"b279d2c9-fb5e-4087-be43-22692592a26c\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"7aab0c4e-17b7-41b4-9be8-b86a9b3776d0\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-14T23:54:04.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"221\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"7aab0c4e-17b7-41b4-9be8-b86a9b3776d0\",\n        \"receiverDFSPTxnID\": \"7aab0c4e-17b7-41b4-9be8-b86a9b3776d0\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"ea770a7e-9b55-4cee-877f-05a82cf9f81b\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T21:16:50.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"ea770a7e-9b55-4cee-877f-05a82cf9f81b\",\n        \"receiverDFSPTxnID\": \"ea770a7e-9b55-4cee-877f-05a82cf9f81b\",\n        \"settlementWindowId\": \"26\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"26570a2a-3488-4b79-bfa5-7fcd406cd06e\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T18:08:40.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"232\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"26570a2a-3488-4b79-bfa5-7fcd406cd06e\",\n        \"receiverDFSPTxnID\": \"26570a2a-3488-4b79-bfa5-7fcd406cd06e\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"c18340dd-a35f-416f-a560-c4fdf432cc3d\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:37:26.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"c18340dd-a35f-416f-a560-c4fdf432cc3d\",\n        \"receiverDFSPTxnID\": \"c18340dd-a35f-416f-a560-c4fdf432cc3d\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"97677b92-8434-4f1d-b67b-224c718ef09c\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T12:47:25.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"97677b92-8434-4f1d-b67b-224c718ef09c\",\n        \"receiverDFSPTxnID\": \"97677b92-8434-4f1d-b67b-224c718ef09c\",\n        \"settlementWindowId\": \"86\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"ec3fff3d-ebc6-450d-a814-372678f77a56\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T03:02:46.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"ec3fff3d-ebc6-450d-a814-372678f77a56\",\n        \"receiverDFSPTxnID\": \"ec3fff3d-ebc6-450d-a814-372678f77a56\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"d6438f18-26db-48f6-b44d-23d859f2f95f\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T17:28:27.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"d6438f18-26db-48f6-b44d-23d859f2f95f\",\n        \"receiverDFSPTxnID\": \"d6438f18-26db-48f6-b44d-23d859f2f95f\",\n        \"settlementWindowId\": \"61\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"2a5a0726-bc4f-4d0e-aa5b-c89734b25d60\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T01:56:48.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"229\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"2a5a0726-bc4f-4d0e-aa5b-c89734b25d60\",\n        \"receiverDFSPTxnID\": \"2a5a0726-bc4f-4d0e-aa5b-c89734b25d60\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"aabfb1eb-26a5-4488-ad0a-051c2aa371b5\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-14T23:47:58.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"aabfb1eb-26a5-4488-ad0a-051c2aa371b5\",\n        \"receiverDFSPTxnID\": \"aabfb1eb-26a5-4488-ad0a-051c2aa371b5\",\n        \"settlementWindowId\": \"56\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"f37b40a9-a87c-4ce6-ba76-e419e610014a\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T16:40:59.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"f37b40a9-a87c-4ce6-ba76-e419e610014a\",\n        \"receiverDFSPTxnID\": \"f37b40a9-a87c-4ce6-ba76-e419e610014a\",\n        \"settlementWindowId\": \"68\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"d5f66447-1642-4435-9ef5-00b9ea4195a5\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T02:09:34.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"d5f66447-1642-4435-9ef5-00b9ea4195a5\",\n        \"receiverDFSPTxnID\": \"d5f66447-1642-4435-9ef5-00b9ea4195a5\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"cff3883c-4698-40d7-8467-24bd761a6d99\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-30T13:52:34.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"cff3883c-4698-40d7-8467-24bd761a6d99\",\n        \"receiverDFSPTxnID\": \"cff3883c-4698-40d7-8467-24bd761a6d99\",\n        \"settlementWindowId\": \"95\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"b1124a2b-86e0-4db5-8556-aa8551ec91ab\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-25T14:59:07.000Z\",\n        \"settlementDate\": \"2019-04-25T14:59:30.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"b1124a2b-86e0-4db5-8556-aa8551ec91ab\",\n        \"receiverDFSPTxnID\": \"b1124a2b-86e0-4db5-8556-aa8551ec91ab\",\n        \"settlementWindowId\": \"74\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"fa18130d-3926-4d95-a779-ca6675532a5e\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T18:36:30.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"fa18130d-3926-4d95-a779-ca6675532a5e\",\n        \"receiverDFSPTxnID\": \"fa18130d-3926-4d95-a779-ca6675532a5e\",\n        \"settlementWindowId\": \"12\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"de27fd2f-5ba6-4ff0-a3f9-5f7b3f6d5379\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T18:24:35.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"de27fd2f-5ba6-4ff0-a3f9-5f7b3f6d5379\",\n        \"receiverDFSPTxnID\": \"de27fd2f-5ba6-4ff0-a3f9-5f7b3f6d5379\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"fe567fb6-0109-4806-be53-04c7102b5ca6\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T21:32:45.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"fe567fb6-0109-4806-be53-04c7102b5ca6\",\n        \"receiverDFSPTxnID\": \"fe567fb6-0109-4806-be53-04c7102b5ca6\",\n        \"settlementWindowId\": \"28\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"8aac97c3-cbe4-458c-ba3c-ab3803d5fe13\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T13:13:27.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"8aac97c3-cbe4-458c-ba3c-ab3803d5fe13\",\n        \"receiverDFSPTxnID\": \"8aac97c3-cbe4-458c-ba3c-ab3803d5fe13\",\n        \"settlementWindowId\": \"64\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"931d2a6c-98ea-41ef-a64f-ac3839cabf38\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-11T04:34:03.000Z\",\n        \"settlementDate\": \"2019-04-12T19:26:38.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"931d2a6c-98ea-41ef-a64f-ac3839cabf38\",\n        \"receiverDFSPTxnID\": \"931d2a6c-98ea-41ef-a64f-ac3839cabf38\",\n        \"settlementWindowId\": \"52\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"d43329ee-9882-46fb-a13d-6e2d5b934657\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-14T23:34:51.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"d43329ee-9882-46fb-a13d-6e2d5b934657\",\n        \"receiverDFSPTxnID\": \"d43329ee-9882-46fb-a13d-6e2d5b934657\",\n        \"settlementWindowId\": \"56\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"6109b2e1-b2c5-4004-9417-6b0bb16ca90c\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-09T12:55:04.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"6109b2e1-b2c5-4004-9417-6b0bb16ca90c\",\n        \"receiverDFSPTxnID\": \"6109b2e1-b2c5-4004-9417-6b0bb16ca90c\",\n        \"settlementWindowId\": \"48\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"b7f2de8d-e70e-42d8-839a-6e7548167721\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:06:02.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"b7f2de8d-e70e-42d8-839a-6e7548167721\",\n        \"receiverDFSPTxnID\": \"b7f2de8d-e70e-42d8-839a-6e7548167721\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"0395fe26-9053-4b8f-85f0-91d41c93a3ca\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T18:04:06.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"0395fe26-9053-4b8f-85f0-91d41c93a3ca\",\n        \"receiverDFSPTxnID\": \"0395fe26-9053-4b8f-85f0-91d41c93a3ca\",\n        \"settlementWindowId\": \"61\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"d7fed021-7f0e-4a67-a658-578dac323480\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T18:44:21.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"d7fed021-7f0e-4a67-a658-578dac323480\",\n        \"receiverDFSPTxnID\": \"d7fed021-7f0e-4a67-a658-578dac323480\",\n        \"settlementWindowId\": \"61\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"557214cc-4243-452e-8cd9-a8535385a8e4\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T16:27:15.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"557214cc-4243-452e-8cd9-a8535385a8e4\",\n        \"receiverDFSPTxnID\": \"557214cc-4243-452e-8cd9-a8535385a8e4\",\n        \"settlementWindowId\": \"68\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"c108306a-ec1c-4f3b-ae01-cc7e95514ba0\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-25T20:23:02.000Z\",\n        \"settlementDate\": \"2019-04-25T20:23:59.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"c108306a-ec1c-4f3b-ae01-cc7e95514ba0\",\n        \"receiverDFSPTxnID\": \"c108306a-ec1c-4f3b-ae01-cc7e95514ba0\",\n        \"settlementWindowId\": \"78\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"0c41c51c-1224-495c-bf89-067051aa1063\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T13:38:35.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"0c41c51c-1224-495c-bf89-067051aa1063\",\n        \"receiverDFSPTxnID\": \"0c41c51c-1224-495c-bf89-067051aa1063\",\n        \"settlementWindowId\": \"87\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"fd92046c-1a5d-4ec1-a8a8-a9876e5bac5d\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-11T04:49:28.000Z\",\n        \"settlementDate\": \"2019-04-12T19:26:38.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"fd92046c-1a5d-4ec1-a8a8-a9876e5bac5d\",\n        \"receiverDFSPTxnID\": \"fd92046c-1a5d-4ec1-a8a8-a9876e5bac5d\",\n        \"settlementWindowId\": \"52\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"92307e2e-d016-43ba-b939-c82c9f799abc\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T17:18:18.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"92307e2e-d016-43ba-b939-c82c9f799abc\",\n        \"receiverDFSPTxnID\": \"92307e2e-d016-43ba-b939-c82c9f799abc\",\n        \"settlementWindowId\": \"68\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"dae13542-e578-4332-baa8-0f2178684db9\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T15:06:57.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"dae13542-e578-4332-baa8-0f2178684db9\",\n        \"receiverDFSPTxnID\": \"dae13542-e578-4332-baa8-0f2178684db9\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"e6cbedda-84cd-4df8-b802-53e204660362\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T17:47:56.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"e6cbedda-84cd-4df8-b802-53e204660362\",\n        \"receiverDFSPTxnID\": \"e6cbedda-84cd-4df8-b802-53e204660362\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"51a3fba6-b07e-47fe-9e8a-405d42738685\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T22:50:55.000Z\",\n        \"settlementDate\": \"2019-04-06T22:54:39.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"51a3fba6-b07e-47fe-9e8a-405d42738685\",\n        \"receiverDFSPTxnID\": \"51a3fba6-b07e-47fe-9e8a-405d42738685\",\n        \"settlementWindowId\": \"37\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"5cc41598-d9cc-4656-9bbd-623cb9bee149\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T14:50:39.000Z\",\n        \"settlementDate\": \"2019-04-29T14:58:21.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"5cc41598-d9cc-4656-9bbd-623cb9bee149\",\n        \"receiverDFSPTxnID\": \"5cc41598-d9cc-4656-9bbd-623cb9bee149\",\n        \"settlementWindowId\": \"89\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"12d0fe45-2a42-4037-bcf2-aa35d901b1a8\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T14:24:21.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"12d0fe45-2a42-4037-bcf2-aa35d901b1a8\",\n        \"receiverDFSPTxnID\": \"12d0fe45-2a42-4037-bcf2-aa35d901b1a8\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"df554c4f-47d2-48f4-8cf9-b1bfab5a35d1\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-15T00:30:56.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"df554c4f-47d2-48f4-8cf9-b1bfab5a35d1\",\n        \"receiverDFSPTxnID\": \"df554c4f-47d2-48f4-8cf9-b1bfab5a35d1\",\n        \"settlementWindowId\": \"58\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"591862bf-ab47-4d32-a6b8-d7895f66f75b\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T04:05:06.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"591862bf-ab47-4d32-a6b8-d7895f66f75b\",\n        \"receiverDFSPTxnID\": \"591862bf-ab47-4d32-a6b8-d7895f66f75b\",\n        \"settlementWindowId\": \"84\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"18ae968a-cce2-4f5c-958f-f096ab66f42f\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T16:53:46.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"18ae968a-cce2-4f5c-958f-f096ab66f42f\",\n        \"receiverDFSPTxnID\": \"18ae968a-cce2-4f5c-958f-f096ab66f42f\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"c5c49e19-1d04-4c8b-ba11-9daba7c93434\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T22:31:09.000Z\",\n        \"settlementDate\": \"2019-04-06T22:31:28.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"c5c49e19-1d04-4c8b-ba11-9daba7c93434\",\n        \"receiverDFSPTxnID\": \"c5c49e19-1d04-4c8b-ba11-9daba7c93434\",\n        \"settlementWindowId\": \"35\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"23c95706-9f05-4337-8dcd-68e4953277c7\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T01:53:02.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"23c95706-9f05-4337-8dcd-68e4953277c7\",\n        \"receiverDFSPTxnID\": \"23c95706-9f05-4337-8dcd-68e4953277c7\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"6327fc32-1f53-457a-8687-c725d22d2f35\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T18:47:51.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"6327fc32-1f53-457a-8687-c725d22d2f35\",\n        \"receiverDFSPTxnID\": \"6327fc32-1f53-457a-8687-c725d22d2f35\",\n        \"settlementWindowId\": \"13\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"86254f8a-4a03-452a-944a-78a0f75e558a\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-25T16:27:03.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"86254f8a-4a03-452a-944a-78a0f75e558a\",\n        \"receiverDFSPTxnID\": \"86254f8a-4a03-452a-944a-78a0f75e558a\",\n        \"settlementWindowId\": \"77\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"65725bab-d4f0-4c94-8b7e-d51dfe681195\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T17:29:34.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"65725bab-d4f0-4c94-8b7e-d51dfe681195\",\n        \"receiverDFSPTxnID\": \"65725bab-d4f0-4c94-8b7e-d51dfe681195\",\n        \"settlementWindowId\": \"61\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"26d19856-3e79-4867-86a2-ab96c9f130af\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T02:56:45.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"26d19856-3e79-4867-86a2-ab96c9f130af\",\n        \"receiverDFSPTxnID\": \"26d19856-3e79-4867-86a2-ab96c9f130af\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"81f3cf0c-d40c-489a-ad22-b035f3fb9bf3\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T21:16:44.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"81f3cf0c-d40c-489a-ad22-b035f3fb9bf3\",\n        \"receiverDFSPTxnID\": \"81f3cf0c-d40c-489a-ad22-b035f3fb9bf3\",\n        \"settlementWindowId\": \"26\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"80b707b5-294a-4d17-9de5-a82538aa83c2\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T04:27:30.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"80b707b5-294a-4d17-9de5-a82538aa83c2\",\n        \"receiverDFSPTxnID\": \"80b707b5-294a-4d17-9de5-a82538aa83c2\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"6190a195-9c19-4c53-9919-a520581a2bb2\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T03:41:15.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"6190a195-9c19-4c53-9919-a520581a2bb2\",\n        \"receiverDFSPTxnID\": \"6190a195-9c19-4c53-9919-a520581a2bb2\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"9bd89db2-76bf-4e8c-b627-56da0e9514cb\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-12T16:24:37.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"9bd89db2-76bf-4e8c-b627-56da0e9514cb\",\n        \"receiverDFSPTxnID\": \"9bd89db2-76bf-4e8c-b627-56da0e9514cb\",\n        \"settlementWindowId\": \"53\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"a1afd7e6-28f9-4141-a7b4-ac898dd53b85\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-24T10:14:34.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"a1afd7e6-28f9-4141-a7b4-ac898dd53b85\",\n        \"receiverDFSPTxnID\": \"a1afd7e6-28f9-4141-a7b4-ac898dd53b85\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"67671b6d-a49b-46f7-a247-fe93092d4b61\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-24T09:44:29.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"67671b6d-a49b-46f7-a247-fe93092d4b61\",\n        \"receiverDFSPTxnID\": \"67671b6d-a49b-46f7-a247-fe93092d4b61\",\n        \"settlementWindowId\": \"70\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"4f02c5d4-9ce1-4a6b-a2b2-161be1992249\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-30T13:45:09.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"4f02c5d4-9ce1-4a6b-a2b2-161be1992249\",\n        \"receiverDFSPTxnID\": \"4f02c5d4-9ce1-4a6b-a2b2-161be1992249\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"18d3c482-21a1-4525-a48e-f51eb1e7b547\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:38:25.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"18d3c482-21a1-4525-a48e-f51eb1e7b547\",\n        \"receiverDFSPTxnID\": \"18d3c482-21a1-4525-a48e-f51eb1e7b547\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"e4a08ad9-0983-4375-ab1a-801709080690\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-11T04:36:18.000Z\",\n        \"settlementDate\": \"2019-04-12T19:26:38.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"e4a08ad9-0983-4375-ab1a-801709080690\",\n        \"receiverDFSPTxnID\": \"e4a08ad9-0983-4375-ab1a-801709080690\",\n        \"settlementWindowId\": \"52\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"20e1fbea-74e7-442c-9e59-badd6c435ade\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-24T09:43:56.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"20e1fbea-74e7-442c-9e59-badd6c435ade\",\n        \"receiverDFSPTxnID\": \"20e1fbea-74e7-442c-9e59-badd6c435ade\",\n        \"settlementWindowId\": \"70\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"15702073-1714-422f-8604-19ef451f4647\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-12T16:22:56.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"15702073-1714-422f-8604-19ef451f4647\",\n        \"receiverDFSPTxnID\": \"15702073-1714-422f-8604-19ef451f4647\",\n        \"settlementWindowId\": \"53\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"fb2fa9e6-dabe-4f5e-9342-c86a87ce207d\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T18:20:47.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"fb2fa9e6-dabe-4f5e-9342-c86a87ce207d\",\n        \"receiverDFSPTxnID\": \"fb2fa9e6-dabe-4f5e-9342-c86a87ce207d\",\n        \"settlementWindowId\": \"61\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"e8dfb387-c836-440a-867a-eefbf31db6af\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T15:08:07.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"e8dfb387-c836-440a-867a-eefbf31db6af\",\n        \"receiverDFSPTxnID\": \"e8dfb387-c836-440a-867a-eefbf31db6af\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"cfb9b66b-0f0e-455b-9bb7-4e46c153518f\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-24T09:41:32.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"cfb9b66b-0f0e-455b-9bb7-4e46c153518f\",\n        \"receiverDFSPTxnID\": \"cfb9b66b-0f0e-455b-9bb7-4e46c153518f\",\n        \"settlementWindowId\": \"70\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"c506dba3-6788-464e-9d49-339a5ef2bc2f\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-07T02:19:25.000Z\",\n        \"settlementDate\": \"2019-04-07T02:19:51.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"c506dba3-6788-464e-9d49-339a5ef2bc2f\",\n        \"receiverDFSPTxnID\": \"c506dba3-6788-464e-9d49-339a5ef2bc2f\",\n        \"settlementWindowId\": \"41\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"e974ac86-39e6-4a57-96c9-61d6a85a88c1\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T01:29:02.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"e974ac86-39e6-4a57-96c9-61d6a85a88c1\",\n        \"receiverDFSPTxnID\": \"e974ac86-39e6-4a57-96c9-61d6a85a88c1\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"1c69cb84-9337-4ac7-a924-abb3e786ae10\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T15:41:47.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"229\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"1c69cb84-9337-4ac7-a924-abb3e786ae10\",\n        \"receiverDFSPTxnID\": \"1c69cb84-9337-4ac7-a924-abb3e786ae10\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"fb1d99e5-6377-4eb5-bfa3-7df95bae8d45\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-11T22:21:30.000Z\",\n        \"settlementDate\": \"2019-04-12T19:26:38.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"fb1d99e5-6377-4eb5-bfa3-7df95bae8d45\",\n        \"receiverDFSPTxnID\": \"fb1d99e5-6377-4eb5-bfa3-7df95bae8d45\",\n        \"settlementWindowId\": \"52\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"7da33619-e41e-477d-a06a-a53454b4e5cc\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-10T01:38:23.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"7da33619-e41e-477d-a06a-a53454b4e5cc\",\n        \"receiverDFSPTxnID\": \"7da33619-e41e-477d-a06a-a53454b4e5cc\",\n        \"settlementWindowId\": \"51\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"d292bb41-c134-4d07-a7e8-18c7a2efcea8\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T22:48:43.000Z\",\n        \"settlementDate\": \"2019-04-17T22:53:56.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"d292bb41-c134-4d07-a7e8-18c7a2efcea8\",\n        \"receiverDFSPTxnID\": \"d292bb41-c134-4d07-a7e8-18c7a2efcea8\",\n        \"settlementWindowId\": \"66\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"52d06d0c-b74c-44f1-87d5-8cdd73f64fe9\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-10T00:59:32.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"52d06d0c-b74c-44f1-87d5-8cdd73f64fe9\",\n        \"receiverDFSPTxnID\": \"52d06d0c-b74c-44f1-87d5-8cdd73f64fe9\",\n        \"settlementWindowId\": \"51\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"85600aa7-2dcb-4a77-af98-a4644db03002\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T01:19:56.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"85600aa7-2dcb-4a77-af98-a4644db03002\",\n        \"receiverDFSPTxnID\": \"85600aa7-2dcb-4a77-af98-a4644db03002\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"eb8cbb18-3478-4445-b114-2e6885510e64\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T15:45:10.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"eb8cbb18-3478-4445-b114-2e6885510e64\",\n        \"receiverDFSPTxnID\": \"eb8cbb18-3478-4445-b114-2e6885510e64\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"845af37e-e835-4aff-996e-08e9e5daf237\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T17:02:15.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"845af37e-e835-4aff-996e-08e9e5daf237\",\n        \"receiverDFSPTxnID\": \"845af37e-e835-4aff-996e-08e9e5daf237\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"64e5b938-fdf7-4f53-9270-67e1aee04b45\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:29:18.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"64e5b938-fdf7-4f53-9270-67e1aee04b45\",\n        \"receiverDFSPTxnID\": \"64e5b938-fdf7-4f53-9270-67e1aee04b45\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"ad48411e-cc0f-4bb7-8c1c-898e0da3d6c9\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T13:12:48.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"ad48411e-cc0f-4bb7-8c1c-898e0da3d6c9\",\n        \"receiverDFSPTxnID\": \"ad48411e-cc0f-4bb7-8c1c-898e0da3d6c9\",\n        \"settlementWindowId\": \"64\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"9dfa05ce-4fe6-41bb-9e26-d96d8281de97\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T18:49:29.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"9dfa05ce-4fe6-41bb-9e26-d96d8281de97\",\n        \"receiverDFSPTxnID\": \"9dfa05ce-4fe6-41bb-9e26-d96d8281de97\",\n        \"settlementWindowId\": \"13\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"aa5e9489-8000-47f0-b2a5-c0ea5e6c8197\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T15:52:59.000Z\",\n        \"settlementDate\": \"2019-04-29T16:00:39.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"aa5e9489-8000-47f0-b2a5-c0ea5e6c8197\",\n        \"receiverDFSPTxnID\": \"aa5e9489-8000-47f0-b2a5-c0ea5e6c8197\",\n        \"settlementWindowId\": \"92\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"8d36807d-13d5-423d-96dd-66047a23df81\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T04:20:58.000Z\",\n        \"settlementDate\": \"2019-04-29T04:30:06.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"8d36807d-13d5-423d-96dd-66047a23df81\",\n        \"receiverDFSPTxnID\": \"8d36807d-13d5-423d-96dd-66047a23df81\",\n        \"settlementWindowId\": \"85\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"d403b877-c3df-4bd6-97a9-8c85cd58f6e8\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T18:41:24.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"d403b877-c3df-4bd6-97a9-8c85cd58f6e8\",\n        \"receiverDFSPTxnID\": \"d403b877-c3df-4bd6-97a9-8c85cd58f6e8\",\n        \"settlementWindowId\": \"13\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"50af0539-507c-4c50-ba83-0f07c6d12e70\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T01:02:27.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"50af0539-507c-4c50-ba83-0f07c6d12e70\",\n        \"receiverDFSPTxnID\": \"50af0539-507c-4c50-ba83-0f07c6d12e70\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"efbe6069-557d-4f16-b877-03d1f793f1fa\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T04:11:14.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"efbe6069-557d-4f16-b877-03d1f793f1fa\",\n        \"receiverDFSPTxnID\": \"efbe6069-557d-4f16-b877-03d1f793f1fa\",\n        \"settlementWindowId\": \"84\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"76382bc2-4f79-4d90-a04e-460ffffddfb4\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-10T01:37:16.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"76382bc2-4f79-4d90-a04e-460ffffddfb4\",\n        \"receiverDFSPTxnID\": \"76382bc2-4f79-4d90-a04e-460ffffddfb4\",\n        \"settlementWindowId\": \"51\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"d0a024cb-83f8-4db2-af82-7e03cb7370ca\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T01:54:46.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"d0a024cb-83f8-4db2-af82-7e03cb7370ca\",\n        \"receiverDFSPTxnID\": \"d0a024cb-83f8-4db2-af82-7e03cb7370ca\",\n        \"settlementWindowId\": \"60\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"6f5c07e9-2960-441d-8a38-98abcc7d6106\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T16:24:59.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"6f5c07e9-2960-441d-8a38-98abcc7d6106\",\n        \"receiverDFSPTxnID\": \"6f5c07e9-2960-441d-8a38-98abcc7d6106\",\n        \"settlementWindowId\": \"68\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"4551cb5d-f138-4d9f-a9ab-8e33147ebcdc\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T17:27:54.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"4551cb5d-f138-4d9f-a9ab-8e33147ebcdc\",\n        \"receiverDFSPTxnID\": \"4551cb5d-f138-4d9f-a9ab-8e33147ebcdc\",\n        \"settlementWindowId\": \"61\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"f1624117-0c18-4b6f-8a7d-58637b2df512\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-14T23:37:47.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"f1624117-0c18-4b6f-8a7d-58637b2df512\",\n        \"receiverDFSPTxnID\": \"f1624117-0c18-4b6f-8a7d-58637b2df512\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"f28b960f-b92f-4a8c-9529-334d69edb570\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-24T10:22:59.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"f28b960f-b92f-4a8c-9529-334d69edb570\",\n        \"receiverDFSPTxnID\": \"f28b960f-b92f-4a8c-9529-334d69edb570\",\n        \"settlementWindowId\": \"70\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"7ae60be0-7914-49e9-ad33-c691680151f8\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T03:35:02.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"4994890\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"7ae60be0-7914-49e9-ad33-c691680151f8\",\n        \"receiverDFSPTxnID\": \"7ae60be0-7914-49e9-ad33-c691680151f8\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"f404fb5b-27bb-4d4e-bc5b-d9c8120fc71b\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T04:13:25.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"f404fb5b-27bb-4d4e-bc5b-d9c8120fc71b\",\n        \"receiverDFSPTxnID\": \"f404fb5b-27bb-4d4e-bc5b-d9c8120fc71b\",\n        \"settlementWindowId\": \"84\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"4e50f932-10ac-46e0-b4f0-7b3cb62b1827\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T19:44:48.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"4e50f932-10ac-46e0-b4f0-7b3cb62b1827\",\n        \"receiverDFSPTxnID\": \"4e50f932-10ac-46e0-b4f0-7b3cb62b1827\",\n        \"settlementWindowId\": \"16\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"2ec192e6-b435-4699-8336-4f7b47f69f08\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T16:55:16.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"2ec192e6-b435-4699-8336-4f7b47f69f08\",\n        \"receiverDFSPTxnID\": \"2ec192e6-b435-4699-8336-4f7b47f69f08\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"5c51ff51-7319-4fcf-a468-04efb86b5be7\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-14T23:50:05.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"5c51ff51-7319-4fcf-a468-04efb86b5be7\",\n        \"receiverDFSPTxnID\": \"5c51ff51-7319-4fcf-a468-04efb86b5be7\",\n        \"settlementWindowId\": \"56\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"614c0945-c9ca-4860-841b-b6bd45ff1916\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-15T00:07:02.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"614c0945-c9ca-4860-841b-b6bd45ff1916\",\n        \"receiverDFSPTxnID\": \"614c0945-c9ca-4860-841b-b6bd45ff1916\",\n        \"settlementWindowId\": \"58\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"f560298c-447c-4302-9e2a-d45da31514b9\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-15T00:34:27.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"f560298c-447c-4302-9e2a-d45da31514b9\",\n        \"receiverDFSPTxnID\": \"f560298c-447c-4302-9e2a-d45da31514b9\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"e114fbc4-7e1e-495d-9028-66e3dd19d74d\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-03T00:45:51.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"e114fbc4-7e1e-495d-9028-66e3dd19d74d\",\n        \"receiverDFSPTxnID\": \"e114fbc4-7e1e-495d-9028-66e3dd19d74d\",\n        \"settlementWindowId\": \"8\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp3\",\n        \"senderDFSPName\": \"testfsp3\",\n        \"receiverDFSPId\": \"testfsp1\",\n        \"receiverDFSPName\": \"testfsp1\",\n        \"hubTxnID\": \"51d25e11-b517-4b8d-ace5-83c75152c408\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-06T22:22:12.000Z\",\n        \"settlementDate\": \"2019-04-06T22:22:41.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"51d25e11-b517-4b8d-ace5-83c75152c408\",\n        \"receiverDFSPTxnID\": \"51d25e11-b517-4b8d-ace5-83c75152c408\",\n        \"settlementWindowId\": \"33\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"272c0526-9992-435f-bd0b-2b8816b0d162\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:42:03.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"60\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"272c0526-9992-435f-bd0b-2b8816b0d162\",\n        \"receiverDFSPTxnID\": \"272c0526-9992-435f-bd0b-2b8816b0d162\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp2\",\n        \"receiverDFSPName\": \"testfsp2\",\n        \"hubTxnID\": \"59382a6c-5c17-4070-b20b-5d270a364523\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T19:06:24.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"35\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"59382a6c-5c17-4070-b20b-5d270a364523\",\n        \"receiverDFSPTxnID\": \"59382a6c-5c17-4070-b20b-5d270a364523\",\n        \"settlementWindowId\": \"15\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"b27be8f1-cacd-4c26-998d-dee58962a1e0\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-10T02:09:51.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"b27be8f1-cacd-4c26-998d-dee58962a1e0\",\n        \"receiverDFSPTxnID\": \"b27be8f1-cacd-4c26-998d-dee58962a1e0\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"e405770e-5ab9-4d6a-b443-ebf1081e0c47\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T19:06:43.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"e405770e-5ab9-4d6a-b443-ebf1081e0c47\",\n        \"receiverDFSPTxnID\": \"e405770e-5ab9-4d6a-b443-ebf1081e0c47\",\n        \"settlementWindowId\": \"15\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"d8c5aa4b-68fe-433e-a184-e7503a8781c8\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T04:22:56.000Z\",\n        \"settlementDate\": \"2019-04-29T04:30:06.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"d8c5aa4b-68fe-433e-a184-e7503a8781c8\",\n        \"receiverDFSPTxnID\": \"d8c5aa4b-68fe-433e-a184-e7503a8781c8\",\n        \"settlementWindowId\": \"85\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"003b3725-49e5-4e6b-a2bf-ce85a7e6130d\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-11T18:41:07.000Z\",\n        \"settlementDate\": \"2019-04-12T19:26:38.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"003b3725-49e5-4e6b-a2bf-ce85a7e6130d\",\n        \"receiverDFSPTxnID\": \"003b3725-49e5-4e6b-a2bf-ce85a7e6130d\",\n        \"settlementWindowId\": \"52\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"1d8e8bba-ac3e-4206-a2af-b42b31c31f19\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T17:27:32.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"1d8e8bba-ac3e-4206-a2af-b42b31c31f19\",\n        \"receiverDFSPTxnID\": \"1d8e8bba-ac3e-4206-a2af-b42b31c31f19\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"11c71416-3630-4e1c-99ad-a0dde2af7fde\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-18T17:20:23.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"200\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"11c71416-3630-4e1c-99ad-a0dde2af7fde\",\n        \"receiverDFSPTxnID\": \"11c71416-3630-4e1c-99ad-a0dde2af7fde\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"bf8b9cbe-0f91-44c0-b469-3676efb2db96\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T17:25:30.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"bf8b9cbe-0f91-44c0-b469-3676efb2db96\",\n        \"receiverDFSPTxnID\": \"bf8b9cbe-0f91-44c0-b469-3676efb2db96\",\n        \"settlementWindowId\": \"61\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"3c9c1d7e-93c5-4585-8d98-381183ed938b\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-29T04:10:00.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"3c9c1d7e-93c5-4585-8d98-381183ed938b\",\n        \"receiverDFSPTxnID\": \"3c9c1d7e-93c5-4585-8d98-381183ed938b\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"cd0883f1-a64d-4d2d-8e33-bb27b401d45e\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:38:44.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"cd0883f1-a64d-4d2d-8e33-bb27b401d45e\",\n        \"receiverDFSPTxnID\": \"cd0883f1-a64d-4d2d-8e33-bb27b401d45e\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"9bf57c2d-98ee-43fe-aef3-780c1b367537\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-25T20:23:23.000Z\",\n        \"settlementDate\": \"2019-04-25T20:23:59.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"9bf57c2d-98ee-43fe-aef3-780c1b367537\",\n        \"receiverDFSPTxnID\": \"9bf57c2d-98ee-43fe-aef3-780c1b367537\",\n        \"settlementWindowId\": \"78\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp2\",\n        \"senderDFSPName\": \"testfsp2\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"d51d18f2-e80b-4107-9d69-67e727dd16fb\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T22:48:04.000Z\",\n        \"settlementDate\": \"2019-04-17T22:53:56.000Z\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"20\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"d51d18f2-e80b-4107-9d69-67e727dd16fb\",\n        \"receiverDFSPTxnID\": \"d51d18f2-e80b-4107-9d69-67e727dd16fb\",\n        \"settlementWindowId\": \"66\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"3564251c-141d-4465-84eb-6efa237cb345\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T17:33:30.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"10\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"3564251c-141d-4465-84eb-6efa237cb345\",\n        \"receiverDFSPTxnID\": \"3564251c-141d-4465-84eb-6efa237cb345\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"fcbf8f66-37af-415c-bec6-371e609073dd\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-15T00:33:12.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"fcbf8f66-37af-415c-bec6-371e609073dd\",\n        \"receiverDFSPTxnID\": \"fcbf8f66-37af-415c-bec6-371e609073dd\",\n        \"settlementWindowId\": \"58\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"3357fb63-97a0-4e72-8338-1b661cb4f9cb\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-16T00:50:36.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"234\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"3357fb63-97a0-4e72-8338-1b661cb4f9cb\",\n        \"receiverDFSPTxnID\": \"3357fb63-97a0-4e72-8338-1b661cb4f9cb\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp4\",\n        \"senderDFSPName\": \"testfsp4\",\n        \"receiverDFSPId\": \"testfsp3\",\n        \"receiverDFSPName\": \"testfsp3\",\n        \"hubTxnID\": \"efcf2169-c1ce-4eec-9256-9c320b1b60fa\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T17:52:23.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"25\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"efcf2169-c1ce-4eec-9256-9c320b1b60fa\",\n        \"receiverDFSPTxnID\": \"efcf2169-c1ce-4eec-9256-9c320b1b60fa\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"testfsp1\",\n        \"senderDFSPName\": \"testfsp1\",\n        \"receiverDFSPId\": \"testfsp4\",\n        \"receiverDFSPName\": \"testfsp4\",\n        \"hubTxnID\": \"57517ea4-e2a7-4c75-8120-8d95cf693133\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-25T16:24:50.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"22507008181\",\n        \"receiverId\": \"22556999125\",\n        \"reconciliationAmount\": \"55\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"57517ea4-e2a7-4c75-8120-8d95cf693133\",\n        \"receiverDFSPTxnID\": \"57517ea4-e2a7-4c75-8120-8d95cf693133\",\n        \"settlementWindowId\": \"77\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"fe967e3f-266e-4c5c-9ec1-b02b8cd5867b\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-15T00:35:48.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"ABORTED\",\n        \"senderDFSPTxnID\": \"fe967e3f-266e-4c5c-9ec1-b02b8cd5867b\",\n        \"receiverDFSPTxnID\": \"fe967e3f-266e-4c5c-9ec1-b02b8cd5867b\",\n        \"settlementWindowId\": \"null\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"5dc59ca6-f075-4dd4-adb2-ad8c3f5a142e\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-04T17:53:46.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"5dc59ca6-f075-4dd4-adb2-ad8c3f5a142e\",\n        \"receiverDFSPTxnID\": \"5dc59ca6-f075-4dd4-adb2-ad8c3f5a142e\",\n        \"settlementWindowId\": \"11\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"e0026976-4ffe-4005-8130-bbca8a5a1b8b\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T16:52:45.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"e0026976-4ffe-4005-8130-bbca8a5a1b8b\",\n        \"receiverDFSPTxnID\": \"e0026976-4ffe-4005-8130-bbca8a5a1b8b\",\n        \"settlementWindowId\": \"65\"\n    },\n    {\n        \"senderDFSPId\": \"payerfsp\",\n        \"senderDFSPName\": \"payerfsp\",\n        \"receiverDFSPId\": \"payeefsp\",\n        \"receiverDFSPName\": \"payeefsp\",\n        \"hubTxnID\": \"fff0ec26-3b26-47c5-930f-f8bcea3734b2\",\n        \"transactionType\": \"P2P\",\n        \"natureOfTxnType\": \"Original\",\n        \"requestDate\": \"null\",\n        \"createdDate\": \"null\",\n        \"modificationDate\": \"2019-04-17T18:30:50.000Z\",\n        \"settlementDate\": \"null\",\n        \"senderCountryCurrencyCode\": \"XOF\",\n        \"receiverCountryCurrencyCode\": \"XOF\",\n        \"senderId\": \"27713803905\",\n        \"receiverId\": \"27713803915\",\n        \"reconciliationAmount\": \"1\",\n        \"receiverNameStatus\": \"RNND\",\n        \"status\": \"COMMITTED\",\n        \"senderDFSPTxnID\": \"fff0ec26-3b26-47c5-930f-f8bcea3734b2\",\n        \"receiverDFSPTxnID\": \"fff0ec26-3b26-47c5-930f-f8bcea3734b2\",\n        \"settlementWindowId\": \"65\"\n    }\n]"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "SettlementWindows",
					"item": [
						{
							"name": "200 - ValidRequest - OpenWindowById",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ee7075db-0d12-4ef6-a67e-0a229a16ea2b",
										"exec": [
											"//Input Variables",
											"pm.variables.set(\"iptSettlementWindowId\",\"2\");",
											"",
											"//Expected Ouput values",
											"pm.variables.set(\"optSettlementWindowId\",2);",
											"pm.variables.set(\"optSettlementWindowState\",\"PENDING_SETTLEMENT\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e55800b7-6c8b-480b-beba-2ecfe82b5d83",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Expected Settlement Window Id should be: \"+pm.variables.get(\"optSettlementWindowId\"), function () {",
											"    pm.expect(jsonData.settlementWindowId).to.eql(pm.variables.get(\"optSettlementWindowId\"));",
											"});",
											"",
											"pm.test(\"Expected Settlement State should be PENDING_SETTLEMENT\", function () {",
											"    pm.expect(jsonData.state).to.eql(pm.variables.get(\"optSettlementWindowState\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{optSettlementWindowId}}",
									"host": [
										"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
									],
									"path": [
										"settlementWindows",
										"{{optSettlementWindowId}}"
									]
								},
								"description": "Happy path test"
							},
							"response": []
						},
						{
							"name": "400 - Bad Request-CloseWindow",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a9436ecf-77fb-46e7-9760-488300cd7013",
										"exec": [
											"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlementWindows?state=OPEN\", function (err, response) {",
											"    console.log(response.json());",
											"    pm.variables.set(\"openSettlementWindowId\",response.json()[0].settlementWindowId);",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d7078729-1ea5-41b5-a4f5-2f1c4050a5b6",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"state\": \"CLOSE\",\n  \"reason\": \"TESTING\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openSettlementWindowId}}",
									"host": [
										"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
									],
									"path": [
										"settlementWindows",
										"{{openSettlementWindowId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Window- state (OPEN)-643a",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e95e6fee-60b9-4cee-90bc-e6db2244dc10",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"for (var i in jsonData){",
											"    pm.test(\"Window State is OPEN\", function () {",
											"        pm.expect(jsonData[i].state).to.eql('OPEN');",
											"    });",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
									"host": [
										"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
									],
									"path": [
										"settlementWindows"
									],
									"query": [
										{
											"key": "participantId",
											"value": "",
											"disabled": true
										},
										{
											"key": "state",
											"value": "OPEN",
											"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
										},
										{
											"key": "fromDateTime",
											"value": "",
											"disabled": true
										},
										{
											"key": "toDateTime",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - param - participantId (11)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16c9883a-db67-4c77-bd13-f60acf47afe9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Should have atleast one entry\", function () {",
											"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?participantId=11",
									"host": [
										"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
									],
									"path": [
										"settlementWindows"
									],
									"query": [
										{
											"key": "state",
											"value": "OPEN",
											"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
											"disabled": true
										},
										{
											"key": "fromDateTime",
											"value": "",
											"disabled": true
										},
										{
											"key": "toDateTime",
											"value": "",
											"disabled": true
										},
										{
											"key": "participantId",
											"value": "11"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - param - state (SETTLED)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da58bf04-85f3-422c-a390-885243a878c3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"for (var i in jsonData){",
											"    pm.test(\"Window State is SETTLED\", function () {",
											"        pm.expect(jsonData[i].state).to.eql('SETTLED');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{hub_operator}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=SETTLED",
									"host": [
										"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
									],
									"path": [
										"settlementWindows"
									],
									"query": [
										{
											"key": "participantId",
											"value": "",
											"disabled": true
										},
										{
											"key": "state",
											"value": "SETTLED",
											"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
										},
										{
											"key": "fromDateTime",
											"value": "",
											"disabled": true
										},
										{
											"key": "toDateTime",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Author: Sridevi Miriyala",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "18f08f29-decb-4c93-87a9-c1b4f837734a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "39d63298-7854-464e-b9f9-2b235694baab",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}