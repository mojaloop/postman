{
	"info": {
		"_postman_id": "4a864413-fe0a-4454-a6df-836a22c6a905",
		"name": "Golden_Path",
		"description": "Purpose: To setup a newly deployed Mojaloop Switch and add test FSPs along with their callback and other Information needed for end-to-end testing.\n\nContributors:\n- Mowali\n- Amar Ramachandran <amarnath.ramachandran@modusbox.com>\n- Georgi Georgiev <georgi.georgiev@modusbox.com>\n- Juan Correa <juan.correa@modusbox.com>\n- Miguel deBarros <miguel.debarros@modusbox.com>\n- Nico Duvenage <nico.duvenage@modusbox.com>\n- Sam Kummary <sam@modusbox.com>\n- Sri Miryala <sridevi.miriyala@modusbox.com>\n- Steven Oderayi <steven.oderayi@modusbox.com>\n- valentin genev <valentin.genev@modusbox.com>\n- Vijay Guthi <vijaya.guthi@modusbox.com>",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Pre-test-setup",
			"item": [
				{
					"name": "Run-sample-quotes-transfers-to-prep-simulator",
					"item": [
						{
							"name": "Send Quote",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f6405cf6-b753-4e32-9d22-e4c7aa9d184e",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('quoteId', generatedUUID);",
											"generatedUUID = uuid.v4();",
											"pm.environment.set('transactionId', generatedUUID);",
											"pm.environment.set('quoteDate', (new Date()).toUTCString());",
											"pm.environment.set('transferAmount', 60);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "42b31892-a9d0-49bd-853f-54eb48801d5a",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "payeefsp"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f178ca8-8640-422c-92b1-180f5ed66769",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d0efb8da-e5cf-4872-9978-78dffcf75edc",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transfer_ID', generatedUUID);",
											"pm.environment.set('transferDate', (new Date()).toUTCString());",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"pm.environment.set('transferAmount', 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "FSPIOP-URI",
										"value": "/transfers",
										"type": "text"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e4e4f50f-c52b-4fdf-b78f-2319bf4a80e7",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "62aa3a57-a807-440c-9afe-6d305f590e2c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5bff92b1-45c4-4aa7-b85e-673c7a6a0985",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "95445e80-8679-49a4-8f05-bbbf9cb3c435",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "p2p_money_transfer",
			"item": [
				{
					"name": "p2p_happy_path SEND QUOTE",
					"item": [
						{
							"name": "Add User - {{pathfinderMSISDN}} to payeefsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2bfb4127-b334-439a-bbcc-777b1c9d8ee4",
										"exec": [
											"pm.environment.set('fullName', 'Siabelo Maroka');",
											"pm.environment.set('firstName', 'Siabelo');",
											"pm.environment.set('lastName', 'Maroka');",
											"pm.environment.set('dob', '3/3/1973');",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7d060313-dc14-4232-b803-fba3a1d322bf",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"party\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"MSISDN\",\n            \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n            \"fspId\": \"{{payeefsp}}\"\n        },\n        \"name\": \"{{fullName}}\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"dateOfBirth\": \"{{dob}}\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{HOST_SIMULATOR}}/payeefsp/parties/MSISDN/{{pathfinderMSISDN}}",
									"host": [
										"{{HOST_SIMULATOR}}"
									],
									"path": [
										"payeefsp",
										"parties",
										"MSISDN",
										"{{pathfinderMSISDN}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Participant {{pathfinderMSISDN}} against MSISDN Simulator for PayeeFSP",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.participants+json;version=1"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.participants+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "payeefsp"
									},
									{
										"key": "Postman-Token",
										"value": "7aa4c9f3-1738-49f0-8904-7821e2336692,4127ff87-7d17-483c-8e3e-f0b562a16d84"
									},
									{
										"key": "User-Agent",
										"value": "PostmanRuntime/7.11.0"
									},
									{
										"key": "accept-encoding",
										"value": "gzip, deflate"
									},
									{
										"key": "cache-control",
										"value": "no-cache"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fspId\": \"payeefsp\",\n    \"currency\": \"USD\"\n}"
								},
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
									],
									"path": [
										"participants",
										"MSISDN",
										"{{pathfinderMSISDN}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Party Receiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc3961b6-5c9b-48e9-84fe-7ec70e4f1954",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check data on payee side",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
											"       ",
											"       if(response.responseSize !== 0) { ",
											"       //Checking headers",
											"        var headers = response.json().headers;",
											"         pm.test(\"payeefsp accept should be application/vnd.interoperability.parties+json;version=1\", function () {",
											"            pm.expect(headers['accept']).to.eql('application/vnd.interoperability.parties+json;version=1');",
											"        });",
											"        pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"            pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"        });",
											"        ",
											"        pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
											"            pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"        });",
											"        ",
											"        pm.test(\"payeefsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
											"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
											"        });",
											"        ",
											"       } else {",
											"           pm.test(\"Parties FAILED - payeeFSP\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"           ",
											"       }",
											"      ",
											"    });",
											"}, 4000)",
											"",
											"//Check data on payer side",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
											"       ",
											"       if(response.responseSize !== 0) { ",
											"       //Checking headers",
											"        var headers = response.json().headers;",
											"        pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"            pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"        });",
											"        ",
											"        pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"            pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"        });",
											"        ",
											"        pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
											"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
											"        });",
											"        ",
											"        pm.test(\"payerfsp accept is empty\", function () {",
											"            pm.expect(headers['accept']).to.eql(undefined);",
											"        });",
											"        ",
											"        pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"            pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"        });",
											"        ",
											"        //Checking data",
											"        var jsonData = response.json().data;",
											"       pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
											"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
											"        });",
											"        pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
											"          pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
											"        });",
											"        pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
											"          pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
											"        });  ",
											"        ",
											"       } else {",
											"           pm.test(\"Parties FAILED - payerFSP\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"           ",
											"       }",
											"      ",
											"    });",
											"}, 4000)",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c5b09da7-3de2-4874-a402-37baa7986580",
										"exec": [
											"pm.variables.set('expectedFullName', 'Siabelo Maroka');",
											"pm.variables.set('expectedFirstName', 'Siabelo');",
											"pm.variables.set('expectedLastName', 'Maroka');",
											"pm.variables.set('expectedDOB', '3/3/1973');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.parties+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.parties+json;version=1.0",
										"type": "text"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{pathfinderMSISDN}}",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
									],
									"path": [
										"parties",
										"MSISDN",
										"{{pathfinderMSISDN}}"
									]
								},
								"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4972babb-bf54-4c80-bc9b-cb8876b7ba62",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('quoteId', generatedUUID);",
											"generatedUUID = uuid.v4();",
											"pm.environment.set('transactionId', generatedUUID);",
											"pm.environment.set('quoteDate', (new Date()).toUTCString());",
											"pm.environment.set('transferAmount', 60.11);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "08d1b273-d01e-47cb-bee0-1797f7254fac",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check the request that Switch forwards to payeefsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              ",
											"              //Check the Headers",
											"              var headers = response.json().headers;",
											"              ",
											"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-destination is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
											"                    pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
											"                });",
											"                ",
											"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
											"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
											"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"                });",
											"                ",
											"          } else {",
											"              pm.test(\"Quote FAILED\", function () {",
											"                throw new Error('Did not receive request on payee side');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 1100)",
											"",
											"//Check Data on payer side",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"          //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            //Validate protected header inside Signature",
											"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
											"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
											"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
											"            ",
											"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
											"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
											"            });",
											"            ",
											"",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
											"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
											"            });",
											"           ",
											"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            ",
											"          pm.test(\"Response fees is returned\", function () {",
											"                pm.expect(jsonData.payeeFspFee.amount).equal(\"1\");",
											"                ",
											"            });",
											"            pm.test(\"Response Commission is returned\", function () {",
											"                pm.expect(jsonData.payeeFspCommission.amount).equal(\"1\");",
											"                ",
											"            });",
											"            ",
											"            pm.test(\"Response ilpPacket is not undefined\", function () {",
											"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
											"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
											"            });",
											"       ",
											"           pm.test(\"Response condition is not undefined\", function () {",
											"               pm.expect(jsonData.condition).not.equal(undefined);",
											"               pm.environment.set(\"condition\", jsonData.condition);",
											"           });",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"",
											"      }",
											"       ",
											"   });",
											"}, 1000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "payeefsp"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "802efc12-2c05-4327-bbd0-f2398457b951",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check the request that Switch forwards to payeefsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              ",
											"              //Check the Headers",
											"              var headers = response.json().headers;",
											"              ",
											"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
											"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
											"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
											"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
											"                    pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
											"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
											"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
											"                });",
											"                ",
											"                ",
											"                //Check the data",
											"                var jsonData = response.json().data;",
											"                pm.test(\"payeefsp data should have the same transferId as request\", function () {",
											"                   pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same payerfspId as request\", function () {",
											"                   pm.expect(jsonData.payerFsp).to.eql(pm.environment.get(\"payerfsp\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same payeefspId as request\", function () {",
											"                   pm.expect(jsonData.payeeFsp).to.eql(pm.environment.get(\"payeefsp\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same amount as request\", function () {",
											"                   pm.expect(+jsonData.amount.amount).to.eql(pm.environment.get(\"transferAmount\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same currency as request\", function () {",
											"                   pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same expiration as request\", function () {",
											"                   pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
											"                   pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same condition as request\", function () {",
											"                   pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
											"                });",
											"                ",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"",
											"          }",
											"   });",
											"}, 1100)",
											"",
											"//Check the callback response that Switch forwards to payerfsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"            //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-uri includes transfers\", function () {",
											"                pm.expect(headers['fspiop-uri']).to.include('/transfers');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            pm.test(\"Response data does not have transferId\", function () {",
											"               pm.expect(jsonData.transferId).to.eql(undefined);",
											"            });",
											"            pm.test(\"Response status is COMMITTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
											"            });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"",
											"          }",
											"   });",
											"}, 1300)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1db7cf20-4e97-4f05-b872-1257c5790947",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transfer_ID', generatedUUID);",
											"pm.environment.set('transferDate', (new Date()).toUTCString());",
											"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));",
											"pm.environment.set('transferAmount', 1.11);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "FSPIOP-URI",
										"value": "/transfers",
										"type": "text"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "p2p_happy_path RECEIVE_QUOTE",
					"item": [
						{
							"name": "Add User - {{pathfinderMSISDN}} to payeefsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b240d754-e59b-4ab7-8d43-2e3e75e0bd0a",
										"exec": [
											"pm.environment.set('fullName', 'Siabelo Maroka');",
											"pm.environment.set('firstName', 'Siabelo');",
											"pm.environment.set('lastName', 'Maroka');",
											"pm.environment.set('dob', '3/3/1973');",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "484cbd9c-939a-4472-8671-d0488f89866c",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"party\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"MSISDN\",\n            \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n            \"fspId\": \"{{payeefsp}}\"\n        },\n        \"name\": \"{{fullName}}\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"dateOfBirth\": \"{{dob}}\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{HOST_SIMULATOR}}/payeefsp/parties/MSISDN/{{pathfinderMSISDN}}",
									"host": [
										"{{HOST_SIMULATOR}}"
									],
									"path": [
										"payeefsp",
										"parties",
										"MSISDN",
										"{{pathfinderMSISDN}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Party Receiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4dfe548e-72a9-4628-b1c4-12ae3f9c7a99",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check data on payee side",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
											"       ",
											"       if(response.responseSize !== 0) { ",
											"       //Checking headers",
											"        var headers = response.json().headers;",
											"        pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"            pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"        });",
											"        ",
											"        pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
											"            pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"        });",
											"        ",
											"        pm.test(\"payeefsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
											"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
											"        });",
											"        ",
											"        //pm.test(\"payeefsp accept should be application/vnd.interoperability.parties+json;version=1\", function () {",
											"        //    pm.expect(headers['accept']).to.eql('should be application/vnd.interoperability.parties+json;version=1');",
											"        //});",
											"        // pm.test(\"payeefsp FSPIOP-URI to be /parties\", function () {",
											"        //     pm.expect(headers['fspiop-uri']).to.eql('/parties');",
											"        // });",
											"        ",
											"        // pm.test(\"payeefsp fspiop-http-method is GET\", function () {",
											"        //     pm.expect(headers['fspiop-http-method']).to.eql('GET');",
											"        // });",
											"        ",
											"        ",
											"        ",
											"       } else {",
											"           pm.test(\"Parties FAILED - payeeFSP\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"           ",
											"       }",
											"      ",
											"    });",
											"}, 4000)",
											"",
											"//Check data on payer side",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
											"       ",
											"       if(response.responseSize !== 0) { ",
											"       //Checking headers",
											"        var headers = response.json().headers;",
											"        pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"            pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"        });",
											"        ",
											"        pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"            pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"        });",
											"        ",
											"        pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
											"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
											"        });",
											"        ",
											"        pm.test(\"payerfsp accept is empty\", function () {",
											"            pm.expect(headers['accept']).to.eql(undefined);",
											"        });",
											"       ",
											"        //pm.test(\"payerfsp FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
											"        //    pm.expect(headers['fspiop-uri']).to.eql('/parties/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
											"        //});",
											"        ",
											"        pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"            pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"        });",
											"        ",
											"        //Checking data",
											"        var jsonData = response.json().data;",
											"       pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
											"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
											"        });",
											"        pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
											"          pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
											"        });",
											"        pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
											"          pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
											"        });  ",
											"        ",
											"       } else {",
											"           pm.test(\"Parties FAILED - payerFSP\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"           ",
											"       }",
											"      ",
											"    });",
											"}, 4000)",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d395739f-a013-4d5e-a9b3-4cd5343b4579",
										"exec": [
											"pm.variables.set('expectedFullName', 'Siabelo Maroka');",
											"pm.variables.set('expectedFirstName', 'Siabelo');",
											"pm.variables.set('expectedLastName', 'Maroka');",
											"pm.variables.set('expectedDOB', '3/3/1973');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.parties+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.parties+json;version=1.0",
										"type": "text"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{pathfinderMSISDN}}",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
									],
									"path": [
										"parties",
										"MSISDN",
										"{{pathfinderMSISDN}}"
									]
								},
								"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
							},
							"response": []
						},
						{
							"name": "Send Quote_RECEIVE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "89de44f8-2ee5-4cbe-acc3-3680a3593df7",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('quoteId', generatedUUID);",
											"generatedUUID = uuid.v4();",
											"pm.environment.set('transactionId', generatedUUID);",
											"pm.environment.set('quoteDate', (new Date()).toUTCString());",
											"pm.environment.set('transferAmount', 60);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7dd7dce9-a169-4dfa-adfd-aa0502d01292",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check the request that Switch forwards to payeefsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              ",
											"              //Check the Headers",
											"              var headers = response.json().headers;",
											"              ",
											"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-destination is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
											"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
											"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"                });",
											"                ",
											"          } else {",
											"              pm.test(\"Quote FAILED\", function () {",
											"                throw new Error('Did not receive request on payee side');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 1100)",
											"",
											"//Check Data on payer side",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"          //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"          ",
											"            pm.test(\"Response ilpPacket is not undefined\", function () {",
											"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
											"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
											"            });",
											"       ",
											"           pm.test(\"Response condition is not undefined\", function () {",
											"               pm.expect(jsonData.condition).not.equal(undefined);",
											"               pm.environment.set(\"condition\", jsonData.condition);",
											"           });",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"",
											"      }",
											"       ",
											"   });",
											"}, 1000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "payeefsp"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"RECEIVE\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b70b022-72a6-4cef-8eb3-98f4554db535",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check the request that Switch forwards to payeefsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              ",
											"              //Check the Headers",
											"              var headers = response.json().headers;",
											"              ",
											"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
											"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
											"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
											"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
											"                    pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
											"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
											"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
											"                });",
											"                ",
											"                ",
											"                //Check the data",
											"                var jsonData = response.json().data;",
											"                pm.test(\"payeefsp data should have the same transferId as request\", function () {",
											"                   pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same payerfspId as request\", function () {",
											"                   pm.expect(jsonData.payerFsp).to.eql(pm.environment.get(\"payerfsp\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same payeefspId as request\", function () {",
											"                   pm.expect(jsonData.payeeFsp).to.eql(pm.environment.get(\"payeefsp\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same amount as request\", function () {",
											"                   pm.expect(+jsonData.amount.amount).to.eql(pm.environment.get(\"transferAmount\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same currency as request\", function () {",
											"                   pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same expiration as request\", function () {",
											"                   pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
											"                   pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same condition as request\", function () {",
											"                   pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
											"                });",
											"                ",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"",
											"          }",
											"   });",
											"}, 1100)",
											"",
											"//Check the callback response that Switch forwards to payerfsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"            //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            // pm.test(\"fspiop-signature is returned\", function () {",
											"            //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"payeefsp_fspiop_signature\"));",
											"            // });",
											"           ",
											"            ",
											"            pm.test(\"payerfsp fspiop-uri includes transfers\", function () {",
											"                pm.expect(headers['fspiop-uri']).to.include('/transfers');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            pm.test(\"Response data does not have transferId\", function () {",
											"               pm.expect(jsonData.transferId).to.eql(undefined);",
											"            });",
											"            pm.test(\"Response status is COMMITTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
											"            });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"",
											"          }",
											"   });",
											"}, 1300)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c857af6e-0506-4323-b815-6525499b7d59",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transfer_ID', generatedUUID);",
											"pm.environment.set('transferDate', (new Date()).toUTCString());",
											"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));",
											"pm.environment.set('transferAmount', 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "FSPIOP-URI",
										"value": "/transfers",
										"type": "text"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "88c6d900-08d8-4965-87e7-3359c60b08ed",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "92d458e7-46de-4441-84a7-dc69153da2fb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fb1223de-5608-42b4-89c3-bb67d4506a0b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "652b5069-03fe-4502-97af-f38e3e358cf6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "block_transfer ( p>ndc )",
			"item": [
				{
					"name": "GET limits-payerfsp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a2215ec0-90b2-46f8-8610-d9379899e238",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var payerNDC = jsonData[0].limit.value",
									"pm.environment.set(\"payerNDC\",payerNDC)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payerfsp/limits",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"payerfsp",
								"limits"
							]
						},
						"description": "review the payerfsp limits/NDC"
					},
					"response": []
				},
				{
					"name": "GET limits -payeefsp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ed8d64f-c224-4c68-ad9d-24a36004bfc2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var payeeNDC = jsonData[0].limit.value",
									"pm.environment.set('payeeNDC',payeeNDC)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payeefsp}}/limits",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payeefsp}}",
								"limits"
							]
						},
						"description": "review payeefsp limits/NDC"
					},
					"response": []
				},
				{
					"name": "Get payerfsp position before TheTransfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81a0df05-1ae1-4d12-ab6e-2e344d3b5961",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var result;",
									"",
									"jsonData.forEach( entry => {(entry.currency === pm.environment.get(\"currency\")) ? result = entry.value: result =",
									" undefined})",
									"",
									"pm.test(\"Atleast one account position should be returned\", function () {",
									"    pm.environment.set(\"payerfspPositionBeforeTransfer\", result);",
									"    pm.expect(jsonData).to.be.not.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/positions",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}",
								"positions"
							]
						},
						"description": "view payerfsp current position before sending the transfer"
					},
					"response": []
				},
				{
					"name": "Get payeefsp position before TheTransfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51be8392-d068-4701-819a-e14efdaf9913",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var result;",
									"",
									"jsonData.forEach( entry => {(entry.currency === pm.environment.get(\"currency\")) ? result = entry.value: result =",
									" undefined})",
									"",
									"pm.test(\"Atleast one account position should be returned\", function () {",
									"    pm.environment.set(\"payeefspPositionBeforeTransfer\", result);",
									"    pm.expect(jsonData).to.be.not.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payeefsp}}/positions",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payeefsp}}",
								"positions"
							]
						},
						"description": "Get payeefsp current position before sending the transfer"
					},
					"response": []
				},
				{
					"name": "Send Quote",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cc8d8f45-7d22-41d9-aebc-0efb2233ce35",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"   ",
									"pm.environment.set('quoteId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"",
									"var amount = Number(pm.variables.get(\"payerNDC\")) - Number( pm.variables.get(\"payerfspPositionBeforeTransfer\")) + 100",
									"pm.environment.set('transferAmount', amount)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ef1748a2-b13f-48a4-a9d2-2461a85c1f1a",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"      if(response.responseSize !== 0) {",
									"          console.log(response.json());",
									"       pm.test(\"Response ilpPacket is not undefined\", function () {",
									"           pm.expect(response.json().ilpPacket).not.equal(undefined);",
									"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
									"       });",
									"       ",
									"       pm.test(\"Response condition is not undefined\", function () {",
									"           pm.expect(response.json().condition).not.equal(undefined);",
									"           pm.environment.set(\"condition\", response.json().condition);",
									"       });",
									"      } else {",
									"          pm.test(\"Quote FAILED\", function () {",
									"            throw new Error('Did not receive response');",
									"           });",
									"",
									"      }",
									"       ",
									"   });",
									"}, 1000)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-SOurce",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						},
						"description": "send a quote request for a specified amount. The ilp packet and condition that generates in quotes response body is used to send transfers request."
					},
					"response": []
				},
				{
					"name": "Send Block Transfer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "042d2ec4-6e7c-40fc-98b5-81471dce29ad",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
									"",
									"var amount = Number(pm.environment.get(\"payerNDC\")) - Number( pm.variables.get(\"payerfspPositionBeforeTransfer\")) + 100",
									"pm.environment.set('transferAmount', amount)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d9812904-9440-4748-8dcd-b785d5fa5316",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"              var jsonData = response.json();",
									"              pm.test(\"Error Code should be returned '4001'\", function () {",
									"                pm.expect(jsonData.errorInformation.errorCode).to.eql('4001');",
									"              });",
									"              pm.test(\"Error Description should be returned\", function () {",
									"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Payer FSP insufficient liquidity');",
									"              });",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"              ",
									"          }",
									"   });",
									"}, 5000)",
									"",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"              var jsonData = response.json().data;",
									"              var headers = response.json().headers;",
									"              const transferId = pm.environment.get(\"transfer_ID\");",
									"              ",
									"              pm.test(\"Error Code should be returned\", function () {",
									"                pm.expect(jsonData.errorInformation.errorCode).to.eql('4001');",
									"              });",
									"              pm.test(\"Error Description should be returned\", function () {",
									"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Payer FSP insufficient liquidity');",
									"              });",
									"              pm.test(\"fspiop-source is switch\", function () {",
									"                pm.expect(headers['fspiop-source']).to.eql('switch');",
									"            });",
									"",
									"            pm.test(\"fspiop-destination is payerfsp\", function () {",
									"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
									"            });",
									"            ",
									"            pm.test(\"fspiop-signature is empty\", function () {",
									"                pm.expect(headers['fspiop-signature']).to.eql(undefined);",
									"            });",
									"            ",
									"            pm.test(\"accept is empty\", function () {",
									"                pm.expect(headers['accept']).to.eql(undefined);",
									"            });",
									"            ",
									"            pm.test(\"content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
									"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
									"            });",
									"            ",
									"            pm.test(\"fspiop-uri contains transfers/\"+transferId+\"/error\", function () {",
									"                pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${transferId}/error`);",
									"            });",
									"            ",
									"            pm.test(\"fspiop-http-method is empty\", function () {",
									"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
									"            });",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"              ",
									"          }",
									"   });",
									"}, 5000)",
									"",
									"pm.environment.set('transferAmount', 100);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						},
						"description": "send a tranfer request with ilp packet and condition that are generated in quotes response along with expiry, fspiop source,fspiop destination, amount and currency."
					},
					"response": []
				},
				{
					"name": "Get payerfsp position after the transfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3054977-3b81-4ac3-bb99-c0cddfad5a8d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Position before and after the transfer should be the same\", function () {",
									"    pm.expect(jsonData[0].value).to.eql(pm.environment.get(\"payerfspPositionBeforeTransfer\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/positions",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}",
								"positions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get payeefsp position after the transfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "61cc57f8-5c66-41df-86fb-89121c26db13",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Position before and after the transfer should be the same\", function () {",
									"    pm.expect(Number(jsonData[0].value)).to.eql(Number(pm.environment.get(\"payeefspPositionBeforeTransfer\")));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payeefsp}}/positions",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payeefsp}}",
								"positions"
							]
						}
					},
					"response": []
				}
			],
			"description": "Author: Sridevi Miriyala\n\nThis features testes, if a transfer is blocked when position of a participant exceeds the Net Debit Cap for the transfer amount.\n\nSTEPS:\n\nGET Limits\nGET Positions for payer and payee\nset amount=(NDC-P) + 10\nPOST Quotes - send to payee that responds COMMITTED\nPOST Transfers-Prepare\n      -Payerfsp should get error msg \"insufficient liquidity in payerfsp to perform transfer \" \nGET positions - \n  current payer position = prev position \n  current payee position = prev position \n(Failure of the transfer due to insufficient liquidity from payerfsp, results no change in positions)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "315f216c-3a61-41bf-aff4-e08f3469ff50",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c11e42a4-3e62-441e-ad02-b8ef65d4a0d8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "funds_in",
			"item": [
				{
					"name": "Record Funds In - prepare",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b750ba44-e83f-4986-a2ca-80561c6e3bc5",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('fundsInPrepareTransferId', generatedUUID);",
									"pm.environment.set('fundsInPrepareAmount', 5000);",
									"",
									"",
									"const payerfspGetStatusRequest = {",
									"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
									"  method: 'GET',",
									"  header: {",
									"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"      \"Content-Type\": \"application/json\"",
									"  }",
									"};",
									"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
									"    console.log(response.json())",
									"    var jsonData = response.json()",
									"    for(var i in jsonData) {",
									"        if((jsonData[i].ledgerAccountType === 'SETTLEMENT') && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
									"            pm.environment.set(\"payerfspSettlementAccountId\",jsonData[i].id)",
									"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsIn\",jsonData[i].value)",
									"        }",
									"    }",
									"});",
									"",
									"const hubGetStatusRequest = {",
									"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
									"  method: 'GET',",
									"  header: {",
									"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"      \"Content-Type\": \"application/json\"",
									"  }",
									"};",
									"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
									"    console.log(response.json())",
									"    var jsonData = response.json()",
									"    for(var i in jsonData) {",
									"        if((jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
									"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsIn\",jsonData[i].value)",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7a7319f5-79c3-4bf0-bafd-1387d2a84e57",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(function () {",
									"    const payerfspGetStatusRequest = {",
									"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
									"      method: 'GET',",
									"      header: {",
									"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"          \"Content-Type\": \"application/json\"",
									"      }",
									"    };",
									"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
									"        console.log('payerfsp accounts: ',response.json())",
									"        var jsonData = response.json()",
									"        var payerfspSettlementAccountBalanceAfterFundsIn",
									"        for(var i in jsonData) {",
									"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT'  && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
									"                payerfspSettlementAccountBalanceAfterFundsIn = jsonData[i].value",
									"            }",
									"        }",
									"        var payerfspExpectedBalance = -(-Number(pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsIn')) + Number(pm.environment.get('fundsInPrepareAmount')))",
									"        pm.test(\"Final Payerfsp Settlement Account Balance should be same as before FundsIn + fundsInPrepareAmount\", function () {",
									"            pm.expect(payerfspSettlementAccountBalanceAfterFundsIn).to.eql(payerfspExpectedBalance);",
									"          });    ",
									"    ",
									"    });",
									"    ",
									"    const hubGetStatusRequest = {",
									"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
									"      method: 'GET',",
									"      header: {",
									"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"          \"Content-Type\": \"application/json\"",
									"      }",
									"    };",
									"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
									"        console.log('Hub accounts balance: ',response.json())",
									"        var jsonData = response.json()",
									"        var currentHubReconAccountBalance",
									"        for(var i in jsonData) {",
									"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION'  && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
									"                hubReconAccountBalanceAfterFundsIn = jsonData[i].value",
									"            }",
									"        }",
									"        var hubExpectedBalance = Number(pm.environment.get(\"hubReconAccountBalanceBeforeFundsIn\"))+Number(pm.environment.get('fundsInPrepareAmount'))",
									"        console.log(hubExpectedBalance)",
									"        pm.test(\"Final Hub Reconciliation Account Balance should be same as before FundsIn + fundsInPrepareAmount\", function () {",
									"            pm.expect(hubReconAccountBalanceAfterFundsIn).to.eql(hubExpectedBalance);",
									"          });  ",
									"    });",
									"}, 2000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "FSPIOP-Source",
								"type": "text",
								"value": "{{hub_operator}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{fundsInPrepareTransferId}}\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsIn\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": \"{{fundsInPrepareAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}",
								"accounts",
								"{{payerfspSettlementAccountId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Record Funds In - prepare transfer status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d413220d-6594-4ab8-aa95-d21fd45039e0",
								"exec": [
									"pm.environment.set('dateHeader', (new Date()).toUTCString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b5691976-58a7-4114-9f25-1f0f0190c180",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(function () {",
									"    ",
									"    const getTransferResponse = {",
									"      url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"fundsInPrepareTransferId\"),",
									"      method: 'GET',",
									"      header: {",
									"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
									"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"          \"Content-Type\": \"application/json\"",
									"      }",
									"    };",
									"    pm.sendRequest(getTransferResponse, function (err, response) {",
									"        var jsonData = response.json().data",
									"        pm.test(\"Transfer State should be COMMITTED\", function () {",
									"            pm.expect(jsonData.transferState).to.eql(\"COMMITTED\");",
									"          });    ",
									"    ",
									"    });",
									"}, 2000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							}
						],
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsInPrepareTransferId}}",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers",
								"{{fundsInPrepareTransferId}}"
							]
						},
						"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
					},
					"response": []
				}
			],
			"description": "Aurhor: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f258c823-4bc5-4139-9430-39fa5922e31b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5c30189f-6a79-4281-b862-08fd79561bee",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "funds_out",
			"item": [
				{
					"name": "Reserve&Commit",
					"item": [
						{
							"name": "Record Funds Out Prepare&Reserve- payerfsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9ffdd1e2-736f-4f9a-b3e1-aef4cbbeea9b",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('fundsOutPrepareReserveTransferId', generatedUUID);",
											"pm.environment.set('fundsOutPrepareReserveAmount', 1000);",
											"",
											"const payerfspGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"",
											"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"payerfspSettlementAccountId\",jsonData[i].id)",
											"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutPrepare\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											"",
											"const hubGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutPrepare\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ebbc325f-b5ef-42bd-9a8b-1c3f2148a475",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    const payerfspGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var payerfspSettlementAccountBalanceAfterFundsOutPrepare",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                payerfspSettlementAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
											"            }",
											"        }",
											"        var payerfspExpectedBalance = -(-Number(pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutPrepare'))- Number(pm.environment.get(\"fundsOutPrepareReserveAmount\")))",
											"        pm.test(\"Final Payerfsp Settlement Account Balance should decrease by the transfer amount\", function () {",
											"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutPrepare).to.eql(payerfspExpectedBalance);",
											"          });    ",
											"    ",
											"    });",
											"    ",
											"    const hubGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var hubReconAccountBalanceAfterFundsOutPrepare",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                hubReconAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
											"            }",
											"        }",
											"        var hubExpectedBalance = pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutPrepare\")",
											"        pm.test(\"Final Hub Reconciliation Account Balance should stay the same in prepare phase\", function () {",
											"            pm.expect(hubReconAccountBalanceAfterFundsOutPrepare).to.eql(hubExpectedBalance);",
											"          });  ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{hub_operator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{fundsOutPrepareReserveTransferId}}\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsOutPrepareReserve\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": {{fundsOutPrepareReserveAmount}},\n    \"currency\": \"{{currency}}\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Record Funds Out Prepare&Reserve - transfer status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "03e7ed9c-c968-4cf3-8e08-6f05b5de4833",
										"exec": [
											"pm.environment.set('dateHeader', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f7dc4b55-68d0-4716-9255-4624a1f08670",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    ",
											"    const getTransferResponse = {",
											"      url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"fundsOutPrepareReserveTransferId\"),",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"payerfsp\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(getTransferResponse, function (err, response) {",
											"        var jsonData = response.json().data",
											"        pm.test(\"Transfer State should be RESERVED\", function () {",
											"            pm.expect(jsonData.transferState).to.eql(\"RESERVED\");",
											"          });    ",
											"    ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsOutPrepareReserveTransferId}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{fundsOutPrepareReserveTransferId}}"
									]
								},
								"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
							},
							"response": []
						},
						{
							"name": "Record Funds Out Commit - payerfsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "77758626-b2e3-4dd6-973e-fa2b522822ea",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('fundsOutCommitTransferId', generatedUUID);",
											"pm.environment.set('fundsOutCommitAmount', 1000);",
											"",
											"",
											"const payerfspGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutCommit\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											"",
											"const hubGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutCommit\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d33e0ef4-1c19-44b7-aa9b-6e3078ec00ae",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    const payerfspGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var payerfspSettlementAccountBalanceAfterFundsOutCommit",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                payerfspSettlementAccountBalanceAfterFundsOutCommit = jsonData[i].value",
											"            }",
											"        }",
											"        var payerfspExpectedBalance = pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutCommit')//-pm.environment.get(\"fundsOutPrepareAmount\")",
											"        pm.test(\"Final Payerfsp Settlement Account Balance should not change during commit phase\", function () {",
											"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutCommit).to.eql(payerfspExpectedBalance);",
											"          });    ",
											"    ",
											"    });",
											"    ",
											"    const hubGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var hubReconAccountBalanceAfterFundsOutCommit",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                hubReconAccountBalanceAfterFundsOutCommit = jsonData[i].value",
											"            }",
											"        }",
											"        var hubExpectedBalance = Number(pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutCommit\")) - Number(pm.environment.get(\"fundsOutCommitAmount\"))",
											"        pm.test(\"Final Hub Reconciliation Account Balance should decrease by the transfer amount\", function () {",
											"            pm.expect(hubReconAccountBalanceAfterFundsOutCommit).to.eql(hubExpectedBalance);",
											"          });  ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUBOPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{hub_operator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"recordFundsOutCommit\",\n  \"reason\": \"Reason for out flow of funds\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}/transfers/{{fundsOutPrepareReserveTransferId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}",
										"transfers",
										"{{fundsOutPrepareReserveTransferId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Record Funds Out Commit - transfer status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b1a593f5-421e-43fa-828c-90784d098ecf",
										"exec": [
											"pm.environment.set('dateHeader', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "60b7a611-4257-4628-97b2-4ad2c8b0d790",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    ",
											"    const getTransferResponse = {",
											"      url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"fundsOutPrepareReserveTransferId\"),",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(getTransferResponse, function (err, response) {",
											"        var jsonData = response.json().data",
											"        pm.test(\"Transfer State should be COMMITTED\", function () {",
											"            pm.expect(jsonData.transferState).to.eql(\"COMMITTED\");",
											"          });    ",
											"    ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "b3d74594-fa41-3581-acf6-4909aaec8134",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsOutPrepareReserveTransferId}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{fundsOutPrepareReserveTransferId}}"
									]
								},
								"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Reserve&Abort",
					"item": [
						{
							"name": "Record Funds Out Prepare&Reserve- payerfsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "04013740-6d68-4eed-ac79-5cf60bfacc0c",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('fundsOutPrepareReserveTransferId', generatedUUID);",
											"pm.environment.set('fundsOutPrepareReserveAmount', 1000);",
											"",
											"const payerfspGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"",
											"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"payerfspSettlementAccountId\",jsonData[i].id)",
											"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutPrepare\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											"",
											"const hubGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutPrepare\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6add8476-3808-4bb2-bfea-79612404557c",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    const payerfspGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var payerfspSettlementAccountBalanceAfterFundsOutPrepare",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                payerfspSettlementAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
											"            }",
											"        }",
											"        var payerfspExpectedBalance = -(-Number(pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutPrepare'))- Number(pm.environment.get(\"fundsOutPrepareReserveAmount\")))",
											"        pm.test(\"Final Payerfsp Settlement Account Balance should decrease by the transfer amount\", function () {",
											"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutPrepare).to.eql(payerfspExpectedBalance);",
											"          });    ",
											"    ",
											"    });",
											"    ",
											"    const hubGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var hubReconAccountBalanceAfterFundsOutPrepare",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                hubReconAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
											"            }",
											"        }",
											"        var hubExpectedBalance = pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutPrepare\")//-pm.environment.get(\"fundsOutPrepareReserveAmount\")",
											"        pm.test(\"Final Hub Reconciliation Account Balance should stay the same in prepare phase\", function () {",
											"            pm.expect(hubReconAccountBalanceAfterFundsOutPrepare).to.eql(hubExpectedBalance);",
											"          });  ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{hub_operator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{fundsOutPrepareReserveTransferId}}\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsOutPrepareReserve\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": {{fundsOutPrepareReserveAmount}},\n    \"currency\": \"{{currency}}\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Record Funds Out Prepare&Reserve - transfer status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "865d0566-cd40-48fd-b977-6738b83405ff",
										"exec": [
											"pm.environment.set('dateHeader', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c551fb5a-2312-4ef7-81df-b73150c12e24",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    ",
											"    const getTransferResponse = {",
											"      url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"fundsOutPrepareReserveTransferId\"),",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"payerfsp\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(getTransferResponse, function (err, response) {",
											"        console.log(response.json().data)",
											"        var jsonData = response.json().data",
											"        pm.test(\"Transfer State should be RESERVED\", function () {",
											"            pm.expect(jsonData.transferState).to.eql(\"RESERVED\");",
											"          });    ",
											"    ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsOutPrepareReserveTransferId}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{fundsOutPrepareReserveTransferId}}"
									]
								},
								"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
							},
							"response": []
						},
						{
							"name": "Record Funds Out Abort - payerfsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "287cecd9-93c0-432b-8943-d6047d15eaf5",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('fundsOutCommitAmount', 1000);",
											"",
											"",
											"const payerfspGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutAbort\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											"",
											"const hubGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutAbort\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fff75d7b-7034-4ba4-aa3a-42cb60989591",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    const payerfspGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var payerfspSettlementAccountBalanceAfterFundsOutAbort",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                payerfspSettlementAccountBalanceAfterFundsOutAbort = jsonData[i].value",
											"            }",
											"        }",
											"        var payerfspExpectedBalance = pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutPrepare')//-pm.environment.get(\"fundsOutPrepareAmount\")",
											"        pm.test(\"Final Payerfsp Settlement Account Balance should rollback to the value before Prepare\", function () {",
											"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutAbort).to.eql(payerfspExpectedBalance);",
											"          });    ",
											"    ",
											"    });",
											"    ",
											"    const hubGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var hubReconAccountBalanceAfterFundsOutCommit",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                hubReconAccountBalanceAfterFundsOutAbort = jsonData[i].value",
											"            }",
											"        }",
											"        var hubExpectedBalance = Number(pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutAbort\"))",
											"        pm.test(\"Final Hub Reconciliation Account Balance should not change\", function () {",
											"            pm.expect(hubReconAccountBalanceAfterFundsOutAbort).to.eql(hubExpectedBalance);",
											"          });  ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUBOPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{hub_operator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"recordFundsOutAbort\",\n  \"reason\": \"Reason for out flow of funds\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}/transfers/{{fundsOutPrepareReserveTransferId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}",
										"transfers",
										"{{fundsOutPrepareReserveTransferId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Record Funds Out Abort - transfer status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6bfb86b8-0aee-4c82-8f08-5da057f89964",
										"exec": [
											"pm.environment.set('dateHeader', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f34f2799-7422-4dfe-8389-515107379818",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    ",
											"    const getTransferResponse = {",
											"      url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"fundsOutPrepareReserveTransferId\"),",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(getTransferResponse, function (err, response) {",
											"        console.log(response.json().data)",
											"        var jsonData = response.json().data",
											"        pm.test(\"Transfer State should be ABORTED\", function () {",
											"            pm.expect(jsonData.transferState).to.eql(\"ABORTED\");",
											"          });    ",
											"    ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "b3d74594-fa41-3581-acf6-4909aaec8134",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsOutPrepareReserveTransferId}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{fundsOutPrepareReserveTransferId}}"
									]
								},
								"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "59cbbc66-8b48-41f3-baff-de4a6af3441f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3cd8c3ac-ab85-42d6-b20c-cadcc6e0b7a6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "settlement_management",
			"item": [
				{
					"name": "SETTLE  settlement",
					"item": [
						{
							"name": "Setup Settlement",
							"item": [
								{
									"name": "Store Settlement&Position Account Balances Before Transfers",
									"item": [
										{
											"name": "testfsp1 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4f36d0f6-c444-4411-b62d-a646d7f82ec4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "15f4c232-62ff-410b-9269-5d87bfe30721",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp3 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d03a435a-d572-4278-88c4-16e11a7a41b5",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp3",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp4 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "218a8787-79a0-4c8b-9b03-a066a9e9e2dc",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp4",
														"accounts"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Run Quote & Transfers",
									"item": [
										{
											"name": "Get Existing Open Window(quotes and transfers)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c06e72c7-2141-429b-a538-a0d567dbd53e",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"State should be OPEN\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].state).to.eql('OPEN');",
															"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
															"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows"
													],
													"query": [
														{
															"key": "state",
															"value": "OPEN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close Existing Window(quotes and transfers)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "21356b0a-8475-4ada-8c07-3f617fed24a3",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"New window State should be OPEN\", function () {",
															"    console.log(pm.response.json());",
															"    pm.expect(pm.response.json().state).to.eql('OPEN');",
															"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
															"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
															"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
															"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows",
														"{{openWindowID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 1 (testfsp1 to testfsp2)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d5002418-e496-4d3f-a4af-ffe28521699f",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   ",
															"   pm.environment.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   pm.environment.set('transferAmount', 60);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "91e12897-c1b1-4dbf-9254-907ab9f51a89",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp1\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp2\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 1 ( testfsp1 to testfsp2 )",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c1231d06-bb96-410b-939b-dd1cd361b8a7",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 120000))",
															"pm.environment.set('transferAmount', 60);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0bbe12e3-6568-42db-9aac-4dde7992cdf8",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"              });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp1\",\n  \"payeeFsp\": \"testfsp2\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 2 (testfsp1 to testfsp4)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "48218785-18da-4ed9-ad8c-529d7095021f",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('quoteId', generatedUUID);",
															"generatedUUID = uuid.v4();",
															"pm.environment.set('transactionId', generatedUUID);",
															"pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 55.12);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "03fda941-302e-42f8-949c-7ed10acfcb58",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"//       if(response.responseSize !== 0) {",
															"//           console.log(response.json());",
															"//       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"//           pm.expect(response.json().ilpPacket).not.equal(undefined);",
															"//           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"//       });",
															"       ",
															"//       pm.test(\"Response condition is not undefined\", function () {",
															"//           pm.expect(response.json().condition).not.equal(undefined);",
															"//           pm.environment.set(\"condition\", response.json().condition);",
															"//       });",
															"//       } else {",
															"//           pm.test(\"Quote FAILED\", function () {",
															"//             throw new Error('Did not receive response');",
															"//           });",
															"",
															"//       }",
															"       ",
															"//   });",
															"// }, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp4"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp1\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp4\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 2 (testfsp1 to testfsp4)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ec0042b7-89b0-4718-b488-3d8bd4f2ffdc",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 120000));",
															"pm.environment.set('transferAmount', 55.99);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f868524c-f511-4d56-9d4b-973c526b2c06",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','true')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"",
															"          }",
															"   });",
															"}, 2000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp4"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp1\",\n  \"payeeFsp\": \"testfsp4\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 3 (testfsp3 to testfsp1)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "43c4b75d-f853-465a-9fa4-28299f2a8c67",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('quoteId', generatedUUID);",
															"generatedUUID = uuid.v4();",
															"pm.environment.set('transactionId', generatedUUID);",
															"pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 35.1);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "79df9533-f9f3-4406-83e4-790bccd86ce7",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp3/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"//       if(response.responseSize !== 0) {",
															"//           console.log(response.json());",
															"//       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"//           pm.expect(response.json().ilpPacket).not.equal(undefined);",
															"//           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"//       });",
															"       ",
															"//       pm.test(\"Response condition is not undefined\", function () {",
															"//           pm.expect(response.json().condition).not.equal(undefined);",
															"//           pm.environment.set(\"condition\", response.json().condition);",
															"//       });",
															"//       } else {",
															"//           pm.test(\"Quote FAILED\", function () {",
															"//             throw new Error('Did not receive response');",
															"//           });",
															"",
															"//       }",
															"       ",
															"//   });",
															"// }, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP3_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp3"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp3\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp1\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 3 (testfsp3 to testfsp1)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1bce455d-5ff0-43dc-b794-73d9947cf911",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
															"pm.environment.set('transferAmount', 35.9);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "66c9f44b-ed6b-4f03-aab4-94f86e615491",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp3/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP3_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp3"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp3\",\n  \"payeeFsp\": \"testfsp1\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 4 (testfsp2 to testfsp3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3219bee9-439b-441b-a28c-2dbd5eca66e1",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   ",
															"   pm.environment.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   pm.environment.set('transferAmount', 20.11);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d6953b14-47cd-42c5-aa4d-92d88549f204",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp2/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"//       if(response.responseSize !== 0) {",
															"//           console.log(response.json());",
															"//       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"//           pm.expect(response.json().ilpPacket).not.equal(undefined);",
															"//           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"//       });",
															"       ",
															"//       pm.test(\"Response condition is not undefined\", function () {",
															"//           pm.expect(response.json().condition).not.equal(undefined);",
															"//           pm.environment.set(\"condition\", response.json().condition);",
															"//       });",
															"//       } else {",
															"//           pm.test(\"Quote FAILED\", function () {",
															"//             throw new Error('Did not receive response');",
															"//           });",
															"",
															"//       }",
															"       ",
															"//   });",
															"// }, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP2_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp2"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp2\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp3\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 4 (testfsp2 to testfsp3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "14166aae-e5d6-44c3-9a70-03fa1ce052eb",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))",
															"pm.environment.set(\"transferAmount\", 20.32);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e052a7af-2e26-435d-aec5-2aa29cce210b",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp2/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP2_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp2"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp2\",\n  \"payeeFsp\": \"testfsp3\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 5 (testfsp4 to testfsp2)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7f717a27-bdfa-4817-a022-2812f3cbdbfc",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('quoteId', generatedUUID);",
															"generatedUUID = uuid.v4();",
															"pm.environment.set('transactionId', generatedUUID);",
															"pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 35.124);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0b47f1c9-982a-4cdc-9e04-e8747a9b88b9",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"//       if(response.responseSize !== 0) {",
															"//           console.log(response.json());",
															"//       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"//           pm.expect(response.json().ilpPacket).not.equal(undefined);",
															"//           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"//       });",
															"       ",
															"//       pm.test(\"Response condition is not undefined\", function () {",
															"//           pm.expect(response.json().condition).not.equal(undefined);",
															"//           pm.environment.set(\"condition\", response.json().condition);",
															"//       });",
															"//       } else {",
															"//           pm.test(\"Quote FAILED\", function () {",
															"//             throw new Error('Did not receive response');",
															"//           });",
															"",
															"//       }",
															"       ",
															"//   });",
															"// }, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp4\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp2\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 5 (testfsp4 to testfsp2)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8c666a49-a5cd-44cc-bd0e-452906322ce9",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 120000));",
															"pm.environment.set('transferAmount', 35.987);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "606632cf-f803-4061-b87b-12a87f22b1e1",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp4\",\n  \"payeeFsp\": \"testfsp2\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 6 (testfsp4 to testfsp3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "58103ca8-11f4-4703-910e-177d12fa08c4",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('quoteId', generatedUUID);",
															"generatedUUID = uuid.v4();",
															"pm.environment.set('transactionId', generatedUUID);",
															"pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 25.1234);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "35644f65-fb39-48e2-bd45-d5e01ed90a58",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"//       if(response.responseSize !== 0) {",
															"//           console.log(response.json());",
															"//       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"//           pm.expect(response.json().ilpPacket).not.equal(undefined);",
															"//           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"//       });",
															"       ",
															"//       pm.test(\"Response condition is not undefined\", function () {",
															"//           pm.expect(response.json().condition).not.equal(undefined);",
															"//           pm.environment.set(\"condition\", response.json().condition);",
															"//       });",
															"//       } else {",
															"//           pm.test(\"Quote FAILED\", function () {",
															"//             throw new Error('Did not receive response');",
															"//           });",
															"           ",
															"//       }",
															"       ",
															"//   });",
															"// }, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp4\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp3\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 6 (testfsp4 to testfsp3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e4817d7f-f04a-4ba0-9c10-5a443dc8bea1",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000));",
															"pm.environment.set('transferAmount', 25.7657);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0c2f715d-3244-4eb8-a597-3a736b6feaea",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"",
															"          }",
															"   });",
															"}, 2000)",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp4\",\n  \"payeeFsp\": \"testfsp3\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create Settlement DEFERREDNET",
									"item": [
										{
											"name": "Get Existing Open Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "315eb4cf-68d3-4b13-824d-e4f6c586b26c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"State should be OPEN\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].state).to.eql('OPEN');",
															"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
															"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "payerfsp"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows"
													],
													"query": [
														{
															"key": "state",
															"value": "OPEN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close Existing Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fe1e5d61-ed03-4662-9098-daa35935a1bd",
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"New window State should be OPEN\", function () {",
															"    console.log(pm.response.json());",
															"    pm.expect(pm.response.json().state).to.eql('OPEN');",
															"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
															"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
															"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
															"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows",
														"{{openWindowID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Settlement for Closed Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e8db2b98-2c1e-4057-86af-ad8663e44141",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.environment.set(\"settlementId\", pm.response.json().id);",
															"var jsonData = pm.response.json();",
															"    ",
															"pm.test(\"Settlement State should be PENDING_SETTLEMENT\", function () {",
															"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
															"});",
															"",
															"pm.test(\"Number of associated windows should be 1\", function () {",
															"    pm.expect(jsonData.settlementWindows.length).to.eql(1);",
															"});",
															"",
															"pm.test(\"Associated Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
															"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
															"});",
															"",
															"pm.test(\"Associated Settlement Window state should be PENDING_SETTLEMENT \", function () {",
															"    pm.expect(jsonData.settlementWindows[0].state).to.eql('PENDING_SETTLEMENT');",
															"});",
															"",
															"pm.test(\"Associated number of participants should be 4 \", function () {",
															"    pm.expect(jsonData.participants.length).to.eql(4);",
															"});",
															"",
															"pm.test(\"DEFERREDNET calculation for testfsp1 should be 80.09\", function () {",
															"    pm.expect(jsonData.participants[0].accounts[0].netSettlementAmount.amount).to.eql(80.09);",
															"});",
															"",
															"",
															"pm.test(\"DEFERREDNET calculation for testfsp2 should be -75.667\", function () {",
															"    pm.expect(jsonData.participants[1].accounts[0].netSettlementAmount.amount).to.eql(-75.667);",
															"});",
															"",
															"pm.test(\"DEFERREDNET calculation for testfsp3 should be -10.1857\", function () {",
															"    pm.expect(jsonData.participants[2].accounts[0].netSettlementAmount.amount).to.eql(-10.1857);",
															"});",
															"",
															"pm.test(\"DEFERREDNET calculation for testfsp4 should be 5.7627\", function () {",
															"    pm.expect(jsonData.participants[3].accounts[0].netSettlementAmount.amount).to.eql(5.7627);",
															"});",
															"",
															"for(var j in jsonData.participants) {",
															"    for(var k in jsonData.participants[j].accounts) {",
															"        console.log(jsonData.participants[j].accounts[k].id)",
															"        if(jsonData.participants[j].accounts[k].id === Number(pm.environment.get(\"payerFspAccountId\"))) {",
															"            console.log('payerfspNetSettlementAmount:',jsonData.participants[j].accounts[k].netSettlementAmount.amount)",
															"            pm.environment.set(\"payerfspNetSettlementAmount\",jsonData.participants[j].accounts[k].netSettlementAmount.amount);",
															"        } else if(jsonData.participants[j].accounts[k].id === Number(pm.environment.get(\"payeeFspAccountId\"))) {",
															"            console.log('payeefspNetSettlementAmount:',jsonData.participants[j].accounts[k].netSettlementAmount.amount)",
															"            pm.environment.set(\"payeefspNetSettlementAmount\",jsonData.participants[j].accounts[k].netSettlementAmount.amount);",
															"        }",
															"        ",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"settlementModel\": \"DEFERREDNET\",\n  \"reason\": \"TESTING\",\n  \"settlementWindows\": [\n    {\n      \"id\": {{closedWindowID}}\n    }\n  ]\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Store Settlement&Position Account Balances After Transfers",
									"item": [
										{
											"name": "testfsp1 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3fe7ac16-fd03-4d26-8624-2dbbd85e4aad",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bc221b6d-ad55-402c-9183-aa017c9ee624",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp3 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4efe1933-f855-4c8a-9beb-03f4c0154471",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp3",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp4 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3bc474e1-d7ca-496e-8501-de16e5eff833",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp4",
														"accounts"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Prepare Settlement",
							"item": [
								{
									"name": "Prepare Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c0d924f-03e4-4efc-9c84-54a102c1ec02",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers recorded for payer\",",
													"                          \"state\": \"PS_TRANSFERS_RECORDED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9dfb4394-70a7-4132-b5b3-d1832c36fa6d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PS_TRANSFERS_RECORDED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_RECORDED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_RECORDED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_RECORDED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "edeaf3ba-c468-40d5-8c4c-b79d2707f5e8",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterPrepare;",
													"var testfsp1PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"",
													"pm.test(\"Testfsp1 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b0e5cc34-84c1-44f5-af51-c0f9678735d9",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterPrepare;",
													"var testfsp2PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f6b7f04-9bf6-4896-a09e-3fadc9abdb98",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterPrepare;",
													"var testfsp3PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp3SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp3 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b127eee-2036-4925-acaf-7ce104f522db",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterPrepare;",
													"var testfsp4PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Reserve Settlement",
							"item": [
								{
									"name": "Reserve Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6231a7ae-6c4e-4bc9-a94c-63e80a3a27ad",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers reserved\",",
													"                          \"state\": \"PS_TRANSFERS_RESERVED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "payerfsp"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58adfe40-019c-479f-a776-3933613d4695",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PS_TRANSFERS_RESERVED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_RESERVED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_RESERVED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_RESERVED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01cbdbcb-a60c-4d2b-b2d9-0ea8fbf9a396",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterReserve;",
													"var testfsp1PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp1 position account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6179d555-f56d-4fe2-b47f-b9c333d38b58",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterReserve;",
													"var testfsp2PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance after reserve gets increased by its net settlement  amount.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04efa7f7-10eb-4e38-88bd-306fb590eb3c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterReserve;",
													"var testfsp3PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp3SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"",
													"pm.test(\"Testfsp3 position account balance after reserve gets increased by its net settlement  amount.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5ca099f-7089-4cd1-985a-e3c8e23ab7c8",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterReserve;",
													"var testfsp4PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Commit Settlement",
							"item": [
								{
									"name": "Commit Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "954e30f3-4cc2-477a-911c-4063b265d339",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers committed\",",
													"                          \"state\": \"PS_TRANSFERS_COMMITTED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "payerfsp"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d4e944c-e6a2-4228-ab6a-788afe8c51e9",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PS_TRANSFERS_COMMITTED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_COMMITTED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_COMMITTED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_COMMITTED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "218144c7-e581-4636-9d3f-6efa6bd2ace7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterCommit;",
													"var testfsp1PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp1 position account balance after commit should be reduced by its net settlement amount.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9aa1133b-256a-4e9a-a896-83ed6340f025",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterCommit;",
													"var testfsp2PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance after reserve gets increased by its net settlement  amount.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1b00cd2-e7d5-4d04-b66d-aff7a5491994",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterCommit;",
													"var testfsp3PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp3 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e97b723-3f28-466a-8c0c-8caf22c62a4b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterCommit;",
													"var testfsp4PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Settle Settlement",
							"item": [
								{
									"name": "Settle Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4debeb96-1f2c-4c47-8559-d0abca4fdfab",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers settled for payer\",",
													"                          \"state\": \"SETTLED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "payerfsp"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad13d1d0-ff95-4af5-aef9-d43914499aaf",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be SETTLED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"SETTLED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be SETTLED\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"SETTLED\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is SETTLED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"SETTLED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60ea4b92-378f-40c2-9353-ad6d9e6ca4d9",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterSettle;",
													"var testfsp1PositionAccountBalanceAfterSettle;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterSettle = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterSettle = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after settle should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterSettle).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp1 position account balance before and  after settle should be the same.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterSettle).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0823e4a-0d88-4348-9073-342cbe3e60c1",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterCommit;",
													"var testfsp2PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab1b61df-8acb-4551-a8e0-5bab26a3d266",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterCommit;",
													"var testfsp3PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp3 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ff1699e-32ca-4f75-b78c-02d5a81aaa25",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterCommit;",
													"var testfsp4PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Hub account balance check",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/Hub/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"Hub",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ed41f707-acd8-497b-a2b7-28506d19c672",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ee91fd71-61be-4984-bc3e-5039f3a3701b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "transfer_negative_scenarios",
			"item": [
				{
					"name": "payee_abort",
					"item": [
						{
							"name": "Store Payerfsp position before prepare",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5a0c5da0-39a4-421e-a1dc-8e6ab555e2c2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"payerfspPositionBeforePrepare\", jsonData[0].value);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "35ea8f24-6829-4eb2-a9a3-bda972bc0912",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Store Payeefsp position before prepare",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46958b27-3bcc-4d75-8481-e2599770f7b4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"payeefspPositionBeforePrepare\", jsonData[0].value);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "99ab872a-4c9f-49b1-ba12-d4f7e90c96f3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payeefsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Prepare",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e72ba680-a33d-4b9c-a6da-a9fb356f4422",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transfer_ID', generatedUUID);",
											"pm.environment.set('transferDate', (new Date()).toUTCString());",
											"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));",
											"pm.environment.set('transferAmount', 99);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "418efd80-929e-46ff-8021-d79e2a97a469",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "noresponsepayeefsp"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{validCondition}}\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Store Payerfsp position after Prepare",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88f76493-c49f-4b47-bb1b-cdc6a6abd346",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"payerfspPositionAfterPrepare\", jsonData[0].value);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "249d9267-d540-4a6d-ae26-437e71cf8399",
										"exec": [
											"setTimeout(function () {",
											"  pm.sendRequest('www.google.com', function (err, response) {}",
											"    );",
											"}, 3000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Payee Abort",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0af85f39-d733-44f5-bd90-410b0af63317",
										"exec": [
											"pm.environment.set(\"completedTimestamp\",new Date().toISOString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "eee2cd1e-9a59-45b1-9526-935af5bfa1de",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              var jsonData = response.json();",
											"              pm.test(\"Response code should be ABORTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
											"              });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              ",
											"          }",
											"   });",
											"}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYEEFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "noresponsepayeefsp"
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"ABORTED\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payerfsp Notification",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d333f21c-48c1-414e-9886-d5ef70c34f19",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('transferId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.environment.set('transferDate', (new Date()).toUTCString());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8020fde3-aead-48f0-bf3d-74d7e882b77b",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
											"// });",
											"",
											"pm.test(\"Response status is ABORTED\", function () {",
											"    pm.expect(pm.response.json().transferState).to.eql('ABORTED');",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{HOST_SIMULATOR}}/{{payerfsp}}/correlationid/{{transfer_ID}}",
									"host": [
										"{{HOST_SIMULATOR}}"
									],
									"path": [
										"{{payerfsp}}",
										"correlationid",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Transfer status - ABORTED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3900bf7a-eef9-42ba-972a-dc2c9d0fa059",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('transferId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.environment.set('transferDate', (new Date()).toUTCString());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "30fa91d0-8c3f-4be7-93ce-8ad3cf0d2847",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
											"// });",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              var jsonData = response.json();",
											"              ",
											"              pm.test(\"Response status is ABORTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
											"              });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              ",
											"          }",
											"   });",
											"}, 3000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payerfsp position after Abort",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1788d70a-bf7c-4e31-bcb5-71a24cfa66f5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Payerfsp position after Payee ABORT should be same as position before prepare.\", function () {",
											"    ",
											"    pm.expect(jsonData[0].value).to.equal(Number(pm.environment.get('payerfspPositionBeforePrepare')));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3d03a75f-9789-41a5-a676-73e888e45466",
										"exec": [
											"setTimeout(function () {",
											"  pm.sendRequest('www.google.com', function (err, response) {}",
											"    );",
											"}, 10000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payeefsp position after Abort",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bebdc6bd-6f90-4dd4-8f99-b7c3ceafee3a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Payeefsp position after Payee ABORT should be same as position before prepare.\", function () {",
											"    ",
											"    pm.expect(jsonData[0].value).to.equal(Number(pm.environment.get('payeefspPositionBeforePrepare')));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2d1f0d0c-4eb5-457b-95cc-ae455be049ca",
										"exec": [
											"setTimeout(function () {",
											"  pm.sendRequest('www.google.com', function (err, response) {}",
											"    );",
											"}, 10000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payeefsp}}",
										"positions"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "payee_invalid_fulfillment",
					"item": [
						{
							"name": "Send Quote",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "98c939fa-6fe2-4e82-8df9-dab56af8a9de",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('quoteId', generatedUUID);",
											"generatedUUID = uuid.v4();",
											"pm.environment.set('transactionId', generatedUUID);",
											"pm.environment.set('quoteDate', (new Date()).toUTCString());",
											"pm.environment.set('transferAmount', 100);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "05feb7fa-0e56-4e3c-aa7a-55039dd5fa23",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"          console.log(response.json());",
											"       pm.test(\"Response ilpPacket is not undefined\", function () {",
											"           pm.expect(response.json().ilpPacket).not.equal(undefined);",
											"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
											"       });",
											"       ",
											"       pm.test(\"Response condition is not undefined\", function () {",
											"           pm.expect(response.json().condition).not.equal(undefined);",
											"           pm.environment.set(\"condition\", response.json().condition);",
											"       });",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"",
											"      }",
											"       ",
											"   });",
											"}, 1000)",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Transfer Prepare",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4b7ed5be-2371-4256-a29f-11e222f2987b",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transfer_ID', generatedUUID);",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.environment.set('transferDate', (new Date()).toUTCString());",
											"}",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 1200000))",
											"pm.environment.set(\"transferAmount\", 10);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "29ad7b00-2ca8-4f20-a27b-d3049b75615c",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "noresponsepayeefsp"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{validCondition}}\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								},
								"description": "send a tranfer request with ilp packet and condition that are generated in quotes response along with expiry, fspiop source,fspiop destination, amount and currency."
							},
							"response": []
						},
						{
							"name": "Store Payerfsp position",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d9c34c7-a08b-485a-bd5a-aafd1003d3f8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"payerfspPositionBeforeTransfer\", jsonData[0].value);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6440c171-a69d-41b6-b9c1-42107dea2284",
										"exec": [
											"setTimeout(function () {",
											"  pm.sendRequest('www.google.com', function (err, response) {}",
											"    );",
											"}, 3000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Store Payeefsp position",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59a673e6-689a-4430-b8ad-bc5f1037b0f1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"payeefspPositionBeforeTransfer\", jsonData[0].value);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bc1be90d-7ec7-41c4-8e42-1bfdd7f55a99",
										"exec": [
											"setTimeout(function () {",
											"  pm.sendRequest('www.google.com', function (err, response) {}",
											"    );",
											"}, 3000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payeefsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Payee Invalid Fulfillment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "608e5941-9975-4403-931a-31312319309c",
										"exec": [
											"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "818d56eb-7fcc-460d-9899-57edd0fdbb2b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "noresponsepayeefsp"
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fulfilment\": \"{{invalidFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Transfer status - RESERVED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "df76e208-60eb-4b10-a568-c9502209f4c3",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('transferId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.environment.set('transferDate', (new Date()).toUTCString());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a22bdeb8-7e74-4f4e-9bad-a7e79db7e963",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
											"// });",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              var jsonData = response.json();",
											"              ",
											"              pm.test(\"Response status is RESERVED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('RESERVED');",
											"              });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"",
											"          }",
											"   });",
											"}, 3000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payerfsp&Payeefsp position",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12921f2d-966b-4fd6-a1ee-958b56070115",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Payerfsp position after transfer and after Payee ABORT should be same as position before transfer.\", function () {",
											"    ",
											"    pm.expect(jsonData[0].value).to.equal(Number(pm.environment.get('payerfspPositionBeforeTransfer')));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f9399fe3-7b03-401d-b141-869f7cadfa85",
										"exec": [
											"setTimeout(function () {",
											"  pm.sendRequest('www.google.com', function (err, response) {}",
											"    );",
											"}, 10000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "transfer_timeout",
					"item": [
						{
							"name": "Store Payerfsp position before prepare",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fecc6aac-3312-479e-8172-12b0294d26ec",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"",
											"var result",
											"jsonData.forEach( entry => {(entry.currency === pm.environment.get(\"currency\")) ? result = entry.value: result =",
											" undefined})",
											"pm.environment.set(\"payerfspPositionBeforePrepare\", result);",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7f97b940-ddba-48df-9ac3-32a689345454",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Prepare",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "67894bdc-f7e4-4b58-ba80-d0972bdd44a3",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transfer_ID', generatedUUID);",
											"pm.environment.set('transferDate', (new Date()).toUTCString());",
											"pm.environment.set('transferAmount', 10);",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 2000))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "aae91f41-89cb-46d0-aed4-dd66bd964dc5",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "noresponsepayeefsp"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"nMel-FDPpp3T77jfC11fUXdcy935hy089AJ9v2OTXBI\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payerfsp position before timeout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00a9d1b7-dbfc-4827-88a7-0f1f20ab4b39",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var result;",
											"",
											"jsonData.forEach( entry => {(entry.currency === pm.environment.get(\"currency\")) ? result = entry.value: result =",
											" undefined})",
											"",
											"pm.test(\"Payerfsp position after Prepare should be same as position before prepare+transfer amount\", function () {",
											"    ",
											"    var expectedValue = Number(pm.environment.get('payerfspPositionBeforePrepare'))+10",
											"    ",
											"    pm.expect(result).to.equal(expectedValue);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9f0e7d91-52bc-4d52-9868-ddc22553b125",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payerfsp position after timeout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "142eb31c-bbed-4722-9023-ede3e866d24f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var result;",
											"",
											"jsonData.forEach( entry => {(entry.currency === pm.environment.get(\"currency\")) ? result = entry.value: result =",
											" undefined})",
											"",
											"pm.test(\"Payerfsp position after timeout should be same as position before prepare.\", function () {",
											"    ",
											"    pm.expect(result).to.equal(Number(pm.environment.get('payerfspPositionBeforePrepare')));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "717724c0-dbb7-4f9f-9679-005923843ef9",
										"exec": [
											"setTimeout(function () {",
											"  pm.sendRequest('www.google.com', function (err, response) {}",
											"    );",
											"}, 15000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Transfer status - ABORTED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "074f0f21-d321-4969-897e-8478009370ba",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('transferId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.environment.set('transferDate', (new Date()).toUTCString());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a6c87b73-f68c-4b29-9ad4-1139fd3dd188",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
											"// });",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              var jsonData = response.json();",
											"              ",
											"              pm.test(\"Response status is ABORTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
											"              });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              ",
											"          }",
											"   });",
											"}, 3000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payerfsp Notification",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8e087384-aaff-4ee8-8fb8-be0ad83963fa",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('transferId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.environment.set('transferDate', (new Date()).toUTCString());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "41a125a4-d111-426b-9941-c95bf98c799a",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
											"// });",
											"",
											"pm.test(\"Response status is ABORTED\", function () {",
											"    pm.expect(pm.response.json().transferState).to.eql('ABORTED');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{HOST_SIMULATOR}}/{{payerfsp}}/correlationid/{{transfer_ID}}",
									"host": [
										"{{HOST_SIMULATOR}}"
									],
									"path": [
										"{{payerfsp}}",
										"correlationid",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Response body:\n: Received error in Transfers: {\"errorInformation\":{\"errorCode\":3100,\"errorDescription\":\"Generic validation error: Expiration date 2018-10-01T20:31:00.534Z is already in the past\"}}\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "66897797-693a-404a-80d9-2e74001dbc2f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0abf8f56-119c-417e-bbab-3b96d2a5aa2f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bb646421-8d9a-4433-b074-0d86b1921be1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0b9626f5-8a72-4762-8c79-a9f3a18d2a70",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "duplicate_handling",
			"item": [
				{
					"name": "transfers",
					"item": [
						{
							"name": "original_transfer_at_committed",
							"item": [
								{
									"name": "Send Transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a83dae0e-4641-4515-8d57-237090db91d5",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// pm.test(\"Check that Content-Type is present\", function () {",
													"//     pm.response.to.have.header(\"Content-Type\");",
													"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
													"// });",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              var jsonData = response.json();",
													"              pm.test(\"Response data does not have transferId\", function () {",
													"               pm.expect(jsonData.transferId).to.eql(undefined);",
													"             });",
													"              pm.test(\"Response status is COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"              });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"              ",
													"          }",
													"   });",
													"}, 2000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "275af4c0-be9b-4432-ac4f-45191eb2cf8f",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"",
													"pm.environment.set('transfer_ID', generatedUUID);",
													"pm.environment.set('transferDate', (new Date()).toUTCString());",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
													"pm.environment.set('transferAmount', 1);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Duplicate Transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9badc18-3050-40a6-bdf9-10a8d8a94b2d",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              var jsonData = response.json().data;",
													"              var headers = response.json().headers",
													"              const transferId = pm.variables.get(\"transfer_ID\");",
													"              ",
													"              pm.test(\"Response data does not have transferId\", function () {",
													"               pm.expect(jsonData.transferId).to.eql(undefined);",
													"             });",
													"              pm.test(\"Response status is COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"              });",
													"              pm.test(\"fspiop-source is switch\", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('switch');",
													"              });",
													"              pm.test(\"fspiop-destination is payerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"              });",
													"              ",
													"              pm.test(\"fspiop-uri contains /transfers/\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${transferId}`);",
													"            });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"              ",
													"          }",
													"   });",
													"}, 2000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c50cca6f-ff25-4c12-831c-182b629f367f",
												"exec": [
													"pm.environment.set('transferAmount', 1)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "fulfill_commit",
							"item": [
								{
									"name": "positive",
									"item": [
										{
											"name": "Send Quote",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6490521d-3a78-4fd2-8e66-658951ce2766",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 100);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b3787302-e5ae-4cce-93c7-6c8b897330fc",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log('response: ',response.json());",
															"       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"           console.log('ilpPacket: ',response.json().ilpPacket)",
															"           pm.expect(response.json().ilpPacket).not.eql(undefined);",
															"          pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not undefined\", function () {",
															"           pm.expect(response.json().condition).not.eql(undefined);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-SOurce",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer-Prepare",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "659cf540-4dff-40ec-b054-592402a94bae",
														"exec": [
															"",
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 100);",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "64827571-41e8-45b3-adf5-8c6425d10308",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Signature",
														"value": "{{fspiop-signature}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{validCondition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Fulfill",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a2ca2220-ed7b-4352-9a38-a85ebb99368e",
														"exec": [
															"pm.environment.set(\"completedTimestamp\",new Date().toISOString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "59231c3c-5efb-45d0-8503-6a8b7bcb5e69",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              //Check headers",
															"              var headers = response.json().headers;",
															"              ",
															"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
															"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
															"                });",
															"                ",
															"                pm.test(\"fspiop-destination is payerfsp\", function () {",
															"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"                });",
															"                ",
															"                //Uncomment after JWS is implemented",
															"                // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"                //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
															"                // });",
															"                ",
															"                ",
															"                pm.test(\"payeefsp content-type is same as sent in the request\", function () {",
															"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"                });",
															"                ",
															"                pm.test(\"date header should not be empty\", function () {",
															"                    pm.expect(headers['date']).to.be.not.empty;",
															"                });",
															"                ",
															"                pm.test(\"accept header should not be sent in the response\", function () {",
															"                    pm.expect(headers['accept']).to.eql(undefined);",
															"                });",
															"                ",
															"              //Check data",
															"              var jsonData = response.json().data;",
															"              pm.test(\"Response transferState should be COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"              ",
															"              pm.test(\"Response fulfilment should be same as in request\", function () {",
															"                pm.expect(jsonData.fulfilment).to.eql(pm.environment.get(\"validFulfillment\"));",
															"              });",
															"              ",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"",
															"          }",
															"   });",
															"}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Duplicate Fulfill",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "73781584-ebbb-4eac-af49-254df7bd69b2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4c0c6bc6-06da-4356-931a-5e5323f8b642",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/noresponsepayeefsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"//           if(response.responseSize !== 0) {",
															"              ",
															"//               //Check headers",
															"//               var headers = response.json().headers;",
															"              ",
															"//                 pm.test(\"fspiop-source is switch\", function () {",
															"//                     pm.expect(headers['fspiop-source']).to.eql('switch');",
															"//                 });",
															"                ",
															"//                 pm.test(\"fspiop-destination is noresponsepayeefsp\", function () {",
															"//                     pm.expect(headers['fspiop-destination']).to.eql('noresponsepayeefsp');",
															"//                 });",
															"                ",
															"//                 //Uncomment after JWS is implemented",
															"//                 // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"//                 //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
															"//                 // });",
															"                ",
															"                ",
															"//                 pm.test(\" content-type is same as sent in the request\", function () {",
															"//                     pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"//                 });",
															"                ",
															"//                 pm.test(\"date header should not be empty\", function () {",
															"//                     pm.expect(headers['date']).to.be.not.empty;",
															"//                 });",
															"                ",
															"//                 pm.test(\"accept header should not be sent in the response\", function () {",
															"//                     pm.expect(headers['accept']).to.eql(undefined);",
															"//                 });",
															"                ",
															"//              //Check data    ",
															"//               var jsonData = response.json().data;",
															"//               pm.test(\"Response transferState should be COMMITTED\", function () {",
															"//                 pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"//               });",
															"              ",
															"//               pm.test(\"Response fulfilment should be same as in request\", function () {",
															"//                 pm.expect(jsonData.fulfilment).to.eql(pm.environment.get(\"validFulfillment\"));",
															"//               });",
															"//           } else {",
															"//               pm.test(\"Transfer FAILED\", function () {",
															"//                 throw new Error('Did not receive response');",
															"//               });",
															"              ",
															"//           }",
															"//   });",
															"// }, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "negative",
									"item": [
										{
											"name": "Send Quote",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3522779d-4c2b-4787-8a2d-1fbda2f27386",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"   ",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 100);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b9d0749-5abe-431a-bbf1-9f1b618a979f",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log('response: ',response.json());",
															"       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"           console.log('ilpPacket: ',response.json().ilpPacket)",
															"           pm.expect(response.json().ilpPacket).not.eql(undefined);",
															"          pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"           ",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not undefined\", function () {",
															"           pm.expect(response.json().condition).not.eql(undefined);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-SOurce",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer-Prepare",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c5a60cb5-3642-4758-860e-a72975f67f45",
														"exec": [
															"",
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 100);",
															"pm.environment.set(\"transferExpiration\", new Date(new Date().getTime() + 60000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "8d3ba995-b55b-4ec3-a241-ab2471ee75fd",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Signature",
														"value": "{{fspiop-signature}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{validCondition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Fulfill",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "35195974-c378-43da-af85-e38e5c879124",
														"exec": [
															"pm.environment.set(\"completedTimestamp\",new Date().toISOString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ca0e7cb3-1443-4c9d-94b4-7dfc2b6b0631",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              //Check headers",
															"              var headers = response.json().headers;",
															"              ",
															"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
															"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
															"                });",
															"                ",
															"                pm.test(\"fspiop-destination is payerfsp\", function () {",
															"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"                });",
															"                ",
															"                //Uncomment after JWS is implemented",
															"                // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"                //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
															"                // });",
															"                ",
															"                pm.test(\"date header should not be empty\", function () {",
															"                    pm.expect(headers['date']).to.be.not.empty;",
															"                });",
															"                ",
															"                pm.test(\"accept header should not be sent in the response\", function () {",
															"                    pm.expect(headers['accept']).to.eql(undefined);",
															"                });",
															"                ",
															"                pm.test(\"payeefsp content-type is same as sent in the request\", function () {",
															"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"                });",
															"                ",
															"              //Check data",
															"              var jsonData = response.json().data;",
															"              pm.test(\"Response transferState should be COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"              ",
															"              pm.test(\"Response fulfilment should be same as in request\", function () {",
															"                pm.expect(jsonData.fulfilment).to.eql(pm.environment.get(\"validFulfillment\"));",
															"              });",
															"              ",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              ",
															"          }",
															"   });",
															"}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Invalid Duplicate Fulfill",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "00559f8d-1f7d-41da-b3ba-53ab54ccca5a",
														"exec": [
															"pm.variables.set(\"updatedTimestamp\",new Date().toISOString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d8f4d7a8-e8df-4de6-b0e4-dc298bedc75c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/noresponsepayeefsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"//           if(response.responseSize !== 0) {",
															"              ",
															"//               //Check headers",
															"//               var headers = response.json().headers;",
															"              ",
															"//                 pm.test(\"fspiop-source is switch\", function () {",
															"//                     pm.expect(headers['fspiop-source']).to.eql('switch');",
															"//                 });",
															"                ",
															"//                 pm.test(\"fspiop-destination is noresponsepayeefsp\", function () {",
															"//                     pm.expect(headers['fspiop-destination']).to.eql('noresponsepayeefsp');",
															"//                 });",
															"                ",
															"//                 //Uncomment after JWS is implemented",
															"//                 // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"//                 //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
															"//                 // });",
															"//                 pm.test(\"date header should not be empty\", function () {",
															"//                     pm.expect(headers['date']).to.be.not.empty;",
															"//                 });",
															"                ",
															"//                 pm.test(\"accept header should not be sent in the response\", function () {",
															"//                     pm.expect(headers['accept']).to.eql(undefined);",
															"//                 });",
															"                ",
															"//                 pm.test(\"content-type is same as sent in the request\", function () {",
															"//                     pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"//                 });",
															"                ",
															"                ",
															"//              //Check data    ",
															"//               var jsonData = response.json().data;",
															"              ",
															"//               pm.test(\"Response Error Code is 3106\", function () {",
															"//                 pm.expect(jsonData.errorInformation.errorCode).to.eql('3106');",
															"//               });",
															"              ",
															"//               pm.test(\"Response Error Desription is 'Modified request'\", function () {",
															"//                 pm.expect(jsonData.errorInformation.errorDescription).to.eql('Modified request');",
															"//               });",
															"//           } else {",
															"//               pm.test(\"Transfer FAILED\", function () {",
															"//                 throw new Error('Did not receive response');",
															"//               });",
															"              ",
															"//           }",
															"//   });",
															"// }, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{updatedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"description": "Send a transfer-prepare from payerfsp to payeefsp\nDo not send transfer-fulfil from payeefsp.\n\nSend a duplicate transfer-prepare with same params.\ncheck the simulator logs to make sure that there should not be any response for the duplicate transfer when the actual transfer is not at terminal state which means neither committed nor aborted but in process.\n\nThis is same as sending duplicate transfer when actual transfer is at ABORTED state.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "51dff4bb-840b-47e0-a4de-cd96e7e60a28",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1841c6fb-6b36-4d58-af9c-cbbd591de903",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "fulfill_reject",
							"item": [
								{
									"name": "positive",
									"item": [
										{
											"name": "Send Quote",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f7627b90-fac6-4570-a1c3-02719744f152",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 100);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "938bb747-dcea-4d20-81c7-806afe0f54d0",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log('response: ',response.json());",
															"       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"           console.log('ilpPacket: ',response.json().ilpPacket)",
															"           pm.expect(response.json().ilpPacket).not.eql(undefined);",
															"          pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"           ",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not undefined\", function () {",
															"           pm.expect(response.json().condition).not.eql(undefined);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-SOurce",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer-Prepare",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a2c6e7b9-98b5-4e0b-bd01-31195a6fc649",
														"exec": [
															"",
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 100);",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "cd03c24a-3c2e-4dc9-91bf-c165a9a777d8",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Signature",
														"value": "{{fspiop-signature}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{validCondition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Fulfill-Reject",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "dccfa2b0-99a0-4581-93b8-0233a959a1cf",
														"exec": [
															"pm.environment.set(\"completedTimestamp\",new Date().toISOString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9cce5b70-e144-4206-bf14-5b2169231692",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              //Check headers",
															"              var headers = response.json().headers;",
															"              ",
															"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
															"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
															"                });",
															"                ",
															"                pm.test(\"fspiop-destination is payerfsp\", function () {",
															"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"                });",
															"                ",
															"                //Uncomment after JWS is implemented",
															"                // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"                //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
															"                // });",
															"                ",
															"                pm.test(\"date header should not be empty\", function () {",
															"                    pm.expect(headers['date']).to.be.not.empty;",
															"                });",
															"                ",
															"                pm.test(\"accept header should not be sent in the response\", function () {",
															"                    pm.expect(headers['accept']).to.eql(undefined);",
															"                });",
															"                ",
															"                pm.test(\"payeefsp content-type is same as sent in the request\", function () {",
															"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"                });",
															"                ",
															"              //Check data",
															"              var jsonData = response.json().data;",
															"              pm.test(\"Response Error Code is 5101\", function () {",
															"                pm.expect(jsonData.errorInformation.errorCode).to.eql('5101');",
															"              });",
															"              ",
															"              pm.test(\"Response Error Desription is 'Payee transaction limit reached'\", function () {",
															"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Payee transaction limit reached');",
															"                //pm.expect(jsonData.errorInformation.errorDescription).to.eql('Payee transaction limit reached');",
															"              });",
															"              ",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"",
															"          }",
															"   });",
															"}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"errorInformation\": {\n\t\t\"errorCode\": \"5101\",\n\t\t\"errorDescription\": \"Payee transaction limit reached\",\n\t\t\"extensionList\": {\n\t\t\t\"extension\": [{\n\t\t\t\t\"key\": \"errorDetail\",\n\t\t\t\t\"value\": \"This is an abort extension\"\n\t\t\t}]\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}/error",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}",
														"error"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Duplicate Fulfill-Reject",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "74518c1e-6807-4b50-bf7f-64539dd51734",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d6a2baee-2795-45ef-81a7-428395a9d7fe",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Not getting any response from simulator, at least no response body I mean. Can enable the below once that is addressed.",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/noresponsepayeefsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"//           if(response.responseSize !== 0) {",
															"//               //Check headers",
															"//               var headers = response.json().headers;",
															"              ",
															"//                 pm.test(\"fspiop-source is switch\", function () {",
															"//                     pm.expect(headers['fspiop-source']).to.eql('switch');",
															"//                 });",
															"                ",
															"//                 pm.test(\"fspiop-destination is noresponsepayeefsp\", function () {",
															"//                     pm.expect(headers['fspiop-destination']).to.eql('noresponsepayeefsp');",
															"//                 });",
															"                ",
															"//                 //Uncomment after JWS is implemented",
															"//                 // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"//                 //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
															"//                 // });",
															"                ",
															"//                 pm.test(\"date header should not be empty\", function () {",
															"//                     pm.expect(headers['date']).to.be.not.empty;",
															"//                 });",
															"                ",
															"//                 pm.test(\"accept header should not be sent in the response\", function () {",
															"//                     pm.expect(headers['accept']).to.eql(undefined);",
															"//                 });",
															"                ",
															"//                 pm.test(\"content-type is same as sent in the request\", function () {",
															"//                     pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"//                 });",
															"                ",
															"//               //Check data",
															"//               var jsonData = response.json().data;",
															"//               pm.test(\"Response transferState should be ABORTED\", function () {",
															"//                 pm.expect(jsonData.transferState).to.eql('ABORTED');",
															"//               });",
															"              ",
															"//               pm.test(\"Response fulfilment should be empty\", function () {",
															"//                 pm.expect(jsonData.fulfilment).to.eql(undefined);",
															"//               });",
															"//           } else {",
															"//               pm.test(\"Transfer FAILED\", function () {",
															"//                 throw new Error('Did not receive response');",
															"//               });",
															"",
															"//           }",
															"//   });",
															"// }, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"errorInformation\": {\n\t\t\"errorCode\": \"5101\",\n\t\t\"errorDescription\": \"Payee transaction limit reached\",\n\t\t\"extensionList\": {\n\t\t\t\"extension\": [{\n\t\t\t\t\"key\": \"errorDetail\",\n\t\t\t\t\"value\": \"This is an abort extension\"\n\t\t\t}]\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}/error",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}",
														"error"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "negative",
									"item": [
										{
											"name": "Send Quote",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "161b4802-6d25-4598-a7b2-f3fc35701f28",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   ",
															"   pm.environment.set('quoteId', generatedUUID);",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   pm.environment.set('transferAmount', 100);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6efcf40c-ab12-4047-ac44-b994eee078e5",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log('response: ',response.json());",
															"       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"           console.log('ilpPacket: ',response.json().ilpPacket)",
															"           pm.expect(response.json().ilpPacket).not.eql(undefined);",
															"          pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"           ",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not undefined\", function () {",
															"           pm.expect(response.json().condition).not.eql(undefined);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-SOurce",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer-Prepare",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f04f1f83-38a4-493e-8242-85d8f9fcfd05",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 100);",
															"pm.environment.set(\"transferExpiration\", new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ff29cddf-9264-4b61-94bd-8cbabe222f92",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Signature",
														"value": "{{fspiop-signature}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{validCondition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Fulfill-Reject",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d132615f-f64d-4b9c-ab7d-e929efd62d38",
														"exec": [
															"pm.environment.set(\"completedTimestamp\",new Date().toISOString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a45a4a3a-0348-4866-a309-f8193a7572cd",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              //Check headers",
															"              var headers = response.json().headers;",
															"              ",
															"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
															"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
															"                });",
															"                ",
															"                pm.test(\"fspiop-destination is payerfsp\", function () {",
															"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"                });",
															"                ",
															"                //Uncomment after JWS is implemented",
															"                // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"                //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
															"                // });",
															"                ",
															"                ",
															"                pm.test(\"payeefsp content-type is same as sent in the request\", function () {",
															"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"                });",
															"                ",
															"                pm.test(\"date header should not be empty\", function () {",
															"                    pm.expect(headers['date']).to.be.not.empty;",
															"                });",
															"                ",
															"                pm.test(\"accept header should not be sent in the response\", function () {",
															"                    pm.expect(headers['accept']).to.eql(undefined);",
															"                });",
															"                ",
															"              //Check data",
															"              var jsonData = response.json().data;",
															"              pm.test(\"Response Error Code is 5101\", function () {",
															"                pm.expect(jsonData.errorInformation.errorCode).to.eql('5101');",
															"              });",
															"              ",
															"              pm.test(\"Response Error Desription is 'Payee transaction limit reached'\", function () {",
															"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Payee transaction limit reached');",
															"                //pm.expect(jsonData.errorInformation.errorDescription).to.eql('Payee transaction limit reached');",
															"              });",
															"              ",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              ",
															"          }",
															"   });",
															"}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"errorInformation\": {\n\t\t\"errorCode\": \"5101\",\n\t\t\"errorDescription\": \"Payee transaction limit reached\",\n\t\t\"extensionList\": {\n\t\t\t\"extension\": [{\n\t\t\t\t\"key\": \"errorDetail\",\n\t\t\t\t\"value\": \"This is an abort extension\"\n\t\t\t}]\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}/error",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}",
														"error"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Invalid Duplicate Fulfill-Reject",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7e23d4a8-3e4e-4970-a4d4-6d2e914f9324",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "52c24eed-0407-4321-a923-9271b9188d17",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/noresponsepayeefsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"//           if(response.responseSize !== 0) {",
															"//               //Check headers",
															"//               var headers = response.json().headers;",
															"              ",
															"//                 pm.test(\"fspiop-source is switch\", function () {",
															"//                     pm.expect(headers['fspiop-source']).to.eql('switch');",
															"//                 });",
															"                ",
															"//                 pm.test(\"fspiop-destination is noresponsepayeefsp\", function () {",
															"//                     pm.expect(headers['fspiop-destination']).to.eql('noresponsepayeefsp');",
															"//                 });",
															"                ",
															"//                 //Uncomment after JWS is implemented",
															"//                 // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"//                 //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
															"//                 // });",
															"//                 pm.test(\"date header should not be empty\", function () {",
															"//                     pm.expect(headers['date']).to.be.not.empty;",
															"//                 });",
															"                ",
															"//                 pm.test(\"accept header should not be sent in the response\", function () {",
															"//                     pm.expect(headers['accept']).to.eql(undefined);",
															"//                 });",
															"                ",
															"//                 pm.test(\"content-type is same as sent in the request\", function () {",
															"//                     pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"//                 });",
															"                ",
															"//               //Check data",
															"//               var jsonData = response.json().data;",
															"//               pm.test(\"Response Error Code is '3106'\", function () {",
															"//                 pm.expect(jsonData.errorInformation.errorCode).to.eql('3106');",
															"//               });",
															"              ",
															"//               pm.test(\"Response Error Desription is 'Modified request'\", function () {",
															"//                 pm.expect(jsonData.errorInformation.errorDescription).to.eql('Modified request');",
															"//               });",
															"              ",
															"//           } else {",
															"//               pm.test(\"Transfer FAILED\", function () {",
															"//                 throw new Error('Did not receive response');",
															"//               });",
															"",
															"//           }",
															"//   });",
															"// }, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"errorInformation\": {\n\t\t\"errorCode\": \"5101\",\n\t\t\"errorDescription\": \"This is an invalid duplicate request\",\n\t\t\"extensionList\": {\n\t\t\t\"extension\": [{\n\t\t\t\t\"key\": \"errorDetail\",\n\t\t\t\t\"value\": \"This is an abort extension\"\n\t\t\t}]\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}/error",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}",
														"error"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"description": "Send a transfer-prepare from payerfsp to payeefsp\nDo not send transfer-fulfil from payeefsp.\n\nSend a duplicate transfer-prepare with same params.\ncheck the simulator logs to make sure that there should not be any response for the duplicate transfer when the actual transfer is not at terminal state which means neither committed nor aborted but in process.\n\nThis is same as sending duplicate transfer when actual transfer is at ABORTED state.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fa3eef7f-b2a3-456a-b3a3-d5e4aa465e42",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b920c688-5a28-46ed-9e4e-8e4cf450c4ef",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "87929862-66ad-446e-a1a8-e5200591b2db",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9cfefac6-c436-41fb-b9b5-3036cf7dc4f9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "participant_inactive_stop_transfers",
			"item": [
				{
					"name": "Update Participant to inactive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "127e1507-d148-44c7-b102-bc627b39e66e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"FSP is inactive\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.isActive).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"isActive\": false\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET participant status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0297e692-9ab0-4fc9-98fb-b65342dc9d40",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"FSP is inactive\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.isActive).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}"
							]
						},
						"description": "Check whether participant is Inactive or not"
					},
					"response": []
				},
				{
					"name": "Send Quote",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1c854fe9-5ee0-4ae8-9181-85d3b74d0090",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 100);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "74e7a5e4-68fe-4556-9b3c-1541e80b5543",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"// pm.test(\"Check that Content-Type is present\", function () {",
									"//     pm.response.to.have.header(\"Content-Type\");",
									"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
									"// });",
									"",
									"",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"      if(response.responseSize !== 0) {",
									"          console.log('response: ',response.json());",
									"       ",
									"       var jsonData = response.json();",
									"        pm.test(\"Error Code should be returned '3202'\", function () {",
									"            pm.expect(jsonData.errorInformation.errorCode).to.eql('3202');",
									"        });",
									"        pm.test(\"Error Description should be returned\", function () {",
									"            pm.expect(jsonData.errorInformation.errorDescription).to.include('Payer FSP ID not found');",
									"        });",
									"        ",
									"      } else {",
									"          pm.test(\"Quote FAILURE not as expected\", function () {",
									"            throw new Error('Did not receive response');",
									"           });",
									"      }",
									"   });",
									"}, 1500)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-SOurce",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"USD\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Transfer fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3af2a88-ddcf-4d68-9682-2b0268948527",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"//Check the callback response that Switch forwards to payerfsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"            //Checking headers",
									"            var headers = response.json().headers;",
									"            pm.test(\"payerfsp fspiop-source is switch\", function () {",
									"                pm.expect(headers['fspiop-source']).to.eql('switch');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
									"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
									"            });",
									"            ",
									"            //Uncomment this once Simulators are able to forward Signature",
									"            // pm.test(\"fspiop-signature is empty\", function () {",
									"            //     pm.expect(pm.response.json().headers['fspiop-signature']).to.eql(undefined);",
									"            // });",
									"            ",
									"            pm.test(\"payerfsp accept is empty\", function () {",
									"                pm.expect(headers['accept']).to.eql(undefined);",
									"            });",
									"            ",
									"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
									"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
									"            });",
									"            ",
									"            //pm.test(\"payerfsp fspiop-uri is /transfers/\"+pm.environment.get(\"transfer_ID\"), function () {",
									"            //    pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+pm.environment.get(\"transfer_ID\"));",
									"            //});",
									"            ",
									"            // pm.test(\"payerfsp fspiop-http-method is empty\", function () {",
									"            //     pm.expect(headers['fspiop-http-method']).to.eql(undefined);",
									"            // });",
									"            ",
									"            var jsonData = response.json().data;",
									"            pm.test(\"Error Code should be 3100\", function () {",
									"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3100');",
									"              });",
									"              pm.test(\"Error Description should contain: Validation error\", function () {",
									"                pm.expect(jsonData.errorInformation.errorDescription).to.include('validation error');",
									"              });",
									"              ",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"",
									"          }",
									"   });",
									"}, 1100)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "11894dfb-7785-44d6-9b5b-17693f0b3d99",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							},
							{
								"key": "FSPIOP-URI",
								"type": "text",
								"value": "/transfers"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"type": "text",
								"value": "POST"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"1\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Participant to active",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf813d07-ea43-4632-ae98-29cb76b67259",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"FSP is active\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.isActive).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"isActive\": true\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET participant status - Reset",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7cb03a6b-619e-4077-9f9c-70157367cbf6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"FSP is active\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.isActive).to.eql(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}"
							]
						},
						"description": "Check whether participant is Inactive or not"
					},
					"response": []
				},
				{
					"name": "Send Quote",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c5e17654-0370-4e0c-8e63-3c06918c6367",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 100);",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bf8e8fdf-23a4-4489-af86-9e8d98c5db0b",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"// pm.test(\"Check that Content-Type is present\", function () {",
									"//     pm.response.to.have.header(\"Content-Type\");",
									"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
									"// });",
									"",
									"",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"      if(response.responseSize !== 0) {",
									"          console.log('response: ',response.json());",
									"       pm.test(\"Response ilpPacket is not undefined\", function () {",
									"           console.log('ilpPacket: ',response.json().ilpPacket)",
									"           pm.expect(response.json().ilpPacket).not.eql(undefined);",
									"          pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
									"           ",
									"       });",
									"       ",
									"       pm.test(\"Response condition is not undefined\", function () {",
									"           pm.expect(response.json().condition).not.eql(undefined);",
									"           pm.environment.set(\"condition\", response.json().condition);",
									"       });",
									"      } else {",
									"          pm.test(\"Quote FAILED\", function () {",
									"            throw new Error('Did not receive response');",
									"           });",
									"",
									"      }",
									"       ",
									"   });",
									"}, 2000)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-SOurce",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"USD\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Transfer pass",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e4d763f-fb8e-4030-ae7f-a298bf0fb5eb",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"//Check the request that Switch forwards to payeefsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"              ",
									"              //Check the Headers",
									"              var headers = response.json().headers;",
									"              ",
									"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
									"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
									"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
									"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
									"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
									"                    pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
									"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
									"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
									"                });",
									"                ",
									"                ",
									"                //Check the data",
									"                var jsonData = response.json().data;",
									"                pm.test(\"payeefsp data should have the same transferId as request\", function () {",
									"                   pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same payerfspId as request\", function () {",
									"                   pm.expect(jsonData.payerFsp).to.eql(pm.environment.get(\"payerfsp\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same payeefspId as request\", function () {",
									"                   pm.expect(jsonData.payeeFsp).to.eql(pm.environment.get(\"payeefsp\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same amount as request\", function () {",
									"                   pm.expect(+jsonData.amount.amount).to.eql(pm.environment.get(\"transferAmount\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same currency as request\", function () {",
									"                   pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same expiration as request\", function () {",
									"                   pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
									"                   pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same condition as request\", function () {",
									"                   pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
									"                });",
									"                ",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"              ",
									"          }",
									"   });",
									"}, 1100)",
									"",
									"//Check the callback response that Switch forwards to payerfsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"            //Checking headers",
									"            var headers = response.json().headers;",
									"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
									"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
									"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
									"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp accept is empty\", function () {",
									"                pm.expect(headers['accept']).to.eql(undefined);",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-uri includes transfers\", function () {",
									"                pm.expect(headers['fspiop-uri']).to.include('/transfers');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
									"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
									"            });",
									"            ",
									"            var jsonData = response.json().data;",
									"            pm.test(\"Response data does not have transferId\", function () {",
									"               pm.expect(jsonData.transferId).to.eql(undefined);",
									"            });",
									"            pm.test(\"Response status is COMMITTED\", function () {",
									"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
									"            });",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"              ",
									"          }",
									"   });",
									"}, 1300)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "04a9aef2-fa0c-4f0a-abf1-09214af0045b",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 60000));",
									"pm.environment.set('transferAmount', 1);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							},
							{
								"key": "FSPIOP-URI",
								"value": "/transfers",
								"type": "text"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "POST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "api_tests",
			"item": [
				{
					"name": "Get participants List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "402332ec-fd2e-4b2a-8117-7ede2e47a3fb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Get Participant",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f2df999-7181-4e86-bdd1-9b033e173ce9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}"
							]
						}
					},
					"response": [
						{
							"name": "Get Participant",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{participant}}",
									"protocol": "http",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{participant}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Length",
									"value": "251",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Wed, 22 Aug 2018 15:25:18 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx/1.13.8",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "accept-ranges",
									"value": "bytes",
									"name": "accept-ranges",
									"description": "Content-Types that are acceptable"
								},
								{
									"key": "cache-control",
									"value": "no-cache",
									"name": "cache-control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								}
							],
							"cookie": [],
							"body": "{\"name\":\"testfsp\",\"id\":\"{{HOST_CENTRAL_LEDGER}}/participants/testfsp\",\"created\":\"2018-08-22T08:16:50.000Z\",\"isActive\":1,\"links\":{\"self\":\"{{HOST_CENTRAL_LEDGER}}/participants/testfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]}"
						}
					]
				},
				{
					"name": "3. Get Hub Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b725fe4-1d67-412e-b395-0945dca8d472",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/Hub/accounts",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"Hub",
								"accounts"
							]
						}
					},
					"response": [
						{
							"name": "Get Participant",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{participant}}",
									"protocol": "http",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{participant}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Length",
									"value": "251",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Wed, 22 Aug 2018 15:25:18 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx/1.13.8",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "accept-ranges",
									"value": "bytes",
									"name": "accept-ranges",
									"description": "Content-Types that are acceptable"
								},
								{
									"key": "cache-control",
									"value": "no-cache",
									"name": "cache-control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								}
							],
							"cookie": [],
							"body": "{\"name\":\"testfsp\",\"id\":\"{{HOST_CENTRAL_LEDGER}}/participants/testfsp\",\"created\":\"2018-08-22T08:16:50.000Z\",\"isActive\":1,\"links\":{\"self\":\"{{HOST_CENTRAL_LEDGER}}/participants/testfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]}"
						}
					]
				},
				{
					"name": "11. Get Endpoints",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9110a23-2b85-452f-8d60-37c65747e5f1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payerfsp/endpoints",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"payerfsp",
								"endpoints"
							]
						},
						"description": "Generated from a curl request: \ncurl -i -X POST     {{HOST_CENTRAL_LEDGER}}/participants/testfsp2/initialPositionAndLimits     -H 'Cache-Control: no-cache'     -H 'Content-Type: application/json'     -d '{\n    \\\"currency\\\": \\\"USD\\\",\n    \\\"limit\\\": {\n      \\\"type\\\": \\\"NET_DEBIT_CAP\\\",\n      \\\"value\\\": 1000\n    },\n    \\\"initialPosition\\\": 0\n  }'"
					},
					"response": [
						{
							"name": "2. Create Initial Position and Limits",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currency\": \"USD\",\n    \"limit\": {\n      \"type\": \"NET_DEBIT_CAP\",\n      \"value\": 1000\n    },\n    \"initialPosition\": 0\n  }"
								},
								"url": {
									"raw": "http://{{HOST_CENTRAL_LEDGER}}/participants/testfsp/initialPositionAndLimits",
									"protocol": "http",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"testfsp",
										"initialPositionAndLimits"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get - limits - All FSPs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2870ba56-4d03-497b-a42a-94fa5339356b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/limits?currency=USD&type=NET_DEBIT_CAP",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"limits"
							],
							"query": [
								{
									"key": "currency",
									"value": "USD"
								},
								{
									"key": "type",
									"value": "NET_DEBIT_CAP"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get payerfsp position",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35403149-77c9-40f4-8aab-7199118bdf95",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Atleast one account position should be returned\", function () {",
									"    pm.variables.set(\"payerfspPositionBeforeTransfer\", jsonData[0].value);",
									"    pm.expect(jsonData).to.be.not.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/positions",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}",
								"positions"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "transaction-request-service",
			"item": [
				{
					"name": "health",
					"item": [
						{
							"name": "health",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f896bfa9-84e2-44c4-ae9b-70afbb15a266",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1e15972a-4813-4f4e-8179-597264001be3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.health+json;version=1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.health+json;version=1.0"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transactionRequestDate}}"
									},
									{
										"key": "fspiop-source",
										"type": "text",
										"value": "{{payerfsp}}"
									},
									{
										"key": "fspiop-destination",
										"type": "text",
										"value": "{{payeefsp}}"
									},
									{
										"key": "fspiop-signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									},
									{
										"key": "fspiop-uri",
										"type": "text",
										"value": "/health"
									},
									{
										"key": "fspiop-http-method",
										"type": "text",
										"value": "GET"
									}
								],
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/health",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fbe289b4-8be2-41d5-ade4-c84b2b988f9e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d9f1b58b-a9ba-42b2-884c-0b19d41d5cfa",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "received State",
					"item": [
						{
							"name": "Payee initiate request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51eca167-9182-48f7-b5d2-9bb5404679e7",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/transactionRequests/callbacks/\"+pm.environment.get(\"transactionRequestId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            const responseJson = response.json()",
											"            const headers = responseJson.headers",
											"            const data = responseJson.data",
											"            ",
											"            pm.test(\"Callback received in the Simulator\", function () {",
											"                pm.expect(data).not.equal(undefined);",
											"            });",
											"            ",
											"            pm.test(\"transactionId matches\", function () {",
											"                pm.expect(data['transactionId']).to.eql(pm.environment.get(\"transactionRequestId\"));",
											"            });",
											"                ",
											"            pm.test(\"fspiop-source is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-destination is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            pm.test(\"content-type is same as sent in the request\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transactionRequests+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"transactionRequestState is RECEIVED\", function () {",
											"                pm.expect(data['transactionRequestState']).to.eql('RECEIVED');",
											"            });",
											"            ",
											"      } else {",
											"          pm.test(\"Transaction Request FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"          });",
											"      }",
											"       ",
											"  });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e8a8295d-f9c4-481c-9f92-de60fb5e052c",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);",
											"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-destination",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-http-method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionRequestId\": \"{{transactionRequestId}}\",\n    \"payee\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"PERSONAL_ID\",\n            \"partyIdentifier\": \"16135551212\",\n            \"partySubIdOrType\": \"DRIVING_LICENSE\",\n            \"fspId\": \"1234\"\n        },\n        \"merchantClassificationCode\": \"4321\",\n        \"name\": \"Justin Trudeau\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"Justin\",\n                \"middleName\": \"Pierre\",\n                \"lastName\": \"Trudeau\"\n            },\n            \"dateOfBirth\": \"1971-12-25\"\n        }\n    },\n    \"payer\": {\n        \"partyIdType\": \"PERSONAL_ID\",\n        \"partyIdentifier\": \"16135551212\",\n        \"partySubIdOrType\": \"DRIVING_LICENSE\",\n        \"fspId\": \"1234\"\n    },\n    \"amount\": {\n        \"currency\": \"USD\",\n        \"amount\": \"123.45\"\n    },\n    \"transactionType\": {\n        \"scenario\": \"DEPOSIT\",\n        \"subScenario\": \"CUSTOM_SUBSCENARIO\",\n        \"initiator\": \"PAYEE\",\n        \"initiatorType\": \"CONSUMER\",\n        \"refundInfo\": {\n            \"originalTransactionId\": \"{{transactionRequestId}}\",\n            \"refundReason\": \"free text indicating reason for the refund\"\n        },\n        \"balanceOfPayments\": \"123\"\n    },\n    \"note\": \"Free-text memo\",\n    \"geoCode\": {\n        \"latitude\": \"+45.4215\",\n        \"longitude\": \"+75.6972\"\n    },\n    \"authenticationType\": \"OTP\",\n     \"expiration\": \"{{transferExpiration}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests"
									]
								}
							},
							"response": []
						},
						{
							"name": "send RECEIVED state",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "74f38eff-be2d-4d6d-8352-3b379241c49e",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3ecbe264-123a-4df7-b620-743d4f835d3e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/transactionRequests/callbacks/\"+pm.environment.get(\"transactionRequestId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            const responseJson = response.json()",
											"            const headers = responseJson.headers",
											"            const data = responseJson.data",
											"            ",
											"            pm.test(\"Callback received in the Simulator\", function () {",
											"                pm.expect(data).not.equal(undefined);",
											"            });",
											"            ",
											"            pm.test(\"transactionId matches\", function () {",
											"                pm.expect(data['transactionId']).to.eql(pm.environment.get(\"transactionRequestId\"));",
											"            });",
											"                ",
											"            pm.test(\"fspiop-source is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-destination is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            pm.test(\"content-type is same as sent in the request\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transactionRequests+json;version=1.0');",
											"            });",
											"            ",
											"      } else {",
											"          pm.test(\"Transaction Request FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"          });",
											"      }",
											"       ",
											"  });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "/transactionRequests/{{transactionRequestId}}",
										"type": "text"
									},
									{
										"key": "fspiop-http-method",
										"value": "PUT",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{transactionRequestId}}\",\n    \"transactionRequestState\": \"RECEIVED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests/{{transactionRequestId}}",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests",
										"{{transactionRequestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check transactionRequest state",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bee894f3-eb04-479c-91cd-909099f9abe1",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/transactionRequests/callbacks/\"+pm.environment.get(\"transactionRequestId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            const responseJson = response.json()",
											"            const headers = responseJson.headers",
											"            const data = responseJson.data",
											"            ",
											"            console.log(data);",
											"            ",
											"            pm.test(\"Callback received in the Simulator\", function () {",
											"                pm.expect(data).not.equal(undefined);",
											"            });",
											"            ",
											"            pm.test(\"transactionId matches\", function () {",
											"                pm.expect(data['transactionId']).to.eql(pm.environment.get(\"transactionRequestId\"));",
											"            });",
											"                ",
											"            pm.test(\"fspiop-source is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            pm.test(\"content-type is same as sent in the request\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transactionRequests+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"transactionRequestState is RECEIVED\", function () {",
											"                pm.expect(data['transactionRequestState']).to.eql('RECEIVED');",
											"            });",
											"            ",
											"      } else {",
											"          pm.test(\"Transaction Request FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"          });",
											"      }",
											"       ",
											"  });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b002c033-5994-4bdf-8a10-e17e07377249",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "/transactionRequests",
										"type": "text"
									},
									{
										"key": "fspiop-http-method",
										"value": "GET",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests/{{transactionRequestId}}",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests",
										"{{transactionRequestId}}"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "reject State",
					"item": [
						{
							"name": "Payee initiate request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d1c44635-3ca7-40ce-80b6-9773e4521150",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/transactionRequests/callbacks/\"+pm.environment.get(\"transactionRequestId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            const responseJson = response.json()",
											"            const headers = responseJson.headers",
											"            const data = responseJson.data",
											"            ",
											"            pm.test(\"Callback received in the Simulator\", function () {",
											"                pm.expect(data).not.equal(undefined);",
											"            });",
											"            ",
											"            pm.test(\"transactionId matches\", function () {",
											"                pm.expect(data['transactionId']).to.eql(pm.environment.get(\"transactionRequestId\"));",
											"            });",
											"                ",
											"            pm.test(\"fspiop-source is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-destination is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            pm.test(\"content-type is same as sent in the request\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transactionRequests+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"transactionRequestState is RECEIVED\", function () {",
											"                pm.expect(data['transactionRequestState']).to.eql('RECEIVED');",
											"            });",
											"            ",
											"      } else {",
											"          pm.test(\"Transaction Request FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"          });",
											"      }",
											"       ",
											"  });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d5602bae-b8d1-422e-8c0b-be0bc4d7c94e",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);",
											"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-destination",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-http-method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionRequestId\": \"{{transactionRequestId}}\",\n    \"payee\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"PERSONAL_ID\",\n            \"partyIdentifier\": \"16135551212\",\n            \"partySubIdOrType\": \"DRIVING_LICENSE\",\n            \"fspId\": \"1234\"\n        },\n        \"merchantClassificationCode\": \"4321\",\n        \"name\": \"Justin Trudeau\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"Justin\",\n                \"middleName\": \"Pierre\",\n                \"lastName\": \"Trudeau\"\n            },\n            \"dateOfBirth\": \"1971-12-25\"\n        }\n    },\n    \"payer\": {\n        \"partyIdType\": \"PERSONAL_ID\",\n        \"partyIdentifier\": \"16135551212\",\n        \"partySubIdOrType\": \"DRIVING_LICENSE\",\n        \"fspId\": \"1234\"\n    },\n    \"amount\": {\n        \"currency\": \"USD\",\n        \"amount\": \"123.45\"\n    },\n    \"transactionType\": {\n        \"scenario\": \"DEPOSIT\",\n        \"subScenario\": \"CUSTOM_SUBSCENARIO\",\n        \"initiator\": \"PAYEE\",\n        \"initiatorType\": \"CONSUMER\",\n        \"refundInfo\": {\n            \"originalTransactionId\": \"{{transactionRequestId}}\",\n            \"refundReason\": \"free text indicating reason for the refund\"\n        },\n        \"balanceOfPayments\": \"123\"\n    },\n    \"note\": \"Free-text memo\",\n    \"geoCode\": {\n        \"latitude\": \"+45.4215\",\n        \"longitude\": \"+75.6972\"\n    },\n    \"authenticationType\": \"OTP\",\n     \"expiration\": \"{{transferExpiration}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check transactionRequest state",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2d0dace-026b-4201-a066-c5c7c02a6613",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/transactionRequests/callbacks/\"+pm.environment.get(\"transactionRequestId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            const responseJson = response.json()",
											"            const headers = responseJson.headers",
											"            const data = responseJson.data",
											"            ",
											"            console.log(data);",
											"            ",
											"            pm.test(\"Callback received in the Simulator\", function () {",
											"                pm.expect(data).not.equal(undefined);",
											"            });",
											"            ",
											"            pm.test(\"transactionId matches\", function () {",
											"                pm.expect(data['transactionId']).to.eql(pm.environment.get(\"transactionRequestId\"));",
											"            });",
											"                ",
											"            pm.test(\"fspiop-source is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            pm.test(\"content-type is same as sent in the request\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transactionRequests+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"transactionRequestState is RECEIVED\", function () {",
											"                pm.expect(data['transactionRequestState']).to.eql('RECEIVED');",
											"            });",
											"            ",
											"      } else {",
											"          pm.test(\"Transaction Request FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"          });",
											"      }",
											"       ",
											"  });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c8e42020-6e5c-40d5-a9b0-95ae047d1d05",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "/transactionRequests",
										"type": "text"
									},
									{
										"key": "fspiop-http-method",
										"value": "GET",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests/{{transactionRequestId}}",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests",
										"{{transactionRequestId}}"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send REJECT state",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b4e6e699-3355-4df8-abe5-3a469d5e8e97",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1648bfad-80ff-479e-85b8-633c97ef6405",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/transactionRequests/callbacks/\"+pm.environment.get(\"transactionRequestId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            const responseJson = response.json()",
											"            const headers = responseJson.headers",
											"            const data = responseJson.data",
											"            ",
											"            pm.test(\"Callback received in the Simulator\", function () {",
											"                pm.expect(data).not.equal(undefined);",
											"            });",
											"            ",
											"            pm.test(\"transactionId matches\", function () {",
											"                pm.expect(data['transactionId']).to.eql(pm.environment.get(\"transactionRequestId\"));",
											"            });",
											"                ",
											"            pm.test(\"fspiop-source is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-destination is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            pm.test(\"content-type is same as sent in the request\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transactionRequests+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"transactionRequestState is REJECTED\", function () {",
											"                pm.expect(data['transactionRequestState']).to.eql('REJECTED');",
											"            });",
											"            ",
											"      } else {",
											"          pm.test(\"Transaction Request FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"          });",
											"      }",
											"       ",
											"  });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transactionRequestDate}}"
									},
									{
										"key": "fspiop-source",
										"type": "text",
										"value": "{{payerfsp}}"
									},
									{
										"key": "fspiop-destination",
										"type": "text",
										"value": "{{payeefsp}}"
									},
									{
										"key": "fspiop-signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									},
									{
										"key": "fspiop-uri",
										"type": "text",
										"value": "/transactionRequests/{{transactionRequestId}}"
									},
									{
										"key": "fspiop-http-method",
										"type": "text",
										"value": "PUT"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{transactionRequestId}}\",\n    \"transactionRequestState\": \"REJECTED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests/{{transactionRequestId}}",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests",
										"{{transactionRequestId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1b9b9676-c3dd-4a04-9c9c-a1e02a56e437",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3cbd3c01-565a-4884-9942-bb0104f9eec9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "error framework",
					"item": [
						{
							"name": "Check unknown transactionID - error code and description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b6ea9cb-054e-4550-a4da-e509cfbacd0d",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/transactionRequests/callbacks/\"+pm.environment.get(\"transactionRequestId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            const responseJson = response.json()",
											"            const headers = responseJson.headers",
											"            const data = responseJson.data",
											"            ",
											"            console.log(data);",
											"            ",
											"            pm.test(\"Callback received in the Simulator\", function () {",
											"                pm.expect(data).not.equal(undefined);",
											"            });",
											"            ",
											"            pm.test(\"transactionId matches\", function () {",
											"                pm.expect(data['transactionId']).to.eql(undefined);",
											"            });",
											"                ",
											"            pm.test(\"fspiop-source is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-destination is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            pm.test(\"content-type is same as sent in the request\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transactionRequests+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"Check ID missing\", function () {",
											"                pm.expect(data.errorInformation.errorDescription).to.include('Transaction request ID not found ');",
											"            });",
											"",
											"            pm.test(\"Check Error code 3003\", function () {",
											"                pm.expect(data.errorInformation.errorCode).to.eql('3206');",
											"            });",
											"            ",
											"      } else {",
											"          pm.test(\"Transaction Request FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"          });",
											"      }",
											"       ",
											"  });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "57145428-9e66-4adc-aae3-c6ed423f1463",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transactionRequestDate}}"
									},
									{
										"key": "fspiop-source",
										"type": "text",
										"value": "{{payeefsp}}"
									},
									{
										"key": "fspiop-destination",
										"type": "text",
										"value": "{{payerfsp}}"
									},
									{
										"key": "fspiop-signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									},
									{
										"key": "fspiop-uri",
										"type": "text",
										"value": "/transactionRequests"
									},
									{
										"key": "fspiop-http-method",
										"type": "text",
										"value": "GET"
									}
								],
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests/{{transactionRequestId}}",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests",
										"{{transactionRequestId}}"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3100 - Missing body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b9d01d6-ae62-4817-bbc3-0d27f4842595",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check Generic validation error \", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Generic validation error ');",
											"});",
											"",
											"pm.test(\"Check Error code 3100\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3100');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6eb1e355-c43d-4bf6-891d-310605b9f04a",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "Content-Length",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-forwarded-for",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-encryption",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-http-method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Date ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb767360-2fbc-41c2-b4db-187254e47f18",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Missing mandatory element - date is required\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element - date is required');",
											"});",
											"",
											"pm.test(\"Check Error code 3102\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "276b1276-aff8-45a6-b299-bf28bee61cc6",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "Content-Length",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-forwarded-for",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-encryption",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-http-method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionRequestId\": \"{{transactionRequestId}}\",\n    \"payee\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"PERSONAL_ID\",\n            \"partyIdentifier\": \"16135551212\",\n            \"partySubIdOrType\": \"DRIVING_LICENSE\",\n            \"fspId\": \"1234\"\n        },\n        \"merchantClassificationCode\": \"4321\",\n        \"name\": \"Justin Trudeau\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"Justin\",\n                \"middleName\": \"Pierre\",\n                \"lastName\": \"Trudeau\"\n            },\n            \"dateOfBirth\": \"1971-12-25\"\n        }\n    },\n    \"payer\": {\n        \"partyIdType\": \"PERSONAL_ID\",\n        \"partyIdentifier\": \"16135551212\",\n        \"partySubIdOrType\": \"DRIVING_LICENSE\",\n        \"fspId\": \"1234\"\n    },\n    \"amount\": {\n        \"currency\": \"USD\",\n        \"amount\": \"123.45\"\n    },\n    \"transactionType\": {\n        \"scenario\": \"DEPOSIT\",\n        \"subScenario\": \"locally defined sub-scenario\",\n        \"initiator\": \"PAYEE\",\n        \"initiatorType\": \"CONSUMER\",\n        \"refundInfo\": {\n            \"originalTransactionId\": \"{{transactionRequestId}}\",\n            \"refundReason\": \"free text indicating reason for the refund\"\n        },\n        \"balanceOfPayments\": \"123\"\n    },\n    \"note\": \"Free-text memo\",\n    \"geoCode\": {\n        \"latitude\": \"+45.4215\",\n        \"longitude\": \"+75.6972\"\n    },\n    \"authenticationType\": \"OTP\",\n    \"expiration\": \"2016-05-24T08:38:08.699-04:00\",\n    \"extensionList\": {\n        \"extension\": [\n            {\n                \"key\": \"errorDescription\",\n                \"value\": \"This is a more detailed error description\"\n            },\n            {\n                \"key\": \"errorDescription\",\n                \"value\": \"This is a more detailed error description\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing fspiop-source",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b651d50e-ebb6-40ab-9eba-336f18713129",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check Generic validation error \", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element - fspiop-source is required');",
											"});",
											"",
											"pm.test(\"Check Error code 3102\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3e18d469-8581-4323-9426-21613a430e45",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Length",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-forwarded-for",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-encryption",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-http-method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionRequestId\": \"{{transactionRequestId}}\",\n    \"payee\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"PERSONAL_ID\",\n            \"partyIdentifier\": \"16135551212\",\n            \"partySubIdOrType\": \"DRIVING_LICENSE\",\n            \"fspId\": \"1234\"\n        },\n        \"merchantClassificationCode\": \"4321\",\n        \"name\": \"Justin Trudeau\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"Justin\",\n                \"middleName\": \"Pierre\",\n                \"lastName\": \"Trudeau\"\n            },\n            \"dateOfBirth\": \"1971-12-25\"\n        }\n    },\n    \"payer\": {\n        \"partyIdType\": \"PERSONAL_ID\",\n        \"partyIdentifier\": \"16135551212\",\n        \"partySubIdOrType\": \"DRIVING_LICENSE\",\n        \"fspId\": \"1234\"\n    },\n    \"amount\": {\n        \"currency\": \"USD\",\n        \"amount\": \"123.45\"\n    },\n    \"transactionType\": {\n        \"scenario\": \"DEPOSIT\",\n        \"subScenario\": \"locally defined sub-scenario\",\n        \"initiator\": \"PAYEE\",\n        \"initiatorType\": \"CONSUMER\",\n        \"refundInfo\": {\n            \"originalTransactionId\": \"{{transactionRequestId}}\",\n            \"refundReason\": \"free text indicating reason for the refund\"\n        },\n        \"balanceOfPayments\": \"123\"\n    },\n    \"note\": \"Free-text memo\",\n    \"geoCode\": {\n        \"latitude\": \"+45.4215\",\n        \"longitude\": \"+75.6972\"\n    },\n    \"authenticationType\": \"OTP\",\n    \"expiration\": \"2016-05-24T08:38:08.699-04:00\",\n    \"extensionList\": {\n        \"extension\": [\n            {\n                \"key\": \"errorDescription\",\n                \"value\": \"This is a more detailed error description\"\n            },\n            {\n                \"key\": \"errorDescription\",\n                \"value\": \"This is a more detailed error description\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong content version ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0697692-bbdd-45d3-b228-4461984510e8",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 406\", function () {",
											"    pm.response.to.have.status(406);",
											"});",
											"",
											"pm.test(\"Check Unacceptable version requested\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unacceptable version requested');",
											"});",
											"",
											"pm.test(\"Check Error code 3001\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3001');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b87aa281-ed18-411e-b747-f11d3010e530",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=4.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "Content-Length",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-forwarded-for",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-encryption",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-http-method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionRequestId\": \"{{transactionRequestId}}\",\n    \"payee\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"PERSONAL_ID\",\n            \"partyIdentifier\": \"16135551212\",\n            \"partySubIdOrType\": \"DRIVING_LICENSE\",\n            \"fspId\": \"1234\"\n        },\n        \"merchantClassificationCode\": \"4321\",\n        \"name\": \"Justin Trudeau\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"Justin\",\n                \"middleName\": \"Pierre\",\n                \"lastName\": \"Trudeau\"\n            },\n            \"dateOfBirth\": \"1971-12-25\"\n        }\n    },\n    \"payer\": {\n        \"partyIdType\": \"PERSONAL_ID\",\n        \"partyIdentifier\": \"16135551212\",\n        \"partySubIdOrType\": \"DRIVING_LICENSE\",\n        \"fspId\": \"1234\"\n    },\n    \"amount\": {\n        \"currency\": \"USD\",\n        \"amount\": \"123.45\"\n    },\n    \"transactionType\": {\n        \"scenario\": \"DEPOSIT\",\n        \"subScenario\": \"locally defined sub-scenario\",\n        \"initiator\": \"PAYEE\",\n        \"initiatorType\": \"CONSUMER\",\n        \"refundInfo\": {\n            \"originalTransactionId\": \"{{transactionRequestId}}\",\n            \"refundReason\": \"free text indicating reason for the refund\"\n        },\n        \"balanceOfPayments\": \"123\"\n    },\n    \"note\": \"Free-text memo\",\n    \"geoCode\": {\n        \"latitude\": \"+45.4215\",\n        \"longitude\": \"+75.6972\"\n    },\n    \"authenticationType\": \"OTP\",\n    \"expiration\": \"2016-05-24T08:38:08.699-04:00\",\n    \"extensionList\": {\n        \"extension\": [\n            {\n                \"key\": \"errorDescription\",\n                \"value\": \"This is a more detailed error description\"\n            },\n            {\n                \"key\": \"errorDescription\",\n                \"value\": \"This is a more detailed error description\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unsupported Media Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51dfce62-a85b-4a23-82a5-2b6698ab5f58",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check Malformed syntax - Unsupported Media Type\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax - Unsupported Media Type');",
											"});",
											"",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1f6fd1cf-2d3c-4fd8-953d-4f6b575cd9fa",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+xml;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "Content-Length",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-forwarded-for",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-encryption",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-http-method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionRequestId\": \"{{transactionRequestId}}\",\n    \"payee\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"PERSONAL_ID\",\n            \"partyIdentifier\": \"16135551212\",\n            \"partySubIdOrType\": \"DRIVING_LICENSE\",\n            \"fspId\": \"1234\"\n        },\n        \"merchantClassificationCode\": \"4321\",\n        \"name\": \"Justin Trudeau\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"Justin\",\n                \"middleName\": \"Pierre\",\n                \"lastName\": \"Trudeau\"\n            },\n            \"dateOfBirth\": \"1971-12-25\"\n        }\n    },\n    \"payer\": {\n        \"partyIdType\": \"PERSONAL_ID\",\n        \"partyIdentifier\": \"16135551212\",\n        \"partySubIdOrType\": \"DRIVING_LICENSE\",\n        \"fspId\": \"1234\"\n    },\n    \"amount\": {\n        \"currency\": \"USD\",\n        \"amount\": \"123.45\"\n    },\n    \"transactionType\": {\n        \"scenario\": \"DEPOSIT\",\n        \"subScenario\": \"locally defined sub-scenario\",\n        \"initiator\": \"PAYEE\",\n        \"initiatorType\": \"CONSUMER\",\n        \"refundInfo\": {\n            \"originalTransactionId\": \"{{transactionRequestId}}\",\n            \"refundReason\": \"free text indicating reason for the refund\"\n        },\n        \"balanceOfPayments\": \"123\"\n    },\n    \"note\": \"Free-text memo\",\n    \"geoCode\": {\n        \"latitude\": \"+45.4215\",\n        \"longitude\": \"+75.6972\"\n    },\n    \"authenticationType\": \"OTP\",\n    \"expiration\": \"2016-05-24T08:38:08.699-04:00\",\n    \"extensionList\": {\n        \"extension\": [\n            {\n                \"key\": \"errorDescription\",\n                \"value\": \"This is a more detailed error description\"\n            },\n            {\n                \"key\": \"errorDescription\",\n                \"value\": \"This is a more detailed error description\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "authorizations",
					"item": [
						{
							"name": "authorizations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa410002-8fae-4eac-96db-0f4da556d377",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fe2f1a3a-201e-4cbb-b03f-f63f9a83783b",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.authorizations+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.authorizations+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "/authorizations",
										"type": "text"
									},
									{
										"key": "fspiop-http-method",
										"value": "GET",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}?authenticationType=OTP&retriesLeft=2&amount=102&currency=USD",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"authorizations",
										"{{transactionRequestId}}"
									],
									"query": [
										{
											"key": "authenticationType",
											"value": "OTP"
										},
										{
											"key": "retriesLeft",
											"value": "2"
										},
										{
											"key": "amount",
											"value": "102"
										},
										{
											"key": "currency",
											"value": "USD"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "authorizations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cc0d6920-73c7-4676-abc8-fe71a0c968b5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e3dd8cbd-830f-4b38-817e-bfaa5f4c921c",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.authorizations+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.authorizations+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-destination",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "/authorizations",
										"type": "text"
									},
									{
										"key": "fspiop-http-method",
										"value": "PUT",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"authenticationInfo\": {\n    \"authentication\": \"OTP\",\n    \"authenticationValue\": \"234567\"\n  },\n  \"responseType\": \"REJECTED\"\n}"
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"authorizations",
										"{{transactionRequestId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "quoting_service",
			"item": [
				{
					"name": "Get health status of Quoting Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d90c777c-ff3d-4407-a24a-da6d41a94521",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Checking data",
									"var jsonData = pm.response.json();",
									"pm.test(\"Expected Status is OK\", function () {",
									"   pm.expect(jsonData.status).to.eql(\"OK\");",
									"",
									"    pm.test(\"Expected body to have services array\", function () {",
									"       pm.expect(jsonData.services).to.be.an('array');",
									"       ",
									"        pm.test(\"Expected services to have data store and status is OK\", function () {",
									"            const datastoreOK = jsonData.services.find(item => {",
									"               return item.name=='datastore' && item.status=='OK'; ",
									"            });",
									"            pm.expect(datastoreOK).to.be.an('object');",
									"   ",
									"        });",
									"    });",
									"    ",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/health",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Send Quote",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0988ae57-be00-4410-9c67-1ffe9230d3d8",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"//Check Data on payer side",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"      if(response.responseSize !== 0) {",
									"            var jsonData = response.json().data;",
									"            pm.test(\"Send Quote Amount in 4 decimal returned\", function () {",
									"                pm.expect(+jsonData.transferAmount.amount).equal(pm.environment.get(\"transferAmount\"));",
									"            });",
									"            ",
									"      } else {",
									"          pm.test(\"Quote FAILED\", function () {",
									"            throw new Error('Did not receive response');",
									"          });",
									"      }",
									"       ",
									"  });",
									"}, 1000)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "803bcf2d-fd23-4f51-ba51-88160c9fd00b",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('transferAmount', 60.1234);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TESTFSP1_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Quote",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8c4a16d-2a33-484d-b197-8b634fcacd05",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"//Check Data on payer side",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"      if(response.responseSize !== 0) {",
									"            var jsonData = response.json().data;",
									"            var headers = response.json().headers;",
									"            ",
									"            pm.test(\"Send Quote Amount in 4 decimal returned\", function () {",
									"                pm.expect(+jsonData.transferAmount.amount).equal(pm.environment.get(\"transferAmount\"));",
									"            });",
									"            ",
									"                //Check the Headers",
									"                pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
									"                    pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
									"                });",
									"                ",
									"                pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
									"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
									"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
									"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
									"                });",
									"            ",
									"      } else {",
									"          pm.test(\"Quote FAILED\", function () {",
									"            throw new Error('Did not receive response');",
									"          });",
									"      }",
									"       ",
									"  });",
									"}, 1000)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2fe3df28-8270-469e-8b70-2200f3ecea3a",
								"exec": [
									"// var uuid = require('uuid');",
									"// var generatedUUID = uuid.v4();",
									"",
									"// pm.environment.set('quoteId', generatedUUID);",
									"// generatedUUID = uuid.v4();",
									"// pm.environment.set('transactionId', generatedUUID);",
									"// pm.environment.set('transferAmount', 60.1234);",
									"// pm.environment.set('quoteDate', (new Date()).toUTCString());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TESTFSP1_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId}}",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes",
								"{{quoteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Send Quote - Missing Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3791311d-59e7-40a8-9ab4-f40ac516d954",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"            ",
									"pm.test(\"Check Missing mandatory element - Date\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element - \"date');",
									"});            ",
									"            ",
									"pm.test(\"Check Error code 3102\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "72e5711e-d7ae-422a-b5d2-eff516441458",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('transferAmount', 60.1234);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TESTFSP1_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}",
								"disabled": true
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Send Quote - Missing Accept Header",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96f18e08-05b4-4bad-bed2-3631160e23fa",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"            ",
									"pm.test(\"Check Missing mandatory element - Invalid accept header\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax - Invalid accept header');",
									"});            ",
									"            ",
									"pm.test(\"Check Error code 3101\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "89246ff2-939d-4cb3-a895-73d40fa97eb6",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('transferAmount', 60.1234);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TESTFSP1_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Quote - Missing content type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b7ea9c7-2408-46c0-974a-0f0503c1a4c6",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check Missing mandatory element\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element');",
									"});",
									"",
									"pm.test(\"Check Error code 3102\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "92760bde-88f0-4dc4-976a-3405375fdc31",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TESTFSP1_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0",
								"disabled": true
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId}}",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes",
								"{{quoteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Quote - Invalid content type ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cffc50cb-1c25-45fb-94f6-dd6cc3b161ea",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check Malformed syntax\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
									"});",
									"",
									"pm.test(\"Check Error code 3101\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "176b10bc-6857-46c9-92cd-e0671168c8f1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TESTFSP1_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+xml;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId}}",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes",
								"{{quoteId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2010f48a-eeaa-43c7-a62c-9ffe9bab224a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "72b27a9f-8dc1-4a68-aa8f-900e0572c8f4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bug Fixes",
			"item": [
				{
					"name": "Tests for Bugfix #998 - Quoting service not using most recent endpoint",
					"item": [
						{
							"name": "Add payeefsp request URL - QUOTES PUT with incorrect endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17854abe-4579-4dca-8914-bf304c09bbcf",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"FSPIOP_CALLBACK_URL_QUOTES\",\n  \"value\": \"{{HOST_SIMULATOR_K8S_CLUSTER}}/incorrectpayeefsp\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payeefsp/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"payeefsp",
										"endpoints"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND should not get callback",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f7cc511d-10b5-405b-b3ca-034b6110c85c",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8fa61d4a-c86d-477b-9531-497ad6fd838c",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"",
											"//Check Data on payee side - payeefsp should not receive any data as we added the incorrectpayeefsp as endpoint in the previous step",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"          ",
											"            pm.test(\"Test Failed\", function () {",
											"                throw new Error('Recieved request at payeefsp, so failed');",
											"            });",
											"          ",
											"      } else {",
											"          pm.test(\"Test Passed - Because didn't get request at payeefsp\", function () {",
											"            //Do nothing",
											"           });",
											"",
											"      }",
											"       ",
											"   });",
											"}, 1000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add payeefsp request URL - QUOTES PUT with correct endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02f13664-26f4-414a-8e47-1c1b181c5d37",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"FSPIOP_CALLBACK_URL_QUOTES\",\n  \"value\": \"{{HOST_SIMULATOR_K8S_CLUSTER}}/payeefsp\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payeefsp/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"payeefsp",
										"endpoints"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND should get callback",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6484b5c8-9270-4338-8079-20c89c370534",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7575764d-ed3d-4243-8508-46c70e1b3ed1",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check Data on payee side - payeefsp should get request now as we updated the correct endpoint in the previous step",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            pm.test(\"Test Passed, request received at payeefsp\", function () {",
											"            //Do Nothing",
											"           });",
											"          ",
											"      } else {",
											"            pm.test(\"Test Failed\", function () {",
											"                throw new Error('Did not get response, so failed');",
											"            });",
											"      }",
											"       ",
											"   });",
											"}, 1000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests for Bugfix #1009 - ML Adapter and ALS service health should include broker status",
					"item": [
						{
							"name": "Get health status of ML Adapter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3825e39d-5723-4171-b843-8d095fe7e102",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Checking data",
											"var jsonData = pm.response.json();",
											"pm.test(\"Expected Status is OK\", function () {",
											"   pm.expect(jsonData.status).to.eql(\"OK\");",
											"",
											"    pm.test(\"Expected body to have services array\", function () {",
											"       pm.expect(jsonData.services).to.be.an('array');",
											"       ",
											"        pm.test(\"Expected services to have broker and status is OK\", function () {",
											"            const brokerOk = jsonData.services.find(item => {",
											"               return item.name=='broker' && item.status=='OK'; ",
											"            });",
											"            pm.expect(brokerOk).to.be.an('object');",
											"   ",
											"        });",
											"    });",
											"    ",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/health",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get health status of ALS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce7b718b-0478-45ba-9537-5f9cf03f325d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Checking data",
											"var jsonData = pm.response.json();",
											"pm.test(\"Expected Status is OK\", function () {",
											"   pm.expect(jsonData.status).to.eql(\"OK\");",
											"",
											"    pm.test(\"Expected body to have services array\", function () {",
											"       pm.expect(jsonData.services).to.be.an('array');",
											"       ",
											"        pm.test(\"Expected services to have datastore and status is OK\", function () {",
											"            const brokerOk = jsonData.services.find(item => {",
											"               return item.name=='datastore' && item.status=='OK'; ",
											"            });",
											"            pm.expect(brokerOk).to.be.an('object');",
											"   ",
											"        });",
											"    });",
											"    ",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/health",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get health status of Central Ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c9350d4-3682-46f0-a248-05754e479a90",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Checking data",
											"var jsonData = pm.response.json();",
											"pm.test(\"Expected Status is OK\", function () {",
											"   pm.expect(jsonData.status).to.eql(\"OK\");",
											"",
											"    pm.test(\"Expected body to have services array\", function () {",
											"       pm.expect(jsonData.services).to.be.an('array');",
											"       ",
											"        pm.test(\"Expected services to have datastore and status is OK\", function () {",
											"            const brokerOk = jsonData.services.find(item => {",
											"               return item.name=='datastore' && item.status=='OK'; ",
											"            });",
											"            pm.expect(brokerOk).to.be.an('object');",
											"   ",
											"        });",
											"        pm.test(\"Expected services to have broker and status is OK\", function () {",
											"            const brokerOk = jsonData.services.find(item => {",
											"               return item.name=='broker' && item.status=='OK'; ",
											"            });",
											"            pm.expect(brokerOk).to.be.an('object');",
											"   ",
											"        });        ",
											"    });",
											"    ",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/health",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get health status of Central Settlement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1d95660a-b28f-45e9-8df7-1babaa884516",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Checking data",
											"var jsonData = pm.response.json();",
											"pm.test(\"Expected Status is OK\", function () {",
											"   pm.expect(jsonData.status).to.eql(\"OK\");",
											"",
											"    pm.test(\"Expected body to have services array\", function () {",
											"       pm.expect(jsonData.services).to.be.an('array');",
											"       ",
											"        pm.test(\"Expected services to have datastore and status is OK\", function () {",
											"            const brokerOk = jsonData.services.find(item => {",
											"               return item.name=='datastore' && item.status=='OK'; ",
											"            });",
											"            pm.expect(brokerOk).to.be.an('object');",
											"   ",
											"        });",
											"    });",
											"    ",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/health",
									"host": [
										"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "85d8c466-398a-4d33-9021-6447ed993d13",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f159ccb8-0d3d-452a-b929-9a5c7b92bd97",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests for Bugfix #981 - 500 http code instead of 400",
					"item": [
						{
							"name": "Add Participant - Duplicate account Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "772a4f49-7b46-476d-ae94-cfc81eed59c5",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check Generic client error\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Generic client error');",
											"});",
											"",
											"pm.test(\"Check Error code 3000\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3000');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{payerfsp}}\",\n  \"currency\": \"USD\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add non existing Participant",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "af0730d2-260b-40ff-b1ac-a485f45c54a8",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check Generic ID not found\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Generic ID not found');",
											"});",
											"",
											"pm.test(\"Check Error code 3200\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3200');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/xyz",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"xyz"
									]
								}
							},
							"response": [
								{
									"name": "Get Participant",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{participant}}",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{participant}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "251",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 22 Aug 2018 15:25:18 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "nginx/1.13.8",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "accept-ranges",
											"value": "bytes",
											"name": "accept-ranges",
											"description": "Content-Types that are acceptable"
										},
										{
											"key": "cache-control",
											"value": "no-cache",
											"name": "cache-control",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										}
									],
									"cookie": [],
									"body": "{\"name\":\"testfsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/testfsp\",\"created\":\"2018-08-22T08:16:50.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/testfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]}"
								}
							]
						},
						{
							"name": "Add Participant - Invalid Currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd5cb7d8-51d3-4c53-9d10-bf055620c2c7",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check Malformed syntax\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
											"});",
											"",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"payer10\",\n  \"currency\": \"A#\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests for Bugfix #990 and #1016 - Quotes",
					"item": [
						{
							"name": "Check duplicate quote before and after expiration",
							"item": [
								{
									"name": "Send Quote_SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2abe1a4f-28e9-429b-8eb6-883c9ed53cf5",
												"exec": [
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId', generatedUUID);",
													"   generatedUUID = uuid.v4();",
													"   pm.environment.set('transactionId', generatedUUID);",
													" pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 10000))",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1b05de93-d76a-48b5-b51a-64bc993e1b6e",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// //Check the request that Switch forwards to payeefsp",
													"// setTimeout(function () {",
													"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"//           if(response.responseSize !== 0) {",
													"              ",
													"//               //Check the Headers",
													"//               var headers = response.json().headers;",
													"              ",
													"//                 pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
													"//                     pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"//                 });",
													"                ",
													"//                 pm.test(\"payeefsp fspiop-destination is payerfsp\", function () {",
													"//                     pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"//                 });",
													"                ",
													"//                 pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
													"//                     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
													"//                 });",
													"                ",
													"//                 pm.test(\"payeefsp accept is same as sent in the request\", function () {",
													"//                     pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
													"//                 });",
													"                ",
													"//                 pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
													"//                     pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"//                 });",
													"                ",
													"//           } else {",
													"//               pm.test(\"Quote FAILED\", function () {",
													"//                 throw new Error('Did not receive request on payee side');",
													"//               });",
													"//               postman.setNextRequest(null)",
													"//           }",
													"//   });",
													"// }, 1100)",
													"",
													"// //Check Data on payer side",
													"// setTimeout(function () {",
													"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"//       if(response.responseSize !== 0) {",
													"//           //Checking headers",
													"//             var headers = response.json().headers;",
													"//             pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
													"//                 pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"//             });",
													"            ",
													"//             pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
													"//                 pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"//             });",
													"            ",
													"//             pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
													"//                 pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"//             });",
													"            ",
													"//             pm.test(\"payerfsp accept is empty\", function () {",
													"//                 pm.expect(headers['accept']).to.eql(undefined);",
													"//             });",
													"            ",
													"            ",
													"            ",
													"//             //Validate protected header inside Signature",
													"//             var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"//             var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"//             console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"            ",
													"//             // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
													"//             //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
													"//             // });",
													"            ",
													"//             pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"//             });",
													"//             pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"//                 pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"//             });",
													"            ",
													"",
													"//             pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"//             });",
													"//             pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
													"//             });",
													"//             pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
													"//             });",
													"//             pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
													"//             });",
													"           ",
													"//             pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"//                 pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"//             });",
													"            ",
													"//             pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"//                 pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"//             });",
													"            ",
													"//             var jsonData = response.json().data;",
													"            ",
													"//           pm.test(\"Response fees is returned\", function () {",
													"//                 pm.expect(jsonData.payeeFspFee.amount).equal(\"1\");",
													"                ",
													"//             });",
													"//             pm.test(\"Response Commission is returned\", function () {",
													"//                 pm.expect(jsonData.payeeFspCommission.amount).equal(\"1\");",
													"                ",
													"//             });",
													"            ",
													"//             pm.test(\"Response ilpPacket is not undefined\", function () {",
													"//                 pm.expect(jsonData.ilpPacket).not.equal(undefined);",
													"//                 pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
													"//             });",
													"       ",
													"//           pm.test(\"Response condition is not undefined\", function () {",
													"//               pm.expect(jsonData.condition).not.equal(undefined);",
													"//               pm.environment.set(\"condition\", jsonData.condition);",
													"//           });",
													"//       } else {",
													"//           pm.test(\"Quote FAILED\", function () {",
													"//             throw new Error('Did not receive response');",
													"//           });",
													"",
													"//       }",
													"       ",
													"//   });",
													"// }, 1000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "noresponsepayeefsp"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiop-signature}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"noresponsepayeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Quote_SEND - 12 - Validate Within Expire Time w Duplicate Quote Id Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0b9064bc-65be-41d9-81bd-e3fb58d350c9",
												"exec": [
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('transactionId', generatedUUID);",
													"",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "74b02167-3762-4d1c-b2d5-c3b6ada88548",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// Check the request that Switch forwards to payeefsp",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              ",
													"              var jsonData = response.json();",
													"            ",
													"            pm.test(\"Check Modified request - Duplicate Quote before expire time\", function () {",
													"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Modified request');",
													"            });",
													"            ",
													"            pm.test(\"Check Error code 3106\", function () {",
													"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3106');",
													"            });",
													"                ",
													"          } else {",
													"              pm.test(\"Quote FAILED\", function () {",
													"                throw new Error('Did not receive request on payee side');",
													"              });",
													"          }",
													"  });",
													"}, 1100)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "noresponsepayeefsp"
											},
											{
												"key": "FSPIOP-Signature",
												"value": "{{fspiop-signature}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"noresponsepayeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"note\": \"hej\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Quote_SEND - 12 - Validate After Expire Time w Duplicate Quote Id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "09a08058-1826-4d0d-8814-6da4c1be51ba",
												"exec": [
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('transactionId', generatedUUID);",
													"   pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 10000))",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest('www.google.com', function (err, response) {}",
													"    );",
													"}, 10000)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ad51c3d6-9869-443f-86ad-8fcebe73746a",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// Check the request that Switch forwards to payeefsp",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              ",
													"              var jsonData = response.json();",
													"            ",
													"            pm.test(\"Check Modified request - Duplicate Quote before expire time\", function () {",
													"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Modified request');",
													"            });",
													"            ",
													"            pm.test(\"Check Error code 3106\", function () {",
													"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3106');",
													"            });",
													"                ",
													"          } else {",
													"              pm.test(\"Quote FAILED\", function () {",
													"                throw new Error('Did not receive request on payee side');",
													"              });",
													"          }",
													"  });",
													"}, 1100)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											},
											{
												"key": "FSPIOP-Signature",
												"value": "{{fspiop-signature}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"note\": \"hej\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "accfd4ad-9171-4eb4-97dc-ab9f89d9b61c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b0a9ace0-3a8f-4351-a6f7-ddb4be3c869e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "bug8-DuplicateQuoteId",
							"item": [
								{
									"name": "Send Quote_SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a3cd265c-2aaf-43cc-ab98-a12e60e6d9f5",
												"exec": [
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId', generatedUUID);",
													"   generatedUUID = uuid.v4();",
													"   pm.environment.set('transactionId', generatedUUID);",
													"",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3d7f3b9e-ce09-409e-92b1-523ff6424404",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"//Check the request that Switch forwards to payeefsp",
													"// setTimeout(function () {",
													"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"//           if(response.responseSize !== 0) {",
													"              ",
													"//               //Check the Headers",
													"//               var headers = response.json().headers;",
													"              ",
													"//                 pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
													"//                     pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"//                 });",
													"                ",
													"//                 pm.test(\"payeefsp fspiop-destination is payerfsp\", function () {",
													"//                     pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"//                 });",
													"                ",
													"//                 pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
													"//                     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
													"//                 });",
													"                ",
													"//                 pm.test(\"payeefsp accept is same as sent in the request\", function () {",
													"//                     pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
													"//                 });",
													"                ",
													"//                 pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
													"//                     pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"//                 });",
													"                ",
													"//           } else {",
													"//               pm.test(\"Quote FAILED\", function () {",
													"//                 throw new Error('Did not receive request on payee side');",
													"//               });",
													"//               postman.setNextRequest(null)",
													"//           }",
													"//   });",
													"// }, 1100)",
													"",
													"// //Check Data on payer side",
													"// setTimeout(function () {",
													"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"//       if(response.responseSize !== 0) {",
													"//           //Checking headers",
													"//             var headers = response.json().headers;",
													"//             pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
													"//                 pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"//             });",
													"            ",
													"//             pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
													"//                 pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"//             });",
													"            ",
													"//             pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
													"//                 pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"//             });",
													"            ",
													"//             pm.test(\"payerfsp accept is empty\", function () {",
													"//                 pm.expect(headers['accept']).to.eql(undefined);",
													"//             });",
													"            ",
													"            ",
													"            ",
													"//             //Validate protected header inside Signature",
													"//             var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"//             var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"//             console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"            ",
													"//             // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
													"//             //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
													"//             // });",
													"            ",
													"//             pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"//             });",
													"//             pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"//                 pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"//             });",
													"            ",
													"",
													"//             pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"//             });",
													"//             pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
													"//             });",
													"//             pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
													"//             });",
													"//             pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
													"//             });",
													"           ",
													"//             pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"//                 pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"//             });",
													"            ",
													"//             pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"//                 pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"//             });",
													"            ",
													"//             var jsonData = response.json().data;",
													"            ",
													"//           pm.test(\"Response fees is returned\", function () {",
													"//                 pm.expect(jsonData.payeeFspFee.amount).equal(\"1\");",
													"                ",
													"//             });",
													"//             pm.test(\"Response Commission is returned\", function () {",
													"//                 pm.expect(jsonData.payeeFspCommission.amount).equal(\"1\");",
													"                ",
													"//             });",
													"            ",
													"//             pm.test(\"Response ilpPacket is not undefined\", function () {",
													"//                 pm.expect(jsonData.ilpPacket).not.equal(undefined);",
													"//                 pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
													"//             });",
													"       ",
													"//           pm.test(\"Response condition is not undefined\", function () {",
													"//               pm.expect(jsonData.condition).not.equal(undefined);",
													"//               pm.environment.set(\"condition\", jsonData.condition);",
													"//           });",
													"//       } else {",
													"//           pm.test(\"Quote FAILED\", function () {",
													"//             throw new Error('Did not receive response');",
													"//           });",
													"",
													"//       }",
													"       ",
													"//   });",
													"// }, 1000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "payeefsp"
											},
											{
												"key": "FSPIOP-Signature",
												"value": "{{fspiop-signature}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Quote_SEND - 8 - Duplicate QuoteId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "21dc8982-8029-49fd-9fa5-4609d3eacf8b",
												"exec": [
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"//   pm.environment.set('quoteId', generatedUUID);",
													"   pm.environment.set('quoteId', pm.variables.get(\"quoteId\"));",
													"   generatedUUID = uuid.v4();",
													"   pm.environment.set('transactionId', generatedUUID);",
													"",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "211f9d46-0304-41e0-a5a1-1e0d58133b03",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// //Check Data on payer side",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"      if(response.responseSize !== 0) {",
													"            ",
													"            var jsonData = response.json().data;",
													"            ",
													"            pm.test(\"Check Modified request - Duplicate Quote\", function () {",
													"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Modified request');",
													"            });",
													"            ",
													"            pm.test(\"Check Error code 3106\", function () {",
													"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3106');",
													"            });",
													"            ",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('Did not receive response');",
													"          });",
													"",
													"      }",
													"       ",
													"  });",
													"}, 1000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiop-signature}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Send Quote_SEND - Missing content-type version",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e6517d69-2ffd-435d-8d17-ac63819706c4",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1a227fd7-721a-4398-bd42-0585b17fb03e",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check Missing mandatory element\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
											"});",
											"",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 6a - Invalid Content Type - application/json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "285b5073-98a7-4547-a92c-10a26bb5dfa4",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bb8d3342-4132-4326-834b-8dd21e5078ac",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check Missing mandatory element\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
											"});",
											"",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 6b - Invalid Content Type - xml",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e35886e-c385-4ebc-86ac-88d72fdcd14c",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Invalid content Type - Check XML type \", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unsupported Media Type');",
											"});            ",
											"            ",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cb31453a-b684-4423-9e71-c1725ebb079c",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 6c - Invalid Content Type - tag body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8cf68aad-2ac7-4337-a55b-6102566cf46f",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6a26d1c4-e210-429b-8dbc-5653904c5286",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Invalid content Type - Check XML type \", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unsupported Media Type');",
											"});            ",
											"            ",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<q>\n<q1>\n</q1>\n</q>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 7 - Missing Payer PartyIdType",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b5f84d44-97de-4c93-b741-37b1ae535aad",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7034fd8f-c8f7-4678-a1fd-62c24d8d7b5a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Malformed syntax - Missing payer PartyIdType\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax - \"PartyIdTypeEnum');",
											"});            ",
											"            ",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"\",\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 7 - Missing Payer PartyIdentifier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "acad279c-6c04-4a71-b02d-71eab65a6003",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0c58d00e-05fa-4dd6-b7b1-8266ff129613",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Missing mandatory element - Payer PartyIdentifier\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element - \"PartyIdentifier');",
											"});            ",
											"            ",
											"pm.test(\"Check Error code 3102\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 7 - Missing Payee PartyIdentifier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "84c0bd31-c781-4efb-a9cb-e0cd34f29668",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ff407eb4-1cf7-4f01-9b05-8619743ba60a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Missing mandatory element - Payee PartyIdentifier\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element - \"PartyIdentifier');",
											"});            ",
											"            ",
											"pm.test(\"Check Error code 3102\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 7 - Missing Payee PartyIdType",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "051b5939-567f-4fb0-ad99-b93ce1fb5807",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8c3f36f8-e54f-449d-81b8-831e37c8c3af",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Malformed syntax - Missing payee PartyIdType\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax - \"PartyIdTypeEnum');",
											"});            ",
											"            ",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 9- Destination FSP NOT FOUND",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "aee0ab50-43df-4745-8f08-276f9a2110bc",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8359a6ca-cb40-4348-acfd-b786da421a05",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"console.log(\"Test - FSP not found\")",
											"",
											"//Check Data on payer side",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            ",
											"            var jsonData = response.json().data;",
											"            ",
											"            pm.test(\"Check Destination FSP Error - Unsupported participant\", function () {",
											"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Destination FSP Error - Unsupported participant ');",
											"            });",
											"            ",
											"            pm.test(\"Check Error code 3201\", function () {",
											"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3201');",
											"            });",
											"            ",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"          });",
											"",
											"      }",
											"       ",
											"  });",
											"}, 1000)",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "payeefspNOTFOUND"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"23123123412\",\n      \"fspId\": \"payeefspNOTFOUND\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 10 - PayeePartyIdentifier NOT FOUND",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5db5527f-f0e9-46c0-b91f-5266303c7a4d",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c572a57e-4c18-48b8-84e1-ecdb5393279f",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Missing mandatory element - PartyIdentifier is not allowed to be empty\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element');",
											"});            ",
											"            ",
											"pm.test(\"Check Error code 3102\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "QuotesByID - 11 - Missing Condition Field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "48b2d311-ffc1-4f3a-8524-ea503a2cc398",
										"exec": [
											"pm.environment.set('quoteDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "88fec606-4eab-4984-b3df-48298067c0bd",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Missing conditional Field- condition is required\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element');",
											"});            ",
											"            ",
											"pm.test(\"Check Error code 3102\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": ""
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate",
										"disabled": true
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Length",
										"value": "1117",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "noresponsepayeefsp"
									},
									{
										"key": "Host",
										"value": "http://localhost:3002",
										"disabled": true
									},
									{
										"key": "Postman-Token",
										"value": "a1c5eda9-20eb-4041-8e1a-134f266dee23,a25e5bc7-0cee-4720-9d34-ffd28d08c908",
										"disabled": true
									},
									{
										"key": "User-Agent",
										"value": "PostmanRuntime/7.17.1",
										"disabled": true
									},
									{
										"key": "cache-control",
										"value": "no-cache",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferAmount\": {\n  \"amount\": \"11\",\n  \"currency\": \"XOF\" },\n  \"payeeReceiveAmount\": {\n  \"amount\": \"11\",\n  \"currency\": \"XOF\"   },\n  \"payeeFspCommission\": {\n   \"currency\": \"XOF\",\n   \"amount\": \"1\"\n },\n  \"expiration\": \"2019-10-14T20:19:20.741Z\",\n  \"ilpPacket\": \"AQAAAAAAAADIEHByaXZhdGUucGF5ZWVmc3CCAiB7InRyYW5zYWN0aW9uSWQiOiIyZGY3NzRlMi1mMWRiLTRmZjctYTQ5NS0yZGRkMzdhZjdjMmMiLCJxdW90ZUlkIjoiMDNhNjA1NTAtNmYyZi00NTU2LThlMDQtMDcwM2UzOWI4N2ZmIiwicGF5ZWUiOnsicGFydHlJZEluZm8iOnsicGFydHlJZFR5cGUiOiJNU0lTRE4iLCJwYXJ0eUlkZW50aWZpZXIiOiIyNzcxMzgwMzkxMyIsImZzcElkIjoicGF5ZWVmc3AifSwicGVyc29uYWxJbmZvIjp7ImNvbXBsZXhOYW1lIjp7fX19LCJwYXllciI6eyJwYXJ0eUlkSW5mbyI6eyJwYXJ0eUlkVHlwZSI6Ik1TSVNETiIsInBhcnR5SWRlbnRpZmllciI6IjI3NzEzODAzOTExIiwiZnNwSWQiOiJwYXllcmZzcCJ9LCJwZXJzb25hbEluZm8iOnsiY29tcGxleE5hbWUiOnt9fX0sImFtb3VudCI6eyJjdXJyZW5jeSI6IlVTRCIsImFtb3VudCI6IjIwMCJ9LCJ0cmFuc2FjdGlvblR5cGUiOnsic2NlbmFyaW8iOiJERVBPU0lUIiwic3ViU2NlbmFyaW8iOiJERVBPU0lUIiwiaW5pdGlhdG9yIjoiUEFZRVIiLCJpbml0aWF0b3JUeXBlIjoiQ09OU1VNRVIiLCJyZWZ1bmRJbmZvIjp7fX19\"\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes/febf8cff-f0b8-4a09-9a17-e22401fe4332",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes",
										"febf8cff-f0b8-4a09-9a17-e22401fe4332"
									]
								}
							},
							"response": []
						},
						{
							"name": "QuotedById - 13a- 400- Missing Accept header (BUG)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35007e85-5774-412a-86e8-8ba6dd4813db",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Malformed syntax - Invalid accept header\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax - Invalid accept header');",
											"});            ",
											"            ",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "150a5ff1-1f18-4782-90ad-00ba8778fc29",
										"exec": [
											"pm.environment.set('quoteDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes/07e92ea7-d655-4f88-925c-4aeefcee80f6",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes",
										"07e92ea7-d655-4f88-925c-4aeefcee80f6"
									]
								},
								"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
							},
							"response": []
						},
						{
							"name": "QuotesById - 13b - 400-Missing FSPIOP-Source header (BUG)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f083fc7-49b6-4d61-a005-dbb4b6dae777",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Malformed syntax - fspiop-source\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element - \"fspiop-source\"');",
											"});            ",
											"            ",
											"pm.test(\"Check Error code 31012\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "71ee0148-75cc-495b-99aa-e5ce65c257db",
										"exec": [
											"pm.environment.set('quoteDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes/07e92ea7-d655-4f88-925c-4aeefcee80f6",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes",
										"07e92ea7-d655-4f88-925c-4aeefcee80f6"
									]
								},
								"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
							},
							"response": []
						},
						{
							"name": "QuotesById - 13c - 400-Missing Date header (BUG)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a32c019-17d3-4b15-b22c-16fc61067ea8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Missing mandatory element - date\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element - \"date\"');",
											"});            ",
											"            ",
											"pm.test(\"Check Error code 3102\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5b2de8f6-83b4-4604-a8ef-66d9d92f762a",
										"exec": [
											"pm.environment.set('quoteDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes/07e92ea7-d655-4f88-925c-4aeefcee80f6",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes",
										"07e92ea7-d655-4f88-925c-4aeefcee80f6"
									]
								},
								"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 14 - Incorrect Switch Version Header",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1654c745-9f29-4c4a-b6a9-e78e7a40a124",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "95448be1-8777-4492-944e-8e14ab7abfa5",
										"exec": [
											"pm.test(\"Status code is 406\", function () {",
											"    pm.response.to.have.status(406);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Unacceptable version requested\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unacceptable version requested');",
											"});            ",
											"            ",
											"pm.test(\"Check Error code 3001\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3001');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=9.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								},
								"description": "Check POST/Quote  with incorrect switch version header\n\nExpectation : 400 with error code 3001"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check transfers/ Missing ID #849",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9b61d3a4-71cd-4694-9a1e-61632d722899",
								"exec": [
									"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4cb629ac-7423-4ce2-9fb2-9fc0c9a22cc1",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Check ID missing\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unknown URI');",
									"});",
									"",
									"pm.test(\"Check Error code 3002\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3002');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"type": "text",
								"value": "noresponsepayeefsp"
							},
							{
								"key": "FSPIOP-Destination",
								"type": "text",
								"value": "{{payeefsp}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check quotes/ Missing ID #849",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ccd78340-e9d0-4171-8e42-9fe52b0d0d5c",
								"exec": [
									"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "98d3130d-3399-4c73-a00a-2d23dac9348f",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Check ID missing\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unknown URI');",
									"});",
									"",
									"pm.test(\"Check Error code 3002\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3002');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"type": "text",
								"value": "noresponsepayeefsp"
							},
							{
								"key": "FSPIOP-Destination",
								"type": "text",
								"value": "{{payeefsp}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/quotes",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Send Quote 4 Decimal #949",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f9d05d0-a7ba-4943-808c-dc1218e1df00",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"//Check Data on payer side",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"      if(response.responseSize !== 0) {",
									"            var jsonData = response.json().data;",
									"            pm.test(\"Send Quote Amount in 4 decimal returned\", function () {",
									"                pm.expect(+jsonData.transferAmount.amount).equal(pm.environment.get(\"transferAmount\"));",
									"            });",
									"            ",
									"      } else {",
									"          pm.test(\"Quote FAILED\", function () {",
									"            throw new Error('Did not receive response');",
									"           });",
									"      }",
									"       ",
									"   });",
									"}, 1000)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "302e7354-0139-423c-a42f-f08f161c2782",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('transferAmount', 60.1234);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TESTFSP1_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Send Transfer 4 Decimal #949",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73d72108-6419-419a-80ce-b0a1a5bc636e",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"//Check the request that Switch forwards to payeefsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"                var jsonData = response.json().data;",
									"                pm.test(\"payeefsp data should have the same amount as request and 4 decimal checked\", function () {",
									"                   pm.expect(+jsonData.amount.amount).to.eql(pm.environment.get(\"transferAmount\"));",
									"                });",
									"                ",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"          }",
									"   });",
									"}, 1100)",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a1bc5c1d-f7bb-4635-806d-302c2de66a57",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set('transferExpiration',new Date(new Date().getTime() + 600000));",
									"pm.environment.set('transferAmount', 1.9999);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							},
							{
								"key": "FSPIOP-URI",
								"value": "/transfers",
								"type": "text"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "POST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Error 2001 Internal server error #742",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b1cabbe5-3b38-4bf5-91eb-e0308bb1f528",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Check Malformed syntax error\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
									"});",
									"",
									"pm.test(\"Check Error code 3101\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"payer10\",\n  \"currency\": \"A#\"\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Error 3003 Add Party information error #742",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de53e397-c20b-4a51-b645-e4420a4b8abc",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Check ID missing\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Add Party information error');",
									"});",
									"",
									"pm.test(\"Check Error code 3003\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3003');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{payerfsp}}\",\n  \"currency\": \"XOF\"\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
							],
							"path": [
								"participants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Error 3100  validation error#742",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "67c33f40-b4f5-4326-8951-aa4f906f03e4",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check Generic validation error\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Generic validation error');",
									"});",
									"",
									"pm.test(\"Check Error code 3100\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3100');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6584feb6-bed3-4094-8a52-405f5047bd43",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));",
									"pm.environment.set('transferAmount', 1.11);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							},
							{
								"key": "FSPIOP-URI",
								"value": "/transfers",
								"type": "text"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "POST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payerFsp1\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Error 3101 Malformed syntax #742",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "16a1f0c1-ffc0-4d18-a5ca-ce894a3c8475",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check Malformed syntax\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
									"});",
									"",
									"pm.test(\"Check Error code 3101\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f8341537-1573-4357-b5c3-33f2aa4f2a18",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000));",
									"pm.environment.set(\"transderAmount\", 1.11);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							},
							{
								"key": "FSPIOP-URI",
								"type": "text",
								"value": "/transfers"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"type": "text",
								"value": "POST"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}+1\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Error 3102  Missing mandatory element#742",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3af2e14a-9656-414c-b14d-d801539bf433",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check Missing mandatory element\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element');",
									"});",
									"",
									"pm.test(\"Check Error code 3102\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "58646a9b-9b32-4e15-b45e-1903ff1105df",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000));",
									"pm.environment.set('transferAmount', 1.11);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							},
							{
								"key": "FSPIOP-URI",
								"value": "/transfers",
								"type": "text"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "POST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check FSPIOP-URI header #733",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c72ad27-608c-45f5-a73a-3b6bd0eb8766",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"//Check the request that Switch forwards to payeefsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"              ",
									"              //Check the Headers",
									"              var headers = response.json().headers;",
									"                ",
									"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
									"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
									"                });",
									"                ",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"",
									"          }",
									"   });",
									"}, 1100)",
									"",
									"//Check the callback response that Switch forwards to payerfsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"            //Checking headers",
									"            var headers = response.json().headers;",
									"           ",
									"            pm.test(\"payerfsp fspiop-uri includes transfers\", function () {",
									"                pm.expect(headers['fspiop-uri']).to.include('/transfers');",
									"            });",
									"            ",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"",
									"          }",
									"   });",
									"}, 1300)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "97d5e2f7-be96-4391-9904-c174c8ed41af",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));",
									"pm.environment.set('transferAmount', 1.11);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							},
							{
								"key": "FSPIOP-URI",
								"type": "text",
								"value": "/transfers"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"type": "text",
								"value": "POST"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Settlements Error #956",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d9c7cc4a-476b-4e4d-af50-6259d71cb6a9",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check Malformed syntax\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
									"});",
									"",
									"pm.test(\"Check Error code 3101\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?participantId=0&state=open",
							"host": [
								"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
							],
							"path": [
								"settlementWindows"
							],
							"query": [
								{
									"key": "participantId",
									"value": "0"
								},
								{
									"key": "state",
									"value": "open",
									"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
								},
								{
									"key": "fromDateTime",
									"value": "",
									"disabled": true
								},
								{
									"key": "toDateTime",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "State, OPEN is case sensitive.\nTocheck invalid request I have provided state = \"open\""
					},
					"response": []
				},
				{
					"name": "Check FSPIOP Headers from Switch #883",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb45db1f-8153-4805-8998-6710c6cce08f",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"",
									"setTimeout(function () {",
									"  partyId = pm.variables.get(\"InexistentPartyId\");",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\") + `/payerfsp/callbacks/${partyId}`, function (err, response) {",
									"      responseBody = response.json();",
									"      pm.test(\"Expect simulator to return response\", () => {",
									"          pm.expect(response.responseSize).to.be.above(0);",
									"      })",
									"      pm.test(`Expect FSPIO-URI header to be /parties/MSISDN/${partyId}/error`, function () {",
									"          pm.expect(responseBody.headers).to.have.property(\"fspiop-uri\");",
									"          pm.expect(responseBody.headers[\"fspiop-uri\"]).to.equal(`/parties/MSISDN/${partyId}/error`);",
									"        });",
									"        pm.test(\"Expected FSPIO-HTTP-Method header to be PUT\", function () {",
									"            pm.expect(responseBody.headers).to.have.property(\"fspiop-http-method\");",
									"            pm.expect(responseBody.headers[\"fspiop-http-method\"]).to.equal(\"PUT\");",
									"        });",
									"    });",
									"}, 6000)",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "261c80a3-bd7b-40e0-92dc-3fbf797d45f0",
								"exec": [
									"pm.environment.set('dateHeader', (new Date()).toUTCString());",
									"pm.variables.set('InexistentPartyId', 1999999)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.interoperability.parties+json;version=1"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"type": "text",
								"value": "{{payerfsp}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/vnd.interoperability.parties+json;version=1.0"
							}
						],
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{InexistentPartyId}}",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"parties",
								"MSISDN",
								"{{InexistentPartyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check FSPIOP Headers from ML-API-Adapter #1032",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49c14789-374e-48ae-bf7c-52ec1a62c9bc",
								"exec": [
									"pm.test(\"Status code is 202\", () => {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(() => {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\" + pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"            const responseBody = response.responseSize ? response.json() : null;",
									"            const headers = responseBody.headers || null;",
									"            const transferId = pm.environment.get(\"transfer_ID\");",
									"            ",
									"            pm.test(\"Expect simulator to return response\", () => {",
									"                  pm.expect(response.responseSize).to.be.above(0);",
									"              })",
									"            pm.test(\"payerfsp fspiop-source is switch\", () => {",
									"                pm.expect(headers['fspiop-source']).to.eql('switch');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-destination is payerfsp\", () => {",
									"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", () => {",
									"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp accept is empty\", () => {",
									"                pm.expect(headers['accept']).to.eql(undefined);",
									"            });",
									"            ",
									"            pm.test(\"fspiop-signature is empty\", () => {",
									"                pm.expect(headers['fspiop-signature']).to.eql(undefined);",
									"            });",
									"            ",
									"            pm.test(\"fspiop-uri contains transfers/\"+transferId+\"/error\", function () {",
									"                pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${transferId}/error`);",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-http-method is PUT\", () => {",
									"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
									"            });",
									"            ",
									"            pm.test(\"Response data does not have transferId\", () => {",
									"               pm.expect(responseBody.data.transferId).to.eql(undefined);",
									"            });",
									"            ",
									"            pm.test(\"Response status is not COMMITTED\", () => {",
									"                pm.expect(responseBody.data.transferState).to.not.eql('COMMITTED');",
									"            });",
									"   });",
									"}, 12000)",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8ee1d636-f513-477d-be69-bc8a3bc8f2b0",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set('transferExpiration',new Date(new Date().getTime() + 10000));",
									"pm.environment.set('transferAmount', 1.9999);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							},
							{
								"key": "FSPIOP-URI",
								"type": "text",
								"value": "/transfers"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"type": "text",
								"value": "POST"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "40ddd17f-e1c1-4585-951e-90409459ce96",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4a738adb-2cc7-4a22-9796-4e9fcd0d0c21",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}