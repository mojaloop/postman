{
	"info": {
		"_postman_id": "645ab24f-4dd5-402a-96b3-e53b6e3ffc8a",
		"name": "Golden_Path",
		"description": "Purpose: To setup a newly deployed Mojaloop Switch and add test FSPs along with their callback and other Information needed for end-to-end testing.\n\nContributors:\n- Mowali\n- Amar Ramachandran <amarnath.ramachandran@modusbox.com>\n- Georgi Georgiev <georgi.georgiev@modusbox.com>\n- Juan Correa <juan.correa@modusbox.com>\n- Miguel deBarros <miguel.debarros@modusbox.com>\n- Nico Duvenage <nico.duvenage@modusbox.com>\n- Sam Kummary <sam@modusbox.com>\n- Sri Miryala <sridevi.miriyala@modusbox.com>\n- Steven Oderayi <steven.oderayi@modusbox.com>\n- valentin genev <valentin.genev@modusbox.com>\n- Vijay Guthi <vijaya.guthi@modusbox.com>",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Pre-test-setup",
			"item": [
				{
					"name": "Run-sample-quotes-transfers-to-prep-simulator",
					"item": [
						{
							"name": "Send Quote",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8a543d07-9bf5-4480-acc5-52ae801b8a51",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('quoteId', generatedUUID);",
											"generatedUUID = uuid.v4();",
											"pm.environment.set('transactionId', generatedUUID);",
											"pm.environment.set('quoteDate', (new Date()).toUTCString());",
											"pm.environment.set('transferAmount', 60);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "41f27fd6-e121-4dfb-978e-fe10e7ec068f",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "payeefsp"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b97208e3-9a07-4f02-a09a-a655df6940b1",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd5dc839-8bfc-4ad2-899e-0774a3648567",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transfer_ID', generatedUUID);",
											"pm.environment.set('transferDate', (new Date()).toUTCString());",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"pm.environment.set('transferAmount', 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "FSPIOP-URI",
										"value": "/transfers",
										"type": "text"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1d27633d-a5bf-4fbf-814a-6904909bc297",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5275aa17-dfce-4c0b-805b-2243eaa82793",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "194f311b-a525-4f1f-a9c3-213bced367df",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "56e36388-13a5-40de-be5a-93d728857bd3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "p2p_money_transfer",
			"item": [
				{
					"name": "p2p_happy_path SEND QUOTE",
					"item": [
						{
							"name": "Add User - {{pathfinderMSISDN}} to payeefsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "35841dd2-24a7-4aa9-a751-a7561debe812",
										"exec": [
											"pm.environment.set('fullName', 'Siabelo Maroka');",
											"pm.environment.set('firstName', 'Siabelo');",
											"pm.environment.set('lastName', 'Maroka');",
											"pm.environment.set('dob', '1973-03-03');",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e720d8c6-430d-4096-a3a2-87ede341db64",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"party\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"MSISDN\",\n            \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n            \"fspId\": \"{{payeefsp}}\"\n        },\n        \"name\": \"{{fullName}}\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"dateOfBirth\": \"{{dob}}\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{HOST_SIMULATOR}}/payeefsp/parties/MSISDN/{{pathfinderMSISDN}}",
									"host": [
										"{{HOST_SIMULATOR}}"
									],
									"path": [
										"payeefsp",
										"parties",
										"MSISDN",
										"{{pathfinderMSISDN}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Participant {{pathfinderMSISDN}} against MSISDN Simulator for PayeeFSP",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.participants+json;version=1"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.participants+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "payeefsp"
									},
									{
										"key": "Postman-Token",
										"value": "7aa4c9f3-1738-49f0-8904-7821e2336692,4127ff87-7d17-483c-8e3e-f0b562a16d84"
									},
									{
										"key": "User-Agent",
										"value": "PostmanRuntime/7.11.0"
									},
									{
										"key": "accept-encoding",
										"value": "gzip, deflate"
									},
									{
										"key": "cache-control",
										"value": "no-cache"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fspId\": \"payeefsp\",\n    \"currency\": \"USD\"\n}"
								},
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
									],
									"path": [
										"participants",
										"MSISDN",
										"{{pathfinderMSISDN}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Party Receiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02753b9d-ea6c-4704-91e7-a7e27a16222d",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check data on payee side",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
											"       ",
											"       if(response.responseSize !== 0) { ",
											"       //Checking headers",
											"        var headers = response.json().headers;",
											"         pm.test(\"payeefsp accept should be application/vnd.interoperability.parties+json;version=1\", function () {",
											"            pm.expect(headers['accept']).to.eql('application/vnd.interoperability.parties+json;version=1');",
											"        });",
											"        pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"            pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"        });",
											"        ",
											"        pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
											"            pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"        });",
											"        ",
											"        pm.test(\"payeefsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
											"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
											"        });",
											"        ",
											"       } else {",
											"           pm.test(\"Parties FAILED - payeeFSP\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"           ",
											"       }",
											"      ",
											"    });",
											"}, 4000)",
											"",
											"//Check data on payer side",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
											"       ",
											"       if(response.responseSize !== 0) { ",
											"       //Checking headers",
											"        var headers = response.json().headers;",
											"        pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"            pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"        });",
											"        ",
											"        pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"            pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"        });",
											"        ",
											"        pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
											"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
											"        });",
											"        ",
											"        pm.test(\"payerfsp accept is empty\", function () {",
											"            pm.expect(headers['accept']).to.eql(undefined);",
											"        });",
											"        ",
											"        pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"            pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"        });",
											"        ",
											"        //Checking data",
											"        var jsonData = response.json().data;",
											"       pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
											"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
											"        });",
											"        pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
											"          pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
											"        });",
											"        pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
											"          pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
											"        });  ",
											"        ",
											"       } else {",
											"           pm.test(\"Parties FAILED - payerFSP\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"           ",
											"       }",
											"      ",
											"    });",
											"}, 4000)",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b44d542f-de80-42f4-af62-4a63a314684c",
										"exec": [
											"pm.variables.set('expectedFullName', 'Siabelo Maroka');",
											"pm.variables.set('expectedFirstName', 'Siabelo');",
											"pm.variables.set('expectedLastName', 'Maroka');",
											"pm.variables.set('expectedDOB', '1973-03-03');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.parties+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.parties+json;version=1.0",
										"type": "text"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{pathfinderMSISDN}}",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
									],
									"path": [
										"parties",
										"MSISDN",
										"{{pathfinderMSISDN}}"
									]
								},
								"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2c5775d0-fe73-4a5f-b061-2a43c1f54147",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('quoteId', generatedUUID);",
											"generatedUUID = uuid.v4();",
											"pm.environment.set('transactionId', generatedUUID);",
											"pm.environment.set('quoteDate', (new Date()).toUTCString());",
											"pm.environment.set('transferAmount', 60.11);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "126109c8-3cf0-4055-a175-ef6ead9fdbf1",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check the request that Switch forwards to payeefsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              ",
											"              //Check the Headers",
											"              var headers = response.json().headers;",
											"              ",
											"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-destination is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
											"                    pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
											"                });",
											"                ",
											"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
											"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
											"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"                });",
											"                ",
											"          } else {",
											"              pm.test(\"Quote FAILED\", function () {",
											"                throw new Error('Did not receive request on payee side');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 1100)",
											"",
											"//Check Data on payer side",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"          //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            //Validate protected header inside Signature",
											"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
											"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
											"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
											"            ",
											"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
											"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
											"            });",
											"            ",
											"",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
											"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
											"            });",
											"           ",
											"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            ",
											"          pm.test(\"Response fees is returned\", function () {",
											"                pm.expect(jsonData.payeeFspFee.amount).equal(\"1\");",
											"                ",
											"            });",
											"            pm.test(\"Response Commission is returned\", function () {",
											"                pm.expect(jsonData.payeeFspCommission.amount).equal(\"1\");",
											"                ",
											"            });",
											"            ",
											"            pm.test(\"Response ilpPacket is not undefined\", function () {",
											"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
											"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
											"            });",
											"       ",
											"           pm.test(\"Response condition is not undefined\", function () {",
											"               pm.expect(jsonData.condition).not.equal(undefined);",
											"               pm.environment.set(\"condition\", jsonData.condition);",
											"           });",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"",
											"      }",
											"       ",
											"   });",
											"}, 1000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "payeefsp"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ca737a3-d310-409f-9a78-b80992944536",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check the request that Switch forwards to payeefsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              ",
											"              //Check the Headers",
											"              var headers = response.json().headers;",
											"              ",
											"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
											"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
											"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
											"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
											"                    pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
											"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
											"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
											"                });",
											"                ",
											"                ",
											"                //Check the data",
											"                var jsonData = response.json().data;",
											"                pm.test(\"payeefsp data should have the same transferId as request\", function () {",
											"                   pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same payerfspId as request\", function () {",
											"                   pm.expect(jsonData.payerFsp).to.eql(pm.environment.get(\"payerfsp\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same payeefspId as request\", function () {",
											"                   pm.expect(jsonData.payeeFsp).to.eql(pm.environment.get(\"payeefsp\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same amount as request\", function () {",
											"                   pm.expect(+jsonData.amount.amount).to.eql(pm.environment.get(\"transferAmount\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same currency as request\", function () {",
											"                   pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same expiration as request\", function () {",
											"                   pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
											"                   pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same condition as request\", function () {",
											"                   pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
											"                });",
											"                ",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"",
											"          }",
											"   });",
											"}, 1100)",
											"",
											"//Check the callback response that Switch forwards to payerfsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"            //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-uri includes transfers\", function () {",
											"                pm.expect(headers['fspiop-uri']).to.include('/transfers');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            pm.test(\"Response data does not have transferId\", function () {",
											"               pm.expect(jsonData.transferId).to.eql(undefined);",
											"            });",
											"            pm.test(\"Response status is COMMITTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
											"            });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"",
											"          }",
											"   });",
											"}, 1300)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "751a9796-4bef-45a9-b254-b662235d8de6",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transfer_ID', generatedUUID);",
											"pm.environment.set('transferDate', (new Date()).toUTCString());",
											"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));",
											"pm.environment.set('transferAmount', 1.11);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "FSPIOP-URI",
										"value": "/transfers",
										"type": "text"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "p2p_happy_path RECEIVE_QUOTE",
					"item": [
						{
							"name": "Add User - {{pathfinderMSISDN}} to payeefsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cf763e5b-40cf-47be-a056-434e1c290fc2",
										"exec": [
											"pm.environment.set('fullName', 'Siabelo Maroka');",
											"pm.environment.set('firstName', 'Siabelo');",
											"pm.environment.set('lastName', 'Maroka');",
											"pm.environment.set('dob', '1973-03-03');",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "79068df5-cdfa-482d-b1e5-d5991cba2ccc",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"party\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"MSISDN\",\n            \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n            \"fspId\": \"{{payeefsp}}\"\n        },\n        \"name\": \"{{fullName}}\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"dateOfBirth\": \"{{dob}}\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{HOST_SIMULATOR}}/payeefsp/parties/MSISDN/{{pathfinderMSISDN}}",
									"host": [
										"{{HOST_SIMULATOR}}"
									],
									"path": [
										"payeefsp",
										"parties",
										"MSISDN",
										"{{pathfinderMSISDN}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Party Receiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0de5daf-55f4-45d5-bdc3-a3e63fa88242",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check data on payee side",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
											"       ",
											"       if(response.responseSize !== 0) { ",
											"       //Checking headers",
											"        var headers = response.json().headers;",
											"        pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"            pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"        });",
											"        ",
											"        pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
											"            pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"        });",
											"        ",
											"        pm.test(\"payeefsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
											"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
											"        });",
											"        ",
											"        //pm.test(\"payeefsp accept should be application/vnd.interoperability.parties+json;version=1\", function () {",
											"        //    pm.expect(headers['accept']).to.eql('should be application/vnd.interoperability.parties+json;version=1');",
											"        //});",
											"        // pm.test(\"payeefsp FSPIOP-URI to be /parties\", function () {",
											"        //     pm.expect(headers['fspiop-uri']).to.eql('/parties');",
											"        // });",
											"        ",
											"        // pm.test(\"payeefsp fspiop-http-method is GET\", function () {",
											"        //     pm.expect(headers['fspiop-http-method']).to.eql('GET');",
											"        // });",
											"        ",
											"        ",
											"        ",
											"       } else {",
											"           pm.test(\"Parties FAILED - payeeFSP\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"           ",
											"       }",
											"      ",
											"    });",
											"}, 4000)",
											"",
											"//Check data on payer side",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
											"       ",
											"       if(response.responseSize !== 0) { ",
											"       //Checking headers",
											"        var headers = response.json().headers;",
											"        pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"            pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"        });",
											"        ",
											"        pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"            pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"        });",
											"        ",
											"        pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
											"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
											"        });",
											"        ",
											"        pm.test(\"payerfsp accept is empty\", function () {",
											"            pm.expect(headers['accept']).to.eql(undefined);",
											"        });",
											"       ",
											"        //pm.test(\"payerfsp FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
											"        //    pm.expect(headers['fspiop-uri']).to.eql('/parties/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
											"        //});",
											"        ",
											"        pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"            pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"        });",
											"        ",
											"        //Checking data",
											"        var jsonData = response.json().data;",
											"       pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
											"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
											"        });",
											"        pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
											"          pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
											"        });",
											"        pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
											"          pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
											"        });  ",
											"        ",
											"       } else {",
											"           pm.test(\"Parties FAILED - payerFSP\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"           ",
											"       }",
											"      ",
											"    });",
											"}, 4000)",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "92560e53-8067-419c-a521-08f501bf774e",
										"exec": [
											"pm.variables.set('expectedFullName', 'Siabelo Maroka');",
											"pm.variables.set('expectedFirstName', 'Siabelo');",
											"pm.variables.set('expectedLastName', 'Maroka');",
											"pm.variables.set('expectedDOB', '1973-03-03');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.parties+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.parties+json;version=1.0",
										"type": "text"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{pathfinderMSISDN}}",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
									],
									"path": [
										"parties",
										"MSISDN",
										"{{pathfinderMSISDN}}"
									]
								},
								"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
							},
							"response": []
						},
						{
							"name": "Send Quote_RECEIVE",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "60b46dac-5aa0-4ba7-a661-8f234c336915",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('quoteId', generatedUUID);",
											"generatedUUID = uuid.v4();",
											"pm.environment.set('transactionId', generatedUUID);",
											"pm.environment.set('quoteDate', (new Date()).toUTCString());",
											"pm.environment.set('transferAmount', 60);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e143bc50-b9ec-475f-af1a-84b12b4ffabd",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check the request that Switch forwards to payeefsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              ",
											"              //Check the Headers",
											"              var headers = response.json().headers;",
											"              ",
											"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-destination is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
											"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
											"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"                });",
											"                ",
											"          } else {",
											"              pm.test(\"Quote FAILED\", function () {",
											"                throw new Error('Did not receive request on payee side');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 1100)",
											"",
											"//Check Data on payer side",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"          //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"          ",
											"            pm.test(\"Response ilpPacket is not undefined\", function () {",
											"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
											"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
											"            });",
											"       ",
											"           pm.test(\"Response condition is not undefined\", function () {",
											"               pm.expect(jsonData.condition).not.equal(undefined);",
											"               pm.environment.set(\"condition\", jsonData.condition);",
											"           });",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"",
											"      }",
											"       ",
											"   });",
											"}, 1000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "payeefsp"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"RECEIVE\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7cf01bf9-75e8-4b6a-bf7d-334429a66d32",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check the request that Switch forwards to payeefsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              ",
											"              //Check the Headers",
											"              var headers = response.json().headers;",
											"              ",
											"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
											"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
											"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
											"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
											"                    pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
											"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
											"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
											"                });",
											"                ",
											"                ",
											"                //Check the data",
											"                var jsonData = response.json().data;",
											"                pm.test(\"payeefsp data should have the same transferId as request\", function () {",
											"                   pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same payerfspId as request\", function () {",
											"                   pm.expect(jsonData.payerFsp).to.eql(pm.environment.get(\"payerfsp\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same payeefspId as request\", function () {",
											"                   pm.expect(jsonData.payeeFsp).to.eql(pm.environment.get(\"payeefsp\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same amount as request\", function () {",
											"                   pm.expect(+jsonData.amount.amount).to.eql(pm.environment.get(\"transferAmount\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same currency as request\", function () {",
											"                   pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same expiration as request\", function () {",
											"                   pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
											"                   pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same condition as request\", function () {",
											"                   pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
											"                });",
											"                ",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"",
											"          }",
											"   });",
											"}, 1100)",
											"",
											"//Check the callback response that Switch forwards to payerfsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"            //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            // pm.test(\"fspiop-signature is returned\", function () {",
											"            //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"payeefsp_fspiop_signature\"));",
											"            // });",
											"           ",
											"            ",
											"            pm.test(\"payerfsp fspiop-uri includes transfers\", function () {",
											"                pm.expect(headers['fspiop-uri']).to.include('/transfers');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            pm.test(\"Response data does not have transferId\", function () {",
											"               pm.expect(jsonData.transferId).to.eql(undefined);",
											"            });",
											"            pm.test(\"Response status is COMMITTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
											"            });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"",
											"          }",
											"   });",
											"}, 1300)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4669137c-c030-4651-800b-d797ddb3712e",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transfer_ID', generatedUUID);",
											"pm.environment.set('transferDate', (new Date()).toUTCString());",
											"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));",
											"pm.environment.set('transferAmount', 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "FSPIOP-URI",
										"value": "/transfers",
										"type": "text"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ddbee61a-0972-4be5-a574-5d5e81f4ada6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6001c8d9-cf8a-4022-a790-e52ec7911bbe",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3e5c5391-95ce-48c3-9977-1a525d788359",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "986f3d70-de8d-43d3-a581-b208fe542ae7",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "block_transfer ( p>ndc )",
			"item": [
				{
					"name": "GET limits-payerfsp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09199496-ae43-4edf-80f9-e5911b7a0abc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var payerNDC = jsonData[0].limit.value",
									"pm.environment.set(\"payerNDC\",payerNDC)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payerfsp/limits",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"payerfsp",
								"limits"
							]
						},
						"description": "review the payerfsp limits/NDC"
					},
					"response": []
				},
				{
					"name": "GET limits -payeefsp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4fc310f4-8aa9-47ea-bd18-694abb196b84",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var payeeNDC = jsonData[0].limit.value",
									"pm.environment.set('payeeNDC',payeeNDC)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payeefsp}}/limits",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payeefsp}}",
								"limits"
							]
						},
						"description": "review payeefsp limits/NDC"
					},
					"response": []
				},
				{
					"name": "Get payerfsp position before TheTransfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89f53d4e-5d2c-468a-95ac-0eea8376eecf",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var result;",
									"",
									"jsonData.forEach( entry => {(entry.currency === pm.environment.get(\"currency\")) ? result = entry.value: result =",
									" undefined})",
									"",
									"pm.test(\"Atleast one account position should be returned\", function () {",
									"    pm.environment.set(\"payerfspPositionBeforeTransfer\", result);",
									"    pm.expect(jsonData).to.be.not.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/positions",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}",
								"positions"
							]
						},
						"description": "view payerfsp current position before sending the transfer"
					},
					"response": []
				},
				{
					"name": "Get payeefsp position before TheTransfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5212e5ab-17a4-43a1-b62a-1314e134da8a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var result;",
									"",
									"jsonData.forEach( entry => {(entry.currency === pm.environment.get(\"currency\")) ? result = entry.value: result =",
									" undefined})",
									"",
									"pm.test(\"Atleast one account position should be returned\", function () {",
									"    pm.environment.set(\"payeefspPositionBeforeTransfer\", result);",
									"    pm.expect(jsonData).to.be.not.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payeefsp}}/positions",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payeefsp}}",
								"positions"
							]
						},
						"description": "Get payeefsp current position before sending the transfer"
					},
					"response": []
				},
				{
					"name": "Send Quote",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "271b6698-f30f-497e-915e-31ca135396d2",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"   ",
									"pm.environment.set('quoteId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"",
									"var amount = Number(pm.variables.get(\"payerNDC\")) - Number( pm.variables.get(\"payerfspPositionBeforeTransfer\")) + 100",
									"pm.environment.set('transferAmount', amount)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fdd685ee-f17a-4484-9503-993d78b93dc5",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"      if(response.responseSize !== 0) {",
									"          console.log(response.json());",
									"       pm.test(\"Response ilpPacket is not undefined\", function () {",
									"           pm.expect(response.json().ilpPacket).not.equal(undefined);",
									"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
									"       });",
									"       ",
									"       pm.test(\"Response condition is not undefined\", function () {",
									"           pm.expect(response.json().condition).not.equal(undefined);",
									"           pm.environment.set(\"condition\", response.json().condition);",
									"       });",
									"      } else {",
									"          pm.test(\"Quote FAILED\", function () {",
									"            throw new Error('Did not receive response');",
									"           });",
									"",
									"      }",
									"       ",
									"   });",
									"}, 1000)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-SOurce",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						},
						"description": "send a quote request for a specified amount. The ilp packet and condition that generates in quotes response body is used to send transfers request."
					},
					"response": []
				},
				{
					"name": "Send Block Transfer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3faa3153-12ea-4455-b99b-3935466c5acf",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
									"",
									"var amount = Number(pm.environment.get(\"payerNDC\")) - Number( pm.variables.get(\"payerfspPositionBeforeTransfer\")) + 100",
									"pm.environment.set('transferAmount', amount)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "69ae6016-bc35-4b43-a2c4-22ae27124e14",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"              var jsonData = response.json();",
									"              pm.test(\"Error Code should be returned '4001'\", function () {",
									"                pm.expect(jsonData.errorInformation.errorCode).to.eql('4001');",
									"              });",
									"              pm.test(\"Error Description should be returned\", function () {",
									"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Payer FSP insufficient liquidity');",
									"              });",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"              ",
									"          }",
									"   });",
									"}, 5000)",
									"",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"              var jsonData = response.json().data;",
									"              var headers = response.json().headers;",
									"              const transferId = pm.environment.get(\"transfer_ID\");",
									"              ",
									"              pm.test(\"Error Code should be returned\", function () {",
									"                pm.expect(jsonData.errorInformation.errorCode).to.eql('4001');",
									"              });",
									"              pm.test(\"Error Description should be returned\", function () {",
									"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Payer FSP insufficient liquidity');",
									"              });",
									"              pm.test(\"fspiop-source is switch\", function () {",
									"                pm.expect(headers['fspiop-source']).to.eql('switch');",
									"            });",
									"",
									"            pm.test(\"fspiop-destination is payerfsp\", function () {",
									"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
									"            });",
									"            ",
									"            pm.test(\"fspiop-signature is empty\", function () {",
									"                pm.expect(headers['fspiop-signature']).to.eql(undefined);",
									"            });",
									"            ",
									"            pm.test(\"accept is empty\", function () {",
									"                pm.expect(headers['accept']).to.eql(undefined);",
									"            });",
									"            ",
									"            pm.test(\"content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
									"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
									"            });",
									"            ",
									"            pm.test(\"fspiop-uri contains transfers/\"+transferId+\"/error\", function () {",
									"                pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${transferId}/error`);",
									"            });",
									"            ",
									"            pm.test(\"fspiop-http-method is empty\", function () {",
									"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
									"            });",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"              ",
									"          }",
									"   });",
									"}, 5000)",
									"",
									"pm.environment.set('transferAmount', 100);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						},
						"description": "send a tranfer request with ilp packet and condition that are generated in quotes response along with expiry, fspiop source,fspiop destination, amount and currency."
					},
					"response": []
				},
				{
					"name": "Get payerfsp position after the transfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "122eee87-2712-42c3-aa8b-668e873f0d86",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Position before and after the transfer should be the same\", function () {",
									"    pm.expect(jsonData[0].value).to.eql(pm.environment.get(\"payerfspPositionBeforeTransfer\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/positions",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}",
								"positions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get payeefsp position after the transfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80b9c885-9c4b-41df-ae88-fada7f1be882",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Position before and after the transfer should be the same\", function () {",
									"    pm.expect(Number(jsonData[0].value)).to.eql(Number(pm.environment.get(\"payeefspPositionBeforeTransfer\")));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payeefsp}}/positions",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payeefsp}}",
								"positions"
							]
						}
					},
					"response": []
				}
			],
			"description": "Author: Sridevi Miriyala\n\nThis features testes, if a transfer is blocked when position of a participant exceeds the Net Debit Cap for the transfer amount.\n\nSTEPS:\n\nGET Limits\nGET Positions for payer and payee\nset amount=(NDC-P) + 10\nPOST Quotes - send to payee that responds COMMITTED\nPOST Transfers-Prepare\n      -Payerfsp should get error msg \"insufficient liquidity in payerfsp to perform transfer \" \nGET positions - \n  current payer position = prev position \n  current payee position = prev position \n(Failure of the transfer due to insufficient liquidity from payerfsp, results no change in positions)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5262f5db-7161-4147-994a-16a6a276a63d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c78870f4-e60f-4f36-9434-736d61c0b2e3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "funds_in",
			"item": [
				{
					"name": "Record Funds In - prepare",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "db6dbf1c-e39b-40ff-a63b-ebbc9a182cd4",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('fundsInPrepareTransferId', generatedUUID);",
									"pm.environment.set('fundsInPrepareAmount', 5000);",
									"",
									"",
									"const payerfspGetStatusRequest = {",
									"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
									"  method: 'GET',",
									"  header: {",
									"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"      \"Content-Type\": \"application/json\"",
									"  }",
									"};",
									"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
									"    console.log(response.json())",
									"    var jsonData = response.json()",
									"    for(var i in jsonData) {",
									"        if((jsonData[i].ledgerAccountType === 'SETTLEMENT') && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
									"            pm.environment.set(\"payerfspSettlementAccountId\",jsonData[i].id)",
									"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsIn\",jsonData[i].value)",
									"        }",
									"    }",
									"});",
									"",
									"const hubGetStatusRequest = {",
									"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
									"  method: 'GET',",
									"  header: {",
									"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"      \"Content-Type\": \"application/json\"",
									"  }",
									"};",
									"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
									"    console.log(response.json())",
									"    var jsonData = response.json()",
									"    for(var i in jsonData) {",
									"        if((jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
									"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsIn\",jsonData[i].value)",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "31af81f3-1725-49a5-813a-777273432a47",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(function () {",
									"    const payerfspGetStatusRequest = {",
									"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
									"      method: 'GET',",
									"      header: {",
									"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"          \"Content-Type\": \"application/json\"",
									"      }",
									"    };",
									"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
									"        console.log('payerfsp accounts: ',response.json())",
									"        var jsonData = response.json()",
									"        var payerfspSettlementAccountBalanceAfterFundsIn",
									"        for(var i in jsonData) {",
									"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT'  && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
									"                payerfspSettlementAccountBalanceAfterFundsIn = jsonData[i].value",
									"            }",
									"        }",
									"        var payerfspExpectedBalance = -(-Number(pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsIn')) + Number(pm.environment.get('fundsInPrepareAmount')))",
									"        pm.test(\"Final Payerfsp Settlement Account Balance should be same as before FundsIn + fundsInPrepareAmount\", function () {",
									"            pm.expect(payerfspSettlementAccountBalanceAfterFundsIn).to.eql(payerfspExpectedBalance);",
									"          });    ",
									"    ",
									"    });",
									"    ",
									"    const hubGetStatusRequest = {",
									"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
									"      method: 'GET',",
									"      header: {",
									"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"          \"Content-Type\": \"application/json\"",
									"      }",
									"    };",
									"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
									"        console.log('Hub accounts balance: ',response.json())",
									"        var jsonData = response.json()",
									"        var currentHubReconAccountBalance",
									"        for(var i in jsonData) {",
									"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION'  && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
									"                hubReconAccountBalanceAfterFundsIn = jsonData[i].value",
									"            }",
									"        }",
									"        var hubExpectedBalance = Number(pm.environment.get(\"hubReconAccountBalanceBeforeFundsIn\"))+Number(pm.environment.get('fundsInPrepareAmount'))",
									"        console.log(hubExpectedBalance)",
									"        pm.test(\"Final Hub Reconciliation Account Balance should be same as before FundsIn + fundsInPrepareAmount\", function () {",
									"            pm.expect(hubReconAccountBalanceAfterFundsIn).to.eql(hubExpectedBalance);",
									"          });  ",
									"    });",
									"}, 2000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "FSPIOP-Source",
								"type": "text",
								"value": "{{hub_operator}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{fundsInPrepareTransferId}}\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsIn\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": \"{{fundsInPrepareAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}",
								"accounts",
								"{{payerfspSettlementAccountId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Record Funds In - prepare transfer status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f7f6e0b2-443e-43c6-99be-319df1ea62ef",
								"exec": [
									"pm.environment.set('dateHeader', (new Date()).toUTCString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6b81a2df-6bd2-4cd4-911d-711a4ea68433",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(function () {",
									"    ",
									"    const getTransferResponse = {",
									"      url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"fundsInPrepareTransferId\"),",
									"      method: 'GET',",
									"      header: {",
									"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
									"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"          \"Content-Type\": \"application/json\"",
									"      }",
									"    };",
									"    pm.sendRequest(getTransferResponse, function (err, response) {",
									"        var jsonData = response.json().data",
									"        pm.test(\"Transfer State should be COMMITTED\", function () {",
									"            pm.expect(jsonData.transferState).to.eql(\"COMMITTED\");",
									"          });    ",
									"    ",
									"    });",
									"}, 2000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							}
						],
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsInPrepareTransferId}}",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers",
								"{{fundsInPrepareTransferId}}"
							]
						},
						"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
					},
					"response": []
				}
			],
			"description": "Aurhor: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6ea97a47-c83d-44e3-97c8-3fe1c782c577",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "07599864-4f29-4df1-b899-b8987db9058b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "funds_out",
			"item": [
				{
					"name": "Reserve&Commit",
					"item": [
						{
							"name": "Record Funds Out Prepare&Reserve- payerfsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2eb970f4-737d-4bfa-b7e9-74d1204c9bda",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('fundsOutPrepareReserveTransferId', generatedUUID);",
											"pm.environment.set('fundsOutPrepareReserveAmount', 1000);",
											"",
											"const payerfspGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"",
											"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"payerfspSettlementAccountId\",jsonData[i].id)",
											"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutPrepare\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											"",
											"const hubGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutPrepare\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "59d8135a-0053-46b2-8bb4-4130166f16e0",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    const payerfspGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var payerfspSettlementAccountBalanceAfterFundsOutPrepare",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                payerfspSettlementAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
											"            }",
											"        }",
											"        var payerfspExpectedBalance = -(-Number(pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutPrepare'))- Number(pm.environment.get(\"fundsOutPrepareReserveAmount\")))",
											"        pm.test(\"Final Payerfsp Settlement Account Balance should decrease by the transfer amount\", function () {",
											"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutPrepare).to.eql(payerfspExpectedBalance);",
											"          });    ",
											"    ",
											"    });",
											"    ",
											"    const hubGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var hubReconAccountBalanceAfterFundsOutPrepare",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                hubReconAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
											"            }",
											"        }",
											"        var hubExpectedBalance = pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutPrepare\")",
											"        pm.test(\"Final Hub Reconciliation Account Balance should stay the same in prepare phase\", function () {",
											"            pm.expect(hubReconAccountBalanceAfterFundsOutPrepare).to.eql(hubExpectedBalance);",
											"          });  ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{hub_operator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{fundsOutPrepareReserveTransferId}}\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsOutPrepareReserve\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": {{fundsOutPrepareReserveAmount}},\n    \"currency\": \"{{currency}}\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Record Funds Out Prepare&Reserve - transfer status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1f559b54-d7e8-49e1-b2fe-18bf98515a8d",
										"exec": [
											"pm.environment.set('dateHeader', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0b12fb35-a436-439d-97f2-6e6283f46b41",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    ",
											"    const getTransferResponse = {",
											"      url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"fundsOutPrepareReserveTransferId\"),",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"payerfsp\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(getTransferResponse, function (err, response) {",
											"        var jsonData = response.json().data",
											"        pm.test(\"Transfer State should be RESERVED\", function () {",
											"            pm.expect(jsonData.transferState).to.eql(\"RESERVED\");",
											"          });    ",
											"    ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsOutPrepareReserveTransferId}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{fundsOutPrepareReserveTransferId}}"
									]
								},
								"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
							},
							"response": []
						},
						{
							"name": "Record Funds Out Commit - payerfsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b6c298ff-d40f-403f-a57c-67d8c2a172ea",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('fundsOutCommitTransferId', generatedUUID);",
											"pm.environment.set('fundsOutCommitAmount', 1000);",
											"",
											"",
											"const payerfspGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutCommit\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											"",
											"const hubGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutCommit\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ffe85e04-ba6f-4a9f-9a13-f084df268d88",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    const payerfspGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var payerfspSettlementAccountBalanceAfterFundsOutCommit",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                payerfspSettlementAccountBalanceAfterFundsOutCommit = jsonData[i].value",
											"            }",
											"        }",
											"        var payerfspExpectedBalance = pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutCommit')//-pm.environment.get(\"fundsOutPrepareAmount\")",
											"        pm.test(\"Final Payerfsp Settlement Account Balance should not change during commit phase\", function () {",
											"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutCommit).to.eql(payerfspExpectedBalance);",
											"          });    ",
											"    ",
											"    });",
											"    ",
											"    const hubGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var hubReconAccountBalanceAfterFundsOutCommit",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                hubReconAccountBalanceAfterFundsOutCommit = jsonData[i].value",
											"            }",
											"        }",
											"        var hubExpectedBalance = Number(pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutCommit\")) - Number(pm.environment.get(\"fundsOutCommitAmount\"))",
											"        pm.test(\"Final Hub Reconciliation Account Balance should decrease by the transfer amount\", function () {",
											"            pm.expect(hubReconAccountBalanceAfterFundsOutCommit).to.eql(hubExpectedBalance);",
											"          });  ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUBOPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{hub_operator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"recordFundsOutCommit\",\n  \"reason\": \"Reason for out flow of funds\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}/transfers/{{fundsOutPrepareReserveTransferId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}",
										"transfers",
										"{{fundsOutPrepareReserveTransferId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Record Funds Out Commit - transfer status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "91db6528-faad-44fe-aa7a-1ccbd64365df",
										"exec": [
											"pm.environment.set('dateHeader', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c3030890-aed9-440c-a74b-8c6fa5005a1c",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    ",
											"    const getTransferResponse = {",
											"      url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"fundsOutPrepareReserveTransferId\"),",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(getTransferResponse, function (err, response) {",
											"        var jsonData = response.json().data",
											"        pm.test(\"Transfer State should be COMMITTED\", function () {",
											"            pm.expect(jsonData.transferState).to.eql(\"COMMITTED\");",
											"          });    ",
											"    ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "b3d74594-fa41-3581-acf6-4909aaec8134",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsOutPrepareReserveTransferId}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{fundsOutPrepareReserveTransferId}}"
									]
								},
								"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Reserve&Abort",
					"item": [
						{
							"name": "Record Funds Out Prepare&Reserve- payerfsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f360cb22-b5e2-4478-aad0-fe60f0f0d8a5",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('fundsOutPrepareReserveTransferId', generatedUUID);",
											"pm.environment.set('fundsOutPrepareReserveAmount', 1000);",
											"",
											"const payerfspGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"",
											"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"payerfspSettlementAccountId\",jsonData[i].id)",
											"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutPrepare\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											"",
											"const hubGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutPrepare\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4e264190-1581-4eb7-acfd-50ff9c838864",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    const payerfspGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var payerfspSettlementAccountBalanceAfterFundsOutPrepare",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                payerfspSettlementAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
											"            }",
											"        }",
											"        var payerfspExpectedBalance = -(-Number(pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutPrepare'))- Number(pm.environment.get(\"fundsOutPrepareReserveAmount\")))",
											"        pm.test(\"Final Payerfsp Settlement Account Balance should decrease by the transfer amount\", function () {",
											"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutPrepare).to.eql(payerfspExpectedBalance);",
											"          });    ",
											"    ",
											"    });",
											"    ",
											"    const hubGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var hubReconAccountBalanceAfterFundsOutPrepare",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                hubReconAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
											"            }",
											"        }",
											"        var hubExpectedBalance = pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutPrepare\")//-pm.environment.get(\"fundsOutPrepareReserveAmount\")",
											"        pm.test(\"Final Hub Reconciliation Account Balance should stay the same in prepare phase\", function () {",
											"            pm.expect(hubReconAccountBalanceAfterFundsOutPrepare).to.eql(hubExpectedBalance);",
											"          });  ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{hub_operator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{fundsOutPrepareReserveTransferId}}\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsOutPrepareReserve\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": {{fundsOutPrepareReserveAmount}},\n    \"currency\": \"{{currency}}\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Record Funds Out Prepare&Reserve - transfer status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2ce9f5fc-c9ec-440b-b635-6cb9ee052e4f",
										"exec": [
											"pm.environment.set('dateHeader', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "12b37cd6-7d02-4bd1-8114-2dc539ad8775",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    ",
											"    const getTransferResponse = {",
											"      url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"fundsOutPrepareReserveTransferId\"),",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"payerfsp\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(getTransferResponse, function (err, response) {",
											"        console.log(response.json().data)",
											"        var jsonData = response.json().data",
											"        pm.test(\"Transfer State should be RESERVED\", function () {",
											"            pm.expect(jsonData.transferState).to.eql(\"RESERVED\");",
											"          });    ",
											"    ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsOutPrepareReserveTransferId}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{fundsOutPrepareReserveTransferId}}"
									]
								},
								"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
							},
							"response": []
						},
						{
							"name": "Record Funds Out Abort - payerfsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "257fb7a6-bc9d-478f-a8cd-014d99f2d48a",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('fundsOutCommitAmount', 1000);",
											"",
											"",
											"const payerfspGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutAbort\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											"",
											"const hubGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutAbort\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ea803a42-1c10-4924-98f9-be02d5d78904",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    const payerfspGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var payerfspSettlementAccountBalanceAfterFundsOutAbort",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                payerfspSettlementAccountBalanceAfterFundsOutAbort = jsonData[i].value",
											"            }",
											"        }",
											"        var payerfspExpectedBalance = pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutPrepare')//-pm.environment.get(\"fundsOutPrepareAmount\")",
											"        pm.test(\"Final Payerfsp Settlement Account Balance should rollback to the value before Prepare\", function () {",
											"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutAbort).to.eql(payerfspExpectedBalance);",
											"          });    ",
											"    ",
											"    });",
											"    ",
											"    const hubGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var hubReconAccountBalanceAfterFundsOutCommit",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                hubReconAccountBalanceAfterFundsOutAbort = jsonData[i].value",
											"            }",
											"        }",
											"        var hubExpectedBalance = Number(pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutAbort\"))",
											"        pm.test(\"Final Hub Reconciliation Account Balance should not change\", function () {",
											"            pm.expect(hubReconAccountBalanceAfterFundsOutAbort).to.eql(hubExpectedBalance);",
											"          });  ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUBOPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{hub_operator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"recordFundsOutAbort\",\n  \"reason\": \"Reason for out flow of funds\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}/transfers/{{fundsOutPrepareReserveTransferId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}",
										"transfers",
										"{{fundsOutPrepareReserveTransferId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Record Funds Out Abort - transfer status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "33a9a386-458b-4d07-9097-c0d1e3d0d82a",
										"exec": [
											"pm.environment.set('dateHeader', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b7dca6b1-d1e7-4cd0-84a0-fdd94934f6cd",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    ",
											"    const getTransferResponse = {",
											"      url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"fundsOutPrepareReserveTransferId\"),",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(getTransferResponse, function (err, response) {",
											"        console.log(response.json().data)",
											"        var jsonData = response.json().data",
											"        pm.test(\"Transfer State should be ABORTED\", function () {",
											"            pm.expect(jsonData.transferState).to.eql(\"ABORTED\");",
											"          });    ",
											"    ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "b3d74594-fa41-3581-acf6-4909aaec8134",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsOutPrepareReserveTransferId}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{fundsOutPrepareReserveTransferId}}"
									]
								},
								"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "05912947-c3af-4ca2-ba2c-3d02bc4a6bb4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b9e04af2-25ab-4fd3-9070-dd2d5b941b05",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "settlement_management",
			"item": [
				{
					"name": "SETTLE  settlement",
					"item": [
						{
							"name": "Setup Settlement",
							"item": [
								{
									"name": "Store Settlement&Position Account Balances Before Transfers",
									"item": [
										{
											"name": "testfsp1 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ef243732-9aa3-467a-a28e-13b7d56076f6",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6bdbf372-dd12-45d2-8157-fcaceafde75c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp3 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a2dcd235-6780-434b-aaa0-29c25bd1b323",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp3",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp4 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7696f879-26f5-41d2-a966-da35b72fe8f5",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp4",
														"accounts"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Run Quote & Transfers",
									"item": [
										{
											"name": "Get Existing Open Window(quotes and transfers)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "40f134e3-d82c-4a09-96cd-7590f836785b",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"State should be OPEN\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].state).to.eql('OPEN');",
															"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
															"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows"
													],
													"query": [
														{
															"key": "state",
															"value": "OPEN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close Existing Window(quotes and transfers)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "853e545d-0f1e-4146-9197-a7adfa483d50",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"New window State should be OPEN\", function () {",
															"    console.log(pm.response.json());",
															"    pm.expect(pm.response.json().state).to.eql('OPEN');",
															"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
															"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
															"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
															"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows",
														"{{openWindowID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 1 (testfsp1 to testfsp2)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b74ed280-9647-422e-a5c9-06c26d371db4",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   ",
															"   pm.environment.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   pm.environment.set('transferAmount', 60);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0fc4ca9c-93ae-4907-b6b1-07ba4415f39d",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp1\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp2\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 1 ( testfsp1 to testfsp2 )",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9f24c26d-00cf-43f0-9199-38983934765d",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 120000))",
															"pm.environment.set('transferAmount', 60);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ef83823b-3ca6-467f-a7b6-94b1f165756c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"              });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp1\",\n  \"payeeFsp\": \"testfsp2\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 2 (testfsp1 to testfsp4)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6db8482f-25b8-4f30-b9fa-e275462e7eb6",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('quoteId', generatedUUID);",
															"generatedUUID = uuid.v4();",
															"pm.environment.set('transactionId', generatedUUID);",
															"pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 55.12);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b23b2ffd-8276-4da4-a13c-d207a417e24f",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"//       if(response.responseSize !== 0) {",
															"//           console.log(response.json());",
															"//       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"//           pm.expect(response.json().ilpPacket).not.equal(undefined);",
															"//           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"//       });",
															"       ",
															"//       pm.test(\"Response condition is not undefined\", function () {",
															"//           pm.expect(response.json().condition).not.equal(undefined);",
															"//           pm.environment.set(\"condition\", response.json().condition);",
															"//       });",
															"//       } else {",
															"//           pm.test(\"Quote FAILED\", function () {",
															"//             throw new Error('Did not receive response');",
															"//           });",
															"",
															"//       }",
															"       ",
															"//   });",
															"// }, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp4"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp1\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp4\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 2 (testfsp1 to testfsp4)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "559aec2b-c00d-40da-b9aa-1d8f2c021f76",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 120000));",
															"pm.environment.set('transferAmount', 55.99);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "fd2e58fb-9495-49d2-9754-ff1cb25cc64c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','true')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"",
															"          }",
															"   });",
															"}, 2000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp4"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp1\",\n  \"payeeFsp\": \"testfsp4\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 3 (testfsp3 to testfsp1)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f6785089-a2e7-49c9-b75b-4db8895ded43",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('quoteId', generatedUUID);",
															"generatedUUID = uuid.v4();",
															"pm.environment.set('transactionId', generatedUUID);",
															"pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 35.1);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "47bbe129-f4b5-4b82-b121-63565c61a7b1",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp3/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"//       if(response.responseSize !== 0) {",
															"//           console.log(response.json());",
															"//       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"//           pm.expect(response.json().ilpPacket).not.equal(undefined);",
															"//           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"//       });",
															"       ",
															"//       pm.test(\"Response condition is not undefined\", function () {",
															"//           pm.expect(response.json().condition).not.equal(undefined);",
															"//           pm.environment.set(\"condition\", response.json().condition);",
															"//       });",
															"//       } else {",
															"//           pm.test(\"Quote FAILED\", function () {",
															"//             throw new Error('Did not receive response');",
															"//           });",
															"",
															"//       }",
															"       ",
															"//   });",
															"// }, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP3_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp3"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp3\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp1\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 3 (testfsp3 to testfsp1)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c375d3ce-7d54-4c1d-9e54-e109f99dff42",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
															"pm.environment.set('transferAmount', 35.9);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f33628b3-cdbb-4b79-8b6b-4469d4b044c7",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp3/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP3_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp3"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp3\",\n  \"payeeFsp\": \"testfsp1\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 4 (testfsp2 to testfsp3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f9fe198e-67b3-4699-93de-1bdde7c89121",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   ",
															"   pm.environment.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   pm.environment.set('transferAmount', 20.11);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "345c5a44-574e-46cc-8f68-77d5739b6579",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp2/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"//       if(response.responseSize !== 0) {",
															"//           console.log(response.json());",
															"//       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"//           pm.expect(response.json().ilpPacket).not.equal(undefined);",
															"//           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"//       });",
															"       ",
															"//       pm.test(\"Response condition is not undefined\", function () {",
															"//           pm.expect(response.json().condition).not.equal(undefined);",
															"//           pm.environment.set(\"condition\", response.json().condition);",
															"//       });",
															"//       } else {",
															"//           pm.test(\"Quote FAILED\", function () {",
															"//             throw new Error('Did not receive response');",
															"//           });",
															"",
															"//       }",
															"       ",
															"//   });",
															"// }, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP2_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp2"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp2\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp3\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 4 (testfsp2 to testfsp3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2a649da2-afbf-4df4-9ea3-28642abe99a1",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))",
															"pm.environment.set(\"transferAmount\", 20.32);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2864ceef-a386-44df-b7cc-e2ddbc90b5c9",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp2/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP2_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp2"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp2\",\n  \"payeeFsp\": \"testfsp3\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 5 (testfsp4 to testfsp2)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7488cb77-77a7-4387-a07c-2bc4b9fd83c9",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('quoteId', generatedUUID);",
															"generatedUUID = uuid.v4();",
															"pm.environment.set('transactionId', generatedUUID);",
															"pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 35.124);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "8c61b2ec-cbfb-4f0e-a9e2-9004935fb974",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"//       if(response.responseSize !== 0) {",
															"//           console.log(response.json());",
															"//       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"//           pm.expect(response.json().ilpPacket).not.equal(undefined);",
															"//           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"//       });",
															"       ",
															"//       pm.test(\"Response condition is not undefined\", function () {",
															"//           pm.expect(response.json().condition).not.equal(undefined);",
															"//           pm.environment.set(\"condition\", response.json().condition);",
															"//       });",
															"//       } else {",
															"//           pm.test(\"Quote FAILED\", function () {",
															"//             throw new Error('Did not receive response');",
															"//           });",
															"",
															"//       }",
															"       ",
															"//   });",
															"// }, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp4\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp2\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 5 (testfsp4 to testfsp2)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9f5cd6ef-2ba6-4640-8e24-6e128773d65a",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 120000));",
															"pm.environment.set('transferAmount', 35.987);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f483155a-d874-4e4c-ab4c-96d50f1b7a4f",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp4\",\n  \"payeeFsp\": \"testfsp2\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 6 (testfsp4 to testfsp3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3396a533-40cd-46d3-a14f-b8fb9dd55aa2",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('quoteId', generatedUUID);",
															"generatedUUID = uuid.v4();",
															"pm.environment.set('transactionId', generatedUUID);",
															"pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 25.1234);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ca5fad4f-00af-48ae-81e0-b93943b9faf9",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"//       if(response.responseSize !== 0) {",
															"//           console.log(response.json());",
															"//       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"//           pm.expect(response.json().ilpPacket).not.equal(undefined);",
															"//           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"//       });",
															"       ",
															"//       pm.test(\"Response condition is not undefined\", function () {",
															"//           pm.expect(response.json().condition).not.equal(undefined);",
															"//           pm.environment.set(\"condition\", response.json().condition);",
															"//       });",
															"//       } else {",
															"//           pm.test(\"Quote FAILED\", function () {",
															"//             throw new Error('Did not receive response');",
															"//           });",
															"           ",
															"//       }",
															"       ",
															"//   });",
															"// }, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp4\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp3\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 6 (testfsp4 to testfsp3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "48488c47-2ab9-4739-92d5-92312678dd6f",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000));",
															"pm.environment.set('transferAmount', 25.7657);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "caf12dfa-d0b1-4782-88bf-fb7c5af7fc95",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"",
															"          }",
															"   });",
															"}, 2000)",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp4\",\n  \"payeeFsp\": \"testfsp3\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Create Settlement DEFERREDNET",
									"item": [
										{
											"name": "Get Existing Open Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0ff9873d-12a3-4587-80a6-e7a5037936fb",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"State should be OPEN\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].state).to.eql('OPEN');",
															"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
															"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "payerfsp"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows"
													],
													"query": [
														{
															"key": "state",
															"value": "OPEN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close Existing Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1f7a4045-7d3f-499a-a100-c0a6cd8cf9ad",
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"New window State should be OPEN\", function () {",
															"    console.log(pm.response.json());",
															"    pm.expect(pm.response.json().state).to.eql('OPEN');",
															"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
															"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
															"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
															"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows",
														"{{openWindowID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Settlement for Closed Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4715bbd8-6ab8-46a1-bb3d-940c5aa4d2be",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.environment.set(\"settlementId\", pm.response.json().id);",
															"var jsonData = pm.response.json();",
															"    ",
															"pm.test(\"Settlement State should be PENDING_SETTLEMENT\", function () {",
															"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
															"});",
															"",
															"pm.test(\"Number of associated windows should be 1\", function () {",
															"    pm.expect(jsonData.settlementWindows.length).to.eql(1);",
															"});",
															"",
															"pm.test(\"Associated Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
															"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
															"});",
															"",
															"pm.test(\"Associated Settlement Window state should be PENDING_SETTLEMENT \", function () {",
															"    pm.expect(jsonData.settlementWindows[0].state).to.eql('PENDING_SETTLEMENT');",
															"});",
															"",
															"pm.test(\"Associated number of participants should be 4 \", function () {",
															"    pm.expect(jsonData.participants.length).to.eql(4);",
															"});",
															"",
															"pm.test(\"DEFERREDNET calculation for testfsp1 should be 80.09\", function () {",
															"    pm.expect(jsonData.participants[0].accounts[0].netSettlementAmount.amount).to.eql(80.09);",
															"});",
															"",
															"",
															"pm.test(\"DEFERREDNET calculation for testfsp2 should be -75.667\", function () {",
															"    pm.expect(jsonData.participants[1].accounts[0].netSettlementAmount.amount).to.eql(-75.667);",
															"});",
															"",
															"pm.test(\"DEFERREDNET calculation for testfsp3 should be -10.1857\", function () {",
															"    pm.expect(jsonData.participants[2].accounts[0].netSettlementAmount.amount).to.eql(-10.1857);",
															"});",
															"",
															"pm.test(\"DEFERREDNET calculation for testfsp4 should be 5.7627\", function () {",
															"    pm.expect(jsonData.participants[3].accounts[0].netSettlementAmount.amount).to.eql(5.7627);",
															"});",
															"",
															"for(var j in jsonData.participants) {",
															"    for(var k in jsonData.participants[j].accounts) {",
															"        console.log(jsonData.participants[j].accounts[k].id)",
															"        if(jsonData.participants[j].accounts[k].id === Number(pm.environment.get(\"payerFspAccountId\"))) {",
															"            console.log('payerfspNetSettlementAmount:',jsonData.participants[j].accounts[k].netSettlementAmount.amount)",
															"            pm.environment.set(\"payerfspNetSettlementAmount\",jsonData.participants[j].accounts[k].netSettlementAmount.amount);",
															"        } else if(jsonData.participants[j].accounts[k].id === Number(pm.environment.get(\"payeeFspAccountId\"))) {",
															"            console.log('payeefspNetSettlementAmount:',jsonData.participants[j].accounts[k].netSettlementAmount.amount)",
															"            pm.environment.set(\"payeefspNetSettlementAmount\",jsonData.participants[j].accounts[k].netSettlementAmount.amount);",
															"        }",
															"        ",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"settlementModel\": \"DEFERREDNET\",\n  \"reason\": \"TESTING\",\n  \"settlementWindows\": [\n    {\n      \"id\": {{closedWindowID}}\n    }\n  ]\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Store Settlement&Position Account Balances After Transfers",
									"item": [
										{
											"name": "testfsp1 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7075eda5-5075-440f-b624-d092bbe7eeab",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "543a8b5e-5ef5-4be1-8bfe-b79d0733d12f",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp3 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5917d92b-3215-4e97-8705-ee2aab3dceaa",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp3",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp4 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "de07315f-800d-44e0-88a8-7b530ba92bc8",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp4",
														"accounts"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Prepare Settlement",
							"item": [
								{
									"name": "Prepare Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6656b130-12cf-44c8-a173-0922713871b4",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers recorded for payer\",",
													"                          \"state\": \"PS_TRANSFERS_RECORDED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0f85e18-b89c-4e5c-b994-0f86dc091574",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PS_TRANSFERS_RECORDED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_RECORDED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_RECORDED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_RECORDED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0b44a69-7674-4622-afe8-3f204c7c0710",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterPrepare;",
													"var testfsp1PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"",
													"pm.test(\"Testfsp1 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "115aa2ca-3a17-467c-bea5-8a2f0cc0ccb9",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterPrepare;",
													"var testfsp2PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7719ac5-bce6-4b40-b588-599d9d3a08e7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterPrepare;",
													"var testfsp3PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp3SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp3 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49d91ce6-9e5a-4bb4-a6dc-a687ff7c29f9",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterPrepare;",
													"var testfsp4PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Reserve Settlement",
							"item": [
								{
									"name": "Reserve Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc56a90b-a585-4a13-8b38-a85075744397",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers reserved\",",
													"                          \"state\": \"PS_TRANSFERS_RESERVED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "payerfsp"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26e432c6-3e34-4948-9df5-cffdae9d1314",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PS_TRANSFERS_RESERVED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_RESERVED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_RESERVED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_RESERVED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ae95498-1ecd-4865-902a-431108bae966",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterReserve;",
													"var testfsp1PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp1 position account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1eb6884d-8975-4e9f-8740-8667d071ae5b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterReserve;",
													"var testfsp2PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance after reserve gets increased by its net settlement  amount.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5d53046-b7c2-4b61-9145-192b5f4f1775",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterReserve;",
													"var testfsp3PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp3SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"",
													"pm.test(\"Testfsp3 position account balance after reserve gets increased by its net settlement  amount.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c640d7e0-498f-439b-af1c-fb5ddb7c2e44",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterReserve;",
													"var testfsp4PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Commit Settlement",
							"item": [
								{
									"name": "Commit Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3a6a056-2120-4ab7-86d8-8ef15bd28888",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers committed\",",
													"                          \"state\": \"PS_TRANSFERS_COMMITTED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "payerfsp"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "09513b02-0e03-49c9-a1aa-f8afea1dda1e",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PS_TRANSFERS_COMMITTED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_COMMITTED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_COMMITTED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_COMMITTED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d747416-d123-428c-afeb-6e2bbe7bfb7b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterCommit;",
													"var testfsp1PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp1 position account balance after commit should be reduced by its net settlement amount.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6746212-c156-4226-993f-8ed388f76312",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterCommit;",
													"var testfsp2PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance after reserve gets increased by its net settlement  amount.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78068c58-aac3-416e-b070-c7322dfb1b85",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterCommit;",
													"var testfsp3PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp3 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85e3e63a-1f7c-485e-930e-7665dd840b0c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterCommit;",
													"var testfsp4PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Settle Settlement",
							"item": [
								{
									"name": "Settle Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0a2cba5-07b8-49be-9e9d-8ab17a480327",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers settled for payer\",",
													"                          \"state\": \"SETTLED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "payerfsp"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7206396b-1871-4ae3-90bc-a0b12d8c1b3c",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be SETTLED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"SETTLED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be SETTLED\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"SETTLED\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is SETTLED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"SETTLED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab701f6f-940a-40d8-b6f0-4d3473211b69",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterSettle;",
													"var testfsp1PositionAccountBalanceAfterSettle;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterSettle = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterSettle = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after settle should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterSettle).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp1 position account balance before and  after settle should be the same.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterSettle).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d04e97fc-931a-4a3d-824c-525c5927e97d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterCommit;",
													"var testfsp2PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08e3e640-083d-45a9-a3bc-5e7c8f15a2e6",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterCommit;",
													"var testfsp3PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp3 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84beaafd-3ceb-44fa-874e-e823b4c2fa99",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterCommit;",
													"var testfsp4PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Hub account balance check",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/Hub/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"Hub",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "928c93c3-c519-41e8-b2fd-2aa648b86ebb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "046ad927-8ed2-4856-a35a-260f6660b640",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "transfer_negative_scenarios",
			"item": [
				{
					"name": "payee_abort_v1.1",
					"item": [
						{
							"name": "Store Payerfsp position before prepare",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0e89d35-15ff-4ab2-9a59-3dae3cf19461",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"payerfspPositionBeforePrepare\", jsonData[0].value);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b7c416ae-57e1-43be-b488-c2bb70004356",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Store Payeefsp position before prepare",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ff5eb3f-10c0-47da-8704-a38dc50232b8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"payeefspPositionBeforePrepare\", jsonData[0].value);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "74d8bc8d-0e91-4696-8c0b-af99bf66acd0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payeefsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/noresponsepayeefsp/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"noresponsepayeefsp",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Prepare",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "332cf157-de25-491c-a9f7-4f4422126f7f",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transfer_ID', generatedUUID);",
											"pm.environment.set('transferDate', (new Date()).toUTCString());",
											"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));",
											"pm.environment.set('transferAmount', 99);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5687379a-7487-4ef5-8820-9c8bba1634ab",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "noresponsepayeefsp"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{validCondition}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Store Payerfsp position after Prepare",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f280b9f-e4c7-442b-bfd7-60a943270f01",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"payerfspPositionAfterPrepare\", jsonData[0].value);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "54ff4262-23d4-4d98-91a0-dccc0ff4a463",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Payee Abort - should do nothing but log in fulfil handler",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ac7493b-99a6-4e94-bd5a-9d34084896c4",
										"exec": [
											"// pm.test(\"Status code is 200\", function () {",
											"//     pm.response.to.have.status(200);",
											"// });",
											"",
											"// setTimeout(function () {",
											"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"//           if(response.responseSize !== 0) {",
											"//               var jsonData = response.json();",
											"//               pm.test(\"Response code should be ABORTED\", function () {",
											"//                 pm.expect(jsonData.transferState).to.eql('ABORTED');",
											"//               });",
											"//           } else {",
											"//               pm.test(\"Transfer FAILED\", function () {",
											"//                 throw new Error('Did not receive response');",
											"//               });",
											"              ",
											"//           }",
											"//   });",
											"// }, 5000)",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "caf153c7-eefe-4c78-abfa-1555626c6bd3",
										"exec": [
											"pm.environment.set(\"completedTimestamp\",new Date().toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYEEFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "noresponsepayeefsp"
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"ABORTED\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Fulfill-Reject",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2571cf73-a091-477a-8d5a-90e17d6e8494",
										"exec": [
											"pm.environment.set(\"completedTimestamp\",new Date().toISOString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a5466f9e-9134-4ae6-94d9-3898c37e758b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              //Check headers",
											"              var headers = response.json().headers;",
											"              ",
											"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
											"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
											"                });",
											"                ",
											"                pm.test(\"fspiop-destination is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-destination']).to.eql(pm.environment.get('payerfsp'));",
											"                });",
											"                ",
											"                //Uncomment after JWS is implemented",
											"                // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
											"                //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
											"                // });",
											"                ",
											"                ",
											"                pm.test(\"payeefsp content-type is same as sent in the request\", function () {",
											"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"                });",
											"                ",
											"                pm.test(\"date header should not be empty\", function () {",
											"                    pm.expect(headers['date']).to.be.not.empty;",
											"                });",
											"                ",
											"                pm.test(\"accept header should not be sent in the response\", function () {",
											"                    pm.expect(headers['accept']).to.eql(undefined);",
											"                });",
											"                ",
											"              //Check data",
											"              var jsonData = response.json().data;",
											"              pm.test(\"Response Error Code is 5101\", function () {",
											"                pm.expect(jsonData.errorInformation.errorCode).to.eql('5101');",
											"              });",
											"              ",
											"              pm.test(\"Response Error Desription is 'Payee transaction limit reached'\", function () {",
											"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Payee transaction limit reached');",
											"                //pm.expect(jsonData.errorInformation.errorDescription).to.eql('Payee transaction limit reached');",
											"              });",
											"              ",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              ",
											"          }",
											"  });",
											"}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYEEFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "noresponsepayeefsp"
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"errorInformation\": {\n\t\t\"errorCode\": \"5101\",\n\t\t\"errorDescription\": \"Payee transaction limit reached\",\n\t\t\"extensionList\": {\n\t\t\t\"extension\": [{\n\t\t\t\t\"key\": \"errorDetail\",\n\t\t\t\t\"value\": \"This is an abort extension\"\n\t\t\t}]\n\t\t}\n\t}\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}/error",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}",
										"error"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Transfer status - ABORTED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "771c5b28-1df6-44ed-b550-06defd8ce41d",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('transferId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.environment.set('transferDate', (new Date()).toUTCString());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2f86f031-e6e0-48ed-b389-f69eef5cd597",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
											"// });",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              var jsonData = response.json();",
											"              ",
											"              pm.test(\"Response status is ABORTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
											"              });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              ",
											"          }",
											"   });",
											"}, 3000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "noresponsepayeefsp"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payerfsp position after Abort",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48c7a365-9735-46ec-b4d1-d368130609e4",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Payerfsp position after Payee ABORT should be same as position before prepare.\", function () {",
											"    ",
											"    pm.expect(jsonData[0].value).to.equal(Number(pm.environment.get('payerfspPositionBeforePrepare')));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dcf75b59-9ceb-4c0b-88b6-a3cf10198093",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payeefsp position after Abort",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2135f241-9d91-4f52-8402-b45b67adc583",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Payeefsp position after Payee ABORT should be same as position before prepare.\", function () {",
											"    ",
											"    pm.expect(jsonData[0].value).to.equal(Number(pm.environment.get('payeefspPositionBeforePrepare')));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6ad24c52-7e90-4267-8f9b-521a1ac8f6c2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "noresponsepayeefsp"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/noresponsepayeefsp/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"noresponsepayeefsp",
										"positions"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "payee_invalid_fulfillment",
					"item": [
						{
							"name": "Send Quote",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "71189004-8be6-41f4-8efb-7145f9243730",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('quoteId', generatedUUID);",
											"generatedUUID = uuid.v4();",
											"pm.environment.set('transactionId', generatedUUID);",
											"pm.environment.set('quoteDate', (new Date()).toUTCString());",
											"pm.environment.set('transferAmount', 100);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ab47ba8e-ad2e-4955-8fd5-193b2a5fe2de",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"          console.log(response.json());",
											"       pm.test(\"Response ilpPacket is not undefined\", function () {",
											"           pm.expect(response.json().ilpPacket).not.equal(undefined);",
											"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
											"       });",
											"       ",
											"       pm.test(\"Response condition is not undefined\", function () {",
											"           pm.expect(response.json().condition).not.equal(undefined);",
											"           pm.environment.set(\"condition\", response.json().condition);",
											"       });",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"",
											"      }",
											"       ",
											"   });",
											"}, 1000)",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Transfer Prepare",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "12e445a7-2456-4f7b-b8ff-0695f159621b",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transfer_ID', generatedUUID);",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.environment.set('transferDate', (new Date()).toUTCString());",
											"}",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 1200000))",
											"pm.environment.set(\"transferAmount\", 10);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7a63139d-8c4b-4c9a-ac89-da2bc866d018",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "noresponsepayeefsp"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{validCondition}}\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								},
								"description": "send a tranfer request with ilp packet and condition that are generated in quotes response along with expiry, fspiop source,fspiop destination, amount and currency."
							},
							"response": []
						},
						{
							"name": "Store Payerfsp position",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "24b56923-fc45-4349-a732-a61437b245f5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"payerfspPositionBeforeTransfer\", jsonData[0].value);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "05c317d5-277e-4950-825e-8e64ab4bbb0e",
										"exec": [
											"setTimeout(function () {",
											"  pm.sendRequest('www.google.com', function (err, response) {}",
											"    );",
											"}, 3000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Store Payeefsp position",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78155a3d-c1c6-484a-9460-fff63fa645b9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"payeefspPositionBeforeTransfer\", jsonData[0].value);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dc16169d-b982-4ccf-9407-632d1c1c2749",
										"exec": [
											"setTimeout(function () {",
											"  pm.sendRequest('www.google.com', function (err, response) {}",
											"    );",
											"}, 3000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payeefsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Payee Invalid Fulfillment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "68cc3fe8-fead-447e-ae02-ecc1cde755f5",
										"exec": [
											"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2db7b305-ff4b-4020-a164-15b65db1d97e",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "noresponsepayeefsp"
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fulfilment\": \"{{invalidFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Transfer status - RESERVED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1a987dda-3b81-43f3-bc9d-65ed36e7ca62",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('transferId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.environment.set('transferDate', (new Date()).toUTCString());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2aaabe58-510d-4e88-9e01-c2754af67b6f",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
											"// });",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              var jsonData = response.json();",
											"              ",
											"              pm.test(\"Response status is RESERVED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('RESERVED');",
											"              });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"",
											"          }",
											"   });",
											"}, 3000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payerfsp&Payeefsp position",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "30ce6b00-01cf-4174-afb7-90101742e1f3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Payerfsp position after transfer and after Payee ABORT should be same as position before transfer.\", function () {",
											"    ",
											"    pm.expect(jsonData[0].value).to.equal(Number(pm.environment.get('payerfspPositionBeforeTransfer')));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6886bdaa-2a7c-497c-bf6a-cc7b89bf6b4f",
										"exec": [
											"setTimeout(function () {",
											"  pm.sendRequest('www.google.com', function (err, response) {}",
											"    );",
											"}, 10000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "transfer_timeout",
					"item": [
						{
							"name": "Store Payerfsp position before prepare",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06d45a58-1ac2-4840-8c20-26170a707502",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"",
											"var result",
											"jsonData.forEach( entry => {(entry.currency === pm.environment.get(\"currency\")) ? result = entry.value: result =",
											" undefined})",
											"pm.environment.set(\"payerfspPositionBeforePrepare\", result);",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "aa194b8a-e40f-450a-9967-94589dc25dea",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Prepare",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2e74aff1-946d-4e24-817f-3ec72fd2c30e",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transfer_ID', generatedUUID);",
											"pm.environment.set('transferDate', (new Date()).toUTCString());",
											"pm.environment.set('transferAmount', 10);",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 2000))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3ec2b3b8-a66c-4fa8-bacc-c908a67e2bba",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "noresponsepayeefsp"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"nMel-FDPpp3T77jfC11fUXdcy935hy089AJ9v2OTXBI\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payerfsp position before timeout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8850304f-2bc7-4ee4-8597-0884e6dfbafc",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var result;",
											"",
											"jsonData.forEach( entry => {(entry.currency === pm.environment.get(\"currency\")) ? result = entry.value: result =",
											" undefined})",
											"",
											"pm.test(\"Payerfsp position after Prepare should be same as position before prepare+transfer amount\", function () {",
											"    ",
											"    var expectedValue = Number(pm.environment.get('payerfspPositionBeforePrepare'))+10",
											"    ",
											"    pm.expect(result).to.equal(expectedValue);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0ed413ec-39eb-4cd9-b063-9d848d0832dc",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payerfsp position after timeout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "638228fd-f4d4-45df-8d58-f15e715d900b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var result;",
											"",
											"jsonData.forEach( entry => {(entry.currency === pm.environment.get(\"currency\")) ? result = entry.value: result =",
											" undefined})",
											"",
											"pm.test(\"Payerfsp position after timeout should be same as position before prepare.\", function () {",
											"    ",
											"    pm.expect(result).to.equal(Number(pm.environment.get('payerfspPositionBeforePrepare')));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f5c2575d-7829-443b-a8f1-b2f29d962050",
										"exec": [
											"setTimeout(function () {",
											"  pm.sendRequest('www.google.com', function (err, response) {}",
											"    );",
											"}, 15000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Transfer status - ABORTED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "71ee5e7d-5471-4f96-9863-7254f595da1d",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('transferId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.environment.set('transferDate', (new Date()).toUTCString());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fb8f88fd-798a-40d2-9989-f4f5cd5c6614",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
											"// });",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              var jsonData = response.json();",
											"              ",
											"              pm.test(\"Response status is ABORTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
											"              });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              ",
											"          }",
											"   });",
											"}, 3000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payerfsp Notification",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d05a623f-6124-4be9-944d-80f3701aa71e",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('transferId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.environment.set('transferDate', (new Date()).toUTCString());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "50aa954f-2d69-4cfe-bb7e-004a93135de9",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
											"// });",
											"",
											"pm.test(\"Response status is ABORTED\", function () {",
											"    pm.expect(pm.response.json().transferState).to.eql('ABORTED');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{HOST_SIMULATOR}}/{{payerfsp}}/correlationid/{{transfer_ID}}",
									"host": [
										"{{HOST_SIMULATOR}}"
									],
									"path": [
										"{{payerfsp}}",
										"correlationid",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Response body:\n: Received error in Transfers: {\"errorInformation\":{\"errorCode\":3100,\"errorDescription\":\"Generic validation error: Expiration date 2018-10-01T20:31:00.534Z is already in the past\"}}\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "44789073-274e-41b3-9fdc-9ff3d325491c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c7309fb3-8886-4fc4-b6a5-e83852a82cbf",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0db6baa1-caf3-4105-b9c2-46d7bf1d4f19",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1851f52c-e6ec-45b9-9e5d-f9349c9a8a3f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "duplicate_handling",
			"item": [
				{
					"name": "transfers",
					"item": [
						{
							"name": "original_transfer_at_committed",
							"item": [
								{
									"name": "Send Transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6ad95d6-1f85-423b-8a6c-56eaac3f4095",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// pm.test(\"Check that Content-Type is present\", function () {",
													"//     pm.response.to.have.header(\"Content-Type\");",
													"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
													"// });",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              var jsonData = response.json();",
													"              pm.test(\"Response data does not have transferId\", function () {",
													"               pm.expect(jsonData.transferId).to.eql(undefined);",
													"             });",
													"              pm.test(\"Response status is COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"              });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"              ",
													"          }",
													"   });",
													"}, 2000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c7bb5f48-c53b-482c-8837-2f89993629a5",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"",
													"pm.environment.set('transfer_ID', generatedUUID);",
													"pm.environment.set('transferDate', (new Date()).toUTCString());",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
													"pm.environment.set('transferAmount', 1);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Duplicate Transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b25f0ef-b61d-4b29-a063-347340487ef8",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              var jsonData = response.json().data;",
													"              var headers = response.json().headers",
													"              const transferId = pm.variables.get(\"transfer_ID\");",
													"              ",
													"              pm.test(\"Response data does not have transferId\", function () {",
													"               pm.expect(jsonData.transferId).to.eql(undefined);",
													"             });",
													"              pm.test(\"Response status is COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"              });",
													"              pm.test(\"fspiop-source is switch\", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('switch');",
													"              });",
													"              pm.test(\"fspiop-destination is payerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"              });",
													"              ",
													"              pm.test(\"fspiop-uri contains /transfers/\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${transferId}`);",
													"            });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"              ",
													"          }",
													"   });",
													"}, 2000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8cfb26a9-ff60-4ea7-b167-f17146d273a3",
												"exec": [
													"pm.environment.set('transferAmount', 1)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "fulfill_commit",
							"item": [
								{
									"name": "positive",
									"item": [
										{
											"name": "Send Quote",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "87a07cfa-df31-4d12-8373-07833befcfa6",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 100);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b877a47a-c86f-492b-ba4e-7f256fbe1a47",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log('response: ',response.json());",
															"       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"           console.log('ilpPacket: ',response.json().ilpPacket)",
															"           pm.expect(response.json().ilpPacket).not.eql(undefined);",
															"          pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not undefined\", function () {",
															"           pm.expect(response.json().condition).not.eql(undefined);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-SOurce",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer-Prepare",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "20ae9642-606f-495d-a615-c8cb7c706e61",
														"exec": [
															"",
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 100);",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "fee9cdb2-db66-4aec-93fe-9541fcaf85ce",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Signature",
														"value": "{{fspiop-signature}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{validCondition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Fulfill",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d3f5d0ff-33e8-40cd-bcab-ae71e6427ebe",
														"exec": [
															"pm.environment.set(\"completedTimestamp\",new Date().toISOString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c47b9cb8-2732-4d95-86d1-81929b77cc6a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              //Check headers",
															"              var headers = response.json().headers;",
															"              ",
															"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
															"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
															"                });",
															"                ",
															"                pm.test(\"fspiop-destination is payerfsp\", function () {",
															"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"                });",
															"                ",
															"                //Uncomment after JWS is implemented",
															"                // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"                //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
															"                // });",
															"                ",
															"                ",
															"                pm.test(\"payeefsp content-type is same as sent in the request\", function () {",
															"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"                });",
															"                ",
															"                pm.test(\"date header should not be empty\", function () {",
															"                    pm.expect(headers['date']).to.be.not.empty;",
															"                });",
															"                ",
															"                pm.test(\"accept header should not be sent in the response\", function () {",
															"                    pm.expect(headers['accept']).to.eql(undefined);",
															"                });",
															"                ",
															"              //Check data",
															"              var jsonData = response.json().data;",
															"              pm.test(\"Response transferState should be COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"              ",
															"              pm.test(\"Response fulfilment should be same as in request\", function () {",
															"                pm.expect(jsonData.fulfilment).to.eql(pm.environment.get(\"validFulfillment\"));",
															"              });",
															"              ",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"",
															"          }",
															"   });",
															"}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Duplicate Fulfill",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1693a7c6-b5de-4945-a50b-813a821f8041",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0086ea4f-f4f9-4b6f-ad2f-be93541b614f",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/noresponsepayeefsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"//           if(response.responseSize !== 0) {",
															"              ",
															"//               //Check headers",
															"//               var headers = response.json().headers;",
															"              ",
															"//                 pm.test(\"fspiop-source is switch\", function () {",
															"//                     pm.expect(headers['fspiop-source']).to.eql('switch');",
															"//                 });",
															"                ",
															"//                 pm.test(\"fspiop-destination is noresponsepayeefsp\", function () {",
															"//                     pm.expect(headers['fspiop-destination']).to.eql('noresponsepayeefsp');",
															"//                 });",
															"                ",
															"//                 //Uncomment after JWS is implemented",
															"//                 // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"//                 //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
															"//                 // });",
															"                ",
															"                ",
															"//                 pm.test(\" content-type is same as sent in the request\", function () {",
															"//                     pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"//                 });",
															"                ",
															"//                 pm.test(\"date header should not be empty\", function () {",
															"//                     pm.expect(headers['date']).to.be.not.empty;",
															"//                 });",
															"                ",
															"//                 pm.test(\"accept header should not be sent in the response\", function () {",
															"//                     pm.expect(headers['accept']).to.eql(undefined);",
															"//                 });",
															"                ",
															"//              //Check data    ",
															"//               var jsonData = response.json().data;",
															"//               pm.test(\"Response transferState should be COMMITTED\", function () {",
															"//                 pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"//               });",
															"              ",
															"//               pm.test(\"Response fulfilment should be same as in request\", function () {",
															"//                 pm.expect(jsonData.fulfilment).to.eql(pm.environment.get(\"validFulfillment\"));",
															"//               });",
															"//           } else {",
															"//               pm.test(\"Transfer FAILED\", function () {",
															"//                 throw new Error('Did not receive response');",
															"//               });",
															"              ",
															"//           }",
															"//   });",
															"// }, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "negative",
									"item": [
										{
											"name": "Send Quote",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a220d2a7-0e18-4db2-b3d3-9f1aef08a5e1",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"   ",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 100);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2fcb959f-034a-4b89-8ef7-9b43df43963c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log('response: ',response.json());",
															"       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"           console.log('ilpPacket: ',response.json().ilpPacket)",
															"           pm.expect(response.json().ilpPacket).not.eql(undefined);",
															"          pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"           ",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not undefined\", function () {",
															"           pm.expect(response.json().condition).not.eql(undefined);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-SOurce",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer-Prepare",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "672f6669-72e9-455b-98f0-08e4e12a107c",
														"exec": [
															"",
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 100);",
															"pm.environment.set(\"transferExpiration\", new Date(new Date().getTime() + 60000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f0dcb551-9818-42f0-9bde-5d396a38698c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Signature",
														"value": "{{fspiop-signature}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{validCondition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Fulfill",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c8828fb2-e72a-41a1-b23c-8916b3eeff05",
														"exec": [
															"pm.environment.set(\"completedTimestamp\",new Date().toISOString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "39ec1e39-b1c6-447f-ad3f-ad73d2b4ee23",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              //Check headers",
															"              var headers = response.json().headers;",
															"              ",
															"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
															"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
															"                });",
															"                ",
															"                pm.test(\"fspiop-destination is payerfsp\", function () {",
															"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"                });",
															"                ",
															"                //Uncomment after JWS is implemented",
															"                // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"                //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
															"                // });",
															"                ",
															"                pm.test(\"date header should not be empty\", function () {",
															"                    pm.expect(headers['date']).to.be.not.empty;",
															"                });",
															"                ",
															"                pm.test(\"accept header should not be sent in the response\", function () {",
															"                    pm.expect(headers['accept']).to.eql(undefined);",
															"                });",
															"                ",
															"                pm.test(\"payeefsp content-type is same as sent in the request\", function () {",
															"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"                });",
															"                ",
															"              //Check data",
															"              var jsonData = response.json().data;",
															"              pm.test(\"Response transferState should be COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"              ",
															"              pm.test(\"Response fulfilment should be same as in request\", function () {",
															"                pm.expect(jsonData.fulfilment).to.eql(pm.environment.get(\"validFulfillment\"));",
															"              });",
															"              ",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              ",
															"          }",
															"   });",
															"}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Invalid Duplicate Fulfill",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "31937e0a-6f07-4aed-a3c4-fdcab8ae906b",
														"exec": [
															"pm.variables.set(\"updatedTimestamp\",new Date().toISOString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "496636af-9f3e-4be2-9d3a-6f8f1ef5d69d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/noresponsepayeefsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"//           if(response.responseSize !== 0) {",
															"              ",
															"//               //Check headers",
															"//               var headers = response.json().headers;",
															"              ",
															"//                 pm.test(\"fspiop-source is switch\", function () {",
															"//                     pm.expect(headers['fspiop-source']).to.eql('switch');",
															"//                 });",
															"                ",
															"//                 pm.test(\"fspiop-destination is noresponsepayeefsp\", function () {",
															"//                     pm.expect(headers['fspiop-destination']).to.eql('noresponsepayeefsp');",
															"//                 });",
															"                ",
															"//                 //Uncomment after JWS is implemented",
															"//                 // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"//                 //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
															"//                 // });",
															"//                 pm.test(\"date header should not be empty\", function () {",
															"//                     pm.expect(headers['date']).to.be.not.empty;",
															"//                 });",
															"                ",
															"//                 pm.test(\"accept header should not be sent in the response\", function () {",
															"//                     pm.expect(headers['accept']).to.eql(undefined);",
															"//                 });",
															"                ",
															"//                 pm.test(\"content-type is same as sent in the request\", function () {",
															"//                     pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"//                 });",
															"                ",
															"                ",
															"//              //Check data    ",
															"//               var jsonData = response.json().data;",
															"              ",
															"//               pm.test(\"Response Error Code is 3106\", function () {",
															"//                 pm.expect(jsonData.errorInformation.errorCode).to.eql('3106');",
															"//               });",
															"              ",
															"//               pm.test(\"Response Error Desription is 'Modified request'\", function () {",
															"//                 pm.expect(jsonData.errorInformation.errorDescription).to.eql('Modified request');",
															"//               });",
															"//           } else {",
															"//               pm.test(\"Transfer FAILED\", function () {",
															"//                 throw new Error('Did not receive response');",
															"//               });",
															"              ",
															"//           }",
															"//   });",
															"// }, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{updatedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"description": "Send a transfer-prepare from payerfsp to payeefsp\nDo not send transfer-fulfil from payeefsp.\n\nSend a duplicate transfer-prepare with same params.\ncheck the simulator logs to make sure that there should not be any response for the duplicate transfer when the actual transfer is not at terminal state which means neither committed nor aborted but in process.\n\nThis is same as sending duplicate transfer when actual transfer is at ABORTED state.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6525a512-b5c8-40c0-88fd-5fcfea669a8a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "94bfd831-e77c-4622-b6b3-5104fc04adc4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "fulfill_reject",
							"item": [
								{
									"name": "positive",
									"item": [
										{
											"name": "Send Quote",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5403b3b7-a23e-48b0-a565-0858fc9bac26",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('quoteId', generatedUUID);",
															"pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 100);",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "48d17652-0e54-4016-a55d-c1d12202fa50",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log('response: ',response.json());",
															"       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"           console.log('ilpPacket: ',response.json().ilpPacket)",
															"           pm.expect(response.json().ilpPacket).not.eql(undefined);",
															"          pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"           ",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not undefined\", function () {",
															"           pm.expect(response.json().condition).not.eql(undefined);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-SOurce",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer-Prepare",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e1e0d2e6-2eae-4e81-9628-7be7b8ffb542",
														"exec": [
															"",
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 100);",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "59dd4fc1-1091-480a-b55c-68129ec6f047",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Signature",
														"value": "{{fspiop-signature}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{validCondition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Fulfill-Reject",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d21b92a1-963b-4516-ba62-6aa1c1a0e886",
														"exec": [
															"pm.environment.set(\"completedTimestamp\",new Date().toISOString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9fe9ec3c-b3c6-4757-ade6-9e944daef644",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              //Check headers",
															"              var headers = response.json().headers;",
															"              ",
															"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
															"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
															"                });",
															"                ",
															"                pm.test(\"fspiop-destination is payerfsp\", function () {",
															"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"                });",
															"                ",
															"                //Uncomment after JWS is implemented",
															"                // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"                //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
															"                // });",
															"                ",
															"                pm.test(\"date header should not be empty\", function () {",
															"                    pm.expect(headers['date']).to.be.not.empty;",
															"                });",
															"                ",
															"                pm.test(\"accept header should not be sent in the response\", function () {",
															"                    pm.expect(headers['accept']).to.eql(undefined);",
															"                });",
															"                ",
															"                pm.test(\"payeefsp content-type is same as sent in the request\", function () {",
															"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"                });",
															"                ",
															"              //Check data",
															"              var jsonData = response.json().data;",
															"              pm.test(\"Response Error Code is 5101\", function () {",
															"                pm.expect(jsonData.errorInformation.errorCode).to.eql('5101');",
															"              });",
															"              ",
															"              pm.test(\"Response Error Desription is 'Payee transaction limit reached'\", function () {",
															"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Payee transaction limit reached');",
															"                //pm.expect(jsonData.errorInformation.errorDescription).to.eql('Payee transaction limit reached');",
															"              });",
															"              ",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"",
															"          }",
															"   });",
															"}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"errorInformation\": {\n\t\t\"errorCode\": \"5101\",\n\t\t\"errorDescription\": \"Payee transaction limit reached\",\n\t\t\"extensionList\": {\n\t\t\t\"extension\": [{\n\t\t\t\t\"key\": \"errorDetail\",\n\t\t\t\t\"value\": \"This is an abort extension\"\n\t\t\t}]\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}/error",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}",
														"error"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Duplicate Fulfill-Reject",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "49de4435-a779-436f-8abf-7a8b4989babb",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f17adb7e-45f0-4dc1-b1b7-c70e2cb340c1",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Not getting any response from simulator, at least no response body I mean. Can enable the below once that is addressed.",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/noresponsepayeefsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"//           if(response.responseSize !== 0) {",
															"//               //Check headers",
															"//               var headers = response.json().headers;",
															"              ",
															"//                 pm.test(\"fspiop-source is switch\", function () {",
															"//                     pm.expect(headers['fspiop-source']).to.eql('switch');",
															"//                 });",
															"                ",
															"//                 pm.test(\"fspiop-destination is noresponsepayeefsp\", function () {",
															"//                     pm.expect(headers['fspiop-destination']).to.eql('noresponsepayeefsp');",
															"//                 });",
															"                ",
															"//                 //Uncomment after JWS is implemented",
															"//                 // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"//                 //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
															"//                 // });",
															"                ",
															"//                 pm.test(\"date header should not be empty\", function () {",
															"//                     pm.expect(headers['date']).to.be.not.empty;",
															"//                 });",
															"                ",
															"//                 pm.test(\"accept header should not be sent in the response\", function () {",
															"//                     pm.expect(headers['accept']).to.eql(undefined);",
															"//                 });",
															"                ",
															"//                 pm.test(\"content-type is same as sent in the request\", function () {",
															"//                     pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"//                 });",
															"                ",
															"//               //Check data",
															"//               var jsonData = response.json().data;",
															"//               pm.test(\"Response transferState should be ABORTED\", function () {",
															"//                 pm.expect(jsonData.transferState).to.eql('ABORTED');",
															"//               });",
															"              ",
															"//               pm.test(\"Response fulfilment should be empty\", function () {",
															"//                 pm.expect(jsonData.fulfilment).to.eql(undefined);",
															"//               });",
															"//           } else {",
															"//               pm.test(\"Transfer FAILED\", function () {",
															"//                 throw new Error('Did not receive response');",
															"//               });",
															"",
															"//           }",
															"//   });",
															"// }, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"errorInformation\": {\n\t\t\"errorCode\": \"5101\",\n\t\t\"errorDescription\": \"Payee transaction limit reached\",\n\t\t\"extensionList\": {\n\t\t\t\"extension\": [{\n\t\t\t\t\"key\": \"errorDetail\",\n\t\t\t\t\"value\": \"This is an abort extension\"\n\t\t\t}]\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}/error",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}",
														"error"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "negative",
									"item": [
										{
											"name": "Send Quote",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3982aaf4-07a0-4a5b-b2b4-910b40245267",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   ",
															"   pm.environment.set('quoteId', generatedUUID);",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   pm.environment.set('transferAmount', 100);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e1790de9-5793-42ce-9b78-0e6c5f36e028",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log('response: ',response.json());",
															"       pm.test(\"Response ilpPacket is not undefined\", function () {",
															"           console.log('ilpPacket: ',response.json().ilpPacket)",
															"           pm.expect(response.json().ilpPacket).not.eql(undefined);",
															"          pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"           ",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not undefined\", function () {",
															"           pm.expect(response.json().condition).not.eql(undefined);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-SOurce",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer-Prepare",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "09988728-7ba6-4263-a8dc-5d3eeadc1c7b",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"pm.environment.set('transferAmount', 100);",
															"pm.environment.set(\"transferExpiration\", new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2409f098-a8f5-4f9d-94e9-4357604e72d3",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Signature",
														"value": "{{fspiop-signature}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{validCondition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Fulfill-Reject",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e147d651-a0b4-4410-b5cd-e4aeacfc8c02",
														"exec": [
															"pm.environment.set(\"completedTimestamp\",new Date().toISOString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6034d42b-d9c8-493e-9ba7-d03cbcf6fc17",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              //Check headers",
															"              var headers = response.json().headers;",
															"              ",
															"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
															"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
															"                });",
															"                ",
															"                pm.test(\"fspiop-destination is payerfsp\", function () {",
															"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"                });",
															"                ",
															"                //Uncomment after JWS is implemented",
															"                // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"                //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
															"                // });",
															"                ",
															"                ",
															"                pm.test(\"payeefsp content-type is same as sent in the request\", function () {",
															"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"                });",
															"                ",
															"                pm.test(\"date header should not be empty\", function () {",
															"                    pm.expect(headers['date']).to.be.not.empty;",
															"                });",
															"                ",
															"                pm.test(\"accept header should not be sent in the response\", function () {",
															"                    pm.expect(headers['accept']).to.eql(undefined);",
															"                });",
															"                ",
															"              //Check data",
															"              var jsonData = response.json().data;",
															"              pm.test(\"Response Error Code is 5101\", function () {",
															"                pm.expect(jsonData.errorInformation.errorCode).to.eql('5101');",
															"              });",
															"              ",
															"              pm.test(\"Response Error Desription is 'Payee transaction limit reached'\", function () {",
															"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Payee transaction limit reached');",
															"                //pm.expect(jsonData.errorInformation.errorDescription).to.eql('Payee transaction limit reached');",
															"              });",
															"              ",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              ",
															"          }",
															"   });",
															"}, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"errorInformation\": {\n\t\t\"errorCode\": \"5101\",\n\t\t\"errorDescription\": \"Payee transaction limit reached\",\n\t\t\"extensionList\": {\n\t\t\t\"extension\": [{\n\t\t\t\t\"key\": \"errorDetail\",\n\t\t\t\t\"value\": \"This is an abort extension\"\n\t\t\t}]\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}/error",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}",
														"error"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Invalid Duplicate Fulfill-Reject",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "147913b2-89d6-4cd0-a5b9-dddcc93b3fd0",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "934873ca-1256-41cc-8a68-a3b250e0014a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"// setTimeout(function () {",
															"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/noresponsepayeefsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"//           if(response.responseSize !== 0) {",
															"//               //Check headers",
															"//               var headers = response.json().headers;",
															"              ",
															"//                 pm.test(\"fspiop-source is switch\", function () {",
															"//                     pm.expect(headers['fspiop-source']).to.eql('switch');",
															"//                 });",
															"                ",
															"//                 pm.test(\"fspiop-destination is noresponsepayeefsp\", function () {",
															"//                     pm.expect(headers['fspiop-destination']).to.eql('noresponsepayeefsp');",
															"//                 });",
															"                ",
															"//                 //Uncomment after JWS is implemented",
															"//                 // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"//                 //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
															"//                 // });",
															"//                 pm.test(\"date header should not be empty\", function () {",
															"//                     pm.expect(headers['date']).to.be.not.empty;",
															"//                 });",
															"                ",
															"//                 pm.test(\"accept header should not be sent in the response\", function () {",
															"//                     pm.expect(headers['accept']).to.eql(undefined);",
															"//                 });",
															"                ",
															"//                 pm.test(\"content-type is same as sent in the request\", function () {",
															"//                     pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"//                 });",
															"                ",
															"//               //Check data",
															"//               var jsonData = response.json().data;",
															"//               pm.test(\"Response Error Code is '3106'\", function () {",
															"//                 pm.expect(jsonData.errorInformation.errorCode).to.eql('3106');",
															"//               });",
															"              ",
															"//               pm.test(\"Response Error Desription is 'Modified request'\", function () {",
															"//                 pm.expect(jsonData.errorInformation.errorDescription).to.eql('Modified request');",
															"//               });",
															"              ",
															"//           } else {",
															"//               pm.test(\"Transfer FAILED\", function () {",
															"//                 throw new Error('Did not receive response');",
															"//               });",
															"",
															"//           }",
															"//   });",
															"// }, 5000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "noresponsepayeefsp"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"errorInformation\": {\n\t\t\"errorCode\": \"5101\",\n\t\t\"errorDescription\": \"This is an invalid duplicate request\",\n\t\t\"extensionList\": {\n\t\t\t\"extension\": [{\n\t\t\t\t\"key\": \"errorDetail\",\n\t\t\t\t\"value\": \"This is an abort extension\"\n\t\t\t}]\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}/error",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}",
														"error"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"description": "Send a transfer-prepare from payerfsp to payeefsp\nDo not send transfer-fulfil from payeefsp.\n\nSend a duplicate transfer-prepare with same params.\ncheck the simulator logs to make sure that there should not be any response for the duplicate transfer when the actual transfer is not at terminal state which means neither committed nor aborted but in process.\n\nThis is same as sending duplicate transfer when actual transfer is at ABORTED state.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2df4533c-616c-4a13-80f4-a98d330b3072",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "aecf0021-ce37-41ff-9620-16b86d2319a5",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bc511e11-e991-45bb-a884-e641952050b8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9ff408f3-dac8-4bf5-a83d-aa013521b9b5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "participant_inactive_stop_transfers",
			"item": [
				{
					"name": "Update Participant to inactive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3606f439-5f79-44b6-9373-5f55464269b9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"FSP is inactive\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.isActive).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"isActive\": false\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET participant status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1563cf75-e1d2-4e55-b96f-363128bb6960",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"FSP is inactive\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.isActive).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}"
							]
						},
						"description": "Check whether participant is Inactive or not"
					},
					"response": []
				},
				{
					"name": "Send Quote",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4e9d170d-3bdf-4f76-8438-50dd32f089d1",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 100);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "66552291-8c2e-4228-a6f8-d8be2edf2118",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"// pm.test(\"Check that Content-Type is present\", function () {",
									"//     pm.response.to.have.header(\"Content-Type\");",
									"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
									"// });",
									"",
									"",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"      if(response.responseSize !== 0) {",
									"          console.log('response: ',response.json());",
									"       ",
									"       var jsonData = response.json();",
									"        pm.test(\"Error Code should be returned '3202'\", function () {",
									"            pm.expect(jsonData.errorInformation.errorCode).to.eql('3202');",
									"        });",
									"        pm.test(\"Error Description should be returned\", function () {",
									"            pm.expect(jsonData.errorInformation.errorDescription).to.include('Payer FSP ID not found');",
									"        });",
									"        ",
									"      } else {",
									"          pm.test(\"Quote FAILURE not as expected\", function () {",
									"            throw new Error('Did not receive response');",
									"           });",
									"      }",
									"   });",
									"}, 1500)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-SOurce",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"USD\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Transfer fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "61de033d-0e51-40aa-a48a-649bea6f7072",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"//Check the callback response that Switch forwards to payerfsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"            //Checking headers",
									"            var headers = response.json().headers;",
									"            pm.test(\"payerfsp fspiop-source is switch\", function () {",
									"                pm.expect(headers['fspiop-source']).to.eql('switch');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
									"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
									"            });",
									"            ",
									"            //Uncomment this once Simulators are able to forward Signature",
									"            // pm.test(\"fspiop-signature is empty\", function () {",
									"            //     pm.expect(pm.response.json().headers['fspiop-signature']).to.eql(undefined);",
									"            // });",
									"            ",
									"            pm.test(\"payerfsp accept is empty\", function () {",
									"                pm.expect(headers['accept']).to.eql(undefined);",
									"            });",
									"            ",
									"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
									"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
									"            });",
									"            ",
									"            //pm.test(\"payerfsp fspiop-uri is /transfers/\"+pm.environment.get(\"transfer_ID\"), function () {",
									"            //    pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+pm.environment.get(\"transfer_ID\"));",
									"            //});",
									"            ",
									"            // pm.test(\"payerfsp fspiop-http-method is empty\", function () {",
									"            //     pm.expect(headers['fspiop-http-method']).to.eql(undefined);",
									"            // });",
									"            ",
									"            var jsonData = response.json().data;",
									"            pm.test(\"Error Code should be 3100\", function () {",
									"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3100');",
									"              });",
									"              pm.test(\"Error Description should contain: Validation error\", function () {",
									"                pm.expect(jsonData.errorInformation.errorDescription).to.include('validation error');",
									"              });",
									"              ",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"",
									"          }",
									"   });",
									"}, 1100)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5bb94730-8cd2-4712-a45a-9e23d2954866",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							},
							{
								"key": "FSPIOP-URI",
								"type": "text",
								"value": "/transfers"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"type": "text",
								"value": "POST"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"1\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Participant to active",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc38e67b-327d-48f6-863e-95659dde8d49",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"FSP is active\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.isActive).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"isActive\": true\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET participant status - Reset",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c677ab20-5786-42c9-864d-e7da9543f1de",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"FSP is active\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.isActive).to.eql(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}"
							]
						},
						"description": "Check whether participant is Inactive or not"
					},
					"response": []
				},
				{
					"name": "Send Quote",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1c9d647a-0c94-41d3-ab2c-dd05fbc6d147",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 100);",
									"   "
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6a28a2e6-07fb-472d-9a41-569c43c8d1b5",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"// pm.test(\"Check that Content-Type is present\", function () {",
									"//     pm.response.to.have.header(\"Content-Type\");",
									"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
									"// });",
									"",
									"",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"      if(response.responseSize !== 0) {",
									"          console.log('response: ',response.json());",
									"       pm.test(\"Response ilpPacket is not undefined\", function () {",
									"           console.log('ilpPacket: ',response.json().ilpPacket)",
									"           pm.expect(response.json().ilpPacket).not.eql(undefined);",
									"          pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
									"           ",
									"       });",
									"       ",
									"       pm.test(\"Response condition is not undefined\", function () {",
									"           pm.expect(response.json().condition).not.eql(undefined);",
									"           pm.environment.set(\"condition\", response.json().condition);",
									"       });",
									"      } else {",
									"          pm.test(\"Quote FAILED\", function () {",
									"            throw new Error('Did not receive response');",
									"           });",
									"",
									"      }",
									"       ",
									"   });",
									"}, 2000)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-SOurce",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"USD\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Transfer pass",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43d6754d-e72b-4774-98f6-7e823a87571d",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"//Check the request that Switch forwards to payeefsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"              ",
									"              //Check the Headers",
									"              var headers = response.json().headers;",
									"              ",
									"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
									"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
									"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
									"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
									"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
									"                    pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
									"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
									"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
									"                });",
									"                ",
									"                ",
									"                //Check the data",
									"                var jsonData = response.json().data;",
									"                pm.test(\"payeefsp data should have the same transferId as request\", function () {",
									"                   pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same payerfspId as request\", function () {",
									"                   pm.expect(jsonData.payerFsp).to.eql(pm.environment.get(\"payerfsp\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same payeefspId as request\", function () {",
									"                   pm.expect(jsonData.payeeFsp).to.eql(pm.environment.get(\"payeefsp\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same amount as request\", function () {",
									"                   pm.expect(+jsonData.amount.amount).to.eql(pm.environment.get(\"transferAmount\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same currency as request\", function () {",
									"                   pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same expiration as request\", function () {",
									"                   pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
									"                   pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same condition as request\", function () {",
									"                   pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
									"                });",
									"                ",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"              ",
									"          }",
									"   });",
									"}, 1100)",
									"",
									"//Check the callback response that Switch forwards to payerfsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"            //Checking headers",
									"            var headers = response.json().headers;",
									"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
									"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
									"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
									"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp accept is empty\", function () {",
									"                pm.expect(headers['accept']).to.eql(undefined);",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-uri includes transfers\", function () {",
									"                pm.expect(headers['fspiop-uri']).to.include('/transfers');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
									"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
									"            });",
									"            ",
									"            var jsonData = response.json().data;",
									"            pm.test(\"Response data does not have transferId\", function () {",
									"               pm.expect(jsonData.transferId).to.eql(undefined);",
									"            });",
									"            pm.test(\"Response status is COMMITTED\", function () {",
									"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
									"            });",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"              ",
									"          }",
									"   });",
									"}, 1300)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "42a150dc-ecdd-4de9-b703-9fc8cb24bf2b",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 60000));",
									"pm.environment.set('transferAmount', 1);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							},
							{
								"key": "FSPIOP-URI",
								"value": "/transfers",
								"type": "text"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "POST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "api_tests",
			"item": [
				{
					"name": "Get participants List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3d0fac22-ce05-49c5-a6c0-c5285ab99fd2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Get Participant",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21b60486-4bb5-4678-b258-935435ebf5e3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}"
							]
						}
					},
					"response": [
						{
							"name": "Get Participant",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{participant}}",
									"protocol": "http",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{participant}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Length",
									"value": "251",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Wed, 22 Aug 2018 15:25:18 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx/1.13.8",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "accept-ranges",
									"value": "bytes",
									"name": "accept-ranges",
									"description": "Content-Types that are acceptable"
								},
								{
									"key": "cache-control",
									"value": "no-cache",
									"name": "cache-control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								}
							],
							"cookie": [],
							"body": "{\"name\":\"testfsp\",\"id\":\"{{HOST_CENTRAL_LEDGER}}/participants/testfsp\",\"created\":\"2018-08-22T08:16:50.000Z\",\"isActive\":1,\"links\":{\"self\":\"{{HOST_CENTRAL_LEDGER}}/participants/testfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]}"
						}
					]
				},
				{
					"name": "3. Get Hub Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c9cd2de-d259-4e65-9904-6600c43c091a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/Hub/accounts",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"Hub",
								"accounts"
							]
						}
					},
					"response": [
						{
							"name": "Get Participant",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{participant}}",
									"protocol": "http",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{participant}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Connection",
									"value": "keep-alive",
									"name": "Connection",
									"description": "Options that are desired for the connection"
								},
								{
									"key": "Content-Length",
									"value": "251",
									"name": "Content-Length",
									"description": "The length of the response body in octets (8-bit bytes)"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8",
									"name": "Content-Type",
									"description": "The mime type of this content"
								},
								{
									"key": "Date",
									"value": "Wed, 22 Aug 2018 15:25:18 GMT",
									"name": "Date",
									"description": "The date and time that the message was sent"
								},
								{
									"key": "Server",
									"value": "nginx/1.13.8",
									"name": "Server",
									"description": "A name for the server"
								},
								{
									"key": "accept-ranges",
									"value": "bytes",
									"name": "accept-ranges",
									"description": "Content-Types that are acceptable"
								},
								{
									"key": "cache-control",
									"value": "no-cache",
									"name": "cache-control",
									"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
								}
							],
							"cookie": [],
							"body": "{\"name\":\"testfsp\",\"id\":\"{{HOST_CENTRAL_LEDGER}}/participants/testfsp\",\"created\":\"2018-08-22T08:16:50.000Z\",\"isActive\":1,\"links\":{\"self\":\"{{HOST_CENTRAL_LEDGER}}/participants/testfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]}"
						}
					]
				},
				{
					"name": "11. Get Endpoints",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50b19463-6b5d-4fa3-8722-ad40b7429754",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payerfsp/endpoints",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"payerfsp",
								"endpoints"
							]
						},
						"description": "Generated from a curl request: \ncurl -i -X POST     {{HOST_CENTRAL_LEDGER}}/participants/testfsp2/initialPositionAndLimits     -H 'Cache-Control: no-cache'     -H 'Content-Type: application/json'     -d '{\n    \\\"currency\\\": \\\"USD\\\",\n    \\\"limit\\\": {\n      \\\"type\\\": \\\"NET_DEBIT_CAP\\\",\n      \\\"value\\\": 1000\n    },\n    \\\"initialPosition\\\": 0\n  }'"
					},
					"response": [
						{
							"name": "2. Create Initial Position and Limits",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currency\": \"USD\",\n    \"limit\": {\n      \"type\": \"NET_DEBIT_CAP\",\n      \"value\": 1000\n    },\n    \"initialPosition\": 0\n  }"
								},
								"url": {
									"raw": "http://{{HOST_CENTRAL_LEDGER}}/participants/testfsp/initialPositionAndLimits",
									"protocol": "http",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"testfsp",
										"initialPositionAndLimits"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get - limits - All FSPs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5dfef69e-8bf4-4b05-9fc8-b3a667cefca8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/limits?currency=USD&type=NET_DEBIT_CAP",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"limits"
							],
							"query": [
								{
									"key": "currency",
									"value": "USD"
								},
								{
									"key": "type",
									"value": "NET_DEBIT_CAP"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get payerfsp position",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "979554b6-2893-429c-865a-73b9ad4305ef",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Atleast one account position should be returned\", function () {",
									"    pm.variables.set(\"payerfspPositionBeforeTransfer\", jsonData[0].value);",
									"    pm.expect(jsonData).to.be.not.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/positions",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}",
								"positions"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "transaction-request-service",
			"item": [
				{
					"name": "health",
					"item": [
						{
							"name": "health",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e35e171f-bed0-4216-97f4-e2a28246cc8e",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1c9b1e86-56fa-4670-987e-448a09db09cd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.health+json;version=1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.health+json;version=1.0"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transactionRequestDate}}"
									},
									{
										"key": "fspiop-source",
										"type": "text",
										"value": "{{payerfsp}}"
									},
									{
										"key": "fspiop-destination",
										"type": "text",
										"value": "{{payeefsp}}"
									},
									{
										"key": "fspiop-signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									},
									{
										"key": "fspiop-uri",
										"type": "text",
										"value": "/health"
									},
									{
										"key": "fspiop-http-method",
										"type": "text",
										"value": "GET"
									}
								],
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/health",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f1751c9f-aa2e-401c-a52b-f423e0c5e926",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "83360688-7497-45e7-8fb3-605e32054d7a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "received State",
					"item": [
						{
							"name": "Payee initiate request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9cbb96a4-f653-494d-ad0d-c21710ad712e",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/transactionRequests/callbacks/\"+pm.environment.get(\"transactionRequestId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            const responseJson = response.json()",
											"            const headers = responseJson.headers",
											"            const data = responseJson.data",
											"            ",
											"            pm.test(\"Callback received in the Simulator\", function () {",
											"                pm.expect(data).not.equal(undefined);",
											"            });",
											"            ",
											"            pm.test(\"transactionId matches\", function () {",
											"                pm.expect(data['transactionId']).to.eql(pm.environment.get(\"transactionRequestId\"));",
											"            });",
											"                ",
											"            pm.test(\"fspiop-source is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-destination is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            pm.test(\"content-type is same as sent in the request\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transactionRequests+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"transactionRequestState is RECEIVED\", function () {",
											"                pm.expect(data['transactionRequestState']).to.eql('RECEIVED');",
											"            });",
											"            ",
											"      } else {",
											"          pm.test(\"Transaction Request FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"          });",
											"      }",
											"       ",
											"  });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6a17e4e7-f3de-4211-ba63-8b0e7139f205",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);",
											"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-destination",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-http-method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionRequestId\": \"{{transactionRequestId}}\",\n    \"payee\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"PERSONAL_ID\",\n            \"partyIdentifier\": \"16135551212\",\n            \"partySubIdOrType\": \"DRIVING_LICENSE\",\n            \"fspId\": \"1234\"\n        },\n        \"merchantClassificationCode\": \"4321\",\n        \"name\": \"Justin Trudeau\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"Justin\",\n                \"middleName\": \"Pierre\",\n                \"lastName\": \"Trudeau\"\n            },\n            \"dateOfBirth\": \"1971-12-25\"\n        }\n    },\n    \"payer\": {\n        \"partyIdType\": \"PERSONAL_ID\",\n        \"partyIdentifier\": \"16135551212\",\n        \"partySubIdOrType\": \"DRIVING_LICENSE\",\n        \"fspId\": \"1234\"\n    },\n    \"amount\": {\n        \"currency\": \"USD\",\n        \"amount\": \"123.45\"\n    },\n    \"transactionType\": {\n        \"scenario\": \"DEPOSIT\",\n        \"subScenario\": \"CUSTOM_SUBSCENARIO\",\n        \"initiator\": \"PAYEE\",\n        \"initiatorType\": \"CONSUMER\",\n        \"refundInfo\": {\n            \"originalTransactionId\": \"{{transactionRequestId}}\",\n            \"refundReason\": \"free text indicating reason for the refund\"\n        },\n        \"balanceOfPayments\": \"123\"\n    },\n    \"note\": \"Free-text memo\",\n    \"geoCode\": {\n        \"latitude\": \"+45.4215\",\n        \"longitude\": \"+75.6972\"\n    },\n    \"authenticationType\": \"OTP\",\n     \"expiration\": \"{{transferExpiration}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests"
									]
								}
							},
							"response": []
						},
						{
							"name": "send RECEIVED state",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "03d374e9-394f-4cd1-8413-2e28a689dff6",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "763de85e-e30a-4b5c-ba7e-d61ee1fd3b1c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/transactionRequests/callbacks/\"+pm.environment.get(\"transactionRequestId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            const responseJson = response.json()",
											"            const headers = responseJson.headers",
											"            const data = responseJson.data",
											"            ",
											"            pm.test(\"Callback received in the Simulator\", function () {",
											"                pm.expect(data).not.equal(undefined);",
											"            });",
											"            ",
											"            pm.test(\"transactionId matches\", function () {",
											"                pm.expect(data['transactionId']).to.eql(pm.environment.get(\"transactionRequestId\"));",
											"            });",
											"                ",
											"            pm.test(\"fspiop-source is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-destination is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            pm.test(\"content-type is same as sent in the request\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transactionRequests+json;version=1.0');",
											"            });",
											"            ",
											"      } else {",
											"          pm.test(\"Transaction Request FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"          });",
											"      }",
											"       ",
											"  });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "/transactionRequests/{{transactionRequestId}}",
										"type": "text"
									},
									{
										"key": "fspiop-http-method",
										"value": "PUT",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{transactionRequestId}}\",\n    \"transactionRequestState\": \"RECEIVED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests/{{transactionRequestId}}",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests",
										"{{transactionRequestId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check transactionRequest state",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00f79487-2bff-41fa-8e0b-3e566b18c1f1",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/transactionRequests/callbacks/\"+pm.environment.get(\"transactionRequestId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            const responseJson = response.json()",
											"            const headers = responseJson.headers",
											"            const data = responseJson.data",
											"            ",
											"            console.log(data);",
											"            ",
											"            pm.test(\"Callback received in the Simulator\", function () {",
											"                pm.expect(data).not.equal(undefined);",
											"            });",
											"            ",
											"            pm.test(\"transactionId matches\", function () {",
											"                pm.expect(data['transactionId']).to.eql(pm.environment.get(\"transactionRequestId\"));",
											"            });",
											"                ",
											"            pm.test(\"fspiop-source is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            pm.test(\"content-type is same as sent in the request\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transactionRequests+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"transactionRequestState is RECEIVED\", function () {",
											"                pm.expect(data['transactionRequestState']).to.eql('RECEIVED');",
											"            });",
											"            ",
											"      } else {",
											"          pm.test(\"Transaction Request FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"          });",
											"      }",
											"       ",
											"  });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b6d92e76-64c2-40e2-b79a-66b20e3b00e2",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "/transactionRequests",
										"type": "text"
									},
									{
										"key": "fspiop-http-method",
										"value": "GET",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests/{{transactionRequestId}}",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests",
										"{{transactionRequestId}}"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "reject State",
					"item": [
						{
							"name": "Payee initiate request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2fdcf741-9f78-4244-8669-50b8954803e0",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/transactionRequests/callbacks/\"+pm.environment.get(\"transactionRequestId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            const responseJson = response.json()",
											"            const headers = responseJson.headers",
											"            const data = responseJson.data",
											"            ",
											"            pm.test(\"Callback received in the Simulator\", function () {",
											"                pm.expect(data).not.equal(undefined);",
											"            });",
											"            ",
											"            pm.test(\"transactionId matches\", function () {",
											"                pm.expect(data['transactionId']).to.eql(pm.environment.get(\"transactionRequestId\"));",
											"            });",
											"                ",
											"            pm.test(\"fspiop-source is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-destination is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            pm.test(\"content-type is same as sent in the request\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transactionRequests+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"transactionRequestState is RECEIVED\", function () {",
											"                pm.expect(data['transactionRequestState']).to.eql('RECEIVED');",
											"            });",
											"            ",
											"      } else {",
											"          pm.test(\"Transaction Request FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"          });",
											"      }",
											"       ",
											"  });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7162fc3b-c31d-4857-86b4-050676570b7a",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);",
											"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-destination",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-http-method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionRequestId\": \"{{transactionRequestId}}\",\n    \"payee\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"PERSONAL_ID\",\n            \"partyIdentifier\": \"16135551212\",\n            \"partySubIdOrType\": \"DRIVING_LICENSE\",\n            \"fspId\": \"1234\"\n        },\n        \"merchantClassificationCode\": \"4321\",\n        \"name\": \"Justin Trudeau\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"Justin\",\n                \"middleName\": \"Pierre\",\n                \"lastName\": \"Trudeau\"\n            },\n            \"dateOfBirth\": \"1971-12-25\"\n        }\n    },\n    \"payer\": {\n        \"partyIdType\": \"PERSONAL_ID\",\n        \"partyIdentifier\": \"16135551212\",\n        \"partySubIdOrType\": \"DRIVING_LICENSE\",\n        \"fspId\": \"1234\"\n    },\n    \"amount\": {\n        \"currency\": \"USD\",\n        \"amount\": \"123.45\"\n    },\n    \"transactionType\": {\n        \"scenario\": \"DEPOSIT\",\n        \"subScenario\": \"CUSTOM_SUBSCENARIO\",\n        \"initiator\": \"PAYEE\",\n        \"initiatorType\": \"CONSUMER\",\n        \"refundInfo\": {\n            \"originalTransactionId\": \"{{transactionRequestId}}\",\n            \"refundReason\": \"free text indicating reason for the refund\"\n        },\n        \"balanceOfPayments\": \"123\"\n    },\n    \"note\": \"Free-text memo\",\n    \"geoCode\": {\n        \"latitude\": \"+45.4215\",\n        \"longitude\": \"+75.6972\"\n    },\n    \"authenticationType\": \"OTP\",\n     \"expiration\": \"{{transferExpiration}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check transactionRequest state",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5990826e-bdfd-441b-b1b8-6ff557320d13",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/transactionRequests/callbacks/\"+pm.environment.get(\"transactionRequestId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            const responseJson = response.json()",
											"            const headers = responseJson.headers",
											"            const data = responseJson.data",
											"            ",
											"            console.log(data);",
											"            ",
											"            pm.test(\"Callback received in the Simulator\", function () {",
											"                pm.expect(data).not.equal(undefined);",
											"            });",
											"            ",
											"            pm.test(\"transactionId matches\", function () {",
											"                pm.expect(data['transactionId']).to.eql(pm.environment.get(\"transactionRequestId\"));",
											"            });",
											"                ",
											"            pm.test(\"fspiop-source is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            pm.test(\"content-type is same as sent in the request\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transactionRequests+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"transactionRequestState is RECEIVED\", function () {",
											"                pm.expect(data['transactionRequestState']).to.eql('RECEIVED');",
											"            });",
											"            ",
											"      } else {",
											"          pm.test(\"Transaction Request FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"          });",
											"      }",
											"       ",
											"  });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1fdbb4b4-9118-425b-8bea-3a837c7f6ef5",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "/transactionRequests",
										"type": "text"
									},
									{
										"key": "fspiop-http-method",
										"value": "GET",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests/{{transactionRequestId}}",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests",
										"{{transactionRequestId}}"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Send REJECT state",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9078d150-d9be-443f-ab4c-256432d0d8f5",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0977f27e-39c6-42c3-b68a-bd2ef6ce0af3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/transactionRequests/callbacks/\"+pm.environment.get(\"transactionRequestId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            const responseJson = response.json()",
											"            const headers = responseJson.headers",
											"            const data = responseJson.data",
											"            ",
											"            pm.test(\"Callback received in the Simulator\", function () {",
											"                pm.expect(data).not.equal(undefined);",
											"            });",
											"            ",
											"            pm.test(\"transactionId matches\", function () {",
											"                pm.expect(data['transactionId']).to.eql(pm.environment.get(\"transactionRequestId\"));",
											"            });",
											"                ",
											"            pm.test(\"fspiop-source is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-destination is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            pm.test(\"content-type is same as sent in the request\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transactionRequests+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"transactionRequestState is REJECTED\", function () {",
											"                pm.expect(data['transactionRequestState']).to.eql('REJECTED');",
											"            });",
											"            ",
											"      } else {",
											"          pm.test(\"Transaction Request FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"          });",
											"      }",
											"       ",
											"  });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transactionRequestDate}}"
									},
									{
										"key": "fspiop-source",
										"type": "text",
										"value": "{{payerfsp}}"
									},
									{
										"key": "fspiop-destination",
										"type": "text",
										"value": "{{payeefsp}}"
									},
									{
										"key": "fspiop-signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									},
									{
										"key": "fspiop-uri",
										"type": "text",
										"value": "/transactionRequests/{{transactionRequestId}}"
									},
									{
										"key": "fspiop-http-method",
										"type": "text",
										"value": "PUT"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionId\": \"{{transactionRequestId}}\",\n    \"transactionRequestState\": \"REJECTED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests/{{transactionRequestId}}",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests",
										"{{transactionRequestId}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b31476c6-5a88-4fae-9796-1029be0d7e86",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "537c3950-6d51-4e7a-b6a6-a3f0dd760796",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "error framework",
					"item": [
						{
							"name": "Check unknown transactionID - error code and description",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36dab756-b634-4d02-8d69-4f8a177ca395",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/transactionRequests/callbacks/\"+pm.environment.get(\"transactionRequestId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            const responseJson = response.json()",
											"            const headers = responseJson.headers",
											"            const data = responseJson.data",
											"            ",
											"            console.log(data);",
											"            ",
											"            pm.test(\"Callback received in the Simulator\", function () {",
											"                pm.expect(data).not.equal(undefined);",
											"            });",
											"            ",
											"            pm.test(\"transactionId matches\", function () {",
											"                pm.expect(data['transactionId']).to.eql(undefined);",
											"            });",
											"                ",
											"            pm.test(\"fspiop-source is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-destination is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            pm.test(\"content-type is same as sent in the request\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transactionRequests+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"Check ID missing\", function () {",
											"                pm.expect(data.errorInformation.errorDescription).to.include('Transaction request ID not found ');",
											"            });",
											"",
											"            pm.test(\"Check Error code 3003\", function () {",
											"                pm.expect(data.errorInformation.errorCode).to.eql('3206');",
											"            });",
											"            ",
											"      } else {",
											"          pm.test(\"Transaction Request FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"          });",
											"      }",
											"       ",
											"  });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bdd671bb-dd6e-43a7-bb51-ed736c2bfd10",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{transactionRequestDate}}"
									},
									{
										"key": "fspiop-source",
										"type": "text",
										"value": "{{payeefsp}}"
									},
									{
										"key": "fspiop-destination",
										"type": "text",
										"value": "{{payerfsp}}"
									},
									{
										"key": "fspiop-signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									},
									{
										"key": "fspiop-uri",
										"type": "text",
										"value": "/transactionRequests"
									},
									{
										"key": "fspiop-http-method",
										"type": "text",
										"value": "GET"
									}
								],
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests/{{transactionRequestId}}",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests",
										"{{transactionRequestId}}"
									],
									"query": [
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "3100 - Missing body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06e571d1-bf48-481b-b088-45a1fcd7db1c",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check Malformed syntax error \", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax ');",
											"});",
											"",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c2a78ded-b3d0-4bb7-ab3d-bb757ccb5d6d",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "Content-Length",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-forwarded-for",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-encryption",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-http-method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Date ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2cb89a7c-bd75-4404-b30e-5b8f1dae3e90",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Missing mandatory element error\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
											"});",
											"",
											"pm.test(\"Error message date is required\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('date');",
											"});",
											"",
											"pm.test(\"Check Error code 3102\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d8d17b05-906c-4f36-b8ee-2d9860722b23",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "Content-Length",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-forwarded-for",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-encryption",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-http-method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionRequestId\": \"{{transactionRequestId}}\",\n    \"payee\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"PERSONAL_ID\",\n            \"partyIdentifier\": \"16135551212\",\n            \"partySubIdOrType\": \"DRIVING_LICENSE\",\n            \"fspId\": \"1234\"\n        },\n        \"merchantClassificationCode\": \"4321\",\n        \"name\": \"Justin Trudeau\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"Justin\",\n                \"middleName\": \"Pierre\",\n                \"lastName\": \"Trudeau\"\n            },\n            \"dateOfBirth\": \"1971-12-25\"\n        }\n    },\n    \"payer\": {\n        \"partyIdType\": \"PERSONAL_ID\",\n        \"partyIdentifier\": \"16135551212\",\n        \"partySubIdOrType\": \"DRIVING_LICENSE\",\n        \"fspId\": \"1234\"\n    },\n    \"amount\": {\n        \"currency\": \"USD\",\n        \"amount\": \"123.45\"\n    },\n    \"transactionType\": {\n        \"scenario\": \"DEPOSIT\",\n        \"subScenario\": \"locally defined sub-scenario\",\n        \"initiator\": \"PAYEE\",\n        \"initiatorType\": \"CONSUMER\",\n        \"refundInfo\": {\n            \"originalTransactionId\": \"{{transactionRequestId}}\",\n            \"refundReason\": \"free text indicating reason for the refund\"\n        },\n        \"balanceOfPayments\": \"123\"\n    },\n    \"note\": \"Free-text memo\",\n    \"geoCode\": {\n        \"latitude\": \"+45.4215\",\n        \"longitude\": \"+75.6972\"\n    },\n    \"authenticationType\": \"OTP\",\n    \"expiration\": \"2016-05-24T08:38:08.699-04:00\",\n    \"extensionList\": {\n        \"extension\": [\n            {\n                \"key\": \"errorDescription\",\n                \"value\": \"This is a more detailed error description\"\n            },\n            {\n                \"key\": \"errorDescription\",\n                \"value\": \"This is a more detailed error description\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing fspiop-source",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1fc9168-00be-40ff-b3c2-c201e195c165",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Missing mandatory element error\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
											"});",
											"",
											"pm.test(\"Error message fspiop-source is required\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('fspiop-source');",
											"});",
											"",
											"pm.test(\"Check Error code 3102\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "21ac6014-1e64-48e5-a7d9-72573ac72e13",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Length",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-forwarded-for",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-encryption",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-http-method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionRequestId\": \"{{transactionRequestId}}\",\n    \"payee\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"PERSONAL_ID\",\n            \"partyIdentifier\": \"16135551212\",\n            \"partySubIdOrType\": \"DRIVING_LICENSE\",\n            \"fspId\": \"1234\"\n        },\n        \"merchantClassificationCode\": \"4321\",\n        \"name\": \"Justin Trudeau\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"Justin\",\n                \"middleName\": \"Pierre\",\n                \"lastName\": \"Trudeau\"\n            },\n            \"dateOfBirth\": \"1971-12-25\"\n        }\n    },\n    \"payer\": {\n        \"partyIdType\": \"PERSONAL_ID\",\n        \"partyIdentifier\": \"16135551212\",\n        \"partySubIdOrType\": \"DRIVING_LICENSE\",\n        \"fspId\": \"1234\"\n    },\n    \"amount\": {\n        \"currency\": \"USD\",\n        \"amount\": \"123.45\"\n    },\n    \"transactionType\": {\n        \"scenario\": \"DEPOSIT\",\n        \"subScenario\": \"locally defined sub-scenario\",\n        \"initiator\": \"PAYEE\",\n        \"initiatorType\": \"CONSUMER\",\n        \"refundInfo\": {\n            \"originalTransactionId\": \"{{transactionRequestId}}\",\n            \"refundReason\": \"free text indicating reason for the refund\"\n        },\n        \"balanceOfPayments\": \"123\"\n    },\n    \"note\": \"Free-text memo\",\n    \"geoCode\": {\n        \"latitude\": \"+45.4215\",\n        \"longitude\": \"+75.6972\"\n    },\n    \"authenticationType\": \"OTP\",\n    \"expiration\": \"2016-05-24T08:38:08.699-04:00\",\n    \"extensionList\": {\n        \"extension\": [\n            {\n                \"key\": \"errorDescription\",\n                \"value\": \"This is a more detailed error description\"\n            },\n            {\n                \"key\": \"errorDescription\",\n                \"value\": \"This is a more detailed error description\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Wrong content version ",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5ee003ba-82a1-42e6-a57f-c0557cd5d6dd",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 406\", function () {",
											"    pm.response.to.have.status(406);",
											"});",
											"",
											"pm.test(\"Check Unacceptable version requested\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unacceptable version requested');",
											"});",
											"",
											"pm.test(\"Check Error code 3001\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3001');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "824bed55-3d68-4bea-8a6e-c068bc61c866",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+json;version=4.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "Content-Length",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-forwarded-for",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-encryption",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-http-method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionRequestId\": \"{{transactionRequestId}}\",\n    \"payee\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"PERSONAL_ID\",\n            \"partyIdentifier\": \"16135551212\",\n            \"partySubIdOrType\": \"DRIVING_LICENSE\",\n            \"fspId\": \"1234\"\n        },\n        \"merchantClassificationCode\": \"4321\",\n        \"name\": \"Justin Trudeau\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"Justin\",\n                \"middleName\": \"Pierre\",\n                \"lastName\": \"Trudeau\"\n            },\n            \"dateOfBirth\": \"1971-12-25\"\n        }\n    },\n    \"payer\": {\n        \"partyIdType\": \"PERSONAL_ID\",\n        \"partyIdentifier\": \"16135551212\",\n        \"partySubIdOrType\": \"DRIVING_LICENSE\",\n        \"fspId\": \"1234\"\n    },\n    \"amount\": {\n        \"currency\": \"USD\",\n        \"amount\": \"123.45\"\n    },\n    \"transactionType\": {\n        \"scenario\": \"DEPOSIT\",\n        \"subScenario\": \"locally defined sub-scenario\",\n        \"initiator\": \"PAYEE\",\n        \"initiatorType\": \"CONSUMER\",\n        \"refundInfo\": {\n            \"originalTransactionId\": \"{{transactionRequestId}}\",\n            \"refundReason\": \"free text indicating reason for the refund\"\n        },\n        \"balanceOfPayments\": \"123\"\n    },\n    \"note\": \"Free-text memo\",\n    \"geoCode\": {\n        \"latitude\": \"+45.4215\",\n        \"longitude\": \"+75.6972\"\n    },\n    \"authenticationType\": \"OTP\",\n    \"expiration\": \"2016-05-24T08:38:08.699-04:00\",\n    \"extensionList\": {\n        \"extension\": [\n            {\n                \"key\": \"errorDescription\",\n                \"value\": \"This is a more detailed error description\"\n            },\n            {\n                \"key\": \"errorDescription\",\n                \"value\": \"This is a more detailed error description\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unsupported Media Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "089b46bd-d948-48fd-acef-e211162b7a70",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check Malformed syntax - Unsupported Media Type\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax - Unsupported Media Type');",
											"});",
											"",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2106199f-5dfc-47e3-aa64-cb919854f7bd",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transactionRequests+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.transactionRequests+xml;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "Content-Length",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "x-forwarded-for",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-encryption",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "",
										"type": "text",
										"disabled": true
									},
									{
										"key": "fspiop-http-method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"transactionRequestId\": \"{{transactionRequestId}}\",\n    \"payee\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"PERSONAL_ID\",\n            \"partyIdentifier\": \"16135551212\",\n            \"partySubIdOrType\": \"DRIVING_LICENSE\",\n            \"fspId\": \"1234\"\n        },\n        \"merchantClassificationCode\": \"4321\",\n        \"name\": \"Justin Trudeau\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"Justin\",\n                \"middleName\": \"Pierre\",\n                \"lastName\": \"Trudeau\"\n            },\n            \"dateOfBirth\": \"1971-12-25\"\n        }\n    },\n    \"payer\": {\n        \"partyIdType\": \"PERSONAL_ID\",\n        \"partyIdentifier\": \"16135551212\",\n        \"partySubIdOrType\": \"DRIVING_LICENSE\",\n        \"fspId\": \"1234\"\n    },\n    \"amount\": {\n        \"currency\": \"USD\",\n        \"amount\": \"123.45\"\n    },\n    \"transactionType\": {\n        \"scenario\": \"DEPOSIT\",\n        \"subScenario\": \"locally defined sub-scenario\",\n        \"initiator\": \"PAYEE\",\n        \"initiatorType\": \"CONSUMER\",\n        \"refundInfo\": {\n            \"originalTransactionId\": \"{{transactionRequestId}}\",\n            \"refundReason\": \"free text indicating reason for the refund\"\n        },\n        \"balanceOfPayments\": \"123\"\n    },\n    \"note\": \"Free-text memo\",\n    \"geoCode\": {\n        \"latitude\": \"+45.4215\",\n        \"longitude\": \"+75.6972\"\n    },\n    \"authenticationType\": \"OTP\",\n    \"expiration\": \"2016-05-24T08:38:08.699-04:00\",\n    \"extensionList\": {\n        \"extension\": [\n            {\n                \"key\": \"errorDescription\",\n                \"value\": \"This is a more detailed error description\"\n            },\n            {\n                \"key\": \"errorDescription\",\n                \"value\": \"This is a more detailed error description\"\n            }\n        ]\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/transactionRequests",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"transactionRequests"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "authorizations",
					"item": [
						{
							"name": "authorizations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "40df865f-21be-4cc2-9f85-151e8581071d",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "eb9483f6-fe9c-429a-b315-6e31fac04ba7",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.authorizations+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.authorizations+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-destination",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "/authorizations",
										"type": "text"
									},
									{
										"key": "fspiop-http-method",
										"value": "GET",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}?authenticationType=OTP&retriesLeft=2&amount=102&currency=USD",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"authorizations",
										"{{transactionRequestId}}"
									],
									"query": [
										{
											"key": "authenticationType",
											"value": "OTP"
										},
										{
											"key": "retriesLeft",
											"value": "2"
										},
										{
											"key": "amount",
											"value": "102"
										},
										{
											"key": "currency",
											"value": "USD"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "authorizations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f56be8e9-770a-49a4-831e-863c2f64b9b8",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9b68db53-479f-4e65-9b89-7365481d2bda",
										"exec": [
											"pm.environment.set('transactionRequestDate', (new Date()).toUTCString());",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"",
											"pm.environment.set('transactionRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.authorizations+json;version=1",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.authorizations+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{transactionRequestDate}}",
										"type": "text"
									},
									{
										"key": "fspiop-source",
										"value": "{{payeefsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-destination",
										"value": "{{payerfsp}}",
										"type": "text"
									},
									{
										"key": "fspiop-signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "fspiop-uri",
										"value": "/authorizations",
										"type": "text"
									},
									{
										"key": "fspiop-http-method",
										"value": "PUT",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"authenticationInfo\": {\n    \"authentication\": \"OTP\",\n    \"authenticationValue\": \"234567\"\n  },\n  \"responseType\": \"REJECTED\"\n}"
								},
								"url": {
									"raw": "{{HOST_TRANSACTION_REQUESTS_SERVICE}}/authorizations/{{transactionRequestId}}",
									"host": [
										"{{HOST_TRANSACTION_REQUESTS_SERVICE}}"
									],
									"path": [
										"authorizations",
										"{{transactionRequestId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "quoting_service",
			"item": [
				{
					"name": "Get health status of Quoting Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e1e3b63e-ef30-4cfa-9714-7c5fbd3014d3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Checking data",
									"var jsonData = pm.response.json();",
									"pm.test(\"Expected Status is OK\", function () {",
									"   pm.expect(jsonData.status).to.eql(\"OK\");",
									"",
									"    pm.test(\"Expected body to have services array\", function () {",
									"       pm.expect(jsonData.services).to.be.an('array');",
									"       ",
									"        pm.test(\"Expected services to have data store and status is OK\", function () {",
									"            const datastoreOK = jsonData.services.find(item => {",
									"               return item.name=='datastore' && item.status=='OK'; ",
									"            });",
									"            pm.expect(datastoreOK).to.be.an('object');",
									"   ",
									"        });",
									"    });",
									"    ",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/health",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Send Quote",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc657a5e-be95-473b-ad6e-8041655b49ac",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"//Check Data on payer side",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"      if(response.responseSize !== 0) {",
									"            var jsonData = response.json().data;",
									"            pm.test(\"Send Quote Amount in 4 decimal returned\", function () {",
									"                pm.expect(+jsonData.transferAmount.amount).equal(pm.environment.get(\"transferAmount\"));",
									"            });",
									"            ",
									"      } else {",
									"          pm.test(\"Quote FAILED\", function () {",
									"            throw new Error('Did not receive response');",
									"          });",
									"      }",
									"       ",
									"  });",
									"}, 1000)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eb2b9c75-1d2d-48dc-92e7-eff91c9af774",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('transferAmount', 60.1234);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TESTFSP1_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Quote",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d0bf58d-5244-4fc5-97ac-50ba209495ec",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"//Check Data on payer side",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"      if(response.responseSize !== 0) {",
									"            var jsonData = response.json().data;",
									"            var headers = response.json().headers;",
									"            ",
									"            pm.test(\"Send Quote Amount in 4 decimal returned\", function () {",
									"                pm.expect(+jsonData.transferAmount.amount).equal(pm.environment.get(\"transferAmount\"));",
									"            });",
									"            ",
									"                //Check the Headers",
									"                pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
									"                    pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
									"                });",
									"                ",
									"                pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
									"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
									"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
									"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
									"                });",
									"            ",
									"      } else {",
									"          pm.test(\"Quote FAILED\", function () {",
									"            throw new Error('Did not receive response');",
									"          });",
									"      }",
									"       ",
									"  });",
									"}, 1000)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8ffb22ae-5059-424a-b64d-5250300e40e2",
								"exec": [
									"// var uuid = require('uuid');",
									"// var generatedUUID = uuid.v4();",
									"",
									"// pm.environment.set('quoteId', generatedUUID);",
									"// generatedUUID = uuid.v4();",
									"// pm.environment.set('transactionId', generatedUUID);",
									"// pm.environment.set('transferAmount', 60.1234);",
									"// pm.environment.set('quoteDate', (new Date()).toUTCString());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TESTFSP1_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId}}",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes",
								"{{quoteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Send Quote - Missing Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1d81f10-d9ed-402c-962c-66751a152214",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"            ",
									"pm.test(\"Missing mandatory element error\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
									"});",
									"",
									"pm.test(\"Error message date is required\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('date');",
									"});  ",
									"",
									"pm.test(\"Check Error code 3102\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dd806a41-f955-4ea2-a7f9-c2cfaf7882cc",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('transferAmount', 60.1234);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TESTFSP1_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}",
								"disabled": true
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Send Quote - Missing Accept Header",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "72207316-560f-40ef-a5f2-01dffb9dbf98",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"            ",
									"pm.test(\"Check Missing mandatory element - Invalid accept header\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax - Invalid accept header');",
									"});            ",
									"            ",
									"pm.test(\"Check Error code 3101\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1ac1230a-220f-44c1-9c73-49012c58178a",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('transferAmount', 60.1234);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TESTFSP1_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Quote - Missing content type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f56b94ff-207a-4e75-8de1-87977bced398",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check Missing mandatory element\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element');",
									"});",
									"",
									"pm.test(\"Check Error code 3102\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "34e15711-32f9-46f9-bf96-6091dbacbab8",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TESTFSP1_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0",
								"disabled": true
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId}}",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes",
								"{{quoteId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Quote - Invalid content type ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa1c5698-5c32-4f18-a9b1-35277c032392",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check Malformed syntax\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
									"});",
									"",
									"pm.test(\"Check Error code 3101\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7d64f723-ce68-4cfb-b5a8-6cfd0f37f0ca",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TESTFSP1_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+xml;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId}}",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes",
								"{{quoteId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f617c495-32a6-4f71-a0c2-363ac07abd4d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f2541ae0-de98-4bf5-878f-e36966410295",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "p2p_on_us_transfers",
			"item": [
				{
					"name": "Add User - {{pathfinderMSISDN}} to payeefsp",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "afba48e7-8927-43c0-a4b5-6a2b20cffa9e",
								"exec": [
									"pm.environment.set('fullName', 'Siabelo Maroka');",
									"pm.environment.set('firstName', 'Siabelo');",
									"pm.environment.set('lastName', 'Maroka');",
									"pm.environment.set('dob', '3/3/1973');",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4a1eb10e-4756-4998-bf5c-9b53d00b3969",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"party\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"MSISDN\",\n            \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n            \"fspId\": \"{{payeefsp}}\"\n        },\n        \"name\": \"{{fullName}}\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"dateOfBirth\": \"{{dob}}\"\n        }\n    }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{HOST_SIMULATOR}}/payeefsp/parties/MSISDN/{{pathfinderMSISDN}}",
							"host": [
								"{{HOST_SIMULATOR}}"
							],
							"path": [
								"payeefsp",
								"parties",
								"MSISDN",
								"{{pathfinderMSISDN}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Participant {{pathfinderMSISDN}} against MSISDN Simulator for PayeeFSP",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.participants+json;version=1"
							},
							{
								"key": "Connection",
								"value": "keep-alive"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.participants+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payeefsp"
							},
							{
								"key": "Postman-Token",
								"value": "7aa4c9f3-1738-49f0-8904-7821e2336692,4127ff87-7d17-483c-8e3e-f0b562a16d84"
							},
							{
								"key": "User-Agent",
								"value": "PostmanRuntime/7.11.0"
							},
							{
								"key": "accept-encoding",
								"value": "gzip, deflate"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fspId\": \"payeefsp\",\n    \"currency\": \"USD\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"participants",
								"MSISDN",
								"{{pathfinderMSISDN}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Quote_SEND",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "603eb374-1ea6-40cd-bf90-fd689bd71360",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									"pm.environment.set('transferAmount', 60.11);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6bafa0b6-e489-4df5-b96f-8d8408f72894",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"const ON_US_TRANSFERS_ENABLED = pm.environment.get(\"ON_US_TRANSFERS_ENABLED\") && (pm.environment.get(\"ON_US_TRANSFERS_ENABLED\")===\"true\" || pm.environment.get(\"ON_US_TRANSFERS_ENABLED\")===true || pm.environment.get(\"ON_US_TRANSFERS_ENABLED\")===\"1\") ? true : false",
									"",
									"//Check the request that Switch forwards to payeefsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"              ",
									"              //Check the Headers",
									"              var headers = response.json().headers;",
									"              ",
									"                pm.test(\"payeefsp fspiop-source is payeefsp\", function () {",
									"                    pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
									"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
									"                    pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
									"                });",
									"                ",
									"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
									"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
									"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
									"                });",
									"                ",
									"          } else {",
									"              pm.test(\"Quote FAILED\", function () {",
									"                throw new Error('Did not receive request on payee side');",
									"              });",
									"              postman.setNextRequest(null)",
									"          }",
									"   });",
									"}, 1100)",
									"",
									"//Check Data on payer side",
									"if (ON_US_TRANSFERS_ENABLED) {",
									"    setTimeout(function () {",
									"    pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"        if(response.responseSize !== 0) {",
									"            //Checking headers",
									"                var headers = response.json().headers;",
									"                pm.test(\"payeefsp fspiop-source is payeefsp\", function () {",
									"                    pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
									"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
									"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp accept is empty\", function () {",
									"                    pm.expect(headers['accept']).to.eql(undefined);",
									"                });",
									"                ",
									"                //Validate protected header inside Signature",
									"                var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
									"                var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
									"                console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
									"                ",
									"                pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
									"                    pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
									"                });",
									"                pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
									"                    pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
									"                });",
									"                ",
									"",
									"                pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
									"                    pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
									"                });",
									"                pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
									"                    pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
									"                });",
									"                pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payeefsp\", function () {",
									"                    pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payeefsp');",
									"                });",
									"                pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
									"                    pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
									"                });",
									"            ",
									"                pm.test(\"payeefsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
									"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
									"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
									"                });",
									"                ",
									"                var jsonData = response.json().data;",
									"                ",
									"            pm.test(\"Response fees is returned\", function () {",
									"                    pm.expect(jsonData.payeeFspFee.amount).equal(\"1\");",
									"                    ",
									"                });",
									"                pm.test(\"Response Commission is returned\", function () {",
									"                    pm.expect(jsonData.payeeFspCommission.amount).equal(\"1\");",
									"                    ",
									"                });",
									"                ",
									"                pm.test(\"Response ilpPacket is not undefined\", function () {",
									"                    pm.expect(jsonData.ilpPacket).not.equal(undefined);",
									"                    pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
									"                });",
									"        ",
									"            pm.test(\"Response condition is not undefined\", function () {",
									"                pm.expect(jsonData.condition).not.equal(undefined);",
									"                pm.environment.set(\"condition\", jsonData.condition);",
									"            });",
									"        } else {",
									"            pm.test(\"Quote FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"            });",
									"",
									"        }",
									"        ",
									"    });",
									"    }, 1000)",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TESTFSP1_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payeefsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Transfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "99c60bf5-32e5-4b86-8b10-058bb76e8c83",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"const ON_US_TRANSFERS_ENABLED = pm.environment.get(\"ON_US_TRANSFERS_ENABLED\") && (pm.environment.get(\"ON_US_TRANSFERS_ENABLED\")===\"true\" || pm.environment.get(\"ON_US_TRANSFERS_ENABLED\")===true || pm.environment.get(\"ON_US_TRANSFERS_ENABLED\")===\"1\") ? true : false",
									"",
									"if (ON_US_TRANSFERS_ENABLED) {",
									"    //Check the request that Switch forwards to payeefsp",
									"    setTimeout(function () {",
									"    pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"            if(response.responseSize !== 0) {",
									"                ",
									"                //Check the Headers",
									"                var headers = response.json().headers;",
									"                ",
									"                    pm.test(\"payeefsp fspiop-source is payeefsp\", function () {",
									"                        pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
									"                    });",
									"                    ",
									"                    pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
									"                        pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
									"                    });",
									"                    ",
									"                    pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
									"                        pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
									"                    });",
									"                    ",
									"                    pm.test(\"payeefsp accept is same as sent in the request\", function () {",
									"                        pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');",
									"                    });",
									"                    ",
									"                    pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
									"                        pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
									"                    });",
									"                    ",
									"                    pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
									"                        pm.expect(headers['fspiop-http-method']).to.eql('POST');",
									"                    });",
									"                    ",
									"                    pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
									"                        pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
									"                    });",
									"                    ",
									"                    ",
									"                    //Check the data",
									"                    var jsonData = response.json().data;",
									"                    pm.test(\"payeefsp data should have the same transferId as request\", function () {",
									"                    pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));",
									"                    });",
									"                    pm.test(\"payerfsp data should have the same payeefspId as request\", function () {",
									"                    pm.expect(jsonData.payerFsp).to.eql(pm.environment.get(\"payeefsp\"));",
									"                    });",
									"                    pm.test(\"payeefsp data should have the same payeefspId as request\", function () {",
									"                    pm.expect(jsonData.payeeFsp).to.eql(pm.environment.get(\"payeefsp\"));",
									"                    });",
									"                    pm.test(\"payeefsp data should have the same amount as request\", function () {",
									"                    pm.expect(+jsonData.amount.amount).to.eql(pm.environment.get(\"transferAmount\"));",
									"                    });",
									"                    pm.test(\"payeefsp data should have the same currency as request\", function () {",
									"                    pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
									"                    });",
									"                    pm.test(\"payeefsp data should have the same expiration as request\", function () {",
									"                    pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
									"                    });",
									"                    pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
									"                    pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
									"                    });",
									"                    pm.test(\"payeefsp data should have the same condition as request\", function () {",
									"                    pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
									"                    });",
									"                    ",
									"            } else {",
									"                pm.test(\"Transfer FAILED\", function () {",
									"                    throw new Error('Did not receive response');",
									"                });",
									"",
									"            }",
									"    });",
									"    }, 1100)",
									"",
									"    //Check the callback response that Switch forwards to payeefsp",
									"    setTimeout(function () {",
									"    pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"            if(response.responseSize !== 0) {",
									"                //Checking headers",
									"                var headers = response.json().headers;",
									"                pm.test(\"payeefsp fspiop-source is payeefsp\", function () {",
									"                    pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
									"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
									"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp accept is empty\", function () {",
									"                    pm.expect(headers['accept']).to.eql(undefined);",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-uri includes transfers\", function () {",
									"                    pm.expect(headers['fspiop-uri']).to.include('/transfers');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
									"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
									"                });",
									"                ",
									"                var jsonData = response.json().data;",
									"                pm.test(\"Response data does not have transferId\", function () {",
									"                pm.expect(jsonData.transferId).to.eql(undefined);",
									"                });",
									"                pm.test(\"Response status is COMMITTED\", function () {",
									"                    pm.expect(jsonData.transferState).to.eql('COMMITTED');",
									"                });",
									"            } else {",
									"                pm.test(\"Transfer FAILED\", function () {",
									"                    throw new Error('Did not receive response');",
									"                });",
									"",
									"            }",
									"    });",
									"    }, 1300)",
									"} else {",
									"    //Check the error callback response that Switch forwards to payeefsp",
									"    setTimeout(function () {",
									"    pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"            if(response.responseSize !== 0) {",
									"                //Checking headers",
									"                var headers = response.json().headers;",
									"                pm.test(\"payeefsp fspiop-source is payeefsp\", function () {",
									"                    pm.expect(headers['fspiop-source']).to.eql('switch');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
									"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
									"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp accept is empty\", function () {",
									"                    pm.expect(headers['accept']).to.eql(undefined);",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-uri includes transfers\", function () {",
									"                    pm.expect(headers['fspiop-uri']).to.include('/transfers');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
									"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
									"                });",
									"                ",
									"                var jsonData = response.json().data;",
									"                pm.test(\"Error response data should have errorInformation\", function () {",
									"                    pm.expect(jsonData).to.have.property(\"errorInformation\");",
									"                    pm.test(\"Error code should be 3100\", function () {",
									"                        pm.expect(jsonData.errorInformation.errorCode).to.eql('3100');",
									"                    });",
									"                    pm.test(\"Error description should contain proper reason\", function () {",
									"                        pm.expect(jsonData.errorInformation.errorDescription).to.include('Payer and Payee should be different');",
									"                    });",
									"                });",
									"            } else {",
									"                pm.test(\"Transfer FAILED\", function () {",
									"                    throw new Error('Did not receive response');",
									"                });",
									"",
									"            }",
									"    });",
									"    }, 1300)",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "55496b41-66ff-4a0a-8c2d-26681831c379",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));",
									"pm.environment.set('transferAmount', 1.11);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							},
							{
								"key": "FSPIOP-URI",
								"value": "/transfers",
								"type": "text"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "POST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payeefsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "04d06dad-f334-40f9-a063-9f973ea5d407",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "27958e2b-79e6-4a1a-a4a3-75edd40576f2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Bug Fixes",
			"item": [
				{
					"name": "Tests for Bugfix #998 - Quoting service not using most recent endpoint",
					"item": [
						{
							"name": "Add payeefsp request URL - QUOTES PUT with incorrect endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92a41f41-3527-4a79-a70e-b1e03c25734d",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"FSPIOP_CALLBACK_URL_QUOTES\",\n  \"value\": \"{{HOST_SIMULATOR_K8S_CLUSTER}}/incorrectpayeefsp\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payeefsp/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"payeefsp",
										"endpoints"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND should not get callback",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a29753b4-25e2-40cb-baff-09769efdf254",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ec6ffeae-f703-4dd3-ab70-efca5e99d367",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"",
											"//Check Data on payee side - payeefsp should not receive any data as we added the incorrectpayeefsp as endpoint in the previous step",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"          ",
											"            pm.test(\"Test Failed\", function () {",
											"                throw new Error('Recieved request at payeefsp, so failed');",
											"            });",
											"          ",
											"      } else {",
											"          pm.test(\"Test Passed - Because didn't get request at payeefsp\", function () {",
											"            //Do nothing",
											"           });",
											"",
											"      }",
											"       ",
											"   });",
											"}, 1000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add payeefsp request URL - QUOTES PUT with correct endpoint",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "886e7ca5-f494-423d-b2e7-141d3b9a81ef",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"FSPIOP_CALLBACK_URL_QUOTES\",\n  \"value\": \"{{HOST_SIMULATOR_K8S_CLUSTER}}/payeefsp\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payeefsp/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"payeefsp",
										"endpoints"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND should get callback",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c0f053c3-82ac-4837-8e27-e595b08135e7",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f8ab88ec-f2fb-4eb4-8695-65ddbed9603a",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check Data on payee side - payeefsp should get request now as we updated the correct endpoint in the previous step",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            pm.test(\"Test Passed, request received at payeefsp\", function () {",
											"            //Do Nothing",
											"           });",
											"          ",
											"      } else {",
											"            pm.test(\"Test Failed\", function () {",
											"                throw new Error('Did not get response, so failed');",
											"            });",
											"      }",
											"       ",
											"   });",
											"}, 1000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests for Bugfix #1009 - ML Adapter and ALS service health should include broker status",
					"item": [
						{
							"name": "Get health status of ML Adapter",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9af0248b-9605-4495-93f2-950c88647cbd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Checking data",
											"var jsonData = pm.response.json();",
											"pm.test(\"Expected Status is OK\", function () {",
											"   pm.expect(jsonData.status).to.eql(\"OK\");",
											"",
											"    pm.test(\"Expected body to have services array\", function () {",
											"       pm.expect(jsonData.services).to.be.an('array');",
											"       ",
											"        pm.test(\"Expected services to have broker and status is OK\", function () {",
											"            const brokerOk = jsonData.services.find(item => {",
											"               return item.name=='broker' && item.status=='OK'; ",
											"            });",
											"            pm.expect(brokerOk).to.be.an('object');",
											"   ",
											"        });",
											"    });",
											"    ",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/health",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get health status of ALS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cad0da4d-9621-4bd7-bffd-69d8eea432bd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Checking data",
											"var jsonData = pm.response.json();",
											"pm.test(\"Expected Status is OK\", function () {",
											"   pm.expect(jsonData.status).to.eql(\"OK\");",
											"",
											"    pm.test(\"Expected body to have services array\", function () {",
											"       pm.expect(jsonData.services).to.be.an('array');",
											"       ",
											"        pm.test(\"Expected services to have datastore and status is OK\", function () {",
											"            const brokerOk = jsonData.services.find(item => {",
											"               return item.name=='datastore' && item.status=='OK'; ",
											"            });",
											"            pm.expect(brokerOk).to.be.an('object');",
											"   ",
											"        });",
											"    });",
											"    ",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/health",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get health status of Central Ledger",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34bc441f-07c8-4d86-a3cf-091345fbf319",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Checking data",
											"var jsonData = pm.response.json();",
											"pm.test(\"Expected Status is OK\", function () {",
											"   pm.expect(jsonData.status).to.eql(\"OK\");",
											"",
											"    pm.test(\"Expected body to have services array\", function () {",
											"       pm.expect(jsonData.services).to.be.an('array');",
											"       ",
											"        pm.test(\"Expected services to have datastore and status is OK\", function () {",
											"            const brokerOk = jsonData.services.find(item => {",
											"               return item.name=='datastore' && item.status=='OK'; ",
											"            });",
											"            pm.expect(brokerOk).to.be.an('object');",
											"   ",
											"        });",
											"        pm.test(\"Expected services to have broker and status is OK\", function () {",
											"            const brokerOk = jsonData.services.find(item => {",
											"               return item.name=='broker' && item.status=='OK'; ",
											"            });",
											"            pm.expect(brokerOk).to.be.an('object');",
											"   ",
											"        });        ",
											"    });",
											"    ",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/health",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get health status of Central Settlement",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c68cad33-e2f2-442c-b691-74ae5077a2de",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//Checking data",
											"var jsonData = pm.response.json();",
											"pm.test(\"Expected Status is OK\", function () {",
											"   pm.expect(jsonData.status).to.eql(\"OK\");",
											"",
											"    pm.test(\"Expected body to have services array\", function () {",
											"       pm.expect(jsonData.services).to.be.an('array');",
											"       ",
											"        pm.test(\"Expected services to have datastore and status is OK\", function () {",
											"            const brokerOk = jsonData.services.find(item => {",
											"               return item.name=='datastore' && item.status=='OK'; ",
											"            });",
											"            pm.expect(brokerOk).to.be.an('object');",
											"   ",
											"        });",
											"    });",
											"    ",
											"",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/health",
									"host": [
										"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a1debe14-ebfe-433b-af16-d651ea7cf080",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "50f504fd-e879-4e63-8721-b974b8737fdb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests for Bugfix #981 - 500 http code instead of 400",
					"item": [
						{
							"name": "Add Participant - Duplicate account Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b299841-e504-484f-b16d-4df3fceb3167",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check Generic client error\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Generic client error');",
											"});",
											"",
											"pm.test(\"Check Error code 3000\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3000');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{payerfsp}}\",\n  \"currency\": \"USD\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add non existing Participant",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84b1adb5-e337-4d86-9770-be5c69f65ffb",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check Generic ID not found\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Generic ID not found');",
											"});",
											"",
											"pm.test(\"Check Error code 3200\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3200');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/xyz",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"xyz"
									]
								}
							},
							"response": [
								{
									"name": "Get Participant",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{participant}}",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{participant}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "251",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 22 Aug 2018 15:25:18 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "nginx/1.13.8",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "accept-ranges",
											"value": "bytes",
											"name": "accept-ranges",
											"description": "Content-Types that are acceptable"
										},
										{
											"key": "cache-control",
											"value": "no-cache",
											"name": "cache-control",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										}
									],
									"cookie": [],
									"body": "{\"name\":\"testfsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/testfsp\",\"created\":\"2018-08-22T08:16:50.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/testfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]}"
								}
							]
						},
						{
							"name": "Add Participant - Invalid Currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eacfae65-1278-4308-85f4-2089fdd53fec",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check Malformed syntax\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
											"});",
											"",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"payer10\",\n  \"currency\": \"A#\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tests for Bugfix #990 and #1016 - Quotes",
					"item": [
						{
							"name": "Check duplicate quote before and after expiration",
							"item": [
								{
									"name": "Send Quote_SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "42578bd4-deab-4c9d-859d-52bde5693eaa",
												"exec": [
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId', generatedUUID);",
													"   generatedUUID = uuid.v4();",
													"   pm.environment.set('transactionId', generatedUUID);",
													" pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 10000))",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "820ef957-3405-407b-a9e8-801ca4911a70",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// //Check the request that Switch forwards to payeefsp",
													"// setTimeout(function () {",
													"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"//           if(response.responseSize !== 0) {",
													"              ",
													"//               //Check the Headers",
													"//               var headers = response.json().headers;",
													"              ",
													"//                 pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
													"//                     pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"//                 });",
													"                ",
													"//                 pm.test(\"payeefsp fspiop-destination is payerfsp\", function () {",
													"//                     pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"//                 });",
													"                ",
													"//                 pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
													"//                     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
													"//                 });",
													"                ",
													"//                 pm.test(\"payeefsp accept is same as sent in the request\", function () {",
													"//                     pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
													"//                 });",
													"                ",
													"//                 pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
													"//                     pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"//                 });",
													"                ",
													"//           } else {",
													"//               pm.test(\"Quote FAILED\", function () {",
													"//                 throw new Error('Did not receive request on payee side');",
													"//               });",
													"//               postman.setNextRequest(null)",
													"//           }",
													"//   });",
													"// }, 1100)",
													"",
													"// //Check Data on payer side",
													"// setTimeout(function () {",
													"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"//       if(response.responseSize !== 0) {",
													"//           //Checking headers",
													"//             var headers = response.json().headers;",
													"//             pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
													"//                 pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"//             });",
													"            ",
													"//             pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
													"//                 pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"//             });",
													"            ",
													"//             pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
													"//                 pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"//             });",
													"            ",
													"//             pm.test(\"payerfsp accept is empty\", function () {",
													"//                 pm.expect(headers['accept']).to.eql(undefined);",
													"//             });",
													"            ",
													"            ",
													"            ",
													"//             //Validate protected header inside Signature",
													"//             var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"//             var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"//             console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"            ",
													"//             // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
													"//             //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
													"//             // });",
													"            ",
													"//             pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"//             });",
													"//             pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"//                 pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"//             });",
													"            ",
													"",
													"//             pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"//             });",
													"//             pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
													"//             });",
													"//             pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
													"//             });",
													"//             pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
													"//             });",
													"           ",
													"//             pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"//                 pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"//             });",
													"            ",
													"//             pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"//                 pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"//             });",
													"            ",
													"//             var jsonData = response.json().data;",
													"            ",
													"//           pm.test(\"Response fees is returned\", function () {",
													"//                 pm.expect(jsonData.payeeFspFee.amount).equal(\"1\");",
													"                ",
													"//             });",
													"//             pm.test(\"Response Commission is returned\", function () {",
													"//                 pm.expect(jsonData.payeeFspCommission.amount).equal(\"1\");",
													"                ",
													"//             });",
													"            ",
													"//             pm.test(\"Response ilpPacket is not undefined\", function () {",
													"//                 pm.expect(jsonData.ilpPacket).not.equal(undefined);",
													"//                 pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
													"//             });",
													"       ",
													"//           pm.test(\"Response condition is not undefined\", function () {",
													"//               pm.expect(jsonData.condition).not.equal(undefined);",
													"//               pm.environment.set(\"condition\", jsonData.condition);",
													"//           });",
													"//       } else {",
													"//           pm.test(\"Quote FAILED\", function () {",
													"//             throw new Error('Did not receive response');",
													"//           });",
													"",
													"//       }",
													"       ",
													"//   });",
													"// }, 1000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "noresponsepayeefsp"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiop-signature}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"noresponsepayeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Quote_SEND - 12 - Validate Within Expire Time w Duplicate Quote Id Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f4459b24-8817-48a2-bc27-1b4aa713826e",
												"exec": [
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('transactionId', generatedUUID);",
													"",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9cd492d8-745b-49a3-b929-567d8479edd1",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// Check the request that Switch forwards to payeefsp",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              ",
													"              var jsonData = response.json();",
													"            ",
													"            pm.test(\"Check Modified request - Duplicate Quote before expire time\", function () {",
													"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Modified request');",
													"            });",
													"            ",
													"            pm.test(\"Check Error code 3106\", function () {",
													"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3106');",
													"            });",
													"                ",
													"          } else {",
													"              pm.test(\"Quote FAILED\", function () {",
													"                throw new Error('Did not receive request on payee side');",
													"              });",
													"          }",
													"  });",
													"}, 1100)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "noresponsepayeefsp"
											},
											{
												"key": "FSPIOP-Signature",
												"value": "{{fspiop-signature}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"noresponsepayeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"note\": \"hej\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Quote_SEND - 12 - Validate After Expire Time w Duplicate Quote Id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e3f2eb85-3752-49c6-92f3-d1d58be11668",
												"exec": [
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('transactionId', generatedUUID);",
													"   pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 10000))",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest('www.google.com', function (err, response) {}",
													"    );",
													"}, 10000)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8740620c-f6b5-496b-88bc-bde7aa477a98",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// Check the request that Switch forwards to payeefsp",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              ",
													"              var jsonData = response.json();",
													"            ",
													"            pm.test(\"Check Modified request - Duplicate Quote before expire time\", function () {",
													"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Modified request');",
													"            });",
													"            ",
													"            pm.test(\"Check Error code 3106\", function () {",
													"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3106');",
													"            });",
													"                ",
													"          } else {",
													"              pm.test(\"Quote FAILED\", function () {",
													"                throw new Error('Did not receive request on payee side');",
													"              });",
													"          }",
													"  });",
													"}, 1100)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											},
											{
												"key": "FSPIOP-Signature",
												"value": "{{fspiop-signature}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"note\": \"hej\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7e2f3587-4c13-4b60-84ae-3dc6a715d736",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7de09e2d-033e-446f-b7da-c4e50071072d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "bug8-DuplicateQuoteId",
							"item": [
								{
									"name": "Send Quote_SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4eae70ed-f15a-43a3-bfe6-f64bb0d37ce8",
												"exec": [
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId', generatedUUID);",
													"   generatedUUID = uuid.v4();",
													"   pm.environment.set('transactionId', generatedUUID);",
													"",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bddc9712-8c3f-4b12-aac2-d4c8d6863587",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"//Check the request that Switch forwards to payeefsp",
													"// setTimeout(function () {",
													"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"//           if(response.responseSize !== 0) {",
													"              ",
													"//               //Check the Headers",
													"//               var headers = response.json().headers;",
													"              ",
													"//                 pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
													"//                     pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"//                 });",
													"                ",
													"//                 pm.test(\"payeefsp fspiop-destination is payerfsp\", function () {",
													"//                     pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"//                 });",
													"                ",
													"//                 pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
													"//                     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
													"//                 });",
													"                ",
													"//                 pm.test(\"payeefsp accept is same as sent in the request\", function () {",
													"//                     pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
													"//                 });",
													"                ",
													"//                 pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
													"//                     pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"//                 });",
													"                ",
													"//           } else {",
													"//               pm.test(\"Quote FAILED\", function () {",
													"//                 throw new Error('Did not receive request on payee side');",
													"//               });",
													"//               postman.setNextRequest(null)",
													"//           }",
													"//   });",
													"// }, 1100)",
													"",
													"// //Check Data on payer side",
													"// setTimeout(function () {",
													"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"//       if(response.responseSize !== 0) {",
													"//           //Checking headers",
													"//             var headers = response.json().headers;",
													"//             pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
													"//                 pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"//             });",
													"            ",
													"//             pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
													"//                 pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"//             });",
													"            ",
													"//             pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
													"//                 pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"//             });",
													"            ",
													"//             pm.test(\"payerfsp accept is empty\", function () {",
													"//                 pm.expect(headers['accept']).to.eql(undefined);",
													"//             });",
													"            ",
													"            ",
													"            ",
													"//             //Validate protected header inside Signature",
													"//             var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"//             var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"//             console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"            ",
													"//             // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
													"//             //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
													"//             // });",
													"            ",
													"//             pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"//             });",
													"//             pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"//                 pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"//             });",
													"            ",
													"",
													"//             pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"//             });",
													"//             pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
													"//             });",
													"//             pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
													"//             });",
													"//             pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"//                 pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
													"//             });",
													"           ",
													"//             pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"//                 pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"//             });",
													"            ",
													"//             pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"//                 pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"//             });",
													"            ",
													"//             var jsonData = response.json().data;",
													"            ",
													"//           pm.test(\"Response fees is returned\", function () {",
													"//                 pm.expect(jsonData.payeeFspFee.amount).equal(\"1\");",
													"                ",
													"//             });",
													"//             pm.test(\"Response Commission is returned\", function () {",
													"//                 pm.expect(jsonData.payeeFspCommission.amount).equal(\"1\");",
													"                ",
													"//             });",
													"            ",
													"//             pm.test(\"Response ilpPacket is not undefined\", function () {",
													"//                 pm.expect(jsonData.ilpPacket).not.equal(undefined);",
													"//                 pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
													"//             });",
													"       ",
													"//           pm.test(\"Response condition is not undefined\", function () {",
													"//               pm.expect(jsonData.condition).not.equal(undefined);",
													"//               pm.environment.set(\"condition\", jsonData.condition);",
													"//           });",
													"//       } else {",
													"//           pm.test(\"Quote FAILED\", function () {",
													"//             throw new Error('Did not receive response');",
													"//           });",
													"",
													"//       }",
													"       ",
													"//   });",
													"// }, 1000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "payeefsp"
											},
											{
												"key": "FSPIOP-Signature",
												"value": "{{fspiop-signature}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Quote_SEND - 8 - Duplicate QuoteId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e391dc1d-1b82-45c9-8651-54340f5ad029",
												"exec": [
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"//   pm.environment.set('quoteId', generatedUUID);",
													"   pm.environment.set('quoteId', pm.variables.get(\"quoteId\"));",
													"   generatedUUID = uuid.v4();",
													"   pm.environment.set('transactionId', generatedUUID);",
													"",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7444b9cd-d434-437b-8059-858d4898409c",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// //Check Data on payer side",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"      if(response.responseSize !== 0) {",
													"            ",
													"            var jsonData = response.json().data;",
													"            ",
													"            pm.test(\"Check Modified request - Duplicate Quote\", function () {",
													"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Modified request');",
													"            });",
													"            ",
													"            pm.test(\"Check Error code 3106\", function () {",
													"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3106');",
													"            });",
													"            ",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('Did not receive response');",
													"          });",
													"",
													"      }",
													"       ",
													"  });",
													"}, 1000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiop-signature}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Send Quote_SEND - Missing content-type version",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "32020317-7810-47fa-884b-03aaff7d6894",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "554b5103-d671-41c2-9ba0-766e126ee809",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check Missing mandatory element\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
											"});",
											"",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 6a - Invalid Content Type - application/json",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "14ba1614-5449-4f82-b61e-8ee38dbb3f88",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d13c5fbd-4e9e-4cb8-95e9-5c263b2b3618",
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check Missing mandatory element\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
											"});",
											"",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 6b - Invalid Content Type - xml",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c45ac424-74cf-453d-b030-438149e7c919",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Invalid content Type - Check XML type \", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unsupported Media Type');",
											"});            ",
											"            ",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7e0303e6-c8f1-4c77-8735-5e992d935521",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/xml"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 6c - Invalid Content Type - tag body",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bd82bc46-eaa7-4bd3-93e9-e8122fc128cd",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f4d840a4-9f46-4946-a85c-6ccc378c1d62",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Invalid content Type - Check XML type \", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unsupported Media Type');",
											"});            ",
											"            ",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/xml",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<q>\n<q1>\n</q1>\n</q>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 7 - Missing Payer PartyIdType",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "08f8684d-c007-4bbe-9e2b-3faec2a860ea",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bc910152-7be0-45a7-ab20-9cf011693ba8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Missing mandatory element error\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
											"});         ",
											"",
											"pm.test(\"Check Missing payer partyIdType\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('partyIdType');",
											"});        ",
											"            ",
											"pm.test(\"Check Error code 3102\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 7 - Missing Payer PartyIdentifier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "67b852da-6df8-4ef4-8ac7-7e79f91b1fc1",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5014fce0-de85-4d68-99b3-a01cdaa3c3dd",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Check Missing mandatory element error\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
											"});         ",
											"",
											"pm.test(\"Check Missing payer partyIdentifier\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('partyIdentifier');",
											"});        ",
											"            ",
											"pm.test(\"Check Error code 3102\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 7 - Missing Payee PartyIdentifier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4208ce73-36d5-4ce3-a490-e298c508cfe1",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bd13081a-49a7-4fc6-98c2-f01d35f6e651",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"",
											"pm.test(\"Check Missing mandatory element error\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
											"});         ",
											"",
											"pm.test(\"Check Missing payer partyIdentifier\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('partyIdentifier');",
											"});        ",
											"",
											"pm.test(\"Check Error code 3102\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 7 - Missing Payee PartyIdType",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "af7d97ab-ecd8-42b1-a46b-7e13d7da0464",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "69210d1a-4821-4195-b956-cfe35100db50",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Missing mandatory element error\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
											"});         ",
											"",
											"pm.test(\"Check Missing payer partyIdType\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('partyIdType');",
											"});            ",
											"            ",
											"pm.test(\"Check Error code 3102\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 9- Destination FSP NOT FOUND",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dcab9e44-ab7e-4469-a5fb-3cb0c7764bd7",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "543a4ec6-49d1-41ac-b8a9-dd17ffc6540b",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"console.log(\"Test - FSP not found\")",
											"",
											"//Check Data on payer side",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"            ",
											"            var jsonData = response.json().data;",
											"            ",
											"            pm.test(\"Check Destination FSP Error - Unsupported participant\", function () {",
											"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Destination FSP Error - Unsupported participant ');",
											"            });",
											"            ",
											"            pm.test(\"Check Error code 3201\", function () {",
											"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3201');",
											"            });",
											"            ",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"          });",
											"",
											"      }",
											"       ",
											"  });",
											"}, 1000)",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "payeefspNOTFOUND"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"23123123412\",\n      \"fspId\": \"payeefspNOTFOUND\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 10 - PayeePartyIdentifier NOT FOUND",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7790098a-6e50-498e-92b5-9a1ebda63622",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fcc79db5-0ac5-487a-8bfe-a1d2da64eb0d",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Generic Validation Error\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Generic validation error');",
											"});          ",
											"",
											"pm.test(\"Check partyIdentifier not shorter than 1 character\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('.requestBody.payee.partyIdInfo.partyIdentifier should NOT be shorter than 1 characters');",
											"});     ",
											"            ",
											"pm.test(\"Check Error code 3100\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3100');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "{{fspiop-signature}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "QuotesByID - 11 - Missing Condition Field",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6365226b-4297-4b7d-baf6-34ad339f1ab5",
										"exec": [
											"pm.environment.set('quoteDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3aa04f29-831d-4eef-8c93-84f90f981a9a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Missing conditional Field- condition is required\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element');",
											"});            ",
											"            ",
											"pm.test(\"Check Error code 3102\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": ""
									},
									{
										"key": "Accept-Encoding",
										"value": "gzip, deflate",
										"disabled": true
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Length",
										"value": "1117",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "noresponsepayeefsp"
									},
									{
										"key": "Host",
										"value": "http://localhost:3002",
										"disabled": true
									},
									{
										"key": "Postman-Token",
										"value": "a1c5eda9-20eb-4041-8e1a-134f266dee23,a25e5bc7-0cee-4720-9d34-ffd28d08c908",
										"disabled": true
									},
									{
										"key": "User-Agent",
										"value": "PostmanRuntime/7.17.1",
										"disabled": true
									},
									{
										"key": "cache-control",
										"value": "no-cache",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferAmount\": {\n  \"amount\": \"11\",\n  \"currency\": \"XOF\" },\n  \"payeeReceiveAmount\": {\n  \"amount\": \"11\",\n  \"currency\": \"XOF\"   },\n  \"payeeFspCommission\": {\n   \"currency\": \"XOF\",\n   \"amount\": \"1\"\n },\n  \"expiration\": \"2019-10-14T20:19:20.741Z\",\n  \"ilpPacket\": \"AQAAAAAAAADIEHByaXZhdGUucGF5ZWVmc3CCAiB7InRyYW5zYWN0aW9uSWQiOiIyZGY3NzRlMi1mMWRiLTRmZjctYTQ5NS0yZGRkMzdhZjdjMmMiLCJxdW90ZUlkIjoiMDNhNjA1NTAtNmYyZi00NTU2LThlMDQtMDcwM2UzOWI4N2ZmIiwicGF5ZWUiOnsicGFydHlJZEluZm8iOnsicGFydHlJZFR5cGUiOiJNU0lTRE4iLCJwYXJ0eUlkZW50aWZpZXIiOiIyNzcxMzgwMzkxMyIsImZzcElkIjoicGF5ZWVmc3AifSwicGVyc29uYWxJbmZvIjp7ImNvbXBsZXhOYW1lIjp7fX19LCJwYXllciI6eyJwYXJ0eUlkSW5mbyI6eyJwYXJ0eUlkVHlwZSI6Ik1TSVNETiIsInBhcnR5SWRlbnRpZmllciI6IjI3NzEzODAzOTExIiwiZnNwSWQiOiJwYXllcmZzcCJ9LCJwZXJzb25hbEluZm8iOnsiY29tcGxleE5hbWUiOnt9fX0sImFtb3VudCI6eyJjdXJyZW5jeSI6IlVTRCIsImFtb3VudCI6IjIwMCJ9LCJ0cmFuc2FjdGlvblR5cGUiOnsic2NlbmFyaW8iOiJERVBPU0lUIiwic3ViU2NlbmFyaW8iOiJERVBPU0lUIiwiaW5pdGlhdG9yIjoiUEFZRVIiLCJpbml0aWF0b3JUeXBlIjoiQ09OU1VNRVIiLCJyZWZ1bmRJbmZvIjp7fX19\"\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes/febf8cff-f0b8-4a09-9a17-e22401fe4332",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes",
										"febf8cff-f0b8-4a09-9a17-e22401fe4332"
									]
								}
							},
							"response": []
						},
						{
							"name": "QuotedById - 13a- 400- Missing Accept header (BUG)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b522cb9-2907-4a0c-8f7e-13aeed464d54",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Malformed syntax - Invalid accept header\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax - Invalid accept header');",
											"});            ",
											"            ",
											"pm.test(\"Check Error code 3101\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "07a388d8-3028-49f3-9022-a1a9cc280579",
										"exec": [
											"pm.environment.set('quoteDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes/07e92ea7-d655-4f88-925c-4aeefcee80f6",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes",
										"07e92ea7-d655-4f88-925c-4aeefcee80f6"
									]
								},
								"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
							},
							"response": []
						},
						{
							"name": "QuotesById - 13b - 400-Missing FSPIOP-Source header (BUG)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71b8006f-93a5-4016-9bec-058bf7ae3913",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Missing mandatory element error\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
											"});",
											"",
											"pm.test(\"Error message fspiop-source is required\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('fspiop-source');",
											"});  ",
											"            ",
											"pm.test(\"Check Error code 31012\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "651f4359-bb69-4642-964f-3c35f2d051e3",
										"exec": [
											"pm.environment.set('quoteDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes/07e92ea7-d655-4f88-925c-4aeefcee80f6",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes",
										"07e92ea7-d655-4f88-925c-4aeefcee80f6"
									]
								},
								"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
							},
							"response": []
						},
						{
							"name": "QuotesById - 13c - 400-Missing Date header (BUG)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4313062-8e7c-46f1-aa94-2c0749c1d5c8",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Missing mandatory element error\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
											"});",
											"",
											"pm.test(\"Error message date is required\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('date');",
											"}); ",
											"            ",
											"pm.test(\"Check Error code 3102\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e703a901-722e-43ad-bf8c-25c231fe1925",
										"exec": [
											"pm.environment.set('quoteDate', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes/07e92ea7-d655-4f88-925c-4aeefcee80f6",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes",
										"07e92ea7-d655-4f88-925c-4aeefcee80f6"
									]
								},
								"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
							},
							"response": []
						},
						{
							"name": "Send Quote_SEND - 14 - Incorrect Switch Version Header",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a4d3c054-618b-4db7-b9e0-2d8b5141848d",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a69d50aa-7795-4ab2-9bc5-9b068b6033bb",
										"exec": [
											"pm.test(\"Status code is 406\", function () {",
											"    pm.response.to.have.status(406);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"            ",
											"pm.test(\"Check Unacceptable version requested\", function () {",
											"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unacceptable version requested');",
											"});            ",
											"            ",
											"pm.test(\"Check Error code 3001\", function () {",
											"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3001');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=9.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60.11\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								},
								"description": "Check POST/Quote  with incorrect switch version header\n\nExpectation : 400 with error code 3001"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Check transfers/ Missing ID #849",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "95a8fa9e-4344-4ef7-97cf-fc07edd23ddb",
								"exec": [
									"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bd45d802-f07f-46a3-bcfa-90d211a5d85f",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Check ID missing\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unknown URI');",
									"});",
									"",
									"pm.test(\"Check Error code 3002\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3002');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"type": "text",
								"value": "noresponsepayeefsp"
							},
							{
								"key": "FSPIOP-Destination",
								"type": "text",
								"value": "{{payeefsp}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Check quotes/ Missing ID #849",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f3d06a53-9b27-40de-9159-0da66fce7b3f",
								"exec": [
									"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7d4a7b90-436d-4cf7-b3f4-f0b89b8bfc40",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Check ID missing\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unknown URI');",
									"});",
									"",
									"pm.test(\"Check Error code 3002\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3002');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"type": "text",
								"value": "noresponsepayeefsp"
							},
							{
								"key": "FSPIOP-Destination",
								"type": "text",
								"value": "{{payeefsp}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/quotes",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Send Quote 4 Decimal #949",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f5d356bd-a44f-42e5-ad41-8c859227c840",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"//Check Data on payer side",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"      if(response.responseSize !== 0) {",
									"            var jsonData = response.json().data;",
									"            pm.test(\"Send Quote Amount in 4 decimal returned\", function () {",
									"                pm.expect(+jsonData.transferAmount.amount).equal(pm.environment.get(\"transferAmount\"));",
									"            });",
									"            ",
									"      } else {",
									"          pm.test(\"Quote FAILED\", function () {",
									"            throw new Error('Did not receive response');",
									"           });",
									"      }",
									"       ",
									"   });",
									"}, 1000)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "30182283-50e6-4279-9e5b-2936c9ebe9aa",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"pm.environment.set('transferAmount', 60.1234);",
									"pm.environment.set('quoteDate', (new Date()).toUTCString());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TESTFSP1_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Send Transfer 4 Decimal #949",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fcca048e-4e84-4ee6-969d-292c142ef4c4",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"//Check the request that Switch forwards to payeefsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"                var jsonData = response.json().data;",
									"                pm.test(\"payeefsp data should have the same amount as request and 4 decimal checked\", function () {",
									"                   pm.expect(+jsonData.amount.amount).to.eql(pm.environment.get(\"transferAmount\"));",
									"                });",
									"                ",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"          }",
									"   });",
									"}, 1100)",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5e943580-eaa5-483d-b660-e8ef58cb2728",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set('transferExpiration',new Date(new Date().getTime() + 600000));",
									"pm.environment.set('transferAmount', 1.9999);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							},
							{
								"key": "FSPIOP-URI",
								"value": "/transfers",
								"type": "text"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "POST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Error 2001 Internal server error #742",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "77a5b811-5639-478e-b5f6-4431c88fed51",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Check Malformed syntax error\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
									"});",
									"",
									"pm.test(\"Check Error code 3101\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"payer10\",\n  \"currency\": \"A#\"\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Error 3003 Add Party information error #742",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06f1aa51-fb42-49ee-80f8-264f1596a4c2",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Check ID missing\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Add Party information error');",
									"});",
									"",
									"pm.test(\"Check Error code 3003\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3003');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{payerfsp}}\",\n  \"currency\": \"XOF\"\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
							],
							"path": [
								"participants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Error 3100  validation error#742",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56b762ce-3180-4615-9cbd-107f60ecde8f",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check Generic validation error\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Generic validation error');",
									"});",
									"",
									"pm.test(\"Check Error code 3100\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3100');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0c91d5a4-aa54-4400-af0e-95138c82a87a",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));",
									"pm.environment.set('transferAmount', 1.11);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							},
							{
								"key": "FSPIOP-URI",
								"value": "/transfers",
								"type": "text"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "POST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payerFsp1\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Error 3101 Malformed syntax #742",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80d13efb-dc69-475f-9ff0-11d03ecaf6e9",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check Malformed syntax\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
									"});",
									"",
									"pm.test(\"Check Error code 3101\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "144deb1d-8ff1-4665-a22f-90997dd7dc5e",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000));",
									"pm.environment.set(\"transderAmount\", 1.11);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							},
							{
								"key": "FSPIOP-URI",
								"type": "text",
								"value": "/transfers"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"type": "text",
								"value": "POST"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}+1\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Error 3102  Missing mandatory element#742",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "79fe5bf5-a89f-4354-8f51-306fc3a59e0d",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check Missing mandatory element\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element');",
									"});",
									"",
									"pm.test(\"Check Error code 3102\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d2507286-3fde-4e45-a3d9-76e53922964f",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000));",
									"pm.environment.set('transferAmount', 1.11);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							},
							{
								"key": "FSPIOP-URI",
								"value": "/transfers",
								"type": "text"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "POST",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check FSPIOP-URI header #733",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f144e0ad-7a0b-4f65-b215-3836dfd9355d",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"//Check the request that Switch forwards to payeefsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"              ",
									"              //Check the Headers",
									"              var headers = response.json().headers;",
									"                ",
									"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
									"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
									"                });",
									"                ",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"",
									"          }",
									"   });",
									"}, 1100)",
									"",
									"//Check the callback response that Switch forwards to payerfsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"            //Checking headers",
									"            var headers = response.json().headers;",
									"           ",
									"            pm.test(\"payerfsp fspiop-uri includes transfers\", function () {",
									"                pm.expect(headers['fspiop-uri']).to.include('/transfers');",
									"            });",
									"            ",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"",
									"          }",
									"   });",
									"}, 1300)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "07c388eb-6b6b-4d61-98f7-a0363b1c6fb9",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set('transferExpiration', new Date(new Date().getTime() + 600000));",
									"pm.environment.set('transferAmount', 1.11);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							},
							{
								"key": "FSPIOP-URI",
								"type": "text",
								"value": "/transfers"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"type": "text",
								"value": "POST"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Settlements Error #956",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d281ba87-d29e-4263-b254-bd055b049895",
								"exec": [
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Check Malformed syntax\", function () {",
									"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
									"});",
									"",
									"pm.test(\"Check Error code 3101\", function () {",
									"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?participantId=0&state=open",
							"host": [
								"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
							],
							"path": [
								"settlementWindows"
							],
							"query": [
								{
									"key": "participantId",
									"value": "0"
								},
								{
									"key": "state",
									"value": "open",
									"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
								},
								{
									"key": "fromDateTime",
									"value": "",
									"disabled": true
								},
								{
									"key": "toDateTime",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "State, OPEN is case sensitive.\nTocheck invalid request I have provided state = \"open\""
					},
					"response": []
				},
				{
					"name": "Check FSPIOP Headers from Switch #883",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "137a34fe-fa43-42e6-a731-f4f6a7ccf798",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"",
									"setTimeout(function () {",
									"  partyId = pm.variables.get(\"InexistentPartyId\");",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\") + `/payerfsp/callbacks/${partyId}`, function (err, response) {",
									"      responseBody = response.json();",
									"      pm.test(\"Expect simulator to return response\", () => {",
									"          pm.expect(response.responseSize).to.be.above(0);",
									"      })",
									"      pm.test(`Expect FSPIO-URI header to be /parties/MSISDN/${partyId}/error`, function () {",
									"          pm.expect(responseBody.headers).to.have.property(\"fspiop-uri\");",
									"          pm.expect(responseBody.headers[\"fspiop-uri\"]).to.equal(`/parties/MSISDN/${partyId}/error`);",
									"        });",
									"        pm.test(\"Expected FSPIO-HTTP-Method header to be PUT\", function () {",
									"            pm.expect(responseBody.headers).to.have.property(\"fspiop-http-method\");",
									"            pm.expect(responseBody.headers[\"fspiop-http-method\"]).to.equal(\"PUT\");",
									"        });",
									"    });",
									"}, 6000)",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e1ad0ebe-8f8d-42e7-a83e-bee951c4a9f4",
								"exec": [
									"pm.environment.set('dateHeader', (new Date()).toUTCString());",
									"pm.variables.set('InexistentPartyId', 1999999)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/vnd.interoperability.parties+json;version=1"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"type": "text",
								"value": "{{payerfsp}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/vnd.interoperability.parties+json;version=1.0"
							}
						],
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{InexistentPartyId}}",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
							],
							"path": [
								"parties",
								"MSISDN",
								"{{InexistentPartyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check FSPIOP Headers from ML-API-Adapter #1032",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7eac6963-b7a6-4df4-9e13-39eccfae87b9",
								"exec": [
									"pm.test(\"Status code is 202\", () => {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(() => {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\" + pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"            const responseBody = response.responseSize ? response.json() : null;",
									"            const headers = responseBody.headers || null;",
									"            const transferId = pm.environment.get(\"transfer_ID\");",
									"            ",
									"            pm.test(\"Expect simulator to return response\", () => {",
									"                  pm.expect(response.responseSize).to.be.above(0);",
									"              })",
									"            pm.test(\"payerfsp fspiop-source is switch\", () => {",
									"                pm.expect(headers['fspiop-source']).to.eql('switch');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-destination is payerfsp\", () => {",
									"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", () => {",
									"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp accept is empty\", () => {",
									"                pm.expect(headers['accept']).to.eql(undefined);",
									"            });",
									"            ",
									"            pm.test(\"fspiop-signature is empty\", () => {",
									"                pm.expect(headers['fspiop-signature']).to.eql(undefined);",
									"            });",
									"            ",
									"            pm.test(\"fspiop-uri contains transfers/\"+transferId+\"/error\", function () {",
									"                pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${transferId}/error`);",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-http-method is PUT\", () => {",
									"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
									"            });",
									"            ",
									"            pm.test(\"Response data does not have transferId\", () => {",
									"               pm.expect(responseBody.data.transferId).to.eql(undefined);",
									"            });",
									"            ",
									"            pm.test(\"Response status is not COMMITTED\", () => {",
									"                pm.expect(responseBody.data.transferState).to.not.eql('COMMITTED');",
									"            });",
									"   });",
									"}, 12000)",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e993c40c-566c-440e-ba6f-360097985afa",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"pm.environment.set('transferExpiration',new Date(new Date().getTime() + 10000));",
									"pm.environment.set('transferAmount', 1.9999);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiop-signature}}"
							},
							{
								"key": "FSPIOP-URI",
								"type": "text",
								"value": "/transfers"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"type": "text",
								"value": "POST"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "188f9250-f83a-4acd-9bfe-e0f678cfd25a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "2f284c12-6b1a-47a4-9a13-24806615c621",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}