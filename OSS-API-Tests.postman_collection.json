{
	"info": {
		"_postman_id": "974a8a77-74b7-4fc4-9aed-987bdac5a49a",
		"name": "OSS-API-Tests",
		"description": "##Author - Sridevi Miriyala\n\n##Description:\nThis section includes testing of the behavior of the API end points including Headers and body params testing for positive and negative paths.\n\nBased on API Definition.docx updated on 2018-03-13 Version 1.0. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Mojaloop-API",
			"item": [
				{
					"name": "participants",
					"item": [
						{
							"name": "/MSISDN/ID",
							"item": [
								{
									"name": "GET - ParticipantsByTypeAndID",
									"item": [
										{
											"name": "202",
											"item": [
												{
													"name": "202 - Accepted (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "df53ac68-44bc-4b61-9296-8857e0fe7c8d",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"",
																	"//Check data on payer side",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       ",
																	"       if(response.responseSize !== 0) { ",
																	"           ",
																	"       //Checking headers",
																	"        var headers = response.json().headers;",
																	"        pm.test(\"payerfsp fspiop-source is switch\", function () {",
																	"            pm.expect(headers['fspiop-source']).to.eql('switch');",
																	"        });",
																	"        ",
																	"        pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"            pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"        });",
																	"        ",
																	"        pm.test(\"payerfsp content-type should be application/vnd.interoperability.participants+json;version=1.0\", function () {",
																	"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.participants+json;version=1.0');",
																	"        });",
																	"        ",
																	"        pm.test(\"payerfsp accept is empty\", function () {",
																	"            pm.expect(headers['accept']).to.eql(undefined);",
																	"        });",
																	"        ",
																	"        ",
																	"        ",
																	"        // //Validate protected header inside Signature",
																	"        // var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"        // var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"        // console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"        ",
																	"        // // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"        // //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
																	"        // // });",
																	"        ",
																	"        // pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"        //     pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"        // });",
																	"        // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /participants/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
																	"        //     pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/participants/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
																	"        // });",
																	"        ",
																	"",
																	"        // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"        //     pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"        // });",
																	"        // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be switch\", function () {",
																	"        //     pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('switch');",
																	"        // });",
																	"        // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"        //     pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"        // });",
																	"        // pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"        //     pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"        // });",
																	"       ",
																	"        pm.test(\"payerfsp fspiop-uri to be /parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
																	"            pm.expect(headers['fspiop-uri']).to.eql('/parties/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
																	"        });",
																	"        ",
																	"        pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"            pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"        });",
																	"        ",
																	"        //Checking data",
																	"        var jsonData = response.json().data;",
																	"       pm.test(\"Expected fspid is payeefsp \", function () {",
																	"           pm.expect(jsonData.fspId).to.eql(pm.variables.get(\"payeefsp\"));",
																	"        });",
																	"        ",
																	"        ",
																	"       } else {",
																	"           pm.test(\"Parties FAILED - payerFSP\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           ",
																	"       }",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "0cb60963-9178-4069-9360-82a0664a0db8",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "content-type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															},
															{
																"key": "date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "fspiop-source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "x-forwarded-for",
																"value": "",
																"type": "text",
																"disabled": true
															},
															{
																"key": "fspiop-destination",
																"value": "",
																"type": "text",
																"disabled": true
															},
															{
																"key": "fspiop-encryption",
																"value": "",
																"type": "text",
																"disabled": true
															},
															{
																"key": "fspiop-signature",
																"value": "{{fspiop-signature}}",
																"type": "text"
															},
															{
																"key": "fspiop-uri",
																"value": "/participants/MSISDN/{{pathfinderMSISDN}}",
																"type": "text"
															},
															{
																"key": "fspiop-http-method",
																"value": "GET",
																"type": "text"
															},
															{
																"key": "content-length",
																"value": "",
																"type": "text",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nURI param: MSISDN\n"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "400",
											"item": [
												{
													"name": "400 - 3101 - Malformed Type (BUG)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "9cf7d011-ba2b-48b2-abf4-a2ed7ae0a6e8",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "3472322e-3146-4049-a128-f281e0be340e",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Error message is expected as response.\", function () {",
																	"           pm.expect(response.json().errorInformation.errorCode).to.eql('3101');",
																	"           pm.expect(response.json().errorInformation.errorDescription).to.eql('Malformed Type');",
																	"        });",
																	"    });",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payerfsp}}"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/XYZ/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"XYZ",
																"{{pathfinderMSISDN}}"
															]
														},
														"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
													},
													"response": []
												},
												{
													"name": "400 - 3101 - Malformed Header (BUG)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "9cf7d011-ba2b-48b2-abf4-a2ed7ae0a6e8",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "3b65ac8a-b8ef-4fef-b3bb-9640778e4aa4",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Error message is expected as response.\", function () {",
																	"           pm.expect(response.json().errorInformation.errorCode).to.eql('3101');",
																	"           pm.expect(response.json().errorInformation.errorDescription).to.eql('Malformed Type');",
																	"        });",
																	"    });",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "xyz"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														},
														"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
													},
													"response": []
												},
												{
													"name": "404 - 3102 - Missing Mandatory ID (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "df53ac68-44bc-4b61-9296-8857e0fe7c8d",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.expect(response.json().errorInformation.errorCode).to.eql('3101');",
																	"      pm.expect(response.json().errorInformation.errorDescription).to.eql('Malformed Type');",
																	"       ",
																	"    });",
																	"}, 1000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "0cb60963-9178-4069-9360-82a0664a0db8",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"pm.variables.set('participantDateHeader', (new Date()).toUTCString());",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - 3102 - Missing Mandatory Headers (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "df53ac68-44bc-4b61-9296-8857e0fe7c8d",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Error message is expected as response.\", function () {",
																	"           pm.expect(response.json().errorInformation.errorCode).to.eql('3102');",
																	"           pm.expect(response.json().errorInformation.errorDescription).to.eql('Missing Date Header');",
																	"        });",
																	"        ",
																	"      ",
																	"    });",
																	"}, 1000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "0cb60963-9178-4069-9360-82a0664a0db8",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"pm.variables.set('participantDateHeader', (new Date()).toUTCString());",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "POST - ParticipantsByTypeAndID",
									"item": [
										{
											"name": "201",
											"item": [
												{
													"name": "201 - Created",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c11075ed-0aa5-4631-a8a4-5bbf1b7fbddb",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"{{payeefsp}}\",\n\t\"currency\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "400",
											"item": [
												{
													"name": "400 - 3101 - Malformed MSISDN (BUG)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "9cf7d011-ba2b-48b2-abf4-a2ed7ae0a6e8",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "3472322e-3146-4049-a128-f281e0be340e",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Error message is expected as response.\", function () {",
																	"           pm.expect(response.json().errorInformation.errorCode).to.eql('3101');",
																	"           pm.expect(response.json().errorInformation.errorDescription).to.eql('Malformed MSISDN');",
																	"        });",
																	"    });",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/@3456!",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"@3456!"
															]
														},
														"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "DEL - ParticipantsByTypeAndID ( NOT IMPLEMENTED )",
									"item": [],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "PUT - ParticipantsByTypeAndID ( NOT IMPLEMENTED )",
									"item": [
										{
											"name": "200",
											"item": [
												{
													"name": "200 - Accepted (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "df53ac68-44bc-4b61-9296-8857e0fe7c8d",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "0cb60963-9178-4069-9360-82a0664a0db8",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "accept",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "content-type",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															},
															{
																"key": "date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "fspiop-source",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "x-forwarded-for",
																"type": "text",
																"value": "",
																"disabled": true
															},
															{
																"key": "fspiop-destination",
																"type": "text",
																"value": "",
																"disabled": true
															},
															{
																"key": "fspiop-encryption",
																"type": "text",
																"value": "",
																"disabled": true
															},
															{
																"key": "fspiop-signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "fspiop-uri",
																"type": "text",
																"value": "/participants/MSISDN/{{pathfinderMSISDN}}"
															},
															{
																"key": "fspiop-http-method",
																"type": "text",
																"value": "GET"
															},
															{
																"key": "content-length",
																"type": "text",
																"value": "",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"fspId\":\"testfsp\"}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nURI param: MSISDN\n"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "/BUSINESS/ID",
							"item": [
								{
									"name": "GET - ParticipantsByTypeAndID",
									"item": [
										{
											"name": "202",
											"item": [
												{
													"name": "202 - Accepted (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "df53ac68-44bc-4b61-9296-8857e0fe7c8d",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"",
																	"//Check data on payer side",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       ",
																	"       if(response.responseSize !== 0) { ",
																	"           ",
																	"       //Checking headers",
																	"        var headers = response.json().headers;",
																	"        pm.test(\"payerfsp fspiop-source is switch\", function () {",
																	"            pm.expect(headers['fspiop-source']).to.eql('switch');",
																	"        });",
																	"        ",
																	"        pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"            pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"        });",
																	"        ",
																	"        pm.test(\"payerfsp content-type should be application/vnd.interoperability.participants+json;version=1.0\", function () {",
																	"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.participants+json;version=1.0');",
																	"        });",
																	"        ",
																	"        pm.test(\"payerfsp accept is empty\", function () {",
																	"            pm.expect(headers['accept']).to.eql(undefined);",
																	"        });",
																	"        ",
																	"        ",
																	"        ",
																	"        // //Validate protected header inside Signature",
																	"        // var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"        // var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"        // console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"        ",
																	"        // // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"        // //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
																	"        // // });",
																	"        ",
																	"        // pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"        //     pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"        // });",
																	"        // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /participants/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
																	"        //     pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/participants/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
																	"        // });",
																	"        ",
																	"",
																	"        // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"        //     pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"        // });",
																	"        // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be switch\", function () {",
																	"        //     pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('switch');",
																	"        // });",
																	"        // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"        //     pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"        // });",
																	"        // pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"        //     pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"        // });",
																	"       ",
																	"        pm.test(\"payerfsp fspiop-uri to be /parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
																	"            pm.expect(headers['fspiop-uri']).to.eql('/parties/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
																	"        });",
																	"        ",
																	"        pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"            pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"        });",
																	"        ",
																	"        //Checking data",
																	"        var jsonData = response.json().data;",
																	"       pm.test(\"Expected fspid is payeefsp \", function () {",
																	"           pm.expect(jsonData.fspId).to.eql(pm.variables.get(\"payeefsp\"));",
																	"        });",
																	"        ",
																	"        ",
																	"       } else {",
																	"           pm.test(\"Parties FAILED - payerFSP\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           ",
																	"       }",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "0cb60963-9178-4069-9360-82a0664a0db8",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "content-type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															},
															{
																"key": "date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "fspiop-source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "x-forwarded-for",
																"value": "",
																"type": "text",
																"disabled": true
															},
															{
																"key": "fspiop-destination",
																"value": "",
																"type": "text",
																"disabled": true
															},
															{
																"key": "fspiop-encryption",
																"value": "",
																"type": "text",
																"disabled": true
															},
															{
																"key": "fspiop-signature",
																"value": "{{fspiop-signature}}",
																"type": "text"
															},
															{
																"key": "fspiop-uri",
																"value": "/participants/MSISDN/{{pathfinderMSISDN}}",
																"type": "text"
															},
															{
																"key": "fspiop-http-method",
																"value": "GET",
																"type": "text"
															},
															{
																"key": "content-length",
																"value": "",
																"type": "text",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/BUSINESS/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"BUSINESS",
																"{{pathfinderMSISDN}}"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nURI param: MSISDN\n"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "400",
											"item": [
												{
													"name": "400 - 3101 - Malformed Type (BUG)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "9cf7d011-ba2b-48b2-abf4-a2ed7ae0a6e8",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "3472322e-3146-4049-a128-f281e0be340e",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Error message is expected as response.\", function () {",
																	"           pm.expect(response.json().errorInformation.errorCode).to.eql('3101');",
																	"           pm.expect(response.json().errorInformation.errorDescription).to.eql('Malformed Type');",
																	"        });",
																	"    });",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payerfsp}}"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/XYZ/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"XYZ",
																"{{pathfinderMSISDN}}"
															]
														},
														"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
													},
													"response": []
												},
												{
													"name": "400 - 3101 - Malformed Header (BUG)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "9cf7d011-ba2b-48b2-abf4-a2ed7ae0a6e8",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "3b65ac8a-b8ef-4fef-b3bb-9640778e4aa4",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Error message is expected as response.\", function () {",
																	"           pm.expect(response.json().errorInformation.errorCode).to.eql('3101');",
																	"           pm.expect(response.json().errorInformation.errorDescription).to.eql('Malformed Type');",
																	"        });",
																	"    });",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "xyz"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/BUSINESS/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"BUSINESS",
																"{{pathfinderMSISDN}}"
															]
														},
														"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
													},
													"response": []
												},
												{
													"name": "404 - 3102 - Missing Mandatory ID (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "df53ac68-44bc-4b61-9296-8857e0fe7c8d",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.expect(response.json().errorInformation.errorCode).to.eql('3101');",
																	"      pm.expect(response.json().errorInformation.errorDescription).to.eql('Malformed Type');",
																	"       ",
																	"    });",
																	"}, 1000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "0cb60963-9178-4069-9360-82a0664a0db8",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"pm.variables.set('participantDateHeader', (new Date()).toUTCString());",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/BUSINESS/",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"BUSINESS",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - 3102 - Missing Mandatory Headers (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "df53ac68-44bc-4b61-9296-8857e0fe7c8d",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Error message is expected as response.\", function () {",
																	"           pm.expect(response.json().errorInformation.errorCode).to.eql('3102');",
																	"           pm.expect(response.json().errorInformation.errorDescription).to.eql('Missing Date Header');",
																	"        });",
																	"        ",
																	"      ",
																	"    });",
																	"}, 1000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "0cb60963-9178-4069-9360-82a0664a0db8",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"pm.variables.set('participantDateHeader', (new Date()).toUTCString());",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/BUSINESS/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"BUSINESS",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "POST - ParticipantsByTypeAndID",
									"item": [
										{
											"name": "201",
											"item": [
												{
													"name": "201 - Created",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c11075ed-0aa5-4631-a8a4-5bbf1b7fbddb",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"{{payeefsp}}\",\n\t\"currency\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/BUSINESS/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"BUSINESS",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "400",
											"item": [
												{
													"name": "400 - 3101 - Malformed BUSINESS (BUG)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "9cf7d011-ba2b-48b2-abf4-a2ed7ae0a6e8",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "3472322e-3146-4049-a128-f281e0be340e",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Error message is expected as response.\", function () {",
																	"           pm.expect(response.json().errorInformation.errorCode).to.eql('3101');",
																	"           pm.expect(response.json().errorInformation.errorDescription).to.eql('Malformed MSISDN');",
																	"        });",
																	"    });",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/BUSINESS/@3456!",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"BUSINESS",
																"@3456!"
															]
														},
														"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "DEL - ParticipantsByTypeAndID ( NOT IMPLEMENTED )",
									"item": [],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "PUT - ParticipantsByTypeAndID",
									"item": [
										{
											"name": "200",
											"item": [
												{
													"name": "200 - Accepted (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "df53ac68-44bc-4b61-9296-8857e0fe7c8d",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "0cb60963-9178-4069-9360-82a0664a0db8",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "accept",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "content-type",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															},
															{
																"key": "date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "fspiop-source",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "x-forwarded-for",
																"type": "text",
																"value": "",
																"disabled": true
															},
															{
																"key": "fspiop-destination",
																"type": "text",
																"value": "",
																"disabled": true
															},
															{
																"key": "fspiop-encryption",
																"type": "text",
																"value": "",
																"disabled": true
															},
															{
																"key": "fspiop-signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "fspiop-uri",
																"type": "text",
																"value": "/participants/MSISDN/{{pathfinderMSISDN}}"
															},
															{
																"key": "fspiop-http-method",
																"type": "text",
																"value": "GET"
															},
															{
																"key": "content-length",
																"type": "text",
																"value": "",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"fspId\":\"testfsp\"}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nURI param: MSISDN\n"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "POST Participants Bulk",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "92c0fe7a-2429-4516-9d3a-4a689c0c775e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d712f8b3-dca4-49e1-b94e-6794960bc0af",
										"exec": [
											"var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('bulkRequestId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.participants+json;version=1",
										"type": "text"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "",
										"type": "text"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{fsp_mockfsp01_id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.participants+json;version=1.0",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"requestId\": \"{{bulkRequestId}}\",\n\t\"partyList\":\n\t  [ {\n\t    \"partyIdType\": \"MSISDN\",\n\t    \"partyIdentifier\": \"00319875638746\",\n\t    \"fspId\": \"payerfsp\"\n\t  },\n\t  {\n\t    \"partyIdType\": \"BUSINESS\",\n\t    \"partyIdentifier\": \"00419875689759\",\n\t    \"fspId\": \"payeefsp\"\n\t  } ],\n\t  \"currency\": \"USD\"\n}"
								},
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
									],
									"path": [
										"participants"
									]
								}
							},
							"response": []
						}
					],
					"description": "Author: Sridevi Miriyala\n\nFolder for participants.\nParticipant is a FSP.\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5dfe9046-ff53-434f-aa92-89faa8d0fd87",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "462ee703-cad7-4da9-a007-284fcb5927f4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "parties",
					"item": [
						{
							"name": "/MSISDN/ID",
							"item": [
								{
									"name": "GET - PartiesByTypeAndID",
									"item": [
										{
											"name": "202",
											"item": [
												{
													"name": "202 - Accepted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "fdb13fdb-0720-4c9d-8ff1-d28765c9fa5d",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"//Check data on payee side",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.environment.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       ",
																	"       if(response.responseSize !== 0) { ",
																	"       //Checking headers",
																	"        var headers = response.json().headers;",
																	"        pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
																	"            pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
																	"        });",
																	"        ",
																	"        pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
																	"            pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
																	"        });",
																	"        ",
																	"        pm.test(\"payeefsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"        });",
																	"        ",
																	"        //pm.test(\"payeefsp accept should be application/vnd.interoperability.parties+json;version=1\", function () {",
																	"        //    pm.expect(headers['accept']).to.eql('should be application/vnd.interoperability.parties+json;version=1');",
																	"        //});",
																	"        ",
																	"        ",
																	"        ",
																	"        //Validate protected header inside Signature",
																	"        var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"        var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"        console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"        ",
																	"        pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"            pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"        });",
																	"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties\", function () {",
																	"            pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties');",
																	"        });",
																	"        ",
																	"",
																	"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be GET\", function () {",
																	"            pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('GET');",
																	"        });",
																	"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be Payerfsp\", function () {",
																	"            pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payerfsp');",
																	"        });",
																	"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payeefsp\", function () {",
																	"            pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payeefsp');",
																	"        });",
																	"        pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"            pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"        });",
																	"       ",
																	"        pm.test(\"payeefsp FSPIOP-URI to be /parties\", function () {",
																	"            pm.expect(headers['fspiop-uri']).to.eql('/parties');",
																	"        });",
																	"        ",
																	"        pm.test(\"payeefsp fspiop-http-method is GET\", function () {",
																	"            pm.expect(headers['fspiop-http-method']).to.eql('GET');",
																	"        });",
																	"        ",
																	"        ",
																	"        ",
																	"       } else {",
																	"           pm.test(\"Parties FAILED - payeeFSP\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           ",
																	"       }",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	"//Check data on payer side",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       ",
																	"      if(response.responseSize !== 0) { ",
																	"      //Checking headers",
																	"        var headers = response.json().headers;",
																	"        pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"            pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
																	"        });",
																	"        ",
																	"        pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"            pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"        });",
																	"        ",
																	"        pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"        });",
																	"        ",
																	"        pm.test(\"payerfsp accept is empty\", function () {",
																	"            pm.expect(headers['accept']).to.eql(undefined);",
																	"        });",
																	"        ",
																	"        ",
																	"        ",
																	"        //Validate protected header inside Signature",
																	"        var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"        var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"        console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"        ",
																	"        // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"        //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
																	"        // });",
																	"        ",
																	"        pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"            pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"        });",
																	"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
																	"            pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
																	"        });",
																	"        ",
																	"",
																	"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"            pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"        });",
																	"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"            pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
																	"        });",
																	"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"            pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"        });",
																	"        pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"            pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"        });",
																	"       ",
																	"        //pm.test(\"payerfsp FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
																	"        //    pm.expect(headers['fspiop-uri']).to.eql('/parties/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
																	"        //});",
																	"        ",
																	"        pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"            pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"        });",
																	"        ",
																	"        //Checking data",
																	"        var jsonData = response.json().data;",
																	"      pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"          pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"        });",
																	"        pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"          pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"        });",
																	"        pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"          pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"        });  ",
																	"        ",
																	"      } else {",
																	"          pm.test(\"Parties FAILED - payerFSP\", function () {",
																	"            throw new Error('Did not receive response');",
																	"          });",
																	"           ",
																	"      }",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "857a50b8-ed16-412f-9798-dd568bfd5a71",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"pm.variables.set('expectedFullName', 'Siabelo Maroka');",
																	"pm.variables.set('expectedFirstName', 'Siabelo');",
																	"pm.variables.set('expectedLastName', 'Maroka');",
																	"pm.variables.set('expectedDOB', '3/3/1973');",
																	"",
																	"var requestData = {",
																	"    \"party\": {",
																	"        \"partyIdInfo\": {",
																	"            \"partyIdType\": \"MSISDN\",",
																	"            \"partyIdentifier\": \"17039811907\",",
																	"            \"fspId\": \"payeefsp\"",
																	"        },",
																	"        \"name\": \"Siabelo Maroka\",",
																	"        \"personalInfo\": {",
																	"            \"complexName\": {",
																	"                \"firstName\": \"Siabelo\",",
																	"                \"lastName\": \"Maroka\"",
																	"            },",
																	"            \"dateOfBirth\": \"3/3/1973\"",
																	"        }",
																	"    }",
																	"}",
																	"",
																	"const addUserRequest = {",
																	"  url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"),",
																	"  method: 'POST',",
																	"  headers: {",
																	"        \"content-type\": \"application/json\",",
																	"        },",
																	"  body: JSON.stringify(requestData)",
																	"};",
																	"pm.sendRequest(addUserRequest, function (err, res) {",
																	"  console.log(err ? err : res);",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "400 - Error Code",
											"item": [
												{
													"name": "400 - 3101 - Malformed MSISDN",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "9cf7d011-ba2b-48b2-abf4-a2ed7ae0a6e8",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "3472322e-3146-4049-a128-f281e0be340e",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/@3456!",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"@3456!"
															]
														},
														"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
													},
													"response": []
												},
												{
													"name": "400 - 3101 - Malformed Type (BUG)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "9cf7d011-ba2b-48b2-abf4-a2ed7ae0a6e8",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "3472322e-3146-4049-a128-f281e0be340e",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Error message is expected as response.\", function () {",
																	"           pm.expect(response.json().errorCode).to.eql('3101');",
																	"           pm.expect(response.json().errorDescription).to.eql('Malformed Type');",
																	"        });",
																	"    });",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0;",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/XYZ/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"XYZ",
																"{{pathfinderMSISDN}}"
															]
														},
														"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
													},
													"response": []
												},
												{
													"name": "400 - 3101 - Malformed Header (BUG)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "9cf7d011-ba2b-48b2-abf4-a2ed7ae0a6e8",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "3472322e-3146-4049-a128-f281e0be340e",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Error message is expected as response.\", function () {",
																	"           pm.expect(response.json().errorCode).to.eql('3101');",
																	"           pm.expect(response.json().errorDescription).to.eql('Malformed MSISDN');",
																	"        });",
																	"    });",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "xyz"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{hub_operator}}"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0;",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														},
														"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
													},
													"response": []
												},
												{
													"name": "404 - 3102 - Missing Mandatory ID (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "df53ac68-44bc-4b61-9296-8857e0fe7c8d",
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Expected receiver fspId is: \"+pm.variables.get(\"expectedFspId\"), function () {",
																	"           pm.expect(response.json().party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFspId\"));",
																	"        });",
																	"        ",
																	"      ",
																	"    });",
																	"}, 1000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "0cb60963-9178-4069-9360-82a0664a0db8",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"pm.variables.set('participantDateHeader', (new Date()).toUTCString());",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"MSISDN",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - 3102 - Missing Mandatory Headers (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "df53ac68-44bc-4b61-9296-8857e0fe7c8d",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Error message is expected as response.\", function () {",
																	"           pm.expect(response.json().errorCode).to.eql('3102');",
																	"           pm.expect(response.json().errorDescription).to.eql('Missing Date Header');",
																	"        });",
																	"        ",
																	"      ",
																	"    });",
																	"}, 1000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "0cb60963-9178-4069-9360-82a0664a0db8",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"pm.variables.set('participantDateHeader', (new Date()).toUTCString());",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "PUT - PartiesByTypeAndID",
									"item": [
										{
											"name": "200",
											"item": [
												{
													"name": "200 - Valid Request",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "76d6c169-8ddc-4595-8516-b93d15ed72ec",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1",
																"disabled": true
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payeefsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"party\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"MSISDN\",\n            \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n            \"fspId\": \"{{payeefsp}}\"\n        },\n        \"name\": \"{{fullName}}\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"dateOfBirth\": \"{{dob}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/17855501914",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"17855501914"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "400",
											"item": [
												{
													"name": "Invalid Accept Header ( BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "76d6c169-8ddc-4595-8516-b93d15ed72ec",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payeefsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"party\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"MSISDN\",\n            \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n            \"fspId\": \"{{payeefsp}}\"\n        },\n        \"name\": \"{{fullName}}\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"dateOfBirth\": \"{{dob}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/17855501914",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"17855501914"
															]
														}
													},
													"response": []
												},
												{
													"name": "Missing Content-TYpe (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "76d6c169-8ddc-4595-8516-b93d15ed72ec",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"pm.test(\"statusCode is 400\", function () {",
																	"    pm.expect(jsonData.statusCode).to.eql(400);",
																	"});",
																	"",
																	"pm.test(\"errorDescription is Invalid request payload input\", function () {",
																	"    pm.expect(jsonData.message.errorInformation.errorDescription).to.eql('Invalid request payload input');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payeefsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1.0",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"party\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"MSISDN\",\n            \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n            \"fspId\": \"{{payeefsp}}\"\n        },\n        \"name\": \"{{fullName}}\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"dateOfBirth\": \"{{dob}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/17855501914",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"17855501914"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "PUT - PartiesByTypeAndIDError",
									"item": [
										{
											"name": "200",
											"item": [
												{
													"name": "200 - Valid Request (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "76d6c169-8ddc-4595-8516-b93d15ed72ec",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payeefsp}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"errorInformation\": {\n    \"errorCode\": \"3204\",\n    \"errorDescription\": \"Party with the provided identifier, identifier type, and optional sub id or type was not found.\",\n    \"extensionList\": [\n      {\n        \"key\": \"MSISDN\",\n        \"value\": \"17855501914\"\n      }\n    ]\n  }\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/17855501914/error",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"17855501914",
																"error"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "400",
											"item": [
												{
													"name": "Missing Content-Type (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "76d6c169-8ddc-4595-8516-b93d15ed72ec",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"pm.test(\"statusCode is 400\", function () {",
																	"    pm.expect(jsonData.statusCode).to.eql(400);",
																	"});",
																	"",
																	"pm.test(\"errorDescription is Invalid request payload input\", function () {",
																	"    pm.expect(jsonData.message.errorInformation.errorDescription).to.eql('Invalid request payload input');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payeefsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1.0",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"errorInformation\": {\n    \"errorCode\": \"3204\",\n    \"errorDescription\": \"Party with the provided identifier, identifier type, and optional sub id or type was not found.\",\n    \"extensionList\": [\n      {\n        \"key\": \"MSISDN\",\n        \"value\": \"17855501914\"\n      }\n    ]\n  }\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/17855501914/error",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"17855501914",
																"error"
															]
														}
													},
													"response": []
												},
												{
													"name": "Invalid Accept Header",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "76d6c169-8ddc-4595-8516-b93d15ed72ec",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"pm.test(\"statusCode is 400\", function () {",
																	"    pm.expect(jsonData.statusCode).to.eql(400);",
																	"});",
																	"",
																	"pm.test(\"errorDescription is Invalid request payload input\", function () {",
																	"    pm.expect(jsonData.message.errorInformation.errorDescription).to.eql('Invalid request payload input');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payeefsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"errorInformation\": {\n    \"errorCode\": \"3204\",\n    \"errorDescription\": \"Party with the provided identifier, identifier type, and optional sub id or type was not found.\",\n    \"extensionList\": [\n      {\n        \"key\": \"MSISDN\",\n        \"value\": \"17855501914\"\n      }\n    ]\n  }\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/17855501914/error",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"17855501914",
																"error"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fed530e9-53e1-4ef6-b9cc-ff3a24e6f82f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "93f5590d-d0af-4dcb-a96b-196f55b96983",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "/BUSINESS/ID",
							"item": [
								{
									"name": "GET - PartiesByTypeAndID",
									"item": [
										{
											"name": "202",
											"item": [
												{
													"name": "202 - Accepted (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "fdb13fdb-0720-4c9d-8ff1-d28765c9fa5d",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"//Check data on payee side",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.environment.get(\"merchantId\"), function (err, response) {",
																	"       ",
																	"       if(response.responseSize !== 0) { ",
																	"       //Checking headers",
																	"        // var headers = response.json().headers;",
																	"        // pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
																	"        //     pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
																	"        // });",
																	"        ",
																	"        // pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
																	"        //     pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
																	"        // });",
																	"        ",
																	"        // pm.test(\"payeefsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"        //     pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"        // });",
																	"        ",
																	"        // //pm.test(\"payeefsp accept should be application/vnd.interoperability.parties+json;version=1\", function () {",
																	"        // //    pm.expect(headers['accept']).to.eql('should be application/vnd.interoperability.parties+json;version=1');",
																	"        // //});",
																	"        ",
																	"        ",
																	"        ",
																	"        // //Validate protected header inside Signature",
																	"        // var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"        // var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"        // console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"        ",
																	"        // pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"        //     pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"        // });",
																	"        // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties\", function () {",
																	"        //     pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties');",
																	"        // });",
																	"        ",
																	"",
																	"        // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be GET\", function () {",
																	"        //     pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('GET');",
																	"        // });",
																	"        // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be Payerfsp\", function () {",
																	"        //     pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payerfsp');",
																	"        // });",
																	"        // pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payeefsp\", function () {",
																	"        //     pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payeefsp');",
																	"        // });",
																	"        // pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"        //     pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"        // });",
																	"       ",
																	"        // pm.test(\"payeefsp FSPIOP-URI to be /parties\", function () {",
																	"        //     pm.expect(headers['fspiop-uri']).to.eql('/parties');",
																	"        // });",
																	"        ",
																	"        // pm.test(\"payeefsp fspiop-http-method is GET\", function () {",
																	"        //     pm.expect(headers['fspiop-http-method']).to.eql('GET');",
																	"        // });",
																	"        ",
																	"        ",
																	"        ",
																	"       } else {",
																	"           pm.test(\"Parties FAILED - payeeFSP\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           ",
																	"       }",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	"//Check data on payer side",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       ",
																	"      if(response.responseSize !== 0) { ",
																	"      //Checking headers",
																	"        var headers = response.json().headers;",
																	"        pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"            pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
																	"        });",
																	"        ",
																	"        pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"            pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"        });",
																	"        ",
																	"        pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"        });",
																	"        ",
																	"        pm.test(\"payerfsp accept is empty\", function () {",
																	"            pm.expect(headers['accept']).to.eql(undefined);",
																	"        });",
																	"        ",
																	"        ",
																	"        ",
																	"        //Validate protected header inside Signature",
																	"        var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"        var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"        console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"        ",
																	"        // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"        //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
																	"        // });",
																	"        ",
																	"        pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"            pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"        });",
																	"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
																	"            pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
																	"        });",
																	"        ",
																	"",
																	"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"            pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"        });",
																	"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"            pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
																	"        });",
																	"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"            pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"        });",
																	"        pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"            pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"        });",
																	"       ",
																	"        //pm.test(\"payerfsp FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
																	"        //    pm.expect(headers['fspiop-uri']).to.eql('/parties/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
																	"        //});",
																	"        ",
																	"        pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"            pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"        });",
																	"        ",
																	"        //Checking data",
																	"        var jsonData = response.json().data;",
																	"      pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"          pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"        });",
																	"        pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"          pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"        });",
																	"        pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"          pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"        });  ",
																	"        ",
																	"      } else {",
																	"          pm.test(\"Parties FAILED - payerFSP\", function () {",
																	"            throw new Error('Did not receive response');",
																	"          });",
																	"           ",
																	"      }",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "857a50b8-ed16-412f-9798-dd568bfd5a71",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"pm.variables.set('expectedFullName', 'MerchantFirst MerchantLast');",
																	"pm.variables.set('expectedFirstName', 'MerchantFirst');",
																	"pm.variables.set('expectedLastName', 'MerchantLast');",
																	"pm.variables.set('expectedDOB', '2010-10-10');",
																	"",
																	"var requestData = {",
																	"    \"party\": {",
																	"        \"partyIdInfo\": {",
																	"            \"partyIdType\": \"BUSINESS\",",
																	"            \"partyIdentifier\": \"{{merchantID}}\",",
																	"            \"fspId\": \"payeefsp\"",
																	"        },",
																	"        \"name\": \"MerchantFirst MerchantLast\",",
																	"        \"personalInfo\": {",
																	"            \"complexName\": {",
																	"                \"firstName\": \"MerchantFirst\",",
																	"                \"lastName\": \"MerchantLast\"",
																	"            },",
																	"            \"dateOfBirth\": \"2010-10-10\"",
																	"        }",
																	"    }",
																	"}",
																	"",
																	"const addUserRequest = {",
																	"  url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/parties/BUSINESS/\"+pm.environment.get(\"merchantId\"),",
																	"  method: 'POST',",
																	"  headers: {",
																	"        \"content-type\": \"application/json\",",
																	"        },",
																	"  body: JSON.stringify(requestData)",
																	"};",
																	"pm.sendRequest(addUserRequest, function (err, res) {",
																	"  console.log(err ? err : res);",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/BUSINESS/{{merchantId}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"BUSINESS",
																"{{merchantId}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "400",
											"item": [
												{
													"name": "400 - 3101 - Malformed MSISDN",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "9cf7d011-ba2b-48b2-abf4-a2ed7ae0a6e8",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "3472322e-3146-4049-a128-f281e0be340e",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/BUSINESS/@3456!",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"BUSINESS",
																"@3456!"
															]
														},
														"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
													},
													"response": []
												},
												{
													"name": "400 - 3101 - Malformed Type (BUG)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "9cf7d011-ba2b-48b2-abf4-a2ed7ae0a6e8",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "3472322e-3146-4049-a128-f281e0be340e",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Error message is expected as response.\", function () {",
																	"           pm.expect(response.json().errorCode).to.eql('3101');",
																	"           pm.expect(response.json().errorDescription).to.eql('Malformed Type');",
																	"        });",
																	"    });",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0;",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/XYZ/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"XYZ",
																"{{pathfinderMSISDN}}"
															]
														},
														"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
													},
													"response": []
												},
												{
													"name": "400 - 3101 - Malformed Header (BUG)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "9cf7d011-ba2b-48b2-abf4-a2ed7ae0a6e8",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "3472322e-3146-4049-a128-f281e0be340e",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Error message is expected as response.\", function () {",
																	"           pm.expect(response.json().errorCode).to.eql('3101');",
																	"           pm.expect(response.json().errorDescription).to.eql('Malformed MSISDN');",
																	"        });",
																	"    });",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "xyz"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0;",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/BUSINESS/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"BUSINESS",
																"{{pathfinderMSISDN}}"
															]
														},
														"description": "Format of the parameter is not valid. For example, amount set to 5.ABC. The error description field should specify which information element is erroneous."
													},
													"response": []
												},
												{
													"name": "404 - 3102 - Missing Mandatory ID (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "df53ac68-44bc-4b61-9296-8857e0fe7c8d",
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Expected receiver fspId is: \"+pm.variables.get(\"expectedFspId\"), function () {",
																	"           pm.expect(response.json().party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFspId\"));",
																	"        });",
																	"        ",
																	"      ",
																	"    });",
																	"}, 1000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "0cb60963-9178-4069-9360-82a0664a0db8",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"pm.variables.set('participantDateHeader', (new Date()).toUTCString());",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/BUSINESS/",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"BUSINESS",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - 3102 - Missing Mandatory Headers (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "df53ac68-44bc-4b61-9296-8857e0fe7c8d",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       //console.log(response.json());",
																	"       pm.test(\"Error message is expected as response.\", function () {",
																	"           pm.expect(response.json().errorCode).to.eql('3102');",
																	"           pm.expect(response.json().errorDescription).to.eql('Missing Date Header');",
																	"        });",
																	"        ",
																	"      ",
																	"    });",
																	"}, 1000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "0cb60963-9178-4069-9360-82a0664a0db8",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"pm.variables.set('participantDateHeader', (new Date()).toUTCString());",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/BUSINESS/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"BUSINESS",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "3107 - Missing mandatory extension parameter",
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/BUSINESS/{{receiverMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"BUSINESS",
																"{{receiverMSISDN}}"
															]
														},
														"description": "Scheme-mandatory extension parameter was missing."
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "PUT - PartiesByTypeAndID",
									"item": [
										{
											"name": "200",
											"item": [
												{
													"name": "200 - Valid Request",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "76d6c169-8ddc-4595-8516-b93d15ed72ec",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1",
																"disabled": true
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payeefsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"party\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"MSISDN\",\n            \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n            \"fspId\": \"{{payeefsp}}\"\n        },\n        \"name\": \"{{fullName}}\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"dateOfBirth\": \"{{dob}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/BUSINESS/17855501914",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"BUSINESS",
																"17855501914"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "400",
											"item": [
												{
													"name": "Invalid Accept Header ( BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "76d6c169-8ddc-4595-8516-b93d15ed72ec",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payeefsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"party\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"MSISDN\",\n            \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n            \"fspId\": \"{{payeefsp}}\"\n        },\n        \"name\": \"{{fullName}}\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"dateOfBirth\": \"{{dob}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/BUSINESS/17855501914",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"BUSINESS",
																"17855501914"
															]
														}
													},
													"response": []
												},
												{
													"name": "Missing Content-TYpe (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "76d6c169-8ddc-4595-8516-b93d15ed72ec",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"pm.test(\"statusCode is 400\", function () {",
																	"    pm.expect(jsonData.statusCode).to.eql(400);",
																	"});",
																	"",
																	"pm.test(\"errorDescription is Invalid request payload input\", function () {",
																	"    pm.expect(jsonData.message.errorInformation.errorDescription).to.eql('Invalid request payload input');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payeefsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1.0",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"party\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"MSISDN\",\n            \"partyIdentifier\": \"{{pathfinderMSISDN}}\",\n            \"fspId\": \"{{payeefsp}}\"\n        },\n        \"name\": \"{{fullName}}\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"dateOfBirth\": \"{{dob}}\"\n        }\n    }\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/BUSINESS/17855501914",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"BUSINESS",
																"17855501914"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "PUT - PartiesByTypeAndIDError",
									"item": [
										{
											"name": "200",
											"item": [
												{
													"name": "200 - Valid Request (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "76d6c169-8ddc-4595-8516-b93d15ed72ec",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payeefsp}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"errorInformation\": {\n    \"errorCode\": \"3204\",\n    \"errorDescription\": \"Party with the provided identifier, identifier type, and optional sub id or type was not found.\",\n    \"extensionList\": [\n      {\n        \"key\": \"MSISDN\",\n        \"value\": \"17855501914\"\n      }\n    ]\n  }\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/BUSINESS/17855501914/error",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"BUSINESS",
																"17855501914",
																"error"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "400",
											"item": [
												{
													"name": "Missing Content-Type (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "76d6c169-8ddc-4595-8516-b93d15ed72ec",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"pm.test(\"statusCode is 400\", function () {",
																	"    pm.expect(jsonData.statusCode).to.eql(400);",
																	"});",
																	"",
																	"pm.test(\"errorDescription is Invalid request payload input\", function () {",
																	"    pm.expect(jsonData.message.errorInformation.errorDescription).to.eql('Invalid request payload input');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payeefsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1.0",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"errorInformation\": {\n    \"errorCode\": \"3204\",\n    \"errorDescription\": \"Party with the provided identifier, identifier type, and optional sub id or type was not found.\",\n    \"extensionList\": [\n      {\n        \"key\": \"MSISDN\",\n        \"value\": \"17855501914\"\n      }\n    ]\n  }\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/BUSINESS/17855501914/error",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"BUSINESS",
																"17855501914",
																"error"
															]
														}
													},
													"response": []
												},
												{
													"name": "Invalid Accept Header",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "76d6c169-8ddc-4595-8516-b93d15ed72ec",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"pm.test(\"statusCode is 400\", function () {",
																	"    pm.expect(jsonData.statusCode).to.eql(400);",
																	"});",
																	"",
																	"pm.test(\"errorDescription is Invalid request payload input\", function () {",
																	"    pm.expect(jsonData.message.errorInformation.errorDescription).to.eql('Invalid request payload input');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payeefsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"errorInformation\": {\n    \"errorCode\": \"3204\",\n    \"errorDescription\": \"Party with the provided identifier, identifier type, and optional sub id or type was not found.\",\n    \"extensionList\": [\n      {\n        \"key\": \"MSISDN\",\n        \"value\": \"17855501914\"\n      }\n    ]\n  }\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/BUSINESS/17855501914/error",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"parties",
																"BUSINESS",
																"17855501914",
																"error"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Folder for parties",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2a43de13-c0e4-47b4-a95a-9b466c556d0d",
								"type": "text/javascript",
								"exec": [
									"// var requestData = {",
									"//     \"party\": {",
									"//         \"partyIdInfo\": {",
									"//             \"partyIdType\": \"MSISDN\",",
									"//             \"partyIdentifier\": \"17039811907\",",
									"//             \"fspId\": \"payeefsp\"",
									"//         },",
									"//         \"name\": \"Siabelo Maroka\",",
									"//         \"personalInfo\": {",
									"//             \"complexName\": {",
									"//                 \"firstName\": \"Siabelo\",",
									"//                 \"lastName\": \"Maroka\"",
									"//             },",
									"//             \"dateOfBirth\": \"3/3/1973\"",
									"//         }",
									"//     }",
									"// }",
									"",
									"// const addUserRequest = {",
									"//   url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"),",
									"//   method: 'POST',",
									"//   headers: {",
									"//         \"content-type\": \"application/json\",",
									"//         },",
									"//   json: requestData",
									"// };",
									"// pm.sendRequest(addUserRequest, function (err, res) {",
									"//   console.log(err ? err : res.json());",
									"// });"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "acda1151-00f5-46f5-ae59-838e0add964d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "quotes",
					"item": [
						{
							"name": "quotes",
							"item": [
								{
									"name": "GET",
									"item": [
										{
											"name": "Send Quote",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															" ",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"",
															"",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0",
														"type": "text"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\" ,\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "QuotesByID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aa07986c-5b41-42d6-9223-157fd4d99a67",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"     if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response transfer amount is valid\", function () {",
															"         //  pm.expect(response.json().ilpPacket).not.equal(null);",
															"             pm.expect(response.json().transferAmount.amount).to.eql('15');",
															"          // pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           //pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}",
														"type": "text"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId2}}",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes",
														"{{quoteId2}}"
													]
												},
												"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
											},
											"response": []
										},
										{
											"name": "400-Missing Date header",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aa07986c-5b41-42d6-9223-157fd4d99a67",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payeefsp}}"
													}
												],
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId2}}",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes",
														"{{quoteId2}}"
													]
												},
												"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
											},
											"response": []
										},
										{
											"name": "400-Missing FSPIOP-Source header",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aa07986c-5b41-42d6-9223-157fd4d99a67",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															"/*setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response transfer amount is valid\", function () {",
															"        ",
															"             pm.expect(response.json().transferAmount.amount).to.eql('15');",
															"          ",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           ",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);*/"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payeefsp}}"
													}
												],
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId2}}",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes",
														"{{quoteId2}}"
													]
												},
												"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
											},
											"response": []
										},
										{
											"name": "400- Missing Accept header",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aa07986c-5b41-42d6-9223-157fd4d99a67",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															"/*setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response transfer amount is valid\", function () {",
															"        ",
															"             pm.expect(response.json().transferAmount.amount).to.eql('15');",
															"         ",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"          ",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);*/"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payeefsp}}"
													}
												],
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId2}}",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes",
														"{{quoteId2}}"
													]
												},
												"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
											},
											"response": []
										},
										{
											"name": "404-No ID in the URI",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aa07986c-5b41-42d6-9223-157fd4d99a67",
														"exec": [
															"pm.test(\"Status code is 404\", function () {",
															"    pm.response.to.have.status(404);",
															"});",
															"",
															" var jsonData = pm.response.json();",
															"",
															"pm.test(\"Error code is 3002\", function () {",
															"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3002');",
															"});",
															"",
															"pm.test(\"Error Description is Unknown URI - Not Found\", function () {",
															"    pm.expect(jsonData.errorInformation.errorDescription).to.include(\"Unknown URI - Not Found\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payeefsp}}"
													}
												],
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes/",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes",
														""
													]
												},
												"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
											},
											"response": []
										},
										{
											"name": "400- Malformed ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aa07986c-5b41-42d6-9223-157fd4d99a67",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"            ",
															"pm.test(\"Check Malformed ID - 000000\", function () {",
															"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
															"});            ",
															"            ",
															"pm.test(\"Check Error code 3101\", function () {",
															"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payeefsp}}"
													}
												],
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes/000000",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes",
														"000000"
													]
												},
												"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
											},
											"response": []
										},
										{
											"name": "400-Malformed ID",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aa07986c-5b41-42d6-9223-157fd4d99a67",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"            ",
															"pm.test(\"Check Malformed ID - 482f5eb4-67b6-####-9737-c77b0@$4706c\", function () {",
															"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
															"});            ",
															"            ",
															"pm.test(\"Check Error code 3101\", function () {",
															"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payeefsp}}"
													}
												],
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes/482f5eb4-67b6-####-9737-c77b0@$4706c",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes",
														"482f5eb4-67b6-"
													],
													"hash": "###-9737-c77b0@$4706c"
												},
												"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
											},
											"response": []
										},
										{
											"name": "202-Unexistent ID-3205 (BUG)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aa07986c-5b41-42d6-9223-157fd4d99a67",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// collect the error at Payer simulator and do assertions later when this is fixed.",
															"",
															"",
															"// FROM API Spec: 3205 - Quote ID not found -\tProvided Quote ID was not found in the server.",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payeefsp}}"
													}
												],
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes/482f5ea4-67b6-431a-9737-c77b0534706c",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes",
														"482f5ea4-67b6-431a-9737-c77b0534706c"
													]
												},
												"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "POST",
									"item": [
										{
											"name": "RC 400 - EC 3102 Missing mandatory element -  empty quote id",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															" ",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"",
															"",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"            ",
															"pm.test(\"Check Missing mandatory element - QuoteId\", function () {",
															"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
															"});            ",
															"            ",
															"pm.test(\"Check Error code 3102\", function () {",
															"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0",
														"type": "text"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\" ,\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "RC 406 - EC 3001 - Unacceptable version (BUG)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 406\", function () {",
															"    pm.response.to.have.status(406);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"//BElow is  Example from API spec",
															"",
															"//       {",
															"//     \"errorInformation\": {",
															"//         \"errorCode\": \"3001\",",
															"//         \"errorDescription\": \"The Client requested an unsupported version, see extension list for supported version(s).\",",
															"//         \"extensionList\": [",
															"//             { \"key\": \"1\", \"value\": \"0\" },",
															"//             { \"key\": \"2\", \"value\": \"1\" },",
															"//             { \"key\": \"4\", \"value\": \"2\" }",
															"//         ]",
															"//     }",
															"// }",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=5000"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=5000.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												},
												"description": "Expected should be this:\r\n{\r\n    \"errorInformation\": {\r\n        \"errorCode\": \"3001\",\r\n        \"errorDescription\": \"The Client requested an unsupported version, see extension list for supported version(s).\",\r\n        \"extensionList\": [\r\n            { \"key\": \"1\", \"value\": \"0\" },\r\n            { \"key\": \"2\", \"value\": \"1\" },\r\n            { \"key\": \"4\", \"value\": \"2\" }\r\n        ]\r\n    }\r\n}"
											},
											"response": []
										},
										{
											"name": "RC 400 - EC 3101 Malformed QuoteId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"",
															"",
															"",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"@123#59\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"17\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												},
												"description": "This is the log at simulators: I see 2 error msgs in which one is appropriate \" invalid guid format quoteID\" but the other is abt transfer expirty date.. which I do not understand.\n\n[d1741-simulator-85448cd97d-jbc74] 2019-08-29T21:28:51.026Z - info: L1p-Trace-Id=undefined - Method: post Path: /payeefsp/quotes Query: {} \n[d1741-simulator-85448cd97d-jbc74] 2019-08-29T21:28:51.026Z - info: L1p-Trace-Id=undefined - Headers: {\"host\":\"dev1-simulator.mojaloop.live\",\"connection\":\"close\",\"x-request-id\":\"b3c628cbc0b801c12e0901d6a4db76b4\",\"x-real-ip\":\"10.1.2.185\",\"x-forwarded-for\":\"10.1.2.185\",\"x-forwarded-host\":\"dev1-simulator.mojaloop.live\",\"x-forwarded-port\":\"80\",\"x-forwarded-proto\":\"http\",\"x-original-uri\":\"/payeefsp/quotes\",\"x-scheme\":\"http\",\"content-length\":\"546\",\"content-type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"date\":\"Thu, 29 Aug 2019 21:28:51 GMT\",\"fspiop-source\":\"payerfsp\",\"fspiop-destination\":\"payeefsp\",\"accept\":\"application/vnd.interoperability.quotes+json;version=1\",\"user-agent\":\"node-fetch/1.0 (+https://github.com/bitinn/node-fetch)\",\"accept-encoding\":\"gzip,deflate\"} \n[d1741-simulator-85448cd97d-jbc74] 2019-08-29T21:28:51.029Z - info: L1p-Trace-Id=undefined - Response: ValidationError: child \"@ Quote Id must be in a valid GUID format. @\" fails because [\"@ Quote Id must be in a valid GUID format. @\" must be a valid GUID] \n[d1741-simulator-85448cd97d-jbc74] 2019-08-29T21:28:51.044Z - info: L1p-Trace-Id=undefined - Method: put Path: /payerfsp/quotes/@123 Query: {} \n[d1741-simulator-85448cd97d-jbc74] 2019-08-29T21:28:51.045Z - info: L1p-Trace-Id=undefined - Headers: {\"host\":\"dev1-simulator.mojaloop.live\",\"connection\":\"close\",\"x-request-id\":\"368abe999b812644e001df12752be5f8\",\"x-real-ip\":\"10.1.2.185\",\"x-forwarded-for\":\"10.1.2.185\",\"x-forwarded-host\":\"dev1-simulator.mojaloop.live\",\"x-forwarded-port\":\"80\",\"x-forwarded-proto\":\"http\",\"x-original-uri\":\"/payerfsp/quotes/@123\",\"x-scheme\":\"http\",\"content-length\":\"1727\",\"content-type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"date\":\"Thu, 29 Aug 2019 21:28:51 GMT\",\"fspiop-source\":\"switch\",\"fspiop-destination\":\"payerfsp\",\"fspiop-http-method\":\"PUT\",\"user-agent\":\"axios/0.19.0\"} \n[d1741-simulator-85448cd97d-jbc74] 2019-08-29T21:28:51.048Z - info: L1p-Trace-Id=undefined - Response: ValidationError: child \"@ A valid transfer expiry date must be supplied. @\" fails because [\"@ A valid transfer expiry date must be supplied. @\" is required]"
											},
											"response": []
										},
										{
											"name": "400 - 3101 Malformed TransactionId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"@123\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"17\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "RC 400 - Error 3101 Malformed Syntax - invalid payeePartyIdType",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"/*setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);*/",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"CELLNM\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"17\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "RC 400 - Error 3101 Malformed Syntax - invalid payeePartyIdentifier",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"@123456\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"18\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "RC 400 - Error 3101 Malformed Syntax - invalid payerPartyIdType",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"CELLSD\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"19\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "RC 400 - Error 3101 Malformed Syntax - invalid payerPartyIdentifier",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"#27713#803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"19\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "RC 400 - Error 3102 Missing mandatory element - QuoteId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"17\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "RC 400 - Error 3102 Missing mandatory element - TransactionId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"17\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "RC 400 - Error 3102 Missing mandatory element - payeePartyIdType",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n     \n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"17\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "RC 400 - Error 3102 Missing mandatory element - payeePartyIdentifier",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"18\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "RC 400 - Error 3102 Missing mandatory element - payerPartyIdType",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n     \n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"19\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "RC 400 - Error 3102 Missing mandatory element - payerPartyIdentifier",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n     \n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"19\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "RC 400 - Error 3106 Modified request - payeePartyIdType - Quote1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId3', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId3}}\",\n  \"transactionId\": \"{{quoteId3}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n     \n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"17\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "RC 400 - Error 3106 Modified request - payeePartyIdType - Quote2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId3}}\",\n  \"transactionId\": \"{{quoteId3}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"14\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "RC 400 - Error 3201 Destination fsp cannot be found",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"blah\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "RC 400 - Error 3204 Party not found",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"7777777777\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid Required fields - all fields empty",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"\",\n  \"transactionId\": \"\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"\",\n      \"partyIdentifier\": \"\",\n      \"fspId\": \"\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"\",\n      \"partyIdentifier\": \"\",\n      \"fspId\": \"\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "RC 202 - Error 5101 Rejected quote by Payee - Invalid txn type",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"16\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"DEPOSITxx\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "RC 202 - Error 5106 Unsupported currency",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"/*setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);*/",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"HNL\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sending Duplicate Quote ID within expiricy time - Quote1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   ",
															"}",
															"",
															"pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\",\n  \"expiration\": \"{{quoteExpDate}}\" \n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sending Duplicate Quote ID within expiricy time - Quote2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId2', generatedUUID);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{transactionId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"18\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sending Duplicate Quote ID after expiricy time - Quote1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   ",
															"}",
															"",
															"pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 100));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 5000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\",\n  \"expiration\": \"{{quoteExpDate}}\" \n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sending Duplicate Quote ID after expiricy time - Quote2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId2', generatedUUID);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{transactionId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"18\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Quote with empty currency (BUG)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   ",
															"}",
															"",
															"pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n  \n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Quote with negative amount (BUG)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   ",
															"}",
															"",
															"pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"-15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n  \n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sending  Quote with Decimal amount",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   ",
															"}",
															"",
															"pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15.35\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n  \n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sending  Quote with zero amount",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   ",
															"}",
															"",
															"pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"0\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n  \n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sending Duplicate Quote ID - Same MSISDN - Quote1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   ",
															"}",
															"",
															"pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"11\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n  \n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sending Duplicate Quote ID - Same MSISDN - Quote2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId2', generatedUUID);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{transactionId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"12\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sending Duplicate Quote ID - Different MSISDN - Quote1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   ",
															"}",
															"",
															"pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"11\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n  \n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sending Duplicate Quote ID - Different MSISDN - Quote2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId2', generatedUUID);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{transactionId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22506144035\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"12\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sending Quote - Amount Type Recieve",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															"   ",
															"}",
															"",
															"pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
															"      if(response !== null) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition2\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 3000);",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"RECEIVE\",\n  \"amount\": {\n    \"amount\": \"11\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n  \n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "RC 400 - EC 3102 Missing mandatory element - empty transaction id ",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															" ",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId2', generatedUUID);",
															"",
															"",
															"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "095c973b-3b61-453c-992c-21a78b1066dc",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"            ",
															"pm.test(\"Check Missing mandatory element - TransactionId\", function () {",
															"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
															"});            ",
															"            ",
															"pm.test(\"Check Error code 3102\", function () {",
															"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0",
														"type": "text"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\" ,\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "PUT",
									"item": [
										{
											"name": "Quotes ID do not match between POST/PUT",
											"item": [
												{
													"name": "Sending Quote - quote ID not matching",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"",
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.environment.set('quoteId2', generatedUUID);",
																	"",
																	"",
																	"",
																	"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
																	"   ",
																	"",
																	"pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "095c973b-3b61-453c-992c-21a78b1066dc",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
																	"// });",
																	"",
																	"",
																	"/*setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
																	"      if(response !== null) {",
																	"          console.log(response.json());",
																	"       pm.test(\"Response ilpPacket is not null\", function () {",
																	"           pm.expect(response.json().ilpPacket).not.equal(null);",
																	"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
																	"       });",
																	"       ",
																	"       pm.test(\"Response condition is not null\", function () {",
																	"           pm.expect(response.json().condition).not.equal(null);",
																	"           pm.environment.set(\"condition2\", response.json().condition);",
																	"       });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 3000);*/",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "noresponsepayeefsp"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"noresponsepayeefsp\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"11\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n  \n}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Sending Quote - quote ID not matching",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"",
																	"",
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
																	"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
																	"   ",
																	"}",
																	"",
																	"//pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "095c973b-3b61-453c-992c-21a78b1066dc",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
																	"// });",
																	"",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
																	"      if(response !== null) {",
																	"          console.log(response.json());",
																	"       pm.test(\"Response ilpPacket is not null\", function () {",
																	"           pm.expect(response.json().ilpPacket).not.equal(null);",
																	"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
																	"       });",
																	"       ",
																	"       pm.test(\"Response condition is not null\", function () {",
																	"           pm.expect(response.json().condition).not.equal(null);",
																	"           pm.environment.set(\"condition2\", response.json().condition);",
																	"       });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 5000);",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1",
																"disabled": true
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "noresponsepayeefsp"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payerfsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{ \n   \"transferAmount\": { \n   \"amount\": \"11\",   \n   \"currency\": \"XOF\" },\n   \"payeeReceiveAmount\": {  \n   \"amount\": \"11\",   \n   \"currency\": \"XOF\"   }, \n   \"expiration\": \"{{quoteExpDate}}\",\n   \"ilpPacket\": \"{{ilpPacket}}\",\n   \"condition\": \"{{condition}}\" } "
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes/7c23e80c-d078-4077-8263-2c047876fcf6",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes",
																"7c23e80c-d078-4077-8263-2c047876fcf6"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Missing IlpPacket in PUT call",
											"item": [
												{
													"name": "Sending Quote - Missing IlpPacket",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.environment.set('quoteId3', generatedUUID);",
																	"}",
																	"",
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
																	"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
																	"   ",
																	"}",
																	"",
																	"pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 60000));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "095c973b-3b61-453c-992c-21a78b1066dc",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
																	"// });",
																	"",
																	"",
																	"/*setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
																	"      if(response !== null) {",
																	"          console.log(response.json());",
																	"       pm.test(\"Response ilpPacket is not null\", function () {",
																	"           pm.expect(response.json().ilpPacket).not.equal(null);",
																	"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
																	"       });",
																	"       ",
																	"       pm.test(\"Response condition is not null\", function () {",
																	"           pm.expect(response.json().condition).not.equal(null);",
																	"           pm.environment.set(\"condition2\", response.json().condition);",
																	"       });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 3000);*/",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "noresponsepayeefsp"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"quoteId\": \"{{quoteId3}}\",\n  \"transactionId\": \"{{quoteId3}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"noresponsepayeefsp\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"11\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n  \n}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Sending Quote - Missing IlpPacket",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"",
																	"",
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
																	"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
																	"   ",
																	"}",
																	"",
																	"//pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "095c973b-3b61-453c-992c-21a78b1066dc",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"pm.test(\"Error message is expected as response.\", function () {",
																	"           var jsonData = pm.response.json();",
																	"           console.log(jsonData.message);",
																	"          // pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																	"           pm.expect(jsonData.message).to.include('[\\\"ilpPacket\\\" is required]');",
																	"        });",
																	"        ",
																	"        ",
																	"        ",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
																	"// });",
																	"",
																	"",
																	"/*setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId3\"), function (err, response) {",
																	"      if(response !== null) {",
																	"          console.log(response.json());",
																	"       pm.test(\"Response ilpPacket is not null\", function () {",
																	"           pm.expect(response.json().ilpPacket).not.equal(null);",
																	"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
																	"       });",
																	"       ",
																	"       pm.test(\"Response condition is not null\", function () {",
																	"           pm.expect(response.json().condition).not.equal(null);",
																	"           pm.environment.set(\"condition2\", response.json().condition);",
																	"       });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 5000);*/",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1",
																"disabled": true
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "noresponsepayeefsp"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payerfsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{ \n   \"transferAmount\": { \n   \"amount\": \"11\",   \n   \"currency\": \"XOF\" },\n   \"payeeReceiveAmount\": {  \n   \"amount\": \"11\",   \n   \"currency\": \"XOF\"   }, \n   \"expiration\": \"{{quoteExpDate}}\",\n   \"condition\": \"{{condition}}\" } "
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId3}}",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes",
																"{{quoteId3}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Missing condition in PUT call",
											"item": [
												{
													"name": "Sending Quote - Missing condition",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.environment.set('quoteId4', generatedUUID);",
																	"}",
																	"",
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
																	"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
																	"   ",
																	"}",
																	"",
																	"pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 60000));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "095c973b-3b61-453c-992c-21a78b1066dc",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
																	"// });",
																	"",
																	"",
																	"/*setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
																	"      if(response !== null) {",
																	"          console.log(response.json());",
																	"       pm.test(\"Response ilpPacket is not null\", function () {",
																	"           pm.expect(response.json().ilpPacket).not.equal(null);",
																	"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
																	"       });",
																	"       ",
																	"       pm.test(\"Response condition is not null\", function () {",
																	"           pm.expect(response.json().condition).not.equal(null);",
																	"           pm.environment.set(\"condition2\", response.json().condition);",
																	"       });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 3000);*/",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "noresponsepayeefsp"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"quoteId\": \"{{quoteId4}}\",\n  \"transactionId\": \"{{quoteId4}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"noresponsepayeefsp\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"11\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n  \n}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Sending Quote - Missing condition",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"",
																	"",
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
																	"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
																	"   ",
																	"}",
																	"",
																	"//pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "095c973b-3b61-453c-992c-21a78b1066dc",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"",
																	"pm.test(\"Error message is expected as response.\", function () {",
																	"           var jsonData = pm.response.json();",
																	"           console.log(jsonData.message);",
																	"          // pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																	"           pm.expect(jsonData.message).to.include('[\\\"condition\\\" is required]');",
																	"        });",
																	"        ",
																	"        ",
																	"        ",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
																	"// });",
																	"",
																	"",
																	"/*setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId4\"), function (err, response) {",
																	"      if(response !== null) {",
																	"          console.log(response.json());",
																	"       pm.test(\"Response ilpPacket is not null\", function () {",
																	"           pm.expect(response.json().ilpPacket).not.equal(null);",
																	"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
																	"       });",
																	"       ",
																	"       pm.test(\"Response condition is not null\", function () {",
																	"           pm.expect(response.json().condition).not.equal(null);",
																	"           pm.environment.set(\"condition2\", response.json().condition);",
																	"       });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 5000);*/",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1",
																"disabled": true
															},
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "noresponsepayeefsp"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payerfsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{ \n   \"transferAmount\": { \n   \"amount\": \"11\",   \n   \"currency\": \"XOF\" },\n   \"payeeReceiveAmount\": {  \n   \"amount\": \"11\",   \n   \"currency\": \"XOF\"   }, \n   \"expiration\": \"{{quoteExpDate}}\",\n   \"ilpPacket\": \"{{ilpPacket}}\"\n    } "
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId4}}",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes",
																"{{quoteId4}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"description": "Folder for quotes",
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "QuotesByIDAndError",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "Date",
										"value": "{{Date}}"
									},
									{
										"key": "X-Forwarded-For",
										"value": "{{X-Forwarded-For}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{FSPIOP-Source}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{FSPIOP-Destination}}"
									},
									{
										"key": "FSPIOP-Encryption",
										"value": "{{FSPIOP-Encryption}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{FSPIOP-Signature}}"
									},
									{
										"key": "FSPIOP-URI",
										"value": "{{FSPIOP-URI}}"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "{{FSPIOP-HTTP-Method}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
									"host": [
										"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
									],
									"path": [
										"quotes"
									]
								},
								"description": "If the server is unable to find or create a quote, or some other processing error occurs, the error callback PUT /quotes/<ID>/error is used. The <ID> in the URI should contain the quoteId that was used for the creation of the quote, or the <ID> that was used in the GET /quotes/<ID>."
							},
							"response": []
						},
						{
							"name": "QuotesByID",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "Date",
										"value": "{{Date}}"
									},
									{
										"key": "X-Forwarded-For",
										"value": "{{X-Forwarded-For}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{FSPIOP-Source}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{FSPIOP-Destination}}"
									},
									{
										"key": "FSPIOP-Encryption",
										"value": "{{FSPIOP-Encryption}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{FSPIOP-Signature}}"
									},
									{
										"key": "FSPIOP-URI",
										"value": "{{FSPIOP-URI}}"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "{{FSPIOP-HTTP-Method}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								},
								"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
							},
							"response": []
						},
						{
							"name": "QuotesByID",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								},
								"description": "The callback PUT /quotes/<ID> is used to inform the client of a requested or created quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote, or the <ID> that was used in the GET /quotes/<ID>GET /quotes/<ID>."
							},
							"response": []
						},
						{
							"name": "Send Quote",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.variables.set('quoteId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
											"// });",
											"",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"      if(response !== null) {",
											"          console.log(response.json());",
											"       pm.test(\"Response ilpPacket is not null\", function () {",
											"           pm.expect(response.json().ilpPacket).not.equal(null);",
											"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
											"       });",
											"       ",
											"       pm.test(\"Response condition is not null\", function () {",
											"           pm.expect(response.json().condition).not.equal(null);",
											"           pm.environment.set(\"condition\", response.json().condition);",
											"       });",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"           postman.setNextRequest(null);",
											"      }",
											"       ",
											"   });",
											"}, 3000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-SOurce",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"100\",\n    \"currency\": \"USD\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						}
					],
					"description": "Folder for quotes",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "transfers",
					"item": [
						{
							"name": "GET - TransfersByID",
							"item": [
								{
									"name": "Positive Test Cases",
									"item": [
										{
											"name": "GET transfer - COMMITTED",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6c54bbb2-0b33-4301-86ae-751142923a4c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"get_transfer_ID\"), function (err, response) {",
															"          if(response !== null) {",
															"              var jsonData = response.json().data;",
															"              var headers = response.json().headers;",
															"              ",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"              pm.test(\"fspiop-source is switch\", function () {",
															"                pm.expect(headers['fspiop-source']).to.eql('switch');",
															"              });",
															"              pm.test(\"fspiop-destination is payerfsp\", function () {",
															"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 3000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{get_transfer_ID}}",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{get_transfer_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "GET transfer - Error when FSP is not involved in the transfer",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6c54bbb2-0b33-4301-86ae-751142923a4c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/callbacks/\"+pm.variables.get(\"get_transfer_ID\"), function (err, response) {",
															"          if(response !== null) {",
															"              var jsonData = response.json().data;",
															"              var headers = response.json().headers;",
															"              ",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"              pm.test(\"fspiop-source is switch\", function () {",
															"                pm.expect(headers['fspiop-source']).to.eql('switch');",
															"              });",
															"              pm.test(\"fspiop-destination is payerfsp\", function () {",
															"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 3000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{testfsp1}}",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{get_transfer_ID}}",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{get_transfer_ID}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative Test Cases",
									"item": [
										{
											"name": "400 - 3101 -  MissingAcceptHeader",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1809507a-83ea-469d-8692-59e38cced96d",
														"exec": [
															"pm.environment.set('dateHeader', (new Date()).toUTCString());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.participants+json;version=1",
														"disabled": true
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													}
												],
												"url": {
													"raw": "{{HOST_ML_API_ADAPTER}}{{BASE_ML_API}}/transfers/4c6cbc7a-b694-4c01-8dcb-ebe56c61c295",
													"host": [
														"{{HOST_ML_API_ADAPTER}}{{BASE_ML_API}}"
													],
													"path": [
														"transfers",
														"4c6cbc7a-b694-4c01-8dcb-ebe56c61c295"
													]
												},
												"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
											},
											"response": []
										},
										{
											"name": "404 -  Missing ID in the URI",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1809507a-83ea-469d-8692-59e38cced96d",
														"exec": [
															"pm.environment.set('dateHeader', (new Date()).toUTCString());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.participants+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													}
												],
												"url": {
													"raw": "{{HOST_ML_API_ADAPTER}}{{BASE_ML_API}}/transfers/",
													"host": [
														"{{HOST_ML_API_ADAPTER}}{{BASE_ML_API}}"
													],
													"path": [
														"transfers",
														""
													]
												},
												"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
											},
											"response": []
										},
										{
											"name": "200 - 3208 - TransferId not found",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1809507a-83ea-469d-8692-59e38cced96d",
														"exec": [
															"pm.environment.set('dateHeader', (new Date()).toUTCString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "33dbef40-74f8-40a2-870d-8add89fca41a",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"get_transfer_ID\"), function (err, response) {",
															"          if(response !== null) {",
															"              var jsonData = response.json().data;",
															"              var headers = response.json().headers;",
															"              ",
															"              pm.test(\"Error Code is 3208\", function () {",
															"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3208');",
															"              });",
															"              pm.test(\"Error msg is Provided Transfer ID was not found on the server.\", function () {",
															"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Provided Transfer ID was not found on the server.');",
															"              });",
															"              pm.test(\"fspiop-source is switch\", function () {",
															"                pm.expect(headers['fspiop-source']).to.eql('switch');",
															"              });",
															"              pm.test(\"fspiop-destination is payerfsp\", function () {",
															"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 3000)",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.participants+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													}
												],
												"url": {
													"raw": "{{HOST_ML_API_ADAPTER}}{{BASE_ML_API}}/transfers/f31515ef-2159-4c4c-acdb-b34e44f640cd",
													"host": [
														"{{HOST_ML_API_ADAPTER}}{{BASE_ML_API}}"
													],
													"path": [
														"transfers",
														"f31515ef-2159-4c4c-acdb-b34e44f640cd"
													]
												},
												"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer.\n\nTake a new UUID which does not exist in DB.i.e valid format but shd not exist in DB.\nor\nchange (not remove) one letter or digit from a transfer ID that exists in DB."
											},
											"response": []
										},
										{
											"name": "400 - 3101 -  InvalidTransferId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1809507a-83ea-469d-8692-59e38cced96d",
														"exec": [
															"pm.environment.set('dateHeader', (new Date()).toUTCString());"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.participants+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													}
												],
												"url": {
													"raw": "{{HOST_ML_API_ADAPTER}}{{BASE_ML_API}}/transfers/blah",
													"host": [
														"{{HOST_ML_API_ADAPTER}}{{BASE_ML_API}}"
													],
													"path": [
														"transfers",
														"blah"
													]
												},
												"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer.\n\nRemove one or more letters or digits from the actual transfer Id that exists to make invalid transferID."
											},
											"response": [
												{
													"name": "400 - 3101 -  InvalidTransferId- ML",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															}
														],
														"url": {
															"raw": "{{HOST_ML_API_ADAPTER}}{{BASE_ML_API}}/transfers/blah",
															"host": [
																"{{HOST_ML_API_ADAPTER}}{{BASE_ML_API}}"
															],
															"path": [
																"transfers",
																"blah"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Server",
															"value": "nginx/1.13.8"
														},
														{
															"key": "Date",
															"value": "Mon, 10 Dec 2018 04:28:00 GMT"
														},
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "Content-Length",
															"value": "181"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "cache-control",
															"value": "no-cache"
														}
													],
													"cookie": [],
													"body": "{\n    \"errorInformation\": {\n        \"errorCode\": 400,\n        \"errorDescription\": \"Bad Request\",\n        \"extentionList\": {\n            \"extention\": [\n                {\n                    \"key\": \"joiValidationError\",\n                    \"value\": \"Supply a valid transfer Id to continue\"\n                }\n            ]\n        }\n    }\n}"
												}
											]
										}
									],
									"description": "Author: Sridevi Miriyala",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "99e38b51-6ec7-4411-af21-630398d71cd4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f67ca39e-8597-416b-9157-043290baf8e2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"description": "Author: Sridevi Miriyala\n\nDescription: GET /transfers / {ID} is used to retrieve the status of the previously sent transfer.\nThis is implemented to support P2P transfers at the moment.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b2ace620-7fea-46c5-8ec5-abab2efb5893",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d8a3246f-3c8f-4ea5-a48e-2880ee06fc3c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "POST - Transfers",
							"item": [
								{
									"name": "Currency value as per spec",
									"item": [
										{
											"name": "202 -  Currency 5",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "abc"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{abc}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"5\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 -  Currency 5.0",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"5.0\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 -  Currency 5.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"5.\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 -  Currency 5.00",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"5.00\",\n    \"currency\": \"XYZ\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "202 -  Currency 5.5",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"5.5\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 -  Currency 5.50",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"5.50\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "202 -  Currency 5.5555",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "abc"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{abc}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"5.5555\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": [
												{
													"name": "202 -  Currency 5.5555 - ML",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "abc"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payeefsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{abc}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"5.5555\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Server",
															"value": "nginx/1.13.8"
														},
														{
															"key": "Date",
															"value": "Mon, 10 Dec 2018 05:36:32 GMT"
														},
														{
															"key": "Content-Type",
															"value": "application/json; charset=utf-8"
														},
														{
															"key": "Content-Length",
															"value": "74"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "cache-control",
															"value": "no-cache"
														}
													],
													"cookie": [],
													"body": "{\n    \"id\": \"InternalServerError\",\n    \"message\": \"An internal server error occurred\"\n}"
												}
											]
										},
										{
											"name": "400 -  Currency 5.55555",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"5.55555\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "202 -  Currency 555555555555555555",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"555555555555555555\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 -  Currency 5555555555555555555",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"5555555555555555555\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 -  Currency -5.5",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"-5.5\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "202 -  Currency 0.5",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"0.5\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 -  Currency .5",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \".5\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 -  Currency 00.5",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"00.5\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "202 -  Currency 0",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('transferId', generatedUUID);",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.variables.set('transferDate', (new Date()).toUTCString());",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"0\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										}
									],
									"description": "Author: Sridevi Miriyala\n\nTested for different values of currency as per the API spec table 33.\nEx:\n5 \n5.0\n5.\n5.00\n5.5\n5.50\n5.5555\n5.55555\n555555555555555555\n5555555555555555555\n-5.5\n0.5\n00.5\n0\n",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "910425c1-afee-4402-8112-78424aa4e353",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "16e2aafe-567a-4043-ab2d-d1b64477b5a4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "202 - OK",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transfer_ID', generatedUUID);",
													" pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))  ",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// pm.test(\"Check that Content-Type is present\", function () {",
													"//     pm.response.to.have.header(\"Content-Type\");",
													"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
													"// });",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
													"          if(response !== null) {",
													"              var jsonData = response.json();",
													"              pm.test(\"Response transfer_ID is same as the request transfer_ID\", function () {",
													"                pm.expect(jsonData.transfer_ID).to.eql(pm.variables.get('transfer_ID'));",
													"              });",
													"              pm.test(\"Response status is COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"              });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 2300)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Invalid transfer Expiration",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"00:00:00\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Missing transfer expiration",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Unknown Currency",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"XYZ\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Empty Currency - ERROR MSG not appropriate",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"5\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Missing URI param (/transfers)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Missing Host name in URI (BUG)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": [
										{
											"name": "404 - Missing Host name in URI (BUG)",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"_postman_previewlanguage": "Text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "400 - Missing Transfer ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Invalid Transfer ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"fc259b48-b6f2-41d5-ad1d-bde07a63e\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Missing FSPIOP-Destination Header(BUG)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Missing FSPIOP-Source Header",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - invalid FSPIOP-Source Header -  blah (bug)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "blah"
											},
											{
												"key": "FSPIOP-Source",
												"value": "blah"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"blah\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Invalid Date Header",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "2018-12-10"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Missing Date Header",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Invalid Content Type Header",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// pm.test(\"Check that Content-Type is present\", function () {",
													"//     pm.response.to.have.header(\"Content-Type\");",
													"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
													"// });",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transferId\"), function (err, response) {",
													"          if(response !== null) {",
													"              var jsonData = response.json();",
													"              pm.test(\"Response transferId is same as the request transferId\", function () {",
													"                pm.expect(jsonData.transferId).to.eql(pm.variables.get('transferId'));",
													"              });",
													"              pm.test(\"Response status is COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"              });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 2300)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Invalid Accept Header",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// pm.test(\"Check that Content-Type is present\", function () {",
													"//     pm.response.to.have.header(\"Content-Type\");",
													"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
													"// });",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transferId\"), function (err, response) {",
													"          if(response !== null) {",
													"              var jsonData = response.json();",
													"              pm.test(\"Response transferId is same as the request transferId\", function () {",
													"                pm.expect(jsonData.transferId).to.eql(pm.variables.get('transferId'));",
													"              });",
													"              pm.test(\"Response status is COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"              });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 2300)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Missing Content Type Header",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Missing Accept Header",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "PUT - TransfersByID",
							"item": [
								{
									"name": "Positive",
									"item": [
										{
											"name": "TransfersByIDPut",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f2ce3868-35bb-4385-b336-592fea226163",
														"exec": [
															"pm.variables.set(\"completedTimestamp\",new Date().toISOString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "bd487e9e-c944-4a2e-b711-f09db2168a7a",
														"exec": [
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payeefsp}}",
														"type": "text"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payerfsp}}",
														"type": "text"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}"
													]
												},
												"description": "The callback PUT /transfers/<ID> is used to inform the client of a requested or created transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer, or the <ID> that was used in the GET /transfers/<ID>."
											},
											"response": []
										},
										{
											"name": "TransfersABORTWithoutFulfillment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f2ce3868-35bb-4385-b336-592fea226163",
														"exec": [
															"pm.variables.set(\"completedTimestamp\",new Date().toISOString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "bd487e9e-c944-4a2e-b711-f09db2168a7a",
														"exec": [
															"pm.test(\"Successful PUT request\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{payeefsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"ABORTED\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}"
													]
												},
												"description": "The callback PUT /transfers/<ID> is used to inform the client of a requested or created transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer, or the <ID> that was used in the GET /transfers/<ID>."
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Negative",
									"item": [
										{
											"name": "400 - Exrta transferId in body",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2e244cfd-ff69-448a-8b62-176d4dd0b28d",
														"exec": [
															"pm.variables.set(\"completedTimestamp\",new Date().toISOString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "358f8ed8-6882-4c54-8dfd-177607c9e07b",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"errorCode should be 400\", function () {",
															"    pm.expect(jsonData.errorInformation.errorCode).to.eql(400);",
															"  });",
															"  ",
															"pm.test(\"errorDescription should be Bad Request\", function () {",
															"    pm.expect(jsonData.errorInformation.errorDescription).to.eql('Bad Request');",
															"  });",
															"  ",
															"pm.test(\"transferId should be part of error description\", function () {",
															"    pm.expect(jsonData.errorInformation.extensionList.extension[0].value).to.include('transferId');",
															"  });",
															" "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{payeefsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\":\"{{transfer_ID}}\",\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "TransfersReject",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2e244cfd-ff69-448a-8b62-176d4dd0b28d",
														"exec": [
															"pm.variables.set(\"completedTimestamp\",new Date().toISOString());"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "358f8ed8-6882-4c54-8dfd-177607c9e07b",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"errorCode should be 400\", function () {",
															"    pm.expect(jsonData.errorInformation.errorCode).to.eql(400);",
															"  });",
															"  ",
															"pm.test(\"errorDescription should be Bad Request\", function () {",
															"    pm.expect(jsonData.errorInformation.errorDescription).to.eql('Bad Request');",
															"  });",
															"  ",
															"pm.test(\"transferId should be part of error description\", function () {",
															"    pm.expect(jsonData.errorInformation.extensionList.extension[0].value).to.include('transferId');",
															"  });",
															" "
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYEEFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{payeefsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "{{payerfsp}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\":\"{{transfer_ID}}\",\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a103ce5c-9b9a-44ba-abb5-b52987405bfc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "078275a3-0a7a-46d1-9955-19ee397c563a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "PUT - TransfersByIDError",
							"item": [
								{
									"name": "TransfersByIDAndError",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8957efbe-c754-45a9-974d-0291b21f1071",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{dateHeader}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payeefsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payerfsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"errorInformation\": {\n\t\t\"errorCode\": \"5101\",\n\t\t\"errorDescription\": \"Payee transaction limit reached\",\n\t\t\"extensionList\": {\n\t\t\t\"extension\": [{\n\t\t\t\t\"key\": \"errorDetail\",\n\t\t\t\t\"value\": \"This is an abort extension\"\n\t\t\t}]\n\t\t}\n\t}\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}/error",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers",
												"{{transfer_ID}}",
												"error"
											]
										},
										"description": "If the server is unable to find or create a transfer, or another processing error occurs, the error callback PUT /transfers/<ID>/error is used. The <ID> in the URI should contain the transferId that was used for the creation of the transfer, or the <ID> that was used in the GET /transfers/<ID>."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a0267eed-71e5-475e-9379-014a148fc5af",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8b9815f2-0f94-4bab-a4bd-ee826872b59d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Folder for transfers",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "bulkTransfers ( NO IMPLEMENTATION )",
					"item": [
						{
							"name": "BulkTransferByID",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "{{Accept}}"
									}
								],
								"url": {
									"raw": "http://fsp/bulkTransfers/:ID",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"bulkTransfers",
										":ID"
									],
									"variable": [
										{
											"key": "ID"
										}
									]
								},
								"description": "The HTTP request GET /bulkTransfers/<ID> is used to get information regarding an earlier created or requested bulk transfer. The <ID> in the URI should contain the bulkTransferId that was used for the creation of the bulk transfer."
							},
							"response": []
						},
						{
							"name": "BulkTransfersByIDPut",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://fsp/bulkTransfers/:ID",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"bulkTransfers",
										":ID"
									],
									"variable": [
										{
											"key": "ID"
										}
									]
								},
								"description": "The callback PUT /bulkTransfers/<ID> is used to inform the client of a requested or created bulk transfer. The <ID> in the URI should contain the bulkTransferId that was used for the creation of the bulk transfer (POST /bulkTransfers), or the <ID> that was used in the GET /bulkTransfers/<ID>."
							},
							"response": []
						},
						{
							"name": "BulkTransfers",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "{{Accept}}"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "Date",
										"value": "{{Date}}"
									},
									{
										"key": "X-Forwarded-For",
										"value": "{{X-Forwarded-For}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{FSPIOP-Source}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{FSPIOP-Destination}}"
									},
									{
										"key": "FSPIOP-Encryption",
										"value": "{{FSPIOP-Encryption}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{FSPIOP-Signature}}"
									},
									{
										"key": "FSPIOP-URI",
										"value": "{{FSPIOP-URI}}"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "{{FSPIOP-HTTP-Method}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://fsp/bulkTransfers",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"bulkTransfers"
									]
								},
								"description": "The HTTP request POST /bulkTransfers is used to request the creation of a bulk transfer in the server."
							},
							"response": []
						},
						{
							"name": "BulkTransfersErrorByID",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "Date",
										"value": "{{Date}}"
									},
									{
										"key": "X-Forwarded-For",
										"value": "{{X-Forwarded-For}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{FSPIOP-Source}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{FSPIOP-Destination}}"
									},
									{
										"key": "FSPIOP-Encryption",
										"value": "{{FSPIOP-Encryption}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{FSPIOP-Signature}}"
									},
									{
										"key": "FSPIOP-URI",
										"value": "{{FSPIOP-URI}}"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "{{FSPIOP-HTTP-Method}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://fsp/bulkTransfers/:ID/error",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"bulkTransfers",
										":ID",
										"error"
									],
									"variable": [
										{
											"key": "ID",
											"value": "{{ID}}"
										}
									]
								},
								"description": "If the server is unable to find or create a bulk transfer, or another processing error occurs, the error callback PUT /bulkTransfers/<ID>/error is used. The <ID> in the URI should contain the bulkTransferId that was used for the creation of the bulk transfer (POST /bulkTransfers), or the <ID> that was used in the GET /bulkTransfers/<ID>."
							},
							"response": []
						}
					],
					"description": "Folder for bulkTransfers",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "transactionRequests ( NO IMPLEMENTATION )",
					"item": [
						{
							"name": "TransactionRequestsErrorByID",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "Date",
										"value": "{{Date}}"
									},
									{
										"key": "X-Forwarded-For",
										"value": "{{X-Forwarded-For}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{FSPIOP-Source}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{FSPIOP-Destination}}"
									},
									{
										"key": "FSPIOP-Encryption",
										"value": "{{FSPIOP-Encryption}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{FSPIOP-Signature}}"
									},
									{
										"key": "FSPIOP-URI",
										"value": "{{FSPIOP-URI}}"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "{{FSPIOP-HTTP-Method}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://fsp/transactionRequests/:ID/error",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"transactionRequests",
										":ID",
										"error"
									],
									"variable": [
										{
											"key": "ID",
											"value": "{{ID}}"
										}
									]
								},
								"description": "If the server is unable to find or create a transaction request, or another processing error occurs, the error callback PUT /transactionRequests/<ID>/error is used. The <ID> in the URI should contain the transactionRequestId that was used for the creation of the transaction request, or the <ID> that was used in the GET /transactionRequests/<ID>."
							},
							"response": []
						},
						{
							"name": "TransactionRequestsByID",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "{{Accept}}"
									}
								],
								"url": {
									"raw": "http://fsp/transactionRequests/:ID",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"transactionRequests",
										":ID"
									],
									"variable": [
										{
											"key": "ID"
										}
									]
								},
								"description": "The HTTP request GET /transactionRequests/<ID> is used to get information regarding an earlier created or requested transaction request. The <ID> in the URI should contain the transactionRequestId that was used for the creation of the transaction request."
							},
							"response": []
						},
						{
							"name": "TransactionRequestsByID",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://fsp/transactionRequests/:ID",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"transactionRequests",
										":ID"
									],
									"variable": [
										{
											"key": "ID"
										}
									]
								},
								"description": "The callback PUT /transactionRequests/<ID> is used to inform the client of a requested or created transaction request. The <ID> in the URI should contain the transactionRequestId that was used for the creation of the transaction request, or the <ID> that was used in the GET /transactionRequests/<ID>."
							},
							"response": []
						},
						{
							"name": "TransactionRequests",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "{{Accept}}"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "Date",
										"value": "{{Date}}"
									},
									{
										"key": "X-Forwarded-For",
										"value": "{{X-Forwarded-For}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{FSPIOP-Source}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{FSPIOP-Destination}}"
									},
									{
										"key": "FSPIOP-Encryption",
										"value": "{{FSPIOP-Encryption}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{FSPIOP-Signature}}"
									},
									{
										"key": "FSPIOP-URI",
										"value": "{{FSPIOP-URI}}"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "{{FSPIOP-HTTP-Method}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://fsp/transactionRequests",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"transactionRequests"
									]
								},
								"description": "The HTTP request POST /transactionRequests is used to request the creation of a transaction request for the provided financial transaction in the server."
							},
							"response": []
						}
					],
					"description": "Folder for transactionRequests",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "transactions ( NO IMPLEMENTATION )",
					"item": [
						{
							"name": "TransactionsByID",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "{{Accept}}"
									}
								],
								"url": {
									"raw": "http://fsp/transactions/:ID",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"transactions",
										":ID"
									],
									"variable": [
										{
											"key": "ID"
										}
									]
								},
								"description": "The HTTP request GET /transactions/<ID> is used to get transaction information regarding a financial transaction created earlier. The <ID> in the URI should contain the transactionId that was used for the creation of the quote, as the transaction is created as part of another process (the transfer process)."
							},
							"response": []
						},
						{
							"name": "TransactionsByID",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://fsp/transactions/:ID",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"transactions",
										":ID"
									],
									"variable": [
										{
											"key": "ID"
										}
									]
								},
								"description": "The callback PUT /transactions/<ID> is used to inform the client of a requested transaction. The <ID> in the URI should contain the <ID> that was used in the GET /transactions/<ID>."
							},
							"response": []
						},
						{
							"name": "TransactionsErrorByID",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "Date",
										"value": "{{Date}}"
									},
									{
										"key": "X-Forwarded-For",
										"value": "{{X-Forwarded-For}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{FSPIOP-Source}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{FSPIOP-Destination}}"
									},
									{
										"key": "FSPIOP-Encryption",
										"value": "{{FSPIOP-Encryption}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{FSPIOP-Signature}}"
									},
									{
										"key": "FSPIOP-URI",
										"value": "{{FSPIOP-URI}}"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "{{FSPIOP-HTTP-Method}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://fsp/transactions/:ID/error",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"transactions",
										":ID",
										"error"
									],
									"variable": [
										{
											"key": "ID",
											"value": "{{ID}}"
										}
									]
								},
								"description": "If the server is unable to find or create a transaction, or another processing error occurs, the error callback PUT /transactions/<ID>/error is used. The <ID> in the URI should contain the <ID> that was used in the GET /transactions/<ID>."
							},
							"response": []
						}
					],
					"description": "Folder for transactions",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "authorizations ( NO IMPLEMENTATION )",
					"item": [
						{
							"name": "AuthorizationsByID",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "{{Accept}}"
									}
								],
								"url": {
									"raw": "http://fsp/authorizations/:ID",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"authorizations",
										":ID"
									],
									"variable": [
										{
											"key": "ID"
										}
									]
								},
								"description": "The HTTP request GET /authorizations/<ID> is used to request the Payer to enter the applicable credentials in the Payee FSP system. The <ID> in the URI should contain the transactionRequestID, received from the POST /transactionRequests service earlier in the process. This request requires a query string to be included in the URI, with the following key-value pairs - authenticationType=<Type>, where <Type> value is a valid authentication type from the enumeration AuthenticationType. retriesLeft==<NrOfRetries>, where <NrOfRetries> is the number of retries left before the financial transaction is rejected. <NrOfRetries> must be expressed in the form of the data type Integer. retriesLeft=1 means that this is the last retry before the financial transaction is rejected. amount=<Amount>, where <Amount> is the transaction amount that will be withdrawn from the Payer’s account. <Amount> must be expressed in the form of the data type Amount. currency=<Currency>, where <Currency> is the transaction currency for the amount that will be withdrawn from the Payer’s account. The <Currency> value must be expressed in the form of the enumeration CurrencyCode. An example URI containing all the required key-value pairs in the query string is the following - GET /authorization/3d492671-b7af-4f3f-88de-76169b1bdf88?authenticationType=OTP&retriesLeft=2&amount=102&currency=USD"
							},
							"response": []
						},
						{
							"name": "AuthorizationsByID",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://fsp/authorizations/:ID",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"authorizations",
										":ID"
									],
									"variable": [
										{
											"key": "ID"
										}
									]
								},
								"description": "The callback PUT /authorizations/<ID> is used to inform the client of the result of a previously-requested authorization. The <ID> in the URI should contain the <ID> that was used in the GET /authorizations/<ID>."
							},
							"response": []
						},
						{
							"name": "AuthorizationsByIDAndError",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Content-Length",
										"value": "{{Content-Length}}"
									},
									{
										"key": "Content-Type",
										"value": "{{Content-Type}}"
									},
									{
										"key": "Date",
										"value": "{{Date}}"
									},
									{
										"key": "X-Forwarded-For",
										"value": "{{X-Forwarded-For}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{FSPIOP-Source}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{FSPIOP-Destination}}"
									},
									{
										"key": "FSPIOP-Encryption",
										"value": "{{FSPIOP-Encryption}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{FSPIOP-Signature}}"
									},
									{
										"key": "FSPIOP-URI",
										"value": "{{FSPIOP-URI}}"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "{{FSPIOP-HTTP-Method}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "http://fsp/authorizations/:ID/error",
									"protocol": "http",
									"host": [
										"fsp"
									],
									"path": [
										"authorizations",
										":ID",
										"error"
									],
									"variable": [
										{
											"key": "ID",
											"value": "{{ID}}"
										}
									]
								},
								"description": "If the server is unable to find the transaction request, or another processing error occurs, the error callback PUT /authorizations/<ID>/error is used. The <ID> in the URI should contain the <ID> that was used in the GET /authorizations/<ID>."
							},
							"response": []
						}
					],
					"description": "Folder for authorizations",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala\n\nMojaloop API mainly consists of Participants, Parties, Quotes and Transfers endpoints.\nBulk transfers, transaction requests, transactions, Authorizations, Bulk quotes etc are yet to implement.\n\nThis collection includes the negative test cases of the the four endpoints that validates Headers and Input params.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "526011ca-4860-4a15-baf6-8698e6bbd3e8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "829c49e7-24b4-40e6-8f65-d11d1b6d47e3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "bulkQuotes ( NO IMPLEMENTATION )",
			"item": [
				{
					"name": "BulkQuotesErrorByID",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Content-Length",
								"value": "{{Content-Length}}"
							},
							{
								"key": "Content-Type",
								"value": "{{Content-Type}}"
							},
							{
								"key": "Date",
								"value": "{{Date}}"
							},
							{
								"key": "X-Forwarded-For",
								"value": "{{X-Forwarded-For}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{FSPIOP-Source}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{FSPIOP-Destination}}"
							},
							{
								"key": "FSPIOP-Encryption",
								"value": "{{FSPIOP-Encryption}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{FSPIOP-Signature}}"
							},
							{
								"key": "FSPIOP-URI",
								"value": "{{FSPIOP-URI}}"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "{{FSPIOP-HTTP-Method}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://fsp/bulkQuotes/:ID/error",
							"protocol": "http",
							"host": [
								"fsp"
							],
							"path": [
								"bulkQuotes",
								":ID",
								"error"
							],
							"variable": [
								{
									"key": "ID",
									"value": "{{ID}}"
								}
							]
						},
						"description": "If the server is unable to find or create a bulk quote, or another processing error occurs, the error callback PUT /bulkQuotes/<ID>/error is used. The <ID> in the URI should contain the bulkQuoteId that was used for the creation of the bulk quote, or the <ID> that was used in the GET /bulkQuotes/<ID>."
					},
					"response": []
				},
				{
					"name": "BulkQuotesByID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "{{Accept}}"
							}
						],
						"url": {
							"raw": "http://fsp/bulkQuotes/:ID",
							"protocol": "http",
							"host": [
								"fsp"
							],
							"path": [
								"bulkQuotes",
								":ID"
							],
							"variable": [
								{
									"key": "ID"
								}
							]
						},
						"description": "The HTTP request GET /bulkQuotes/<ID> is used to get information regarding an earlier created or requested bulk quote. The <ID> in the URI should contain the bulkQuoteId that was used for the creation of the bulk quote."
					},
					"response": []
				},
				{
					"name": "BulkQuotesByID",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Content-Length",
								"value": "{{Content-Length}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://fsp/bulkQuotes/:ID",
							"protocol": "http",
							"host": [
								"fsp"
							],
							"path": [
								"bulkQuotes",
								":ID"
							],
							"variable": [
								{
									"key": "ID"
								}
							]
						},
						"description": "The callback PUT /bulkQuotes/<ID> is used to inform the client of a requested or created bulk quote. The <ID> in the URI should contain the bulkQuoteId that was used for the creation of the bulk quote, or the <ID> that was used in the GET /bulkQuotes/<ID>."
					},
					"response": []
				},
				{
					"name": "BulkQuotes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "{{Accept}}"
							},
							{
								"key": "Content-Length",
								"value": "{{Content-Length}}"
							},
							{
								"key": "Content-Type",
								"value": "{{Content-Type}}"
							},
							{
								"key": "Date",
								"value": "{{Date}}"
							},
							{
								"key": "X-Forwarded-For",
								"value": "{{X-Forwarded-For}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{FSPIOP-Source}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{FSPIOP-Destination}}"
							},
							{
								"key": "FSPIOP-Encryption",
								"value": "{{FSPIOP-Encryption}}"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{FSPIOP-Signature}}"
							},
							{
								"key": "FSPIOP-URI",
								"value": "{{FSPIOP-URI}}"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"value": "{{FSPIOP-HTTP-Method}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://fsp/bulkQuotes",
							"protocol": "http",
							"host": [
								"fsp"
							],
							"path": [
								"bulkQuotes"
							]
						},
						"description": "The HTTP request POST /bulkQuotes is used to request the creation of a bulk quote for the provided financial transactions in the server."
					},
					"response": []
				}
			],
			"description": "Folder for bulkQuotes",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Admin-API",
			"item": [
				{
					"name": "participants",
					"item": [
						{
							"name": "Get participants List",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Participant",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"payerfsp\",\n  \"currency\": \"XOF\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Participant - Duplicate account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b153965b-4892-41b1-9ff7-dc54ad6ef262",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{payerfsp}}\",\n  \"currency\": \"XOF\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants"
									]
								}
							},
							"response": []
						},
						{
							"name": "400-Add Participant - With new currency that HUB recon does not exist",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"payer10\",\n  \"currency\": \"A#\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Participant",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f41cd084-912e-4fe0-af17-e8ee86fa7b4d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"isActive\": false\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Get Participant",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}"
									]
								}
							},
							"response": [
								{
									"name": "Get Participant",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{participant}}",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{participant}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "251",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 22 Aug 2018 15:25:18 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "nginx/1.13.8",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "accept-ranges",
											"value": "bytes",
											"name": "accept-ranges",
											"description": "Content-Types that are acceptable"
										},
										{
											"key": "cache-control",
											"value": "no-cache",
											"name": "cache-control",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										}
									],
									"cookie": [],
									"body": "{\"name\":\"testfsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/testfsp\",\"created\":\"2018-08-22T08:16:50.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/testfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]}"
								}
							]
						},
						{
							"name": "3. 404 - Get Participant - that does not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a476ec8-7d80-440d-870d-de5810fb7d75",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/xyz",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"xyz"
									]
								}
							},
							"response": [
								{
									"name": "Get Participant",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{participant}}",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{participant}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "251",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 22 Aug 2018 15:25:18 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "nginx/1.13.8",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "accept-ranges",
											"value": "bytes",
											"name": "accept-ranges",
											"description": "Content-Types that are acceptable"
										},
										{
											"key": "cache-control",
											"value": "no-cache",
											"name": "cache-control",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										}
									],
									"cookie": [],
									"body": "{\"name\":\"testfsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/testfsp\",\"created\":\"2018-08-22T08:16:50.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/testfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]}"
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "participants/{id}/accounts",
					"item": [
						{
							"name": "Add Hub Account-HUB_RECONCILIATION",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"HUB_RECONCILIATION\",\n  \"currency\": \"XOF\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/Hub/accounts",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"Hub",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Hub Account-HUB_MULTILATERAL_SETTLEMENT",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"HUB_MULTILATERAL_SETTLEMENT\",\n  \"currency\": \"XOF\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/Hub/accounts",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"Hub",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Get Participant Accounts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "678552e9-40be-4016-82d7-7bf3827dde82",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/accounts",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts"
									]
								}
							},
							"response": [
								{
									"name": "Get Participant",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{participant}}",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{participant}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "251",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 22 Aug 2018 15:25:18 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "nginx/1.13.8",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "accept-ranges",
											"value": "bytes",
											"name": "accept-ranges",
											"description": "Content-Types that are acceptable"
										},
										{
											"key": "cache-control",
											"value": "no-cache",
											"name": "cache-control",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										}
									],
									"cookie": [],
									"body": "{\"name\":\"testfsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/testfsp\",\"created\":\"2018-08-22T08:16:50.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/testfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]}"
								}
							]
						},
						{
							"name": "Update Participant Account (Active/Inactive)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d865c86e-59db-4096-8140-9381647a9b4c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "9c38cbdd-14d8-3cea-9a43-5ea259cac414",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"isActive\": true\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/accounts/3",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"3"
									]
								},
								"description": "Setting \"isAvtive\" to false, the participant account will be disabled for further transactions. How ever this enables the settlements to go through if any transfers happen before the participant's account is set inactive."
							},
							"response": []
						},
						{
							"name": "3. Get Hub Account",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/Hub/accounts",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"Hub",
										"accounts"
									]
								}
							},
							"response": [
								{
									"name": "Get Participant",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{participant}}",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{participant}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "251",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 22 Aug 2018 15:25:18 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "nginx/1.13.8",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "accept-ranges",
											"value": "bytes",
											"name": "accept-ranges",
											"description": "Content-Types that are acceptable"
										},
										{
											"key": "cache-control",
											"value": "no-cache",
											"name": "cache-control",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										}
									],
									"cookie": [],
									"body": "{\"name\":\"testfsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/testfsp\",\"created\":\"2018-08-22T08:16:50.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/testfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]}"
								}
							]
						},
						{
							"name": "3. Get Participant Accounts - non exist party - BUG",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2ca544c2-b25e-487a-8609-9cf07af79de5",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/xyz/accounts",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"xyz",
										"accounts"
									]
								}
							},
							"response": [
								{
									"name": "Get Participant",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{participant}}",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{participant}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Length",
											"value": "251",
											"name": "Content-Length",
											"description": "The length of the response body in octets (8-bit bytes)"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 22 Aug 2018 15:25:18 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "nginx/1.13.8",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "accept-ranges",
											"value": "bytes",
											"name": "accept-ranges",
											"description": "Content-Types that are acceptable"
										},
										{
											"key": "cache-control",
											"value": "no-cache",
											"name": "cache-control",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										}
									],
									"cookie": [],
									"body": "{\"name\":\"testfsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/testfsp\",\"created\":\"2018-08-22T08:16:50.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/testfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]}"
								}
							]
						},
						{
							"name": "Record Funds In - payerfsp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b805e9aa-0852-43e8-93b0-8b53cf33b95b",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUBOPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{hub_operator}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"7e6b03b1-0e9a-4267-bfa4-cfce0e5f359c\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsIn\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": 5000,\n    \"currency\": \"USD\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "RecordFundsIn-1127 ",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"transferId\": \"523ec634-ef48-6575-a6a0-ded2955b8305\",\n\t\"externalReference\": \"abc123\",\n\t\"action\": \"recordFundsIn\",\n\t\"amount\": {\n\t\t\"amount\": 50.0000,\n\t\t\"currency\": \"USD\"\n\t\t\n\t},\n\t\"reason\": \"Reason for in flow of funds\",\n\t\"extensionList\": {\n\t\t\"extension\": [\n\t\t\t{\n\t\t\t\t\"key\": \"extKey1\",\n\t\t\t\t\"value\": \"extValue1\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"key\": \"extKey2\",\n\t\t\t\t\"value\": \"extValue2\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{fspName}}/accounts/{{settlementAccountId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{fspName}}",
										"accounts",
										"{{settlementAccountId}}"
									]
								},
								"description": "Author: Sridevi Miriyala\n\n\nDeposit Submitted via a Secure PostMan request \n* DFSP Settlement Ledger updated \n* DFSP Settlement Ledger matches bank Settlement Account Balance \n* Hub Reconciliation updated \n\nA DFSP cannot process a deposit"
							},
							"response": []
						},
						{
							"name": "RecordFundsIn-1127 - Invalid Transfer ID - 400",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"transferId\": \"blah\",\n\t\"externalReference\": \"abc123\",\n\t\"action\": \"recordFundsIn\",\n\t\"amount\": {\n\t\t\"amount\": 50.0000,\n\t\t\"currency\": \"USD\"\n\t\t\n\t},\n\t\"reason\": \"Reason for in flow of funds\",\n\t\"extensionList\": {\n\t\t\"extension\": [\n\t\t\t{\n\t\t\t\t\"key\": \"extKey1\",\n\t\t\t\t\"value\": \"extValue1\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"key\": \"extKey2\",\n\t\t\t\t\"value\": \"extValue2\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{fspName}}/accounts/{{settlementAccountId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{fspName}}",
										"accounts",
										"{{settlementAccountId}}"
									]
								},
								"description": "Author: Sridevi Miriyala\n\n\nDeposit Submitted via a Secure PostMan request \n* DFSP Settlement Ledger updated \n* DFSP Settlement Ledger matches bank Settlement Account Balance \n* Hub Reconciliation updated \n\nA DFSP cannot process a deposit"
							},
							"response": []
						},
						{
							"name": "RecordFundsOutPrepare - payerfsp -1128",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7f63aa16-23fa-44f7-82b4-267cdb0c7193",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('fundsOutPrepareTransferId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"transferId\": \"{{fundsOutPrepareTransferId}}\",\n\t\"externalReference\": \"def456\",\n\t\"action\": \"recordFundsOutPrepare\",\n\t\"amount\": {\n\t\t\"amount\": 50,\n\t\t\"currency\": \"USD\"\n\t\t\n\t},\n\t\"reason\": \"Reason for out flow of funds\",\n\t\"extensionList\": {\n\t\t\"extension\": [\n\t\t\t{\n\t\t\t\t\"key\": \"extKey1\",\n\t\t\t\t\"value\": \"extValue1\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"key\": \"extKey2\",\n\t\t\t\t\"value\": \"extValue2\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}"
									]
								},
								"description": "Author: Sridevi Miriyala\n\n\nAcceptance Criteria:\n\nWithdrawal Reservation Submitted via a Secure PostMan request via WSO2 \n* DFSP Settlement Ledger record created \n\nA DFSP cannot process a withdrawal"
							},
							"response": []
						},
						{
							"name": "RecordFundsOutPrepare-Exceed - 1128",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7800e69b-c2b4-4a81-9188-36ff8c5be995",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('fundsOutPrepareTransferId', generatedUUID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"transferId\": \"{{fundsOutPrepareTransferId}}\",\n\t\"externalReference\": \"def456\",\n\t\"action\": \"recordFundsOutPrepare\",\n\t\"amount\": {\n\t\t\"amount\": 60,\n\t\t\"currency\": \"USD\"\n\t\t\n\t},\n\t\"reason\": \"Reason for out flow of funds\",\n\t\"extensionList\": {\n\t\t\"extension\": [\n\t\t\t{\n\t\t\t\t\"key\": \"extKey1\",\n\t\t\t\t\"value\": \"extValue1\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"key\": \"extKey2\",\n\t\t\t\t\"value\": \"extValue2\"\n\t\t\t}\n\t\t]\n\t}\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{fspName}}/accounts/{{payerfspSettlementAccountId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{fspName}}",
										"accounts",
										"{{payerfspSettlementAccountId}}"
									]
								},
								"description": "Author: Sridevi Miriyala"
							},
							"response": []
						},
						{
							"name": "RecordFundsOutCommit - 1129",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a1d6f96b-ad91-42cf-a89f-f397d38bdf17",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"action\": \"recordFundsOutCommit\",\n\t\"reason\": \"Reason for out flow of funds\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}/transfers/{{fundsOutPrepareTransferId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}",
										"transfers",
										"{{fundsOutPrepareTransferId}}"
									]
								},
								"description": "Author: Sridevi Miriyala\n\nWithdrawal Reservation Submitted via a Secure PostMan request via WSO2 \n* DFSP Settlement Ledger updated \n* DFSP Settlement Ledger matches bank Settlement Account Balance \n* Hub Reconciliation updated \n\nA DFSP cannot process a withdrawal"
							},
							"response": []
						},
						{
							"name": "RecordFundsOutAbort - 1130",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"action\": \"recordFundsOutAbort\",\n\t\"reason\": \"Reason for abort\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}/transfers/{{fundsOutPrepareTransferId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}",
										"transfers",
										"{{fundsOutPrepareTransferId}}"
									]
								},
								"description": "Aurhor: Sridevi Miriyala\n\nWithdrawal Reservation Aborted via a Secure PostMan request via WSO2 \n* DFSP Settlement Ledger updated with a reversal record \n* DFSP Settlement Ledger matches bank Settlement Account Balance \n\nA DFSP cannot process a withdrawal"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "491fdb3a-36c8-4a8f-8a12-79b828338d90",
								"type": "text/javascript",
								"exec": [
									"var url = pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+\"/participants/\"+ pm.environment.get(\"payerfsp\")+\"/accounts\";",
									"",
									"pm.sendRequest(url, function (err, response) {",
									"    var jsonData = response.json()",
									"    for(var i in jsonData) {",
									"        if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
									"            pm.environment.set(\"payerfspSettlementAccountId\", jsonData[i].id);",
									"        }",
									"    }",
									"    ",
									"});",
									"",
									"url = pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+\"/participants/\"+ pm.environment.get(\"payeefsp\")+\"/accounts\";",
									"",
									"pm.sendRequest(url, function (err, response) {",
									"    var jsonData = response.json()",
									"    for(var i in jsonData) {",
									"        if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
									"            pm.environment.set(\"payeefspSettlementAccountId\", jsonData[i].id);",
									"        }",
									"    }",
									"    ",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4a80f94a-3add-4c09-90fa-cd377280034d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "participants/{id}/endpoints",
					"item": [
						{
							"name": "9. Set Endpoint-FSPIOP_CALLBACK_URL_TRANSFER_PUT",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"FSPIOP_CALLBACK_URL_TRANSFER_ERROR\",\n  \"value\": \"http://ec2-18-130-80-55.eu-west-2.compute.amazonaws.com:8444/payerfsp/transfers/{{transferId}}/error\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payerfsp/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"payerfsp",
										"endpoints"
									]
								},
								"description": "Generated from a curl request: \ncurl -i -X POST     http://test-central-ledger.mojaloop.test/admin/participants/testfsp2/initialPositionAndLimits     -H 'Cache-Control: no-cache'     -H 'Content-Type: application/json'     -d '{\n    \\\"currency\\\": \\\"USD\\\",\n    \\\"limit\\\": {\n      \\\"type\\\": \\\"NET_DEBIT_CAP\\\",\n      \\\"value\\\": 1000\n    },\n    \\\"initialPosition\\\": 0\n  }'"
							},
							"response": [
								{
									"name": "2. Create Initial Position and Limits",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Cache-Control",
												"value": "no-cache"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"currency\": \"USD\",\n    \"limit\": {\n      \"type\": \"NET_DEBIT_CAP\",\n      \"value\": 1000\n    },\n    \"initialPosition\": 0\n  }"
										},
										"url": {
											"raw": "http://test-central-ledger.mojaloop.live/admin/participants/testfsp/initialPositionAndLimits",
											"protocol": "http",
											"host": [
												"test-central-ledger",
												"mojaloop",
												"live"
											],
											"path": [
												"admin",
												"participants",
												"testfsp",
												"initialPositionAndLimits"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Hub Endpoint-NET_DEBIT_CAP_THRESHOLD_BREACH_EMAIL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2c3621b-1a07-4c48-89c7-9587e9c03267",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"NET_DEBIT_CAP_THRESHOLD_BREACH_EMAIL\",\n  \"value\": \"sridevi.miriyala@modusbox.com\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/Hub/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"Hub",
										"endpoints"
									]
								},
								"description": "Generated from a curl request: \ncurl -i -X POST     http://test-central-ledger.mojaloop.test/admin/participants/testfsp2/initialPositionAndLimits     -H 'Cache-Control: no-cache'     -H 'Content-Type: application/json'     -d '{\n    \\\"currency\\\": \\\"USD\\\",\n    \\\"limit\\\": {\n      \\\"type\\\": \\\"NET_DEBIT_CAP\\\",\n      \\\"value\\\": 1000\n    },\n    \\\"initialPosition\\\": 0\n  }'"
							},
							"response": [
								{
									"name": "2. Create Initial Position and Limits",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Cache-Control",
												"value": "no-cache"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"currency\": \"USD\",\n    \"limit\": {\n      \"type\": \"NET_DEBIT_CAP\",\n      \"value\": 1000\n    },\n    \"initialPosition\": 0\n  }"
										},
										"url": {
											"raw": "http://test-central-ledger.mojaloop.live/admin/participants/testfsp/initialPositionAndLimits",
											"protocol": "http",
											"host": [
												"test-central-ledger",
												"mojaloop",
												"live"
											],
											"path": [
												"admin",
												"participants",
												"testfsp",
												"initialPositionAndLimits"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "DFSP Endpoint-NET_DEBIT_CAP_THRESHOLD_BREACH_EMAIL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67082524-b658-4f1c-90c4-af6fc24adb3e",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"NET_DEBIT_CAP_THRESHOLD_BREACH_EMAIL\",\n  \"value\": \"sridevi.miriyala@modusbox.com\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payerfsp/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"payerfsp",
										"endpoints"
									]
								},
								"description": "Generated from a curl request: \ncurl -i -X POST     http://test-central-ledger.mojaloop.test/admin/participants/testfsp2/initialPositionAndLimits     -H 'Cache-Control: no-cache'     -H 'Content-Type: application/json'     -d '{\n    \\\"currency\\\": \\\"USD\\\",\n    \\\"limit\\\": {\n      \\\"type\\\": \\\"NET_DEBIT_CAP\\\",\n      \\\"value\\\": 1000\n    },\n    \\\"initialPosition\\\": 0\n  }'"
							},
							"response": [
								{
									"name": "2. Create Initial Position and Limits",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Cache-Control",
												"value": "no-cache"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"currency\": \"USD\",\n    \"limit\": {\n      \"type\": \"NET_DEBIT_CAP\",\n      \"value\": 1000\n    },\n    \"initialPosition\": 0\n  }"
										},
										"url": {
											"raw": "http://test-central-ledger.mojaloop.live/admin/participants/testfsp/initialPositionAndLimits",
											"protocol": "http",
											"host": [
												"test-central-ledger",
												"mojaloop",
												"live"
											],
											"path": [
												"admin",
												"participants",
												"testfsp",
												"initialPositionAndLimits"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "9. Set Endpoint-NET_DEBIT_CAP_ADJUSTMENT_EMAIL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83984619-0430-4a4c-87ec-671bf97894de",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"NET_DEBIT_CAP_ADJUSTMENT_EMAIL\",\n  \"value\": \"sridevi.miriyala@modusbox.com\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payerfsp/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"payerfsp",
										"endpoints"
									]
								},
								"description": "Generated from a curl request: \ncurl -i -X POST     http://test-central-ledger.mojaloop.test/admin/participants/testfsp2/initialPositionAndLimits     -H 'Cache-Control: no-cache'     -H 'Content-Type: application/json'     -d '{\n    \\\"currency\\\": \\\"USD\\\",\n    \\\"limit\\\": {\n      \\\"type\\\": \\\"NET_DEBIT_CAP\\\",\n      \\\"value\\\": 1000\n    },\n    \\\"initialPosition\\\": 0\n  }'"
							},
							"response": [
								{
									"name": "2. Create Initial Position and Limits",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Cache-Control",
												"value": "no-cache"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"currency\": \"USD\",\n    \"limit\": {\n      \"type\": \"NET_DEBIT_CAP\",\n      \"value\": 1000\n    },\n    \"initialPosition\": 0\n  }"
										},
										"url": {
											"raw": "http://test-central-ledger.mojaloop.live/admin/participants/testfsp/initialPositionAndLimits",
											"protocol": "http",
											"host": [
												"test-central-ledger",
												"mojaloop",
												"live"
											],
											"path": [
												"admin",
												"participants",
												"testfsp",
												"initialPositionAndLimits"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Hub Set Endpoint-NET_DEBIT_CAP_ADJUSTMENT_EMAIL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "837c7a84-ce18-4a96-b686-b2d6150a02ed",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"NET_DEBIT_CAP_ADJUSTMENT_EMAIL\",\n  \"value\": \"sridevi.miriyala@modusbox.com\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/hub/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"hub",
										"endpoints"
									]
								},
								"description": "Generated from a curl request: \ncurl -i -X POST     http://test-central-ledger.mojaloop.test/admin/participants/testfsp2/initialPositionAndLimits     -H 'Cache-Control: no-cache'     -H 'Content-Type: application/json'     -d '{\n    \\\"currency\\\": \\\"USD\\\",\n    \\\"limit\\\": {\n      \\\"type\\\": \\\"NET_DEBIT_CAP\\\",\n      \\\"value\\\": 1000\n    },\n    \\\"initialPosition\\\": 0\n  }'"
							},
							"response": [
								{
									"name": "2. Create Initial Position and Limits",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Cache-Control",
												"value": "no-cache"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"currency\": \"USD\",\n    \"limit\": {\n      \"type\": \"NET_DEBIT_CAP\",\n      \"value\": 1000\n    },\n    \"initialPosition\": 0\n  }"
										},
										"url": {
											"raw": "http://test-central-ledger.mojaloop.live/admin/participants/testfsp/initialPositionAndLimits",
											"protocol": "http",
											"host": [
												"test-central-ledger",
												"mojaloop",
												"live"
											],
											"path": [
												"admin",
												"participants",
												"testfsp",
												"initialPositionAndLimits"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Set Endpoint-SETTLEMENT_TRANSFER_POSITION_CHANGE_EMAIL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16f8d261-3f2d-470b-986b-c8e23602605b",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"SETTLEMENT_TRANSFER_POSITION_CHANGE_EMAIL\",\n  \"value\": \"sridevi.miriyala@modusbox.com\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"endpoints"
									]
								},
								"description": "Generated from a curl request: \ncurl -i -X POST     http://test-central-ledger.mojaloop.test/admin/participants/testfsp2/initialPositionAndLimits     -H 'Cache-Control: no-cache'     -H 'Content-Type: application/json'     -d '{\n    \\\"currency\\\": \\\"USD\\\",\n    \\\"limit\\\": {\n      \\\"type\\\": \\\"NET_DEBIT_CAP\\\",\n      \\\"value\\\": 1000\n    },\n    \\\"initialPosition\\\": 0\n  }'"
							},
							"response": [
								{
									"name": "2. Create Initial Position and Limits",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Cache-Control",
												"value": "no-cache"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"currency\": \"USD\",\n    \"limit\": {\n      \"type\": \"NET_DEBIT_CAP\",\n      \"value\": 1000\n    },\n    \"initialPosition\": 0\n  }"
										},
										"url": {
											"raw": "http://test-central-ledger.mojaloop.live/admin/participants/testfsp/initialPositionAndLimits",
											"protocol": "http",
											"host": [
												"test-central-ledger",
												"mojaloop",
												"live"
											],
											"path": [
												"admin",
												"participants",
												"testfsp",
												"initialPositionAndLimits"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Hub Set Endpoint-SETTLEMENT_TRANSFER_POSITION_CHANGE_EMAIL",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"SETTLEMENT_TRANSFER_POSITION_CHANGE_EMAIL\",\n  \"value\": \"sridevi.miriyala@modusbox.com\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/hub/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"hub",
										"endpoints"
									]
								},
								"description": "Generated from a curl request: \ncurl -i -X POST     http://test-central-ledger.mojaloop.test/admin/participants/testfsp2/initialPositionAndLimits     -H 'Cache-Control: no-cache'     -H 'Content-Type: application/json'     -d '{\n    \\\"currency\\\": \\\"USD\\\",\n    \\\"limit\\\": {\n      \\\"type\\\": \\\"NET_DEBIT_CAP\\\",\n      \\\"value\\\": 1000\n    },\n    \\\"initialPosition\\\": 0\n  }'"
							},
							"response": [
								{
									"name": "2. Create Initial Position and Limits",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Cache-Control",
												"value": "no-cache"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"currency\": \"USD\",\n    \"limit\": {\n      \"type\": \"NET_DEBIT_CAP\",\n      \"value\": 1000\n    },\n    \"initialPosition\": 0\n  }"
										},
										"url": {
											"raw": "http://test-central-ledger.mojaloop.live/admin/participants/testfsp/initialPositionAndLimits",
											"protocol": "http",
											"host": [
												"test-central-ledger",
												"mojaloop",
												"live"
											],
											"path": [
												"admin",
												"participants",
												"testfsp",
												"initialPositionAndLimits"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "11. Get Endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "88ed368c-227c-41c8-bfe8-489449eba6bb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payerfsp/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"payerfsp",
										"endpoints"
									]
								},
								"description": "Generated from a curl request: \ncurl -i -X POST     http://test-central-ledger.mojaloop.test/admin/participants/testfsp2/initialPositionAndLimits     -H 'Cache-Control: no-cache'     -H 'Content-Type: application/json'     -d '{\n    \\\"currency\\\": \\\"USD\\\",\n    \\\"limit\\\": {\n      \\\"type\\\": \\\"NET_DEBIT_CAP\\\",\n      \\\"value\\\": 1000\n    },\n    \\\"initialPosition\\\": 0\n  }'"
							},
							"response": [
								{
									"name": "2. Create Initial Position and Limits",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Cache-Control",
												"value": "no-cache"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"currency\": \"USD\",\n    \"limit\": {\n      \"type\": \"NET_DEBIT_CAP\",\n      \"value\": 1000\n    },\n    \"initialPosition\": 0\n  }"
										},
										"url": {
											"raw": "http://test-central-ledger.mojaloop.live/admin/participants/testfsp/initialPositionAndLimits",
											"protocol": "http",
											"host": [
												"test-central-ledger",
												"mojaloop",
												"live"
											],
											"path": [
												"admin",
												"participants",
												"testfsp",
												"initialPositionAndLimits"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Set callback endpoint for Transfer - 400- bad request",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"type\": \"FSPIOP_CALLBACK_URL_TRANSFER\",\n  \"value\": \"http://ec2-18-130-80-55.eu-west-2.compute.amazonaws.com:8444/payeefsp/transfers\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payeefsp/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"payeefsp",
										"endpoints"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "participants/{id}/positions",
					"item": [
						{
							"name": "Get payerfsp position",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d17ec2ad-d858-4b92-a665-a899f113de1b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.variables.set(\"payerfspPositionBeforeTransfer\", jsonData[0].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "400-Get payerfsp position - non existent payer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d17ec2ad-d858-4b92-a665-a899f113de1b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.variables.set(\"payerfspPositionBeforeTransfer\", jsonData[0].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP -Source",
										"value": "{{payerfsp}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/abc/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"abc",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "404-Get payerfsp position - missing id in uri",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d17ec2ad-d858-4b92-a665-a899f113de1b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.variables.set(\"payerfspPositionBeforeTransfer\", jsonData[0].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get payeefsp position",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d17ec2ad-d858-4b92-a665-a899f113de1b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.variables.set(\"payerfspPositionBeforeTransfer\", jsonData[0].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payeefsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payeefsp}}",
										"positions"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "net_debit_cap",
					"item": [
						{
							"name": "POST - initialPositionAndLimits",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d24a7260-f322-4686-831d-35ff197b09b7",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"currency\": \"XOF\",\n  \"limit\": {\n    \"type\": \"NET_DEBIT_CAP\",\n    \"value\": 1000\n  },\n  \"initialPosition\": 0\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/initialPositionAndLimits",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"initialPositionAndLimits"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT - limits - 647 - 786 - 1726",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77511703-afff-48fe-8584-fb52d1e3ae7d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP -Source",
										"value": "{{payerfsp}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"currency\": \"USD\",\n  \"limit\": {\n    \"alarmPercentage\": 10,\n    \"type\": \"NET_DEBIT_CAP\",\n    \"value\": 5000000\n  }\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/limits",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"limits"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT - limits - 647 - 786 - 1726 Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77511703-afff-48fe-8584-fb52d1e3ae7d",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP -Source",
										"value": "{{payerfsp}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"currency\": \"USD\",\n  \"limit\": {\n    \"alarmPercentage\": 10,\n    \"type\": \"NET_DEBIT_CAP\",\n    \"value\": 9500\n  }\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/limits",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"limits"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get - limits",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25e4c348-ec7c-4818-851b-33012759689e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payerfsp/limits",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"payerfsp",
										"limits"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get - limits - All FSPs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "25e4c348-ec7c-4818-851b-33012759689e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/limits?currency=USD&type=NET_DEBIT_CAP",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"limits"
									],
									"query": [
										{
											"key": "currency",
											"value": "USD"
										},
										{
											"key": "type",
											"value": "NET_DEBIT_CAP"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get - limits - 400 - Bad request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b94d1f88-e9e2-49c1-a4da-a85f4828b04a",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}}/participants/blah/limits",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}}"
									],
									"path": [
										"participants",
										"blah",
										"limits"
									]
								},
								"description": "Trying to query GET /limits of a participant that does not exist.\nIn the URI, given the participant \"blah\""
							},
							"response": []
						},
						{
							"name": "GET -limits - missing URI param - 404 - Not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "edc129b4-bcb4-4268-9b66-17b3858572c5",
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payerfsp/",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"participants",
										"payerfsp",
										""
									]
								},
								"description": "Incorrect URI provided to simulate the behavior for 404- NOtfound.\nlimits in the URI is missing here."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "metrics",
					"item": [
						{
							"name": "{{HOST_CENTRAL_LEDGER}}/metrics",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ac725a8-ecd7-4012-94bf-e917c8e82dee",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}/metrics",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}"
									],
									"path": [
										"metrics"
									]
								},
								"description": "This is more related to Prometheus/Grafana monitoring dashboards. "
							},
							"response": []
						},
						{
							"name": "Health",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6804f0e3-6d6b-436e-953c-bf7dd5ba3f7a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/health",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": [
								{
									"name": "Get Participants List",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Connection",
											"value": "keep-alive",
											"name": "Connection",
											"description": "Options that are desired for the connection"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8",
											"name": "Content-Type",
											"description": "The mime type of this content"
										},
										{
											"key": "Date",
											"value": "Wed, 22 Aug 2018 15:25:57 GMT",
											"name": "Date",
											"description": "The date and time that the message was sent"
										},
										{
											"key": "Server",
											"value": "nginx/1.13.8",
											"name": "Server",
											"description": "A name for the server"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked",
											"name": "Transfer-Encoding",
											"description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
										},
										{
											"key": "cache-control",
											"value": "no-cache",
											"name": "cache-control",
											"description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
										},
										{
											"key": "content-encoding",
											"value": "gzip",
											"name": "content-encoding",
											"description": "The type of encoding used on the data."
										},
										{
											"key": "vary",
											"value": "accept-encoding",
											"name": "vary",
											"description": "Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server."
										}
									],
									"cookie": [],
									"body": "[{\"name\":\"payeefsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/payeefsp\",\"created\":\"2018-08-21T15:57:06.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/payeefsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]},{\"name\":\"payerfsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/payerfsp\",\"created\":\"2018-08-21T15:57:06.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/payerfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]},{\"name\":\"test2fsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/test2fsp\",\"created\":\"2018-08-22T11:12:54.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/test2fsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]},{\"name\":\"test3fsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/test3fsp\",\"created\":\"2018-08-22T11:13:40.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/test3fsp\"},\"currencies\":[{\"currency\":\"INR\",\"isActive\":1}]},{\"name\":\"testfsp\",\"id\":\"test-central-ledger.mojaloop.test/participants/testfsp\",\"created\":\"2018-08-22T08:16:50.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/testfsp\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]},{\"name\":\"testfsp2\",\"id\":\"test-central-ledger.mojaloop.test/participants/testfsp2\",\"created\":\"2018-08-22T08:18:10.000Z\",\"isActive\":1,\"links\":{\"self\":\"test-central-ledger.mojaloop.test/participants/testfsp2\"},\"currencies\":[{\"currency\":\"USD\",\"isActive\":1}]}]"
								}
							]
						},
						{
							"name": "enums",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/enums",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"enums"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author : Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1cf53e2f-30c1-4087-8007-9361d5a6bbc1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8bef088d-ba30-4ff8-97af-9882717fa804",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Settlements-API",
			"item": [
				{
					"name": "settlementWindows",
					"item": [
						{
							"name": "getSettlementWindowById",
							"item": [
								{
									"name": "200 - ValidRequest - 643c",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ee7075db-0d12-4ef6-a67e-0a229a16ea2b",
												"exec": [
													"//Input Variables",
													"pm.variables.set(\"iptSettlementWindowId\",\"2\");",
													"",
													"//Expected Ouput values",
													"pm.variables.set(\"optSettlementWindowId\",2);",
													"pm.variables.set(\"optSettlementWindowState\",\"PENDING_SETTLEMENT\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e55800b7-6c8b-480b-beba-2ecfe82b5d83",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Expected Settlement Window Id should be: \"+pm.variables.get(\"optSettlementWindowId\"), function () {",
													"    pm.expect(jsonData.settlementWindowId).to.eql(pm.variables.get(\"optSettlementWindowId\"));",
													"});",
													"",
													"pm.test(\"Expected Settlement State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.state).to.eql(pm.variables.get(\"optSettlementWindowState\"));",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP -Source",
												"value": "{{payerfsp}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{iptSettlementWindowId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows",
												"{{iptSettlementWindowId}}"
											]
										},
										"description": "Happy path test"
									},
									"response": []
								},
								{
									"name": "400 - Bad Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f55acdcd-14a2-49e3-9d7e-1c393f0aa91a",
												"exec": [
													"//Input Variables",
													"pm.variables.set(\"iptSettlementWindowId\",\"0\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3c7f6b61-b483-4481-a2ed-2762b9dd2f1d",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"Status Code should be 404\", function () {",
													"    pm.expect(jsonData.statusCode).to.eql(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP -Source",
												"value": "{{payerfsp}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{iptSettlementWindowId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows",
												"{{iptSettlementWindowId}}"
											]
										},
										"description": "Happy path test"
									},
									"response": []
								},
								{
									"name": "401 - Authorization Missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f55acdcd-14a2-49e3-9d7e-1c393f0aa91a",
												"exec": [
													"//Input Variables",
													"pm.variables.set(\"iptSettlementWindowId\",\"-1\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3c7f6b61-b483-4481-a2ed-2762b9dd2f1d",
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"Status Code should be 401\", function () {",
													"    pm.expect(jsonData.statusCode).to.eql(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/1",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows",
												"1"
											]
										},
										"description": "Happy path test"
									},
									"response": []
								},
								{
									"name": "404 - No Data Found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f55acdcd-14a2-49e3-9d7e-1c393f0aa91a",
												"exec": [
													"//Input Variables",
													"pm.variables.set(\"iptSettlementWindowId\",\"-1\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3c7f6b61-b483-4481-a2ed-2762b9dd2f1d",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"Status Code should be 404\", function () {",
													"    pm.expect(jsonData.statusCode).to.eql(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows",
												""
											]
										},
										"description": "Happy path test"
									},
									"response": []
								},
								{
									"name": "415 - Unsupported Media Type ( NOT IMPLEMENTED )",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f55acdcd-14a2-49e3-9d7e-1c393f0aa91a",
												"exec": [
													"//Input Variables",
													"pm.variables.set(\"iptSettlementWindowId\",\"-1\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3c7f6b61-b483-4481-a2ed-2762b9dd2f1d",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"Status Code should be 404\", function () {",
													"    pm.expect(jsonData.statusCode).to.eql(404);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows",
												""
											]
										},
										"description": "Happy path test"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "closeSettlementWindow",
							"item": [
								{
									"name": "200 - Valid Request -643b",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a9436ecf-77fb-46e7-9760-488300cd7013",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlementWindows?state=OPEN\", function (err, response) {",
													"    console.log(response.json());",
													"    pm.variables.set(\"openSettlementWindowId\",response.json()[0].settlementWindowId);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d7078729-1ea5-41b5-a4f5-2f1c4050a5b6",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"New window should be opened\", function () {",
													"    pm.expect(jsonData.settlementWindowId).to.eql(pm.variables.get(\"openSettlementWindowId\")+1);",
													"});",
													"",
													"pm.test(\"New window state should be OPEN\", function () {",
													"    pm.expect(jsonData.state).to.eql('OPEN');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"TESTING\"\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows",
												"{{openWindowID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Bad Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a9436ecf-77fb-46e7-9760-488300cd7013",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlementWindows?state=OPEN\", function (err, response) {",
													"    console.log(response.json());",
													"    pm.variables.set(\"openSettlementWindowId\",response.json()[0].settlementWindowId);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d7078729-1ea5-41b5-a4f5-2f1c4050a5b6",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"New window should be opened\", function () {",
													"    pm.expect(jsonData.settlementWindowId).to.eql(pm.variables.get(\"openSettlementWindowId\")+1);",
													"});",
													"",
													"pm.test(\"New window state should be OPEN\", function () {",
													"    pm.expect(jsonData.state).to.eql('OPEN');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"state\": \"CLOSE\",\n  \"reason\": \"TESTING\"\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openSettlementWindowId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows",
												"{{openSettlementWindowId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Unauthorized ( NOT IMPLEMENTED )",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a9436ecf-77fb-46e7-9760-488300cd7013",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlementWindows?state=OPEN\", function (err, response) {",
													"    console.log(response.json());",
													"    pm.variables.set(\"openSettlementWindowId\",response.json()[0].settlementWindowId);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d7078729-1ea5-41b5-a4f5-2f1c4050a5b6",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"New window should be opened\", function () {",
													"    pm.expect(jsonData.settlementWindowId).to.eql(pm.variables.get(\"openSettlementWindowId\")+1);",
													"});",
													"",
													"pm.test(\"New window state should be OPEN\", function () {",
													"    pm.expect(jsonData.state).to.eql('OPEN');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"state\": \"CLOSE\",\n  \"reason\": \"TESTING\"\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openSettlementWindowId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows",
												"{{openSettlementWindowId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - No Data Found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a9436ecf-77fb-46e7-9760-488300cd7013",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlementWindows?state=OPEN\", function (err, response) {",
													"    console.log(response.json());",
													"    pm.variables.set(\"openSettlementWindowId\",response.json()[0].settlementWindowId);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d7078729-1ea5-41b5-a4f5-2f1c4050a5b6",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"New window should be opened\", function () {",
													"    pm.expect(jsonData.settlementWindowId).to.eql(pm.variables.get(\"openSettlementWindowId\")+1);",
													"});",
													"",
													"pm.test(\"New window state should be OPEN\", function () {",
													"    pm.expect(jsonData.state).to.eql('OPEN');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"state\": \"CLOSE\",\n  \"reason\": \"TESTING\"\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openSettlementWindowId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows",
												"{{openSettlementWindowId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "415 - Unsupported Media Type ( NOT IMPLEMENTED )",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a9436ecf-77fb-46e7-9760-488300cd7013",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlementWindows?state=OPEN\", function (err, response) {",
													"    console.log(response.json());",
													"    pm.variables.set(\"openSettlementWindowId\",response.json()[0].settlementWindowId);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d7078729-1ea5-41b5-a4f5-2f1c4050a5b6",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"New window should be opened\", function () {",
													"    pm.expect(jsonData.settlementWindowId).to.eql(pm.variables.get(\"openSettlementWindowId\")+1);",
													"});",
													"",
													"pm.test(\"New window state should be OPEN\", function () {",
													"    pm.expect(jsonData.state).to.eql('OPEN');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"state\": \"CLOSE\",\n  \"reason\": \"TESTING\"\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openSettlementWindowId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows",
												"{{openSettlementWindowId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Default - Unexpected Error ( NOT IMPLEMENTED )",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a9436ecf-77fb-46e7-9760-488300cd7013",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlementWindows?state=OPEN\", function (err, response) {",
													"    console.log(response.json());",
													"    pm.variables.set(\"openSettlementWindowId\",response.json()[0].settlementWindowId);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d7078729-1ea5-41b5-a4f5-2f1c4050a5b6",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"New window should be opened\", function () {",
													"    pm.expect(jsonData.settlementWindowId).to.eql(pm.variables.get(\"openSettlementWindowId\")+1);",
													"});",
													"",
													"pm.test(\"New window state should be OPEN\", function () {",
													"    pm.expect(jsonData.state).to.eql('OPEN');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"state\": \"CLOSE\",\n  \"reason\": \"TESTING\"\n}"
										},
										"url": {
											"raw": "http://{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openSettlementWindowId}}",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows",
												"{{openSettlementWindowId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "getSettlementWindowsByParams",
							"item": [
								{
									"name": "200 - param - state (OPEN)-643a",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e95e6fee-60b9-4cee-90bc-e6db2244dc10",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    pm.test(\"Window State is OPEN\", function () {",
													"        pm.expect(jsonData[i].state).to.eql('OPEN');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "",
													"disabled": true
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - state (OPEN)-643a Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e95e6fee-60b9-4cee-90bc-e6db2244dc10",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    pm.test(\"Window State is OPEN\", function () {",
													"        pm.expect(jsonData[i].state).to.eql('OPEN');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=CLOSED",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "",
													"disabled": true
												},
												{
													"key": "state",
													"value": "CLOSED",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - param - state (OPEN) Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e95e6fee-60b9-4cee-90bc-e6db2244dc10",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    pm.test(\"Window State is OPEN\", function () {",
													"        pm.expect(jsonData[i].state).to.eql('OPEN');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=open",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "",
													"disabled": true
												},
												{
													"key": "state",
													"value": "open",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "State, OPEN is case sensitive.\nTocheck invalid request I have provided state = \"open\""
									},
									"response": []
								},
								{
									"name": "200 - param - state (CLOSED)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4158bac-6065-47bc-8791-69e8115bce7b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    pm.test(\"Window State is CLOSED\", function () {",
													"        pm.expect(jsonData[i].state).to.eql('CLOSED');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": " FSPIOP-Source",
												"value": "{{payerfsp}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=CLOSED",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "",
													"disabled": true
												},
												{
													"key": "state",
													"value": "CLOSED",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - param - state (CLOSED) Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4158bac-6065-47bc-8791-69e8115bce7b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    pm.test(\"Window State is CLOSED\", function () {",
													"        pm.expect(jsonData[i].state).to.eql('CLOSED');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=CloSeD",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "",
													"disabled": true
												},
												{
													"key": "state",
													"value": "CloSeD",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - state (SETTLED)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da58bf04-85f3-422c-a390-885243a878c3",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    pm.test(\"Window State is SETTLED\", function () {",
													"        pm.expect(jsonData[i].state).to.eql('SETTLED');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=SETTLED",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "",
													"disabled": true
												},
												{
													"key": "state",
													"value": "SETTLED",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - param - state (SETTLED) Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da58bf04-85f3-422c-a390-885243a878c3",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    pm.test(\"Window State is SETTLED\", function () {",
													"        pm.expect(jsonData[i].state).to.eql('SETTLED');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=NEW",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "",
													"disabled": true
												},
												{
													"key": "state",
													"value": "NEW",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "NEW  is not a valid state for a settlement window.\nSo, I have given the state = \"NEW\" to see the behavior of the application.\n\nResponse is :\n{\n    \"statusCode\": 400,\n    \"error\": \"Bad Request\",\n    \"message\": {\n        \"errorInformation\": {\n            \"errorDescription\": \"Invalid request query input\"\n        }\n    }\n}"
									},
									"response": []
								},
								{
									"name": "200 - param - state (PENDING_SETTLEMENT)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2d69a5d-9aa0-4c27-ad85-b502c0eb5d5e",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    pm.test(\"Window State is PENDING_SETTLEMENT\", function () {",
													"        pm.expect(jsonData[i].state).to.eql('PENDING_SETTLEMENT');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=PENDING_SETTLEMENT",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "",
													"disabled": true
												},
												{
													"key": "state",
													"value": "PENDING_SETTLEMENT",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - param - state (PENDING_SETTLEMENT) Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2d69a5d-9aa0-4c27-ad85-b502c0eb5d5e",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    pm.test(\"Window State is PENDING_SETTLEMENT\", function () {",
													"        pm.expect(jsonData[i].state).to.eql('PENDING_SETTLEMENT');",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=PENDING",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "",
													"disabled": true
												},
												{
													"key": "state",
													"value": "PENDING",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "To check the behavior with invalid request, I have given state = PENDING instead of PENDING_SETTLEMENT"
									},
									"response": []
								},
								{
									"name": "200 - param - state (NOT_SETTLED)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "588d09c7-0593-4e7d-b795-b95f62b0de14",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Window State is NOT_SETTLED\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[0].state).to.eql('NOT_SETTLED');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=NOT_SETTLED",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "",
													"disabled": true
												},
												{
													"key": "state",
													"value": "NOT_SETTLED",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - param - state (NOT_SETTLED) -Not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "588d09c7-0593-4e7d-b795-b95f62b0de14",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(\"Window State is NOT_SETTLED\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[0].state).to.eql('NOT_SETTLED');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=NOT_SETTLED",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "",
													"disabled": true
												},
												{
													"key": "state",
													"value": "NOT_SETTLED",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - param - state (NOT_SETTLED) Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "588d09c7-0593-4e7d-b795-b95f62b0de14",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Window State is NOT_SETTLED\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[0].state).to.eql('NOT_SETTLED');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=ABCD",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "",
													"disabled": true
												},
												{
													"key": "state",
													"value": "ABCD",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "To check the behavior when the request is invaid, I have provided the state is \"ABCD\""
									},
									"response": []
								},
								{
									"name": "200 - param - participantId (1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16c9883a-db67-4c77-bd13-f60acf47afe9",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"Should have atleast one entry\", function () {",
													"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?participantId=4",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "4"
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - param - participantId (1) Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16c9883a-db67-4c77-bd13-f60acf47afe9",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"Should have atleast one entry\", function () {",
													"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?participantId=100",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "100"
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Provide a participantId that does not exist or that doesnot belong to that settlement window."
									},
									"response": []
								},
								{
									"name": "200 - param - participantId (2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4acfe8f7-895c-4c3e-b9a8-ca822a32e6e5",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"Should have atleast one entry\", function () {",
													"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?participantId=4",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "4"
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - param - participantId (2) Invaid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4acfe8f7-895c-4c3e-b9a8-ca822a32e6e5",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.test(\"Should have atleast one entry\", function () {",
													"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?participantId=a",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "a"
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - fromDateTime",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb8345ec-4e70-4529-b075-b9623cd9e109",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Window for participant Id 1\", function () {",
													"    console.log(pm.response.array)",
													"    //pm.expect(jsonData[0].participantId).to.eql('1');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?fromDateTime=2018-10-03T11:00:00",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "2",
													"disabled": true
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2018-10-03T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z"
												},
												{
													"key": "toDateTime",
													"value": "",
													"description": "eg 2017-07-20T17:32:28Z",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - param - fromDateTime (Invaid)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb8345ec-4e70-4529-b075-b9623cd9e109",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Window for participant Id 1\", function () {",
													"    console.log(pm.response.array)",
													"    //pm.expect(jsonData[0].participantId).to.eql('1');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?fromDateTime=2018/10/03T11:00",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "2",
													"disabled": true
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2018/10/03T11:00",
													"description": "eg 2017-07-20T17:32:28Z"
												},
												{
													"key": "toDateTime",
													"value": "",
													"description": "eg 2017-07-20T17:32:28Z",
													"disabled": true
												}
											]
										},
										"description": "Invalid  DateTime is provided in the request."
									},
									"response": []
								},
								{
									"name": "200 - param - toDateTime",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb8345ec-4e70-4529-b075-b9623cd9e109",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Window for participant Id 1\", function () {",
													"    console.log(pm.response.array)",
													"    //pm.expect(jsonData[0].participantId).to.eql('1');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?toDateTime=2019-02-28T11:00:00",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "2",
													"disabled": true
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2018-10-03T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "2019-02-28T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - param - toDateTime (Invalid)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb8345ec-4e70-4529-b075-b9623cd9e109",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Window for participant Id 4\", function () {",
													"    console.log(pm.response.array)",
													"    //pm.expect(jsonData[0].participantId).to.eql('4');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?toDateTime=0000--0000T00:00:00Z",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "2",
													"disabled": true
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2018-10-03T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "0000--0000T00:00:00Z",
													"description": "eg 2017-07-20T17:32:28Z"
												}
											]
										},
										"description": "I provided invalid datetime \"0000--0000T00:00:00Z\""
									},
									"response": []
								},
								{
									"name": "200 - param - fromDateTime&toDateTime",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb8345ec-4e70-4529-b075-b9623cd9e109",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Window for participant Id 1\", function () {",
													"    console.log(pm.response.array)",
													"    //pm.expect(jsonData[0].participantId).to.eql('1');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?fromDateTime=2018-10-03T11:00:00&toDateTime=2018-11-31T11:00:00",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "2",
													"disabled": true
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2018-10-03T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z"
												},
												{
													"key": "toDateTime",
													"value": "2018-11-31T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - param - fromDateTime&toDateTime Invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb8345ec-4e70-4529-b075-b9623cd9e109",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Window for participant Id 1\", function () {",
													"    console.log(pm.response.array)",
													"    //pm.expect(jsonData[0].participantId).to.eql('1');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?fromDateTime=2018-11-04T11:00:00&toDateTime=2018-10-02T11:00:00",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "2",
													"disabled": true
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2018-11-04T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z"
												},
												{
													"key": "toDateTime",
													"value": "2018-10-02T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z"
												}
											]
										},
										"description": "provide from date, a later one than the todatetime."
									},
									"response": []
								},
								{
									"name": "200 - param - state & fromDateTime",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad07140c-86ac-44ec-961a-bd0c8fa851d0",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Window State is CLOSED\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[0].state).to.eql('CLOSED');",
													"});",
													"",
													"pm.test(\"Window for participant Id 1\", function () {",
													"    console.log(pm.response.array)",
													"    //pm.expect(jsonData[0].participantId).to.eql('1');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN&fromDateTime=2018-10-03T11:00:00",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "2",
													"disabled": true
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "2018-10-03T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z"
												},
												{
													"key": "toDateTime",
													"value": "2018-10-04T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - state & participantID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ebc2aa6-b03d-4dbf-8636-c97a9eba04dd",
												"exec": [
													"// pm.test(\"Status code is 200\", function () {",
													"//     pm.response.to.have.status(200);",
													"// });",
													"// pm.test(\"Window State is OPEN\", function () {",
													"//     var jsonData = pm.response.json();",
													"//     pm.expect(jsonData[0].state).to.eql('PEN');",
													"// });",
													"",
													"// pm.test(\"Window for participant Id 2\", function () {",
													"//     console.log(pm.response.array)",
													"//     //pm.expect(jsonData[0].participantId).to.eql('2');",
													"// });",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?participantId=4&state=CLOSED",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "4"
												},
												{
													"key": "state",
													"value": "CLOSED",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "2018-10-03T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "2018-10-04T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - toDateTime & participantID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd13714e-7c41-4732-a213-6b1ffcbd9923",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"pm.test(\"Window by toDateTime and participantId\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[0].settlementWindowId).to.eql(5,4,3,2,1);",
													"});",
													"",
													"pm.test(\"Window for participant Id 2\", function () {",
													"    console.log(pm.response.array)",
													"    //pm.expect(jsonData[0].participantId).to.eql('2');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?participantId=3&toDateTime=2019-02-28T11:00:00",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "3"
												},
												{
													"key": "state",
													"value": "CLOSED",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2018-10-03T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "2019-02-28T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Bad Request (BUG)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad07140c-86ac-44ec-961a-bd0c8fa851d0",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"pm.test(\"Window State is CLOSED\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData[0].state).to.eql('CLOSED');",
													"});",
													"",
													"pm.test(\"Window for participant Id 1\", function () {",
													"    console.log(pm.response.array)",
													"    //pm.expect(jsonData[0].participantId).to.eql('1');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "2",
													"disabled": true
												},
												{
													"key": "state",
													"value": "CLOSED",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2018-10-03T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "2018-10-04T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - No Data",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "303311bc-37b2-4e64-b1d1-c22e6e91a3c4",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?fromDateTime=2020-10-03T11:00:00",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "2",
													"disabled": true
												},
												{
													"key": "state",
													"value": "CLOSED",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2020-10-03T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z"
												},
												{
													"key": "toDateTime",
													"value": "2018-10-04T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "GET Settlement Window by Params",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://test-central-settlement.mojaloop.live/v1/settlementWindows?state=OPEN&fromDateTime=2018-10-03T11:00:00&toDateTime=2018-10-03T15:00:00",
											"protocol": "http",
											"host": [
												"test-central-settlement",
												"mojaloop",
												"live"
											],
											"path": [
												"v1",
												"settlementWindows"
											],
											"query": [
												{
													"key": "participantId",
													"value": "1",
													"description": "A valid participant Id to filter on.",
													"disabled": true
												},
												{
													"key": "state",
													"value": "OPEN",
													"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "2018-10-03T11:00:00",
													"description": "eg 2017-07-20T17:32:28Z"
												},
												{
													"key": "toDateTime",
													"value": "2018-10-03T15:00:00",
													"description": "eg 2017-07-20T17:32:28Z"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Folder for settlementWindows",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "settlements",
					"item": [
						{
							"name": "createSettlement",
							"item": [
								{
									"name": "200 - Valid Request - 1869",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2d91b54e-048e-4ddc-83c5-c3933d14efbb",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlementWindows?state=CLOSED\", function (err, response) {",
													"    console.log('windowIdToClose: ',response.json()[0].settlementWindowId);",
													"    pm.variables.set(\"windowIdToClose\",response.json()[0].settlementWindowId);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1537c34e-1a41-4e28-a52b-8f435e226a0a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Settlement state should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.variables.get(\"windowIdToClose\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.variables.get(\"windowIdToClose\"));",
													"});",
													"",
													"pm.test(\"Settlement Window state should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql('PENDING_SETTLEMENT');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"reason\": \"TESTING\",\n  \"settlementWindows\": [\n    {\n      \"id\": {{windowIdToClose}}\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Bad Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2d91b54e-048e-4ddc-83c5-c3933d14efbb",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlementWindows?state=CLOSED\", function (err, response) {",
													"    console.log('windowIdToClose: ',response.json()[0].settlementWindowId);",
													"    pm.variables.set(\"windowIdToClose\",response.json()[0].settlementWindowId);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cf574a95-d0e5-442c-a310-eb4d56bac6c3",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Error message should be present\", function () {",
													"    pm.expect(jsonData.message).to.eql('Invalid request payload input');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"reason\": \"TESTING\",\n  \"settlementWindow\": [\n    {\n      \"id\": {{windowIdToClose}}\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Authorization Missing (NOT IMPLEMENTED)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2d91b54e-048e-4ddc-83c5-c3933d14efbb",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlementWindows?state=CLOSED\", function (err, response) {",
													"    console.log('windowIdToClose: ',response.json()[0].settlementWindowId);",
													"    pm.variables.set(\"windowIdToClose\",response.json()[0].settlementWindowId);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cf574a95-d0e5-442c-a310-eb4d56bac6c3",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Error message should be present\", function () {",
													"    pm.expect(jsonData.message).to.eql('Invalid request payload input');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"reason\": \"TESTING\",\n  \"settlementWindow\": [\n    {\n      \"id\": {{windowIdToClose}}\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - No Data Found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9ccec4c7-6513-48ae-9281-836ddf22d373",
												"exec": [
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7a5efea9-bba6-4d6a-bf27-e8f612c7a31a",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Error message should be present\", function () {",
													"    pm.expect(jsonData.message).to.eql('Invalid request payload input');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"reason\": \"TESTING\",\n  \"settlementWindow\": [\n    {\n      \"id\": -1\n    }\n  ]\n}"
										},
										"url": {
											"raw": "http://{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
											"protocol": "http",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											]
										}
									},
									"response": []
								},
								{
									"name": "createSettlement - On open window Id",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"reason\": \"string\",\n  \"settlementWindows\": [\n    {\n      \"id\": 14\n    }\n    \n  ]\n}"
										},
										"url": {
											"raw": "http://test-central-settlement.mojaloop.live/v1/settlements",
											"protocol": "http",
											"host": [
												"test-central-settlement",
												"mojaloop",
												"live"
											],
											"path": [
												"v1",
												"settlements"
											]
										},
										"description": "\nTrigger the creation of a settlement, that does the calculation of the net settlement position per participant and marks all transfers in the affected windows as PENDING_SETTLEMENT. Returned dataset is the net settlement report for the settlementWindow\nJump to definition\n"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "getSettlementsByParams",
							"item": [
								{
									"name": "200 - param - state(PENDING_SETTLEMENT)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4da5ab61-7dad-4d5c-8a6d-86b7bbb7c05d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    pm.test(\"Window State is PENDING_SETTLEMENT\", function () {",
													"        pm.expect(jsonData[i].state).to.eql('PENDING_SETTLEMENT');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements?fromDateTime=2019-02-15T17:32:28Z&toDateTime=2019-03-16T17:32:28Z",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											],
											"query": [
												{
													"key": "currency",
													"value": "USD",
													"disabled": true
												},
												{
													"key": "participantId",
													"value": "{{payerFspId}}",
													"disabled": true
												},
												{
													"key": "settlementWindowId",
													"value": "59",
													"disabled": true
												},
												{
													"key": "accountId",
													"value": "{{payerFspAccountId}}",
													"disabled": true
												},
												{
													"key": "state",
													"value": "PENDING_SETTLEMENT",
													"description": "Available values : PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2019-02-15T17:32:28Z"
												},
												{
													"key": "toDateTime",
													"value": "2019-03-16T17:32:28Z"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - currency(USD)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ad3aacf-e5e7-4354-ab34-8b22b93250cb",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    for(j in jsonData[i].participants) {",
													"        for(k in jsonData[i].participants[j].accounts) {",
													"            pm.test(\"Filter by Currency USD\", function () {",
													"                pm.expect(jsonData[i].participants[j].accounts[k].netSettlementAmount.currency).to.eql('USD');",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements?currency=USD",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											],
											"query": [
												{
													"key": "currency",
													"value": "USD"
												},
												{
													"key": "participantId",
													"value": "{{payerFspId}}",
													"disabled": true
												},
												{
													"key": "settlementWindowId",
													"value": "",
													"disabled": true
												},
												{
													"key": "accountId",
													"value": "{{payerFspAccountId}}",
													"disabled": true
												},
												{
													"key": "state",
													"value": "NOT_SETTLED",
													"description": "Available values : PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2019-02-05T17:32:28Z",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "2019-03-05T17:32:28Z",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - participantId(2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "feb83bbb-9609-45ec-a388-e9aac7b2517f",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    for(j in jsonData[i].participants) {",
													"        ",
													"            pm.test(\"Filter by participantId 2\", function () {",
													"                pm.expect(jsonData[i].participants[j].id).to.eql(2);",
													"            });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements?participantId={{payeeFspId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											],
											"query": [
												{
													"key": "currency",
													"value": "USD",
													"disabled": true
												},
												{
													"key": "participantId",
													"value": "{{payeeFspId}}"
												},
												{
													"key": "settlementWindowId",
													"value": "",
													"disabled": true
												},
												{
													"key": "accountId",
													"value": "{{payerFspAccountId}}",
													"disabled": true
												},
												{
													"key": "state",
													"value": "NOT_SETTLED",
													"description": "Available values : PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2019-02-05T17:32:28Z",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "2019-03-05T17:32:28Z",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - settlementWindowId(2) BUG",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8dd1da1-b11f-4f4a-b183-6c3cacd7d075",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    for(j in jsonData[i].participants) {",
													"        ",
													"            pm.test(\"Filter by settlementWindowId 2\", function () {",
													"                pm.expect(jsonData[i].settlementWindows[j].id).to.eql(2);",
													"            });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements?fromDateTime=2019-03-05&toDateTime=2019-03-07",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											],
											"query": [
												{
													"key": "currency",
													"value": "USD",
													"disabled": true
												},
												{
													"key": "participantId",
													"value": "{{payeeFspId}}",
													"disabled": true
												},
												{
													"key": "settlementWindowId",
													"value": "1",
													"disabled": true
												},
												{
													"key": "accountId",
													"value": "{{payeeFspAccountId}}",
													"disabled": true
												},
												{
													"key": "state",
													"value": "NOT_SETTLED",
													"description": "Available values : PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2019-03-05"
												},
												{
													"key": "toDateTime",
													"value": "2019-03-07"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - accountId(2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad06b333-44fc-4173-adba-e7f533fbfbaf",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    for(j in jsonData[i].participants) {",
													"        for(k in jsonData[i].participants[j].accounts) {",
													"        ",
													"            pm.test(\"Filter by accountId 2\", function () {",
													"                pm.expect(jsonData[i].participants[j].accounts[k].id).to.eql(2);",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements?accountId={{payeeFspAccountId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											],
											"query": [
												{
													"key": "currency",
													"value": "USD",
													"disabled": true
												},
												{
													"key": "participantId",
													"value": "{{payeeFspId}}",
													"disabled": true
												},
												{
													"key": "settlementWindowId",
													"value": "2",
													"disabled": true
												},
												{
													"key": "accountId",
													"value": "{{payeeFspAccountId}}"
												},
												{
													"key": "state",
													"value": "PENDING_SETTLEMENT",
													"description": "Available values : PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2019-02-05T17:32:28Z",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "2019-03-05T17:32:28Z",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - state&accountId(PENDING_SETTLEMENT,2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c512843-030d-4af2-879e-f981e4c20e89",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    pm.test(\"Window State is PENDING_SETTLEMENT\", function () {",
													"        pm.expect(jsonData[i].state).to.eql('PENDING_SETTLEMENT');",
													"    });",
													"}",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    for(j in jsonData[i].participants) {",
													"        for(k in jsonData[i].participants[j].accounts) {",
													"        ",
													"            pm.test(\"Filter by accountId 2\", function () {",
													"                pm.expect(jsonData[i].participants[j].accounts[k].id).to.eql(2);",
													"            });",
													"        }",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements?accountId={{payeeFspAccountId}}&state=PENDING_SETTLEMENT",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											],
											"query": [
												{
													"key": "currency",
													"value": "USD",
													"disabled": true
												},
												{
													"key": "participantId",
													"value": "{{payeeFspId}}",
													"disabled": true
												},
												{
													"key": "settlementWindowId",
													"value": "2",
													"disabled": true
												},
												{
													"key": "accountId",
													"value": "{{payeeFspAccountId}}"
												},
												{
													"key": "state",
													"value": "PENDING_SETTLEMENT",
													"description": "Available values : PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "2019-02-05T17:32:28Z",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "2019-03-05T17:32:28Z",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - currency&participantId(USD,1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75181ad0-6187-452e-8244-854c1e4ffde0",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    for(j in jsonData[i].participants) {",
													"        for(k in jsonData[i].participants[j].accounts) {",
													"            pm.test(\"Filter by Currency USD\", function () {",
													"                pm.expect(jsonData[i].participants[j].accounts[k].netSettlementAmount.currency).to.eql('USD');",
													"            });",
													"        }",
													"    }",
													"}",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    for(j in jsonData[i].participants) {",
													"            pm.test(\"Filter by participantId\", function () {",
													"                pm.expect(jsonData[i].participants[j].id).to.eql(4);",
													"            });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements?currency=USD&participantId=4",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											],
											"query": [
												{
													"key": "currency",
													"value": "USD"
												},
												{
													"key": "participantId",
													"value": "4"
												},
												{
													"key": "settlementWindowId",
													"value": "2",
													"disabled": true
												},
												{
													"key": "accountId",
													"value": "{{payeeFspAccountId}}",
													"disabled": true
												},
												{
													"key": "state",
													"value": "PENDING_SETTLEMENT",
													"description": "Available values : PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2019-02-05T17:32:28Z",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "2019-03-05T17:32:28Z",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - state(SETTLED)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53544fc0-435b-4afc-8d67-ae9fece0cb35",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"for (var i in jsonData){",
													"    pm.test(\"Window State is SETTLED\", function () {",
													"        pm.expect(jsonData[i].state).to.eql('SETTLED');",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements?state=SETTLED",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											],
											"query": [
												{
													"key": "currency",
													"value": "USD",
													"disabled": true
												},
												{
													"key": "participantId",
													"value": "{{payerFspId}}",
													"disabled": true
												},
												{
													"key": "settlementWindowId",
													"value": "",
													"disabled": true
												},
												{
													"key": "accountId",
													"value": "{{payerFspAccountId}}",
													"disabled": true
												},
												{
													"key": "state",
													"value": "SETTLED",
													"description": "Available values : PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
												},
												{
													"key": "fromDateTime",
													"value": "2019-02-05T17:32:28Z",
													"disabled": true
												},
												{
													"key": "toDateTime",
													"value": "2019-03-05T17:32:28Z",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - param - from and toDateTime",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53544fc0-435b-4afc-8d67-ae9fece0cb35",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements?fromDateTime=2019-03-20T17:32:28Z&toDateTime=2019-03-22T19:32:28Z",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements"
											],
											"query": [
												{
													"key": "currency",
													"value": "USD",
													"disabled": true
												},
												{
													"key": "participantId",
													"value": "{{payerFspId}}",
													"disabled": true
												},
												{
													"key": "settlementWindowId",
													"value": "143",
													"disabled": true
												},
												{
													"key": "accountId",
													"value": "{{payerFspAccountId}}",
													"disabled": true
												},
												{
													"key": "state",
													"value": "SETTLED",
													"description": "Available values : PENDING_SETTLEMENT, SETTLED, NOT_SETTLED",
													"disabled": true
												},
												{
													"key": "fromDateTime",
													"value": "2019-03-20T17:32:28Z"
												},
												{
													"key": "toDateTime",
													"value": "2019-03-22T19:32:28Z"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "getSettlementById",
							"item": [
								{
									"name": "200 - Valid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4276c353-e4d7-4a7c-926f-f38d239f89cc",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Settlement state should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
													"});",
													"",
													"for(i in jsonData.settlementWindows){",
													"    pm.test(\"Settlement Window state should be PENDING_SETTLEMENT\", function () {",
													"        pm.expect(jsonData.settlementWindows[i].state).to.eql('PENDING_SETTLEMENT');",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6bc5061a-1d52-4e26-9bf0-0245dc0fe75b",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlements?state=PENDING_SETTLEMENT\", function (err, response) {",
													"    console.log('openSettlementId: ',response.json()[0].id);",
													"    pm.variables.set(\"openSettlementId\",response.json()[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/87",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"87"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "getSettlementBySettlementParticipantAccount",
							"item": [
								{
									"name": "200 - Valid Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b60451b2-d2d1-4dcd-b908-cbb3698f7dfa",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlements?state=PENDING_SETTLEMENT\", function (err, response) {",
													"    console.log('openSettlementId: ',response.json()[0].id);",
													"    pm.variables.set(\"openSettlementId\",response.json()[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "919108be-0cbd-4c8f-a553-66db98db072f",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Settlement state should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
													"});",
													"",
													"for(i in jsonData.settlementWindows){",
													"    pm.test(\"Settlement Window state should be PENDING_SETTLEMENT\", function () {",
													"        pm.expect(jsonData.settlementWindows[i].state).to.eql('PENDING_SETTLEMENT');",
													"    });",
													"}",
													"",
													"for(i in jsonData.participants){",
													"    for(j in jsonData.participants[i].accounts) {",
													"        pm.test(\"Participant Account ID should be \"+pm.environment.get(\"payerFspAccountId\"), function () {",
													"            pm.expect(jsonData.participants[i].accounts[j].id).to.eql(parseInt(pm.environment.get(\"payerFspAccountId\")));",
													"       });",
													"        pm.test(\"Participant Account state should be PENDING_SETTLEMENT\", function () {",
													"           pm.expect(jsonData.participants[i].accounts[j].state).to.eql(\"PENDING_SETTLEMENT\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/7/participants/{{payerFspId}}/accounts/{{payerFspAccountId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"7",
												"participants",
												"{{payerFspId}}",
												"accounts",
												"{{payerFspAccountId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Not Found - Missing account Id in URI",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b60451b2-d2d1-4dcd-b908-cbb3698f7dfa",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlements?state=PENDING_SETTLEMENT\", function (err, response) {",
													"    console.log('openSettlementId: ',response.json()[0].id);",
													"    pm.variables.set(\"openSettlementId\",response.json()[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "919108be-0cbd-4c8f-a553-66db98db072f",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Settlement state should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
													"});",
													"",
													"for(i in jsonData.settlementWindows){",
													"    pm.test(\"Settlement Window state should be PENDING_SETTLEMENT\", function () {",
													"        pm.expect(jsonData.settlementWindows[i].state).to.eql('PENDING_SETTLEMENT');",
													"    });",
													"}",
													"",
													"for(i in jsonData.participants){",
													"    for(j in jsonData.participants[i].accounts) {",
													"        pm.test(\"Participant Account ID should be \"+pm.environment.get(\"payerFspAccountId\"), function () {",
													"            pm.expect(jsonData.participants[i].accounts[j].id).to.eql(parseInt(pm.environment.get(\"payerFspAccountId\")));",
													"       });",
													"        pm.test(\"Participant Account state should be PENDING_SETTLEMENT\", function () {",
													"           pm.expect(jsonData.participants[i].accounts[j].state).to.eql(\"PENDING_SETTLEMENT\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{openSettlementId}}/participants/{{payerFspId}}/accounts",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{openSettlementId}}",
												"participants",
												"{{payerFspId}}",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Invalid Request - settlementID that does not exist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b60451b2-d2d1-4dcd-b908-cbb3698f7dfa",
												"exec": [
													"pm.sendRequest(\"http://\"+pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+\"/settlements?state=PENDING_SETTLEMENT\", function (err, response) {",
													"    console.log('openSettlementId: ',response.json()[0].id);",
													"    pm.variables.set(\"openSettlementId\",response.json()[0].id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "919108be-0cbd-4c8f-a553-66db98db072f",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Settlement state should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
													"});",
													"",
													"for(i in jsonData.settlementWindows){",
													"    pm.test(\"Settlement Window state should be PENDING_SETTLEMENT\", function () {",
													"        pm.expect(jsonData.settlementWindows[i].state).to.eql('PENDING_SETTLEMENT');",
													"    });",
													"}",
													"",
													"for(i in jsonData.participants){",
													"    for(j in jsonData.participants[i].accounts) {",
													"        pm.test(\"Participant Account ID should be \"+pm.environment.get(\"payerFspAccountId\"), function () {",
													"            pm.expect(jsonData.participants[i].accounts[j].id).to.eql(parseInt(pm.environment.get(\"payerFspAccountId\")));",
													"       });",
													"        pm.test(\"Participant Account state should be PENDING_SETTLEMENT\", function () {",
													"           pm.expect(jsonData.participants[i].accounts[j].state).to.eql(\"PENDING_SETTLEMENT\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/100/participants/4/accounts/5",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"100",
												"participants",
												"4",
												"accounts",
												"5"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "updateSettlementById ( Refer to Happy Path )",
							"item": [
								{
									"name": "PREPARE participant",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c979c711-452b-4886-915b-75f744dae9b1",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].settlementWindowId).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].settlementWindowStateId).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"pm.test(\"Payer Participant ID should be: \"+pm.environment.get(\"payerFspId\"), function () {",
													"    pm.expect(jsonData.participants[0].id).to.eql(parseInt(pm.environment.get(\"payerFspId\")));",
													"});",
													"",
													"pm.test(\"Payer Participant Account ID should be: \"+pm.environment.get(\"payerFspAccountId\"), function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].id).to.eql(parseInt(pm.environment.get(\"payerFspAccountId\")));",
													"});",
													"",
													"pm.test(\"Payerfsp Participant Account State should be SETTLED\", function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].state).to.eql(\"SETTLED\");",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1feb7688-d52a-4273-b132-938ad7d8532c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"participants\": [\n    {\n      \"id\": {{payerFspId}},\n      \"accounts\": [\n        {\n          \"id\": {{payerFspAccountId}},\n          \"reason\": \"test\",\n          \"state\": \"PS_TRANSFERS_RECORDED\"\n        }\n      ]\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "RESERVE participant",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c979c711-452b-4886-915b-75f744dae9b1",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].settlementWindowId).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].settlementWindowStateId).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"pm.test(\"Payer Participant ID should be: \"+pm.environment.get(\"payerFspId\"), function () {",
													"    pm.expect(jsonData.participants[0].id).to.eql(parseInt(pm.environment.get(\"payerFspId\")));",
													"});",
													"",
													"pm.test(\"Payer Participant Account ID should be: \"+pm.environment.get(\"payerFspAccountId\"), function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].id).to.eql(parseInt(pm.environment.get(\"payerFspAccountId\")));",
													"});",
													"",
													"pm.test(\"Payerfsp Participant Account State should be SETTLED\", function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].state).to.eql(\"SETTLED\");",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1feb7688-d52a-4273-b132-938ad7d8532c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"participants\": [\n    {\n      \"id\": {{payerFspId}},\n      \"accounts\": [\n        {\n          \"id\": {{payerFspAccountId}},\n          \"reason\": \"test\",\n          \"state\": \"PS_TRANSFERS_RESERVED\"\n        }\n      ]\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "COMMIT participant",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c979c711-452b-4886-915b-75f744dae9b1",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].settlementWindowId).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].settlementWindowStateId).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"pm.test(\"Payer Participant ID should be: \"+pm.environment.get(\"payerFspId\"), function () {",
													"    pm.expect(jsonData.participants[0].id).to.eql(parseInt(pm.environment.get(\"payerFspId\")));",
													"});",
													"",
													"pm.test(\"Payer Participant Account ID should be: \"+pm.environment.get(\"payerFspAccountId\"), function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].id).to.eql(parseInt(pm.environment.get(\"payerFspAccountId\")));",
													"});",
													"",
													"pm.test(\"Payerfsp Participant Account State should be SETTLED\", function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].state).to.eql(\"SETTLED\");",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1feb7688-d52a-4273-b132-938ad7d8532c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"participants\": [\n    {\n      \"id\": {{payerFspId}},\n      \"accounts\": [\n        {\n          \"id\": {{payerFspAccountId}},\n          \"reason\": \"test\",\n          \"state\": \"PS_TRANSFERS_COMMITTED\"\n        }\n      ]\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "SETTLE participant",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c979c711-452b-4886-915b-75f744dae9b1",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].settlementWindowId).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].settlementWindowStateId).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"pm.test(\"Payer Participant ID should be: \"+pm.environment.get(\"payerFspId\"), function () {",
													"    pm.expect(jsonData.participants[0].id).to.eql(parseInt(pm.environment.get(\"payerFspId\")));",
													"});",
													"",
													"pm.test(\"Payer Participant Account ID should be: \"+pm.environment.get(\"payerFspAccountId\"), function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].id).to.eql(parseInt(pm.environment.get(\"payerFspAccountId\")));",
													"});",
													"",
													"pm.test(\"Payerfsp Participant Account State should be SETTLED\", function () {",
													"    pm.expect(jsonData.participants[0].accounts[0].state).to.eql(\"SETTLED\");",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1feb7688-d52a-4273-b132-938ad7d8532c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"participants\": [\n    {\n      \"id\": {{payerFspId}},\n      \"accounts\": [\n        {\n          \"id\": {{payerFspAccountId}},\n          \"reason\": \"test\",\n          \"state\": \"SETTLED\"\n        }\n      ]\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "updateSettlementBySettlementParticipant ( NOT IMPLEMENTED )",
							"item": [
								{
									"name": "Update settlement of participant",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"accounts\": [\n    {\n      \"id\": 0,\n      \"reason\": \"reason\",\n      \"state\": \"CLOSED\",\n      \"externalReference\": \"external-reference-abc123\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}/participants/{{participantId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}",
												"participants",
												"{{participantId}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a0d95711-dad0-47ed-9f25-d88149365e42",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "39216476-47a7-4414-94b6-e766737fa729",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "updateSettlementBySettlementParticipantAccount ( NOT IMPLEMENTED )",
							"item": [],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e44142e3-fbbe-4e7e-9d43-99f0f0dd53e7",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bdd217ca-7589-4fbe-9873-5973e345a4b8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "abortSettlement",
							"item": [
								{
									"name": "Abort Settlement",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"state\": \"ABORTED\",\n  \"reason\": \"Aborted 1\",\n  \"externalReference\": \"1\"\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Folder for settlements",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "ec444f0b-cd84-44d8-b837-0be412be2b86",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d755a5f2-f2db-47ab-97df-e6099d5fed80",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Metrics-API",
			"item": [
				{
					"name": "central-ledger-service",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8d2ec0c-6acd-4b19-962b-0e9864efc80d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Check that first and last expected response values are present\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"moja_cl_process_cpu_user_seconds_total\"); // first Value",
									"    pm.expect(pm.response.text()).to.include(\"moja_cl_nodejs_version_info\"); // last Value",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/html; charset=utf-8",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "text/html; charset=utf-8",
								"type": "text"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{env_prefix}}-central-ledger.mojaloop.live/metrics",
							"protocol": "http",
							"host": [
								"{{env_prefix}}-central-ledger",
								"mojaloop",
								"live"
							],
							"path": [
								"metrics"
							]
						}
					},
					"response": []
				},
				{
					"name": "ml-api-adapter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8d2ec0c-6acd-4b19-962b-0e9864efc80d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Check that first and last expected response values are present\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"moja_cl_process_cpu_user_seconds_total\"); // first Value",
									"    pm.expect(pm.response.text()).to.include(\"moja_cl_nodejs_version_info\"); // last Value",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/html; charset=utf-8"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "text/html; charset=utf-8"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{dateHeader}}"
							}
						],
						"url": {
							"raw": "http://{{env_prefix}}-ml-api-adapter.mojaloop.live/metrics",
							"protocol": "http",
							"host": [
								"{{env_prefix}}-ml-api-adapter",
								"mojaloop",
								"live"
							],
							"path": [
								"metrics"
							]
						}
					},
					"response": []
				},
				{
					"name": "ml-api-adapter Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8d2ec0c-6acd-4b19-962b-0e9864efc80d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Check that first and last expected response values are present\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"moja_cl_process_cpu_user_seconds_total\"); // first Value",
									"    pm.expect(pm.response.text()).to.include(\"moja_cl_nodejs_version_info\"); // last Value",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/html; charset=utf-8"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "text/html; charset=utf-8"
							},
							{
								"key": "Date",
								"type": "text",
								"value": "{{dateHeader}}"
							}
						],
						"url": {
							"raw": "http://{{env_prefix}}-ml-api-adapter.mojaloop.live/metrics",
							"protocol": "http",
							"host": [
								"{{env_prefix}}-ml-api-adapter",
								"mojaloop",
								"live"
							],
							"path": [
								"metrics"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "FundsIn-API",
			"item": [
				{
					"name": "Record Funds In - prepare",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a96ad88c-c5e9-4077-b060-765ccd1e86e1",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('fundsInPrepareTransferId', generatedUUID);",
									"pm.environment.set('fundsInPrepareAmount', 5000);",
									"",
									"",
									"const payerfspGetStatusRequest = {",
									"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
									"  method: 'GET',",
									"  header: {",
									"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"      \"Content-Type\": \"application/json\"",
									"  }",
									"};",
									"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
									"    console.log(response.json())",
									"    var jsonData = response.json()",
									"    for(var i in jsonData) {",
									"        if((jsonData[i].ledgerAccountType === 'SETTLEMENT') && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
									"            pm.environment.set(\"payerfspSettlementAccountId\",jsonData[i].id)",
									"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsIn\",jsonData[i].value)",
									"        }",
									"    }",
									"});",
									"",
									"const hubGetStatusRequest = {",
									"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/hub/accounts',",
									"  method: 'GET',",
									"  header: {",
									"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"      \"Content-Type\": \"application/json\"",
									"  }",
									"};",
									"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
									"    console.log(response.json())",
									"    var jsonData = response.json()",
									"    for(var i in jsonData) {",
									"        if((jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
									"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsIn\",jsonData[i].value)",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "96c26230-6092-4f78-882f-c5343b363fe1",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(function () {",
									"    const payerfspGetStatusRequest = {",
									"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
									"      method: 'GET',",
									"      header: {",
									"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"          \"Content-Type\": \"application/json\"",
									"      }",
									"    };",
									"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
									"        console.log('payerfsp accounts: ',response.json())",
									"        var jsonData = response.json()",
									"        var payerfspSettlementAccountBalanceAfterFundsIn",
									"        for(var i in jsonData) {",
									"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT') {",
									"                payerfspSettlementAccountBalanceAfterFundsIn = jsonData[i].value",
									"            }",
									"        }",
									"        var payerfspExpectedBalance = pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsIn') - pm.environment.get('fundsInPrepareAmount')",
									"        pm.test(\"Final Payerfsp Settlement Account Balance should be same as before FundsIn + fundsInPrepareAmount\", function () {",
									"            pm.expect(payerfspSettlementAccountBalanceAfterFundsIn).to.eql(payerfspExpectedBalance);",
									"          });    ",
									"    ",
									"    });",
									"    ",
									"    const hubGetStatusRequest = {",
									"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/hub/accounts',",
									"      method: 'GET',",
									"      header: {",
									"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"          \"Content-Type\": \"application/json\"",
									"      }",
									"    };",
									"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
									"        console.log('hub accounts balance: ',response.json())",
									"        var jsonData = response.json()",
									"        var currentHubReconAccountBalance",
									"        for(var i in jsonData) {",
									"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') {",
									"                hubReconAccountBalanceAfterFundsIn = jsonData[i].value",
									"            }",
									"        }",
									"        var hubExpectedBalance = pm.environment.get(\"hubReconAccountBalanceBeforeFundsIn\")+pm.environment.get('fundsInPrepareAmount')",
									"        console.log(hubExpectedBalance)",
									"        pm.test(\"Final Hub Reconciliation Account Balance should be same as before FundsIn\", function () {",
									"            pm.expect(hubReconAccountBalanceAfterFundsIn).to.eql(hubExpectedBalance);",
									"          });  ",
									"    });",
									"}, 2000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "FSPIOP-Source",
								"type": "text",
								"value": "{{hub_operator}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{fundsInPrepareTransferId}}\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsIn\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": \"{{fundsInPrepareAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}",
								"accounts",
								"{{payerfspSettlementAccountId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Record Funds In - prepare transfer status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1809507a-83ea-469d-8692-59e38cced96d",
								"exec": [
									"pm.environment.set('dateHeader', (new Date()).toUTCString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "db933910-0ef6-406a-bed5-76e74347f533",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(function () {",
									"    ",
									"    const getTransferResponse = {",
									"      url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.environment.get(\"fundsInPrepareTransferId\"),",
									"      method: 'GET',",
									"      header: {",
									"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
									"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"          \"Content-Type\": \"application/json\"",
									"      }",
									"    };",
									"    pm.sendRequest(getTransferResponse, function (err, response) {",
									"        console.log(response.json())",
									"        var jsonData = response.json()",
									"        pm.test(\"Transfer State should be COMMITTED\", function () {",
									"            pm.expect(jsonData.transferState).to.eql(\"COMMITTED\");",
									"          });    ",
									"    ",
									"    });",
									"}, 2000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							}
						],
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsInPrepareTransferId}}",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers",
								"{{fundsInPrepareTransferId}}"
							]
						},
						"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
					},
					"response": []
				},
				{
					"name": "RecordFundsIn-1127 - Invalid Transfer ID - 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "edf754a0-b23a-40c1-b06b-24e5a9356d1b",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"transferId\": \"blah\",\n\t\"externalReference\": \"abc123\",\n\t\"action\": \"recordFundsIn\",\n\t\"amount\": {\n\t\t\"amount\": 50.0000,\n\t\t\"currency\": \"USD\"\n\t\t\n\t},\n\t\"reason\": \"Reason for in flow of funds\",\n\t\"extensionList\": {\n\t\t\"extension\": [\n\t\t\t{\n\t\t\t\t\"key\": \"extKey1\",\n\t\t\t\t\"value\": \"extValue1\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"key\": \"extKey2\",\n\t\t\t\t\"value\": \"extValue2\"\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{fspName}}/accounts/{{settlementAccountId}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
							],
							"path": [
								"participants",
								"{{fspName}}",
								"accounts",
								"{{settlementAccountId}}"
							]
						},
						"description": "Author: Sridevi Miriyala\n\n\nDeposit Submitted via a Secure PostMan request \n* DFSP Settlement Ledger updated \n* DFSP Settlement Ledger matches bank Settlement Account Balance \n* Hub Reconciliation updated \n\nA DFSP cannot process a deposit"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "FundsOut-API",
			"item": [
				{
					"name": "Prepare&Reserve",
					"item": [
						{
							"name": "Record Funds Out Prepare&Reserve- payerfsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a96ad88c-c5e9-4077-b060-765ccd1e86e1",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('fundsOutPrepareReserveTransferId', generatedUUID);",
											"pm.environment.set('fundsOutPrepareReserveAmount', 100);",
											"",
											"",
											"const payerfspGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT') {",
											"            pm.environment.set(\"payerfspSettlementAccountId\",jsonData[i].id)",
											"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutPrepare\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											"",
											"const hubGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/hub/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') {",
											"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutPrepare\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "96c26230-6092-4f78-882f-c5343b363fe1",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    const payerfspGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var payerfspSettlementAccountBalanceAfterFundsOutPrepare",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT') {",
											"                payerfspSettlementAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
											"            }",
											"        }",
											"        var payerfspExpectedBalance = pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutPrepare')+pm.environment.get(\"fundsOutPrepareReserveAmount\")",
											"        pm.test(\"Final Payerfsp Settlement Account Balance should increase by the transfer amount\", function () {",
											"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutPrepare).to.eql(payerfspExpectedBalance);",
											"          });    ",
											"    ",
											"    });",
											"    ",
											"    const hubGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/hub/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var hubReconAccountBalanceAfterFundsOutPrepare",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') {",
											"                hubReconAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
											"            }",
											"        }",
											"        var hubExpectedBalance = pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutPrepare\")//-pm.environment.get(\"fundsOutPrepareReserveAmount\")",
											"        pm.test(\"Final Hub Reconciliation Account Balance should increase by the transfer amount\", function () {",
											"            pm.expect(hubReconAccountBalanceAfterFundsOutPrepare).to.eql(hubExpectedBalance);",
											"          });  ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{hub_operator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{fundsOutPrepareReserveTransferId}}\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsOutPrepareReserve\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": {{fundsOutPrepareReserveAmount}},\n    \"currency\": \"{{currency}}\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Record Funds Out Prepare&Reserve - transfer status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1809507a-83ea-469d-8692-59e38cced96d",
										"exec": [
											"pm.environment.set('dateHeader', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "db933910-0ef6-406a-bed5-76e74347f533",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    ",
											"    const getTransferResponse = {",
											"      url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.environment.get(\"fundsOutPrepareReserveTransferId\"),",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"payerfsp\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(getTransferResponse, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        pm.test(\"Transfer State should be RESERVED\", function () {",
											"            pm.expect(jsonData.transferState).to.eql(\"RESERVED\");",
											"          });    ",
											"    ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsOutPrepareReserveTransferId}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{fundsOutPrepareReserveTransferId}}"
									]
								},
								"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Commit",
					"item": [
						{
							"name": "Record Funds Out Commit - payerfsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a96ad88c-c5e9-4077-b060-765ccd1e86e1",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('fundsOutCommitTransferId', generatedUUID);",
											"pm.environment.set('fundsOutCommitAmount', 500);",
											"",
											"",
											"const payerfspGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT') {",
											"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutCommit\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											"",
											"const hubGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/hub/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') {",
											"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutCommit\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "96c26230-6092-4f78-882f-c5343b363fe1",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    const payerfspGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var payerfspSettlementAccountBalanceAfterFundsOutCommit",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT') {",
											"                payerfspSettlementAccountBalanceAfterFundsOutCommit = jsonData[i].value",
											"            }",
											"        }",
											"        var payerfspExpectedBalance = pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutCommit')-pm.environment.get(\"fundsOutPrepareAmount\")",
											"        pm.test(\"Final Payerfsp Settlement Account Balance should decrease by the transfer amount\", function () {",
											"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutPrepare).to.eql(payerfspExpectedBalance);",
											"          });    ",
											"    ",
											"    });",
											"    ",
											"    const hubGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/hub/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var hubReconAccountBalanceAfterFundsOutCommit",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') {",
											"                hubReconAccountBalanceAfterFundsOutCommit = jsonData[i].value",
											"            }",
											"        }",
											"        var hubExpectedBalance = pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutCommit\")+pm.environment.get(\"fundsOutPrepareAmount\")",
											"        pm.test(\"Final Hub Reconciliation Account Balance should increase by the transfer amount\", function () {",
											"            pm.expect(hubReconAccountBalanceAfterFundsOutCommit).to.eql(hubExpectedBalance);",
											"          });  ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUBOPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{hub_operator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"action\": \"recordFundsOutCommit\",\n  \"reason\": \"Reason for out flow of funds\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/24/transfers/{{fundsOutPrepareReserveTransferId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"24",
										"transfers",
										"{{fundsOutPrepareReserveTransferId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Record Funds Out Commit - transfer status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1809507a-83ea-469d-8692-59e38cced96d",
										"exec": [
											"pm.environment.set('dateHeader', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "db933910-0ef6-406a-bed5-76e74347f533",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(function () {",
											"    ",
											"    const getTransferResponse = {",
											"      url: pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.environment.get(\"fundsOutPrepareTransferId\"),",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(getTransferResponse, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        pm.test(\"Transfer State should be RESERVED\", function () {",
											"            pm.expect(jsonData.transferState).to.eql(\"RESERVED\");",
											"          });    ",
											"    ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "b3d74594-fa41-3581-acf6-4909aaec8134",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{hub_operator}}"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsInPrepareTransferId}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{fundsInPrepareTransferId}}"
									]
								},
								"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Abort",
					"item": [],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ALS-API",
			"item": [
				{
					"name": "Admin",
					"item": [
						{
							"name": "POST Oracles - ACCOUNT_ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "522a9bc5-f048-4bf3-93b3-4a1b71e9a68c",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,500]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.participants+json;version=1"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									},
									{
										"key": "Date",
										"type": "text",
										"value": ""
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.participants+json;version=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"oracleIdType\": \"ACCOUNT_ID\",\n  \"endpoint\": {\n    \"value\": \"{{BANKACCOUNT_ORACLE_URL}}\",\n    \"endpointType\": \"URL\"\n  },\n  \"currency\": \"{{currency}}\",\n  \"isDefault\": true\n}"
								},
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_ADMIN}}/oracles",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_ADMIN}}"
									],
									"path": [
										"oracles"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Oracles - MERCHANT",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "32491cd8-f30b-4374-9c9c-ba9026700260",
										"exec": [
											"",
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,500]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.participants+json;version=1"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									},
									{
										"key": "Date",
										"type": "text",
										"value": ""
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.participants+json;version=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"oracleIdType\": \"BUSINESS\",\n  \"endpoint\": {\n    \"value\": \"{{MERCHANT_ORACLE_URL}}\",\n    \"endpointType\": \"URL\"\n  },\n  \"currency\": \"{{currency}}\",\n  \"isDefault\": true\n}"
								},
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_ADMIN}}/oracles",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_ADMIN}}"
									],
									"path": [
										"oracles"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST Oracles - MSISDN",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f591cf4e-b4f6-4865-8196-4b3415e85107",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,500]);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.participants+json;version=1"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									},
									{
										"key": "Date",
										"type": "text",
										"value": ""
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.participants+json;version=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"oracleIdType\": \"MSISDN\",\n  \"endpoint\": {\n    \"value\": \"{{MSISDN_ORACLE_URL}}\",\n    \"endpointType\": \"URL\"\n  },\n  \"currency\": \"{{currency}}\",\n  \"isDefault\": true\n}"
								},
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_ADMIN}}/oracles",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_ADMIN}}"
									],
									"path": [
										"oracles"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET Oracles",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6880001f-185b-4c54-ba5a-82eb5ae65404",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.participants+json;version=1"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									},
									{
										"key": "Date",
										"type": "text",
										"value": ""
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.participants+json;version=1.0"
									}
								],
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_ADMIN}}/oracles",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_ADMIN}}"
									],
									"path": [
										"oracles"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE Oracle",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ceafdf0-01d2-42a5-abd7-5fe6a9e80ebe",
										"exec": [
											"pm.test(\"Successful POST request\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201,202,204]);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.participants+json;version=1"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									},
									{
										"key": "Date",
										"type": "text",
										"value": ""
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.participants+json;version=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_ADMIN}}/oracles/3",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_ADMIN}}"
									],
									"path": [
										"oracles",
										"3"
									]
								}
							},
							"response": []
						},
						{
							"name": "PUT Oracle",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79d9360a-6d7d-4db2-8676-b02839054648",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"type": "text",
										"value": "application/vnd.interoperability.participants+json;version=1"
									},
									{
										"key": "Cache-Control",
										"type": "text",
										"value": "no-cache"
									},
									{
										"key": "Date",
										"type": "text",
										"value": ""
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.participants+json;version=1.0"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"oracleIdType\": \"{{fsp_mockfsp01_partyIdType}}\",\n  \"endpoint\": {\n    \"value\": \"{{hub_als_oracle_account_host}}\",\n    \"endpointType\": \"URL\"\n  },\n  \"currency\": \"{{currency}}\",\n  \"isDefault\": true\n}"
								},
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_ADMIN}}/oracles/3",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_ADMIN}}"
									],
									"path": [
										"oracles",
										"3"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "0471d644-a46d-4e9d-baeb-4f27fe6023c1",
				"type": "text/javascript",
				"exec": [
					"pm.environment.set('dateHeader', (new Date()).toUTCString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d652122a-fa96-4520-ae30-bb391e5d2c82",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}