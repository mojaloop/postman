{
	"info": {
		"_postman_id": "f4474572-6c4a-47ac-b110-df4ffd3c25d3",
		"name": "for patch 1.1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "patch notification",
			"item": [
				{
					"name": "Send Quote - SEND",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9bcc82bc-efc5-4d7a-9d00-882d611eca63",
								"exec": [
									"var navigator = {}; //fake a navigator object for the lib",
									"var window = {}; //fake a window object for the lib",
									"eval(pm.environment.get('jrsassign'));",
									"",
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('quoteId', generatedUUID);",
									"generatedUUID = uuid.v4();",
									"pm.environment.set('transactionId', generatedUUID);",
									"",
									"pm.variables.set('quoteDate', (new Date()).toUTCString());",
									"pm.variables.set('payerName', 'PayerFirst PayerLast');",
									"pm.variables.set('payerMSISDN', '918381008987');",
									"",
									"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
									"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
									"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
									"",
									"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
									"var sHeader = JSON.stringify(oHeader);",
									"console.log(`sHeader: ${sHeader}`)",
									"",
									"var objPayload = {",
									"  \"quoteId\": pm.environment.get('quoteId'),",
									"  \"transactionId\": pm.environment.get('transactionId'),",
									"  \"payer\": {",
									"    \"partyIdInfo\": {",
									"      \"partyIdType\": \"MSISDN\",",
									"      \"partyIdentifier\": pm.variables.get('payerfspMSISDN'),",
									"      \"fspId\": \"payerfsp\"",
									"    },",
									"    \"personalInfo\": {",
									"      \"complexName\": {",
									"        \"firstName\": \"Mats\",",
									"        \"lastName\": \"Hagman\"",
									"      },",
									"      \"dateOfBirth\": \"1983-10-25\"",
									"    }",
									"  },",
									"  \"payee\": {",
									"    \"partyIdInfo\": {",
									"      \"partyIdType\": \"MSISDN\",",
									"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
									"      \"fspId\": \"payeefsp\"",
									"    }",
									"  },",
									"  \"amountType\": \"SEND\",",
									"  \"amount\": {",
									"    \"amount\": \"10\",",
									"    \"currency\": pm.environment.get('currency')",
									"  },",
									"  \"transactionType\": {",
									"    \"scenario\": \"TRANSFER\",",
									"    \"initiator\": \"PAYER\",",
									"    \"initiatorType\": \"CONSUMER\"",
									"  },",
									"  \"note\": \"hej\"",
									"}",
									"",
									"var sPayload = JSON.stringify(objPayload)",
									"console.log(`sPayload: ${sPayload}`)",
									"pm.variables.set(\"quoteRequest\", sPayload);",
									"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
									"// console.log(`token: ${token}`)",
									"",
									"// var encodedHeaders = btoa(sHeader)",
									"",
									"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
									"// var token = JSON.stringify(ofspiopSignature)",
									"",
									"const [ protectedHeaderBase64, , signature ] = token.split('.');",
									"",
									"const signatureObject = {",
									"    signature: signature.replace('\"', ''),",
									"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
									"};",
									"",
									"console.log(JSON.stringify(signatureObject))",
									"",
									"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "46a347b0-117e-4319-a01b-0687ec210a93",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"              ",
									"              //Check the Headers",
									"              var headers = response.json().headers;",
									"              ",
									"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
									"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
									"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
									"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
									"                });",
									"                ",
									"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
									"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
									"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {",
									"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
									"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
									"                });",
									"                ",
									"          } else {",
									"              pm.test(\"Quote FAILED\", function () {",
									"                throw new Error('Did not receive request on payee side');",
									"              });",
									"              // postman.setNextRequest(null)",
									"          }",
									"  });",
									"}, 3000)",
									"",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
									"      if(response.responseSize !== 0) {",
									"          //Checking headers",
									"            var headers = response.json().headers;",
									"            pm.test(\"payerfsp fspiop-source is goldenpayeefsp\", function () {",
									"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {",
									"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
									"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp accept is empty\", function () {",
									"                pm.expect(headers['accept']).to.eql(undefined);",
									"            });",
									"            ",
									"            ",
									"            ",
									"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
									"            // var strData = JSON.stringify(response.json().data)",
									"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
									"            // console.log(`token: ${token}`)",
									"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
									"            // console.log(`isValid: ${isValid}`)",
									"            // pm.test(\"Check if the response is JWS valid\", function () {",
									"            //     pm.expect(isValid).to.eql(true);",
									"            // });",
									"            ",
									"            //Validate protected header inside Signature",
									"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
									"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
									"            ",
									"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
									"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
									"            });",
									"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
									"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
									"            });",
									"            ",
									"",
									"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
									"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
									"            });",
									"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
									"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
									"            });",
									"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
									"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
									"            });",
									"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
									"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
									"            });",
									"           ",
									"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
									"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
									"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
									"            });",
									"            ",
									"            var jsonData = response.json().data;",
									"            ",
									"            pm.test(\"Response quoteId is  null\", function () {",
									"                pm.expect(jsonData.quoteId).to.eql(undefined);",
									"                ",
									"            });",
									"          ",
									"            pm.test(\"Response ilpPacket is not null\", function () {",
									"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
									"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
									"            });",
									"       ",
									"          pm.test(\"Response condition is not null\", function () {",
									"              pm.expect(jsonData.condition).not.equal(undefined);",
									"              pm.environment.set(\"condition\", jsonData.condition);",
									"          });",
									"      } else {",
									"          pm.test(\"Quote FAILED\", function () {",
									"            throw new Error('Did not receive response on Payer side');",
									"          });",
									"          // postman.setNextRequest(null);",
									"      }",
									"       ",
									"  });",
									"}, 1000)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{PAYERFSP_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiopSignature}}"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"type": "text",
								"value": "POST"
							},
							{
								"key": "FSPIOP-URI",
								"type": "text",
								"value": "/quotes"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{quoteRequest}}"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Transfer - Patch enabled",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb3f60f3-ba60-4957-ae89-9ab36dc4828f",
								"exec": [
									"var navigator = {}; //fake a navigator object for the lib",
									"var window = {}; //fake a window object for the lib",
									"eval(pm.environment.get('jrsassign'));",
									"",
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
									"",
									"",
									"pm.variables.set('transferDate', (new Date()).toUTCString());",
									"",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
									"",
									"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
									"var sHeader = JSON.stringify(oHeader);",
									"console.log(`sHeader: ${sHeader}`)",
									"",
									"var objPayload = {",
									"  \"transferId\": pm.environment.get('transfer_ID'),",
									"  \"payerFsp\": \"payerfsp\",",
									"  \"payeeFsp\": \"payeefsp\",",
									"  \"amount\": {",
									"    \"amount\": \"10\",",
									"    \"currency\": pm.environment.get('currency')",
									"  },",
									"  \"expiration\": pm.environment.get('transferExpiration'),",
									"  \"ilpPacket\": pm.environment.get('ilpPacket'),",
									"  \"condition\": pm.environment.get('condition')",
									"}",
									"var sPayload = JSON.stringify(objPayload)",
									"console.log(`sPayload: ${sPayload}`)",
									"pm.variables.set(\"transferRequest\", sPayload);",
									"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
									"//console.log(`token: ${token}`)",
									"",
									"// var encodedHeaders = btoa(sHeader)",
									"",
									"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
									"// var token = JSON.stringify(ofspiopSignature)",
									"",
									"const [ protectedHeaderBase64, , signature ] = token.split('.');",
									"",
									"const signatureObject = {",
									"    signature: signature.replace('\"', ''),",
									"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
									"};",
									"",
									"console.log(JSON.stringify(signatureObject))",
									"",
									"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "33971788-6e08-4723-8d6c-42e6a6538dba",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"// //Check the request that Switch forwards to payeefsp",
									"// setTimeout(function () {",
									"//   pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"//           if(response.responseSize !== 0) {",
									"              ",
									"//               //Check the Headers",
									"//               var headers = response.json().headers;",
									"              ",
									"//                 pm.test(\"payeefsp fspiop-source is goldenpayerfsp\", function () {",
									"//                     pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
									"//                 });",
									"                ",
									"//                 pm.test(\"payeefsp fspiop-destination is goldenpayeefsp\", function () {",
									"//                     pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
									"//                 });",
									"                ",
									"//                 pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
									"//                     pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.1');",
									"//                 });",
									"                ",
									"//                 pm.test(\"payeefsp accept is same as sent in the request\", function () {",
									"//                     pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');",
									"//                 });",
									"                ",
									"//                 pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
									"//                     pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
									"//                 });",
									"                ",
									"//                 pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
									"//                     pm.expect(headers['fspiop-http-method']).to.eql('POST');",
									"//                 });",
									"                ",
									"//                 pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
									"//                     pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
									"//                 });",
									"                ",
									"                ",
									"//                 //Check the data",
									"//                 var jsonData = response.json().data;",
									"//                 pm.test(\"payeefsp data should have the same transferId as request\", function () {",
									"//                   pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));",
									"//                 });",
									"//                 pm.test(\"payeefsp data should have the same payerfspId as request\", function () {",
									"//                   pm.expect(jsonData.payerFsp).to.eql('payerfsp');",
									"//                 });",
									"//                 pm.test(\"payeefsp data should have the same payeefspId as request\", function () {",
									"//                   pm.expect('payeefsp');",
									"//                 });",
									"//                 pm.test(\"payeefsp data should have the same amount as request\", function () {",
									"//                   pm.expect(jsonData.amount.amount).to.eql('10');",
									"//                 });",
									"//                 pm.test(\"payeefsp data should have the same currency as request\", function () {",
									"//                   pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
									"//                 });",
									"//                 pm.test(\"payeefsp data should have the same expiration as request\", function () {",
									"//                   pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
									"//                 });",
									"//                 pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
									"//                   pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
									"//                 });",
									"//                 pm.test(\"payeefsp data should have the same condition as request\", function () {",
									"//                   pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
									"//                 });",
									"                ",
									"//           } else {",
									"//               pm.test(\"Transfer FAILED\", function () {",
									"//                 throw new Error('Did not receive response on payee side');",
									"//               });",
									"//               // postman.setNextRequest(null)",
									"//           }",
									"//   });",
									"// }, 50)",
									"",
									"//Check the callback response that Switch forwards to payerfsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"            //Checking headers",
									"            var headers = response.json().headers;",
									"            pm.test(\"payerfsp fspiop-source is payeefsp \", function () {",
									"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
									"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.1\", function () {",
									"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.1');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp accept is empty\", function () {",
									"                pm.expect(headers['accept']).to.eql(undefined);",
									"            });",
									"            ",
									"            ",
									"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
									"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
									"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
									"            });",
									"            ",
									"            var jsonData = response.json().data;",
									"            pm.test(\"Response data does not have transferId\", function () {",
									"               pm.expect(jsonData.transferId).to.eql(undefined);",
									"            });",
									"            pm.test(\"Response status is COMMITTED\", function () {",
									"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
									"            });",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response on payer side');",
									"              });",
									"              // postman.setNextRequest(null)",
									"          }",
									"   });",
									"}, 6000)",
									"",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"        if(response.responseSize !== 0) {",
									"",
									"///////",
									"            var headers = response.json().headers;",
									"            pm.test(\"fspiop-source is switch \", function () {",
									"                pm.expect(headers['fspiop-source']).to.eql('switch');",
									"            });",
									"            ",
									"            pm.test(\"payeefsp fspiop-destination is goldenpayerfsp\", function () {",
									"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
									"            });",
									"            ",
									"            pm.test(\"payeefsp content-type should be application/vnd.interoperability.transfers+json;version=1.1\", function () {",
									"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.1');",
									"            });",
									"            ",
									"            pm.test(\"payeefsp accept is empty\", function () {",
									"                pm.expect(headers['accept']).to.eql(undefined);",
									"            });",
									"            ",
									"            ",
									"            pm.test(\"payeefsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
									"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
									"            });",
									"            ",
									"            pm.test(\"payeefsp fspiop-http-method is PATCH\", function () {",
									"                pm.expect(headers['fspiop-http-method']).to.eql('PATCH');",
									"            });",
									"            ",
									"            var jsonData = response.json().data;",
									"            pm.test(\"Response data does not have transferId\", function () {",
									"                pm.expect(jsonData.transferId).to.eql(undefined);",
									"            });",
									"            pm.test(\"Response status is COMMITTED\", function () {",
									"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
									"            });",
									"",
									"",
									"///////",
									"           ",
									"        } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive additional payee notification side');",
									"              });",
									"        }",
									"       ",
									"      ",
									"    });",
									"}, 7000)",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{PAYERFSP_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.1"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiopSignature}}"
							},
							{
								"key": "FSPIOP-URI",
								"type": "text",
								"value": "/transfers"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"type": "text",
								"value": "POST"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{transferRequest}}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Transfer - Patch disabled",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f6005657-3753-45c2-b44a-88267b1d9438",
								"exec": [
									"var navigator = {}; //fake a navigator object for the lib",
									"var window = {}; //fake a window object for the lib",
									"eval(pm.environment.get('jrsassign'));",
									"",
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
									"",
									"",
									"pm.variables.set('transferDate', (new Date()).toUTCString());",
									"",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
									"",
									"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
									"var sHeader = JSON.stringify(oHeader);",
									"console.log(`sHeader: ${sHeader}`)",
									"",
									"var objPayload = {",
									"  \"transferId\": pm.environment.get('transfer_ID'),",
									"  \"payerFsp\": \"payerfsp\",",
									"  \"payeeFsp\": \"payeefsp\",",
									"  \"amount\": {",
									"    \"amount\": \"10\",",
									"    \"currency\": pm.environment.get('currency')",
									"  },",
									"  \"expiration\": pm.environment.get('transferExpiration'),",
									"  \"ilpPacket\": pm.environment.get('ilpPacket'),",
									"  \"condition\": pm.environment.get('condition')",
									"}",
									"var sPayload = JSON.stringify(objPayload)",
									"console.log(`sPayload: ${sPayload}`)",
									"pm.variables.set(\"transferRequest\", sPayload);",
									"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
									"//console.log(`token: ${token}`)",
									"",
									"// var encodedHeaders = btoa(sHeader)",
									"",
									"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
									"// var token = JSON.stringify(ofspiopSignature)",
									"",
									"const [ protectedHeaderBase64, , signature ] = token.split('.');",
									"",
									"const signatureObject = {",
									"    signature: signature.replace('\"', ''),",
									"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
									"};",
									"",
									"console.log(JSON.stringify(signatureObject))",
									"",
									"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "29f018c4-1896-4f57-8315-669c864ad867",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"// //Check the request that Switch forwards to payeefsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"              ",
									"              //Check the Headers",
									"              var headers = response.json().headers;",
									"              ",
									"                pm.test(\"payeefsp fspiop-source is goldenpayerfsp\", function () {",
									"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-destination is goldenpayeefsp\", function () {",
									"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
									"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.1');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
									"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
									"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
									"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
									"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
									"                });",
									"                ",
									"                ",
									"                //Check the data",
									"                var jsonData = response.json().data;",
									"                pm.test(\"payeefsp data should have the same transferId as request\", function () {",
									"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same payerfspId as request\", function () {",
									"                  pm.expect(jsonData.payerFsp).to.eql('payerfsp');",
									"                });",
									"                pm.test(\"payeefsp data should have the same payeefspId as request\", function () {",
									"                  pm.expect('payeefsp');",
									"                });",
									"                pm.test(\"payeefsp data should have the same amount as request\", function () {",
									"                  pm.expect(jsonData.amount.amount).to.eql('10');",
									"                });",
									"                pm.test(\"payeefsp data should have the same currency as request\", function () {",
									"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same expiration as request\", function () {",
									"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
									"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
									"                });",
									"                pm.test(\"payeefsp data should have the same condition as request\", function () {",
									"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
									"                });",
									"                ",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response on payee side');",
									"              });",
									"              // postman.setNextRequest(null)",
									"          }",
									"  });",
									"}, 1100)",
									"",
									"//Check the callback response that Switch forwards to payerfsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"            //Checking headers",
									"            var headers = response.json().headers;",
									"            pm.test(\"payerfsp fspiop-source is payeefsp \", function () {",
									"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
									"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.1\", function () {",
									"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.1');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp accept is empty\", function () {",
									"                pm.expect(headers['accept']).to.eql(undefined);",
									"            });",
									"            ",
									"            ",
									"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
									"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
									"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
									"            });",
									"            ",
									"            var jsonData = response.json().data;",
									"            pm.test(\"Response data does not have transferId\", function () {",
									"               pm.expect(jsonData.transferId).to.eql(undefined);",
									"            });",
									"            pm.test(\"Response status is COMMITTED\", function () {",
									"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
									"            });",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response on payer side');",
									"              });",
									"              // postman.setNextRequest(null)",
									"          }",
									"   });",
									"}, 13000)",
									"",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"       pm.test(\"payeefsp does not receive additional final notification\", function () {",
									"            if (response) {",
									"                var jsonData = response.json().data;",
									"                pm.test(\"notification for committed transfer is missing\", function () {",
									"                    pm.expect(jsonData.transferState).to.eql(undefined);",
									"                })",
									"            }",
									"        });",
									"       ",
									"      ",
									"    });",
									"}, 20000)",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{PAYERFSP_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1.1"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "payeefsp"
							},
							{
								"key": "FSPIOP-Signature",
								"type": "text",
								"value": "{{fspiopSignature}}"
							},
							{
								"key": "FSPIOP-URI",
								"type": "text",
								"value": "/transfers"
							},
							{
								"key": "FSPIOP-HTTP-Method",
								"type": "text",
								"value": "POST"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{transferRequest}}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "af523062-cd03-4752-8159-17fe8c5f6468",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f5b18fed-8243-4316-aac3-290caba28815",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}