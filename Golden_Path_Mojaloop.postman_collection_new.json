{
	"info": {
		"_postman_id": "d40456f0-38b3-48a3-a874-8813b5c53153",
		"name": "Golden_Path_Mojaloop",
		"description": "Author: Sridevi Miriyala\nDescription: Golden Path Tests using Mojaloop Simulators",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "funds in before all transfers",
			"item": [
				{
					"name": "Deposit Funds in Settlement Account - Payerfsp",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "35aa5736-dda5-4794-8872-de3fc88029a7",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('fundsInPrepareTransferId', generatedUUID);",
									"pm.environment.set('fundsInPrepareAmount', 100000);",
									"",
									"",
									"const payerfspGetStatusRequest = {",
									"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/payerfsp/accounts',",
									"  method: 'GET',",
									"  header: {",
									"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"      \"Content-Type\": \"application/json\"",
									"  }",
									"};",
									"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
									"    console.log(response.json())",
									"    var jsonData = response.json()",
									"    for(var i in jsonData) {",
									"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && jsonData[i].currency === pm.environment.get('currency')) {",
									"            pm.environment.set(\"payerfspSettlementAccountId\",jsonData[i].id)",
									"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsIn\",jsonData[i].value)",
									"        }",
									"    }",
									"});",
									"",
									"const hubGetStatusRequest = {",
									"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
									"  method: 'GET',",
									"  header: {",
									"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"      \"Content-Type\": \"application/json\"",
									"  }",
									"};",
									"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
									"    console.log(response.json())",
									"    //var jsonData = response.json()",
									"    response.json()",
									"        .filter( ledgerAccount => (ledgerAccount.currency === pm.environment.get('currency') && ledgerAccount.ledgerAccountType === 'HUB_RECONCILIATION'))",
									"        .forEach(account => pm.environment.set(\"hubReconAccountBalanceBeforeFundsIn\",account.value))",
									"    // for(var i in jsonData) {",
									"    //     if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') {",
									"    //         pm.environment.set(\"hubReconAccountBalanceBeforeFundsIn\",jsonData[i].value)",
									"    //     }",
									"    // }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "faa849b5-9e94-411f-a306-7409b2ca2a4a",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(function () {",
									"    const payerfspGetStatusRequest = {",
									"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
									"      method: 'GET',",
									"      header: {",
									"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"          \"Content-Type\": \"application/json\"",
									"      }",
									"    };",
									"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
									"        console.log(response.json())",
									"        var jsonData = response.json()",
									"        var payerfspSettlementAccountBalanceAfterFundsIn",
									"        for(var i in jsonData) {",
									"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT'  && jsonData[i].currency === pm.environment.get('currency')) {",
									"                payerfspSettlementAccountBalanceAfterFundsIn = jsonData[i].value",
									"            }",
									"        }",
									"        var payerfspExpectedBalance = pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsIn') - pm.environment.get('fundsInPrepareAmount')",
									"        pm.test(\"Final Payerfsp Settlement Account Balance should be same as before FundsIn + fundsInPrepareAmount\", function () {",
									"            pm.expect(payerfspSettlementAccountBalanceAfterFundsIn).to.eql(payerfspExpectedBalance);",
									"          });    ",
									"    ",
									"    });",
									"    ",
									"    const hubGetStatusRequest = {",
									"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
									"      method: 'GET',",
									"      header: {",
									"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"          \"Content-Type\": \"application/json\"",
									"      }",
									"    };",
									"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
									"        console.log(response.json())",
									"        var jsonData = response.json()",
									"        var currentHubReconAccountBalance",
									"        response.json()",
									"        .filter( ledgerAccount => (ledgerAccount.currency === pm.environment.get('currency') && ledgerAccount.ledgerAccountType === 'HUB_RECONCILIATION'))",
									"        .forEach(account => hubReconAccountBalanceAfterFundsIn = account.value)",
									"        // for(var i in jsonData) {",
									"        //     if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') {",
									"        //         hubReconAccountBalanceAfterFundsIn = jsonData[i].value",
									"        //     }",
									"        // }",
									"        var hubExpectedBalance = pm.environment.get(\"hubReconAccountBalanceBeforeFundsIn\")+pm.environment.get('fundsInPrepareAmount')",
									"        console.log(hubExpectedBalance)",
									"        pm.test(\"Final Hub Reconciliation Account Balance should increase by FundsIn Amount\", function () {",
									"            pm.expect(hubReconAccountBalanceAfterFundsIn).to.eql(hubExpectedBalance);",
									"          });  ",
									"    });",
									"}, 2000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "FSPIOP-Source",
								"type": "text",
								"value": "{{hub_operator}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{fundsInPrepareTransferId}}\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsIn\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": {{fundsInPrepareAmount}},\n    \"currency\": \"{{currency}}\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}",
								"accounts",
								"{{payerfspSettlementAccountId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deposit Funds in Settlement Account - Payeefsp",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "27b5776c-7a03-45d0-b5e5-a9e6df8ba3a6",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('fundsInPrepareTransferId', generatedUUID);",
									"pm.environment.set('fundsInPrepareAmount', 100000);",
									"",
									"",
									"const payeefspGetStatusRequest = {",
									"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/payeefsp/accounts',",
									"  method: 'GET',",
									"  header: {",
									"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"      \"Content-Type\": \"application/json\"",
									"  }",
									"};",
									"pm.sendRequest(payeefspGetStatusRequest, function (err, response) {",
									"    console.log(response.json())",
									"    var jsonData = response.json()",
									"    for(var i in jsonData) {",
									"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT'  && jsonData[i].currency === pm.environment.get('currency')) {",
									"            pm.environment.set(\"payeefspSettlementAccountId\",jsonData[i].id)",
									"            pm.environment.set(\"payeefspSettlementAccountBalanceBeforeFundsIn\",jsonData[i].value)",
									"        }",
									"    }",
									"});",
									"",
									"const hubGetStatusRequest = {",
									"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
									"  method: 'GET',",
									"  header: {",
									"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"      \"Content-Type\": \"application/json\"",
									"  }",
									"};",
									"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
									"    console.log(response.json())",
									"    //var jsonData = response.json()",
									"    response.json()",
									"        .filter( ledgerAccount => (ledgerAccount.currency === pm.environment.get('currency') && ledgerAccount.ledgerAccountType === 'HUB_RECONCILIATION'))",
									"        .forEach(account => pm.environment.set(\"hubReconAccountBalanceBeforeFundsIn\",account.value))",
									"    // for(var i in jsonData) {",
									"    //     if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') {",
									"    //         pm.environment.set(\"hubReconAccountBalanceBeforeFundsIn\",jsonData[i].value)",
									"    //     }",
									"    // }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9e224f61-99c5-4268-9144-dca47cc52311",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(function () {",
									"    const payeefspGetStatusRequest = {",
									"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payeefsp\")+'/accounts',",
									"      method: 'GET',",
									"      header: {",
									"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"          \"Content-Type\": \"application/json\"",
									"      }",
									"    };",
									"    pm.sendRequest(payeefspGetStatusRequest, function (err, response) {",
									"        console.log(response.json())",
									"        var jsonData = response.json()",
									"        var payeefspSettlementAccountBalanceAfterFundsIn",
									"        for(var i in jsonData) {",
									"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT'  && jsonData[i].currency === pm.environment.get('currency')) {",
									"                payeefspSettlementAccountBalanceAfterFundsIn = jsonData[i].value",
									"            }",
									"        }",
									"        var payeefspExpectedBalance = pm.environment.get('payeefspSettlementAccountBalanceBeforeFundsIn') - pm.environment.get('fundsInPrepareAmount')",
									"        pm.test(\"Final payeefsp Settlement Account Balance should be same as before FundsIn + fundsInPrepareAmount\", function () {",
									"            pm.expect(payeefspSettlementAccountBalanceAfterFundsIn).to.eql(payeefspExpectedBalance);",
									"          });    ",
									"    ",
									"    });",
									"    ",
									"    const hubGetStatusRequest = {",
									"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
									"      method: 'GET',",
									"      header: {",
									"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"          \"Content-Type\": \"application/json\"",
									"      }",
									"    };",
									"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
									"        console.log(response.json())",
									"        var jsonData = response.json()",
									"        var currentHubReconAccountBalance",
									"        response.json()",
									"        .filter( ledgerAccount => (ledgerAccount.currency === pm.environment.get('currency') && ledgerAccount.ledgerAccountType === 'HUB_RECONCILIATION'))",
									"        .forEach(account => hubReconAccountBalanceAfterFundsIn = account.value)",
									"        // for(var i in jsonData) {",
									"        //     if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') {",
									"        //         hubReconAccountBalanceAfterFundsIn = jsonData[i].value",
									"        //     }",
									"        // }",
									"        var hubExpectedBalance = pm.environment.get(\"hubReconAccountBalanceBeforeFundsIn\")+pm.environment.get('fundsInPrepareAmount')",
									"        console.log(hubExpectedBalance)",
									"        pm.test(\"Final Hub Reconciliation Account Balance should increase by FundsIn Amount\", function () {",
									"            pm.expect(hubReconAccountBalanceAfterFundsIn).to.eql(hubExpectedBalance);",
									"          });  ",
									"    });",
									"}, 2000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "FSPIOP-Source",
								"type": "text",
								"value": "{{hub_operator}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{fundsInPrepareTransferId}}\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsIn\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": {{fundsInPrepareAmount}},\n    \"currency\": \"{{currency}}\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/accounts/{{payeefspSettlementAccountId}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
							],
							"path": [
								"participants",
								"{{payeefsp}}",
								"accounts",
								"{{payeefspSettlementAccountId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deposit Funds in Settlement Account - testfsp1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7df7b85c-8707-4397-8b6e-4b7c7757f848",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('fundsInPrepareTransferId', generatedUUID);",
									"pm.environment.set('fundsInPrepareAmount', 100000);",
									"",
									"",
									"const testfsp1GetStatusRequest = {",
									"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/testfsp1/accounts',",
									"  method: 'GET',",
									"  header: {",
									"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"      \"Content-Type\": \"application/json\"",
									"  }",
									"};",
									"pm.sendRequest(testfsp1GetStatusRequest, function (err, response) {",
									"    console.log(response.json())",
									"    var jsonData = response.json()",
									"    for(var i in jsonData) {",
									"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT'  && jsonData[i].currency === pm.environment.get('currency')) {",
									"            pm.environment.set(\"testfsp1SettlementAccountId\",jsonData[i].id)",
									"            pm.environment.set(\"testfsp1SettlementAccountBalanceBeforeFundsIn\",jsonData[i].value)",
									"        }",
									"    }",
									"});",
									"",
									"const hubGetStatusRequest = {",
									"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
									"  method: 'GET',",
									"  header: {",
									"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"      \"Content-Type\": \"application/json\"",
									"  }",
									"};",
									"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
									"    console.log(response.json())",
									"    //var jsonData = response.json()",
									"    response.json()",
									"        .filter( ledgerAccount => (ledgerAccount.currency === pm.environment.get('currency') && ledgerAccount.ledgerAccountType === 'HUB_RECONCILIATION'))",
									"        .forEach(account => pm.environment.set(\"hubReconAccountBalanceBeforeFundsIn\",account.value))",
									"    // for(var i in jsonData) {",
									"    //     if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') {",
									"    //         pm.environment.set(\"hubReconAccountBalanceBeforeFundsIn\",jsonData[i].value)",
									"    //     }",
									"    // }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "40299a7a-4e77-41c4-8b13-bdaf4892c26c",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(function () {",
									"    const testfsp1GetStatusRequest = {",
									"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/testfsp1/accounts',",
									"      method: 'GET',",
									"      header: {",
									"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"          \"Content-Type\": \"application/json\"",
									"      }",
									"    };",
									"    pm.sendRequest(testfsp1GetStatusRequest, function (err, response) {",
									"        console.log(response.json())",
									"        var jsonData = response.json()",
									"        var testfsp1SettlementAccountBalanceAfterFundsIn",
									"        for(var i in jsonData) {",
									"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT'  && jsonData[i].currency === pm.environment.get('currency')) {",
									"                testfsp1SettlementAccountBalanceAfterFundsIn = jsonData[i].value",
									"            }",
									"        }",
									"        var testfsp1ExpectedBalance = pm.environment.get('testfsp1SettlementAccountBalanceBeforeFundsIn') - pm.environment.get('fundsInPrepareAmount')",
									"        pm.test(\"Final testfsp1 Settlement Account Balance should be same as before FundsIn + fundsInPrepareAmount\", function () {",
									"            pm.expect(testfsp1SettlementAccountBalanceAfterFundsIn).to.eql(testfsp1ExpectedBalance);",
									"          });    ",
									"    ",
									"    });",
									"    ",
									"    const hubGetStatusRequest = {",
									"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
									"      method: 'GET',",
									"      header: {",
									"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"          \"Content-Type\": \"application/json\"",
									"      }",
									"    };",
									"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
									"        console.log(response.json())",
									"        var jsonData = response.json()",
									"        var currentHubReconAccountBalance",
									"        response.json()",
									"        .filter( ledgerAccount => (ledgerAccount.currency === pm.environment.get('currency') && ledgerAccount.ledgerAccountType === 'HUB_RECONCILIATION'))",
									"        .forEach(account => hubReconAccountBalanceAfterFundsIn = account.value)",
									"        // for(var i in jsonData) {",
									"        //     if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') {",
									"        //         hubReconAccountBalanceAfterFundsIn = jsonData[i].value",
									"        //     }",
									"        // }",
									"        var hubExpectedBalance = pm.environment.get(\"hubReconAccountBalanceBeforeFundsIn\")+pm.environment.get('fundsInPrepareAmount')",
									"        console.log(hubExpectedBalance)",
									"        pm.test(\"Final Hub Reconciliation Account Balance should increase by FundsIn Amount\", function () {",
									"            pm.expect(hubReconAccountBalanceAfterFundsIn).to.eql(hubExpectedBalance);",
									"          });  ",
									"    });",
									"}, 2000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "FSPIOP-Source",
								"type": "text",
								"value": "{{hub_operator}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{fundsInPrepareTransferId}}\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsIn\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": {{fundsInPrepareAmount}},\n    \"currency\": \"{{currency}}\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts/{{testfsp1SettlementAccountId}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
							],
							"path": [
								"participants",
								"testfsp1",
								"accounts",
								"{{testfsp1SettlementAccountId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deposit Funds in Settlement Account - testfsp2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3d5294a6-0cf9-44ad-9fcf-334cc1b42390",
								"exec": [
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('fundsInPrepareTransferId', generatedUUID);",
									"pm.environment.set('fundsInPrepareAmount', 100000);",
									"",
									"",
									"const testfsp2GetStatusRequest = {",
									"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/testfsp2/accounts',",
									"  method: 'GET',",
									"  header: {",
									"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"      \"Content-Type\": \"application/json\"",
									"  }",
									"};",
									"pm.sendRequest(testfsp2GetStatusRequest, function (err, response) {",
									"    console.log(response.json())",
									"    var jsonData = response.json()",
									"    for(var i in jsonData) {",
									"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT'  && jsonData[i].currency === pm.environment.get('currency')) {",
									"            pm.environment.set(\"testfsp2SettlementAccountId\",jsonData[i].id)",
									"            pm.environment.set(\"testfsp2SettlementAccountBalanceBeforeFundsIn\",jsonData[i].value)",
									"        }",
									"    }",
									"});",
									"",
									"const hubGetStatusRequest = {",
									"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
									"  method: 'GET',",
									"  header: {",
									"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"      \"Content-Type\": \"application/json\"",
									"  }",
									"};",
									"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
									"    console.log(response.json())",
									"    //var jsonData = response.json()",
									"    response.json()",
									"        .filter( ledgerAccount => (ledgerAccount.currency === pm.environment.get('currency') && ledgerAccount.ledgerAccountType === 'HUB_RECONCILIATION'))",
									"        .forEach(account => pm.environment.set(\"hubReconAccountBalanceBeforeFundsIn\",account.value))",
									"    // for(var i in jsonData) {",
									"    //     if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') {",
									"    //         pm.environment.set(\"hubReconAccountBalanceBeforeFundsIn\",jsonData[i].value)",
									"    //     }",
									"    // }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c6d8c32c-fd7c-4355-9c71-562643f7002e",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"setTimeout(function () {",
									"    const testfsp2GetStatusRequest = {",
									"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/testfsp2/accounts',",
									"      method: 'GET',",
									"      header: {",
									"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"          \"Content-Type\": \"application/json\"",
									"      }",
									"    };",
									"    pm.sendRequest(testfsp2GetStatusRequest, function (err, response) {",
									"        console.log(response.json())",
									"        var jsonData = response.json()",
									"        var testfsp2SettlementAccountBalanceAfterFundsIn",
									"        for(var i in jsonData) {",
									"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT'  && jsonData[i].currency === pm.environment.get('currency')) {",
									"                testfsp2SettlementAccountBalanceAfterFundsIn = jsonData[i].value",
									"            }",
									"        }",
									"        var testfsp2ExpectedBalance = pm.environment.get('testfsp2SettlementAccountBalanceBeforeFundsIn') - pm.environment.get('fundsInPrepareAmount')",
									"        pm.test(\"Final testfsp2 Settlement Account Balance should be same as before FundsIn + fundsInPrepareAmount\", function () {",
									"            pm.expect(testfsp2SettlementAccountBalanceAfterFundsIn).to.eql(testfsp2ExpectedBalance);",
									"          });    ",
									"    ",
									"    });",
									"    ",
									"    const hubGetStatusRequest = {",
									"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
									"      method: 'GET',",
									"      header: {",
									"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
									"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
									"          \"Content-Type\": \"application/json\"",
									"      }",
									"    };",
									"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
									"        console.log(response.json())",
									"        var jsonData = response.json()",
									"        var currentHubReconAccountBalance",
									"        response.json()",
									"        .filter( ledgerAccount => (ledgerAccount.currency === pm.environment.get('currency') && ledgerAccount.ledgerAccountType === 'HUB_RECONCILIATION'))",
									"        .forEach(account => hubReconAccountBalanceAfterFundsIn = account.value)",
									"        // for(var i in jsonData) {",
									"        //     if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') {",
									"        //         hubReconAccountBalanceAfterFundsIn = jsonData[i].value",
									"        //     }",
									"        // }",
									"        var hubExpectedBalance = pm.environment.get(\"hubReconAccountBalanceBeforeFundsIn\")+pm.environment.get('fundsInPrepareAmount')",
									"        console.log(hubExpectedBalance)",
									"        pm.test(\"Final Hub Reconciliation Account Balance should increase by FundsIn Amount\", function () {",
									"            pm.expect(hubReconAccountBalanceAfterFundsIn).to.eql(hubExpectedBalance);",
									"          });  ",
									"    });",
									"}, 2000)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "FSPIOP-Source",
								"type": "text",
								"value": "{{hub_operator}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{fundsInPrepareTransferId}}\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsIn\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": {{fundsInPrepareAmount}},\n    \"currency\": \"{{currency}}\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts/{{testfsp2SettlementAccountId}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
							],
							"path": [
								"participants",
								"testfsp2",
								"accounts",
								"{{testfsp2SettlementAccountId}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "feature-tests",
			"item": [
				{
					"name": "p2p_money_transfer",
					"item": [
						{
							"name": "p2p_happy_path_RECEIVE_quote",
							"item": [
								{
									"name": "Download JWS Signature Generation Package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "680f6044-b4d6-44ec-bcc4-3e6a5b3d8f6a",
												"exec": [
													"",
													"pm.environment.set(\"jrsassign\", pm.response.text());",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js",
											"protocol": "http",
											"host": [
												"kjur",
												"github",
												"io"
											],
											"path": [
												"jsrsasign",
												"jsrsasign-latest-all-min.js"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add {{payeefspMSISDN}} to payeefsp",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e7d4abe8-42ea-4515-8d98-a56817a829b3",
												"exec": [
													"pm.environment.set('fullName', 'PayeeFirst PayeeLast');",
													"pm.environment.set('firstName', 'PayeeFirst');",
													"pm.environment.set('middleName', 'PayeeMiddle');",
													"pm.environment.set('lastName', 'PayeeLast');",
													"pm.environment.set('dob', '2010-10-10');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0070dff7-5c3d-438a-9e5b-88e0024dbba3",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([204, 500]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"displayName\": \"{{fullName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"dateOfBirth\": \"{{dob}}\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"{{payeefspMSISDN}}\"\n}"
										},
										"url": {
											"raw": "{{PAYEEFSP_BACKEND_TESTAPI_URL}}/repository/parties",
											"host": [
												"{{PAYEEFSP_BACKEND_TESTAPI_URL}}"
											],
											"path": [
												"repository",
												"parties"
											]
										},
										"description": "Create a party in payeefsp. So that GET /parties can be successful."
									},
									"response": []
								},
								{
									"name": "Get Party - MSISDN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af302e86-9f1c-4467-b455-a9564b12600d",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"//Check data on payee side",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.variables.get(\"payeefspMSISDN\"), function (err, response) {",
													"       ",
													"       if(response.responseSize !== 0) { ",
													"       //Checking headers",
													"        var headers = response.json().headers;",
													"        pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
													"            pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"        });",
													"        ",
													"        pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
													"            pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"        });",
													"        ",
													"        pm.test(\"payeefsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
													"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
													"        });",
													"        ",
													"        pm.test(\"payeefsp accept should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
													"            pm.expect(headers['accept']).to.match(/application\\/vnd\\.interoperability\\.parties\\+json;version=1(\\.0)?/);",
													"        });",
													"        ",
													"        ",
													"        pm.test.skip(\"payeefsp FSPIOP-URI to be /parties\", function () {",
													"            pm.expect(headers['fspiop-uri']).to.eql('/parties');",
													"        });",
													"        ",
													"        pm.test.skip(\"payeefsp fspiop-http-method is GET\", function () {",
													"            pm.expect(headers['fspiop-http-method']).to.eql('GET');",
													"        });",
													"        ",
													"        ",
													"        ",
													"       } else {",
													"           pm.test(\"Parties FAILED - payeeFSP\", function () {",
													"            throw new Error('Did not receive response');",
													"           });",
													"           ",
													"       }",
													"      ",
													"    });",
													"}, 100)",
													"",
													"//Check data on payer side",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.variables.get(\"payeefspMSISDN\"), function (err, response) {",
													"       ",
													"       if(response.responseSize !== 0) { ",
													"       //Checking headers",
													"        var headers = response.json().headers;",
													"        pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
													"            pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"        });",
													"        ",
													"        pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
													"            pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"        });",
													"        ",
													"        pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
													"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
													"        });",
													"        ",
													"        pm.test(\"payerfsp accept is empty\", function () {",
													"            pm.expect(headers['accept']).to.eql(undefined);",
													"        });",
													"        ",
													"        ",
													"        ",
													"        //Validate protected header inside Signature",
													"        var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"        var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"        console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"        ",
													"        // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
													"        //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
													"        // });",
													"        ",
													"        pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"            pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"        });",
													"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"payeefspMSISDN\"), function () {",
													"            pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/'+pm.environment.get(\"payeefspMSISDN\"));",
													"        });",
													"        ",
													"",
													"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"            pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"        });",
													"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
													"            pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
													"        });",
													"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
													"            pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
													"        });",
													"        pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"            pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
													"        });",
													"       ",
													"        //pm.test(\"payerfsp FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
													"        //    pm.expect(headers['fspiop-uri']).to.eql('/parties/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
													"        //});",
													"        ",
													"        pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"            pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"        });",
													"        ",
													"        //Checking data",
													"        var jsonData = response.json().data;",
													"       pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
													"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
													"        });",
													"        pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
													"          pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
													"        });",
													"        pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
													"          pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
													"        });  ",
													"        ",
													"       } else {",
													"           pm.test(\"Parties FAILED - payerFSP\", function () {",
													"            throw new Error('Did not receive response');",
													"           });",
													"           ",
													"       }",
													"      ",
													"    });",
													"}, 200)",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "270cd9d6-dc2d-4268-be2b-2085f4f88c2f",
												"exec": [
													"pm.variables.set('expectedFullName', 'PayeeFirst PayeeLast');",
													"pm.variables.set('expectedFirstName', 'PayeeFirst');",
													"pm.variables.set('expectedLastName', 'PayeeLast');",
													"pm.variables.set('expectedDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.parties+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.parties+json;version=1.0"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "Date",
												"value": "{{dateHeader}}"
											},
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{payeefspMSISDN}}",
											"host": [
												"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
											],
											"path": [
												"parties",
												"MSISDN",
												"{{payeefspMSISDN}}"
											]
										},
										"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
									},
									"response": []
								},
								{
									"name": "Send Quote - RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "61520b1a-038e-477d-a54f-7b2962e52344",
												"exec": [
													"var navigator = {}; ",
													"var window = {}; ",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
													"      \"fspId\": \"payerfsp\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"      \"dateOfBirth\": \"1983-10-25\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
													"      \"fspId\": \"payeefsp\"",
													"    }",
													"  },",
													"  \"amountType\": \"RECEIVE\",",
													"  \"amount\": {",
													"    \"amount\": \"60\",",
													"    \"currency\": pm.environment.get('currency')",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3adecd52-7380-44f7-9b56-3d357f93e17a",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              ",
													"              //Check the Headers",
													"              var headers = response.json().headers;",
													"              ",
													"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
													"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
													"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
													"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
													"                });",
													"                ",
													"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
													"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
													"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {",
													"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
													"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
													"                });",
													"                ",
													"          } else {",
													"              pm.test(\"Quote FAILED\", function () {",
													"                throw new Error('Did not receive request on payee side');",
													"              });",
													"              // postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 1100)",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
													"      if(response.responseSize !== 0) {",
													"          //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            ",
													"            ",
													"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"            // var strData = JSON.stringify(response.json().data)",
													"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
													"            // console.log(`token: ${token}`)",
													"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
													"            // console.log(`isValid: ${isValid}`)",
													"            // pm.test(\"Check if the response is JWS valid\", function () {",
													"            //     pm.expect(isValid).to.eql(true);",
													"            // });",
													"            ",
													"            //Validate protected header inside Signature",
													"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"            ",
													"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"            });",
													"            ",
													"",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);",
													"            });",
													"           ",
													"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            ",
													"            pm.test(\"Response quoteId is  null\", function () {",
													"                pm.expect(jsonData.quoteId).to.eql(undefined);",
													"                ",
													"            });",
													"          ",
													"            pm.test(\"Response ilpPacket is not null\", function () {",
													"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
													"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
													"            });",
													"       ",
													"           pm.test(\"Response condition is not null\", function () {",
													"               pm.expect(jsonData.condition).not.equal(undefined);",
													"               pm.environment.set(\"condition\", jsonData.condition);",
													"           });",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('Did not receive response on Payer side');",
													"           });",
													"           // postman.setNextRequest(null);",
													"      }",
													"       ",
													"   });",
													"}, 1000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "payeefsp"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Transfer - RECEIVE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4dfec43a-2435-488c-8060-780f59bcb63c",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// //Check the request that Switch forwards to payeefsp",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              ",
													"              //Check the Headers",
													"              var headers = response.json().headers;",
													"              ",
													"                pm.test(\"payeefsp fspiop-source is goldenpayerfsp\", function () {",
													"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-destination is goldenpayeefsp\", function () {",
													"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
													"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
													"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
													"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
													"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
													"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
													"                });",
													"                ",
													"                ",
													"                //Check the data",
													"                var jsonData = response.json().data;",
													"                pm.test(\"payeefsp data should have the same transferId as request\", function () {",
													"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));",
													"                });",
													"                pm.test(\"payeefsp data should have the same payerfspId as request\", function () {",
													"                  pm.expect(jsonData.payerFsp).to.eql('payerfsp');",
													"                });",
													"                pm.test(\"payeefsp data should have the same payeefspId as request\", function () {",
													"                  pm.expect('payeefsp');",
													"                });",
													"                pm.test(\"payeefsp data should have the same amount as request\", function () {",
													"                  pm.expect(jsonData.amount.amount).to.eql('10');",
													"                });",
													"                pm.test(\"payeefsp data should have the same currency as request\", function () {",
													"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
													"                });",
													"                pm.test(\"payeefsp data should have the same expiration as request\", function () {",
													"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
													"                });",
													"                pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
													"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
													"                });",
													"                pm.test(\"payeefsp data should have the same condition as request\", function () {",
													"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
													"                });",
													"                ",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response on payee side');",
													"              });",
													"              // postman.setNextRequest(null)",
													"          }",
													"  });",
													"}, 1100)",
													"",
													"//Check the callback response that Switch forwards to payerfsp",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"            //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is goldenpayeefsp \", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-signature is not empty\", function () {",
													"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
													"                });",
													"            ",
													"            ",
													"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            pm.test(\"Response data does not have transferId\", function () {",
													"               pm.expect(jsonData.transferId).to.eql(undefined);",
													"            });",
													"            pm.test(\"Response status is COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"            });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response on payer side');",
													"              });",
													"              // postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 1300)",
													"",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
													"       pm.test(\"payeefsp does not receive additional final notification\", function () {",
													"            pm.expect(response.text()).to.eql('');",
													"        });",
													"       ",
													"      ",
													"    });",
													"}, 2000)",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "541540d1-3e37-4b60-867d-e37a3ead8478",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"transferId\": pm.environment.get('transfer_ID'),",
													"  \"payerFsp\": \"payerfsp\",",
													"  \"payeeFsp\": \"payeefsp\",",
													"  \"amount\": {",
													"    \"amount\": \"10\",",
													"    \"currency\": pm.environment.get('currency')",
													"  },",
													"  \"expiration\": pm.environment.get('transferExpiration'),",
													"  \"ilpPacket\": pm.environment.get('ilpPacket'),",
													"  \"condition\": pm.environment.get('condition')",
													"}",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"transferRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
													"//console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "payeefsp"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/transfers"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transferRequest}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Transfer_SEND_quote",
							"item": [
								{
									"name": "Get payerfsp position before TheTransfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2a8f7cfd-6e28-4bbb-bc63-a40b23d31de1",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"",
													"for (var i in jsonData) {",
													"  if (jsonData[i].currency === pm.environment.get('currency')) {",
													"    pm.test(\"Atleast one account position should be returned\", function () {",
													"      pm.environment.set(\"payerfspPositionBeforeTransferhp\", jsonData[i].value);",
													"      pm.expect(jsonData).to.be.not.empty;",
													"    });",
													"  }",
													"",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "hub_operator",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"positions"
											]
										},
										"description": "We will capture the initial position for Payerfsp before the transfer and will save this value in a variable  payerfspPositionBeforeTransferhp"
									},
									"response": []
								},
								{
									"name": "Get payeefsp position before TheTransfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5665f483-57d3-4898-ac6d-9a550deede1d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"",
													"for (var i in jsonData) {",
													"  if (jsonData[i].currency === pm.environment.get('currency')) {",
													"    pm.test(\"Atleast one account position should be returned\", function () {",
													"      pm.environment.set(\"payeefspPositionBeforeTransferhp\", jsonData[i].value);",
													"      pm.expect(jsonData).to.be.not.empty;",
													"    });",
													"  }",
													"",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "hub_operator",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payeefsp}}",
												"positions"
											]
										},
										"description": "We will capture the initial position for Payeefsp before the transfer and will save this value in a variable  payeefspPositionBeforeTransferhp"
									},
									"response": []
								},
								{
									"name": "Send Quote - SEND",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d4510b9d-e972-4258-8714-3fead032d73f",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.variables.get('payerfspMSISDN'),",
													"      \"fspId\": \"payerfsp\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"      \"dateOfBirth\": \"1983-10-25\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
													"      \"fspId\": \"payeefsp\"",
													"    }",
													"  },",
													"  \"amountType\": \"SEND\",",
													"  \"amount\": {",
													"    \"amount\": \"10\",",
													"    \"currency\": pm.environment.get('currency')",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9681e40f-4b2a-423e-93a3-0ed946933f47",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              ",
													"              //Check the Headers",
													"              var headers = response.json().headers;",
													"              ",
													"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
													"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
													"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
													"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
													"                });",
													"                ",
													"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
													"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
													"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {",
													"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
													"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
													"                });",
													"                ",
													"          } else {",
													"              pm.test(\"Quote FAILED\", function () {",
													"                throw new Error('Did not receive request on payee side');",
													"              });",
													"              // postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 1100)",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
													"      if(response.responseSize !== 0) {",
													"          //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is goldenpayeefsp\", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            ",
													"            ",
													"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"            // var strData = JSON.stringify(response.json().data)",
													"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
													"            // console.log(`token: ${token}`)",
													"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
													"            // console.log(`isValid: ${isValid}`)",
													"            // pm.test(\"Check if the response is JWS valid\", function () {",
													"            //     pm.expect(isValid).to.eql(true);",
													"            // });",
													"            ",
													"            //Validate protected header inside Signature",
													"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"            ",
													"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"            });",
													"            ",
													"",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
													"            });",
													"           ",
													"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            ",
													"            pm.test(\"Response quoteId is  null\", function () {",
													"                pm.expect(jsonData.quoteId).to.eql(undefined);",
													"                ",
													"            });",
													"          ",
													"            pm.test(\"Response ilpPacket is not null\", function () {",
													"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
													"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
													"            });",
													"       ",
													"           pm.test(\"Response condition is not null\", function () {",
													"               pm.expect(jsonData.condition).not.equal(undefined);",
													"               pm.environment.set(\"condition\", jsonData.condition);",
													"           });",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('Did not receive response on Payer side');",
													"           });",
													"           // postman.setNextRequest(null);",
													"      }",
													"       ",
													"   });",
													"}, 1000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "payeefsp"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Transfer - SEND",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0151d7a1-5c0a-4ec2-8fa1-eef6ee28f0b0",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// //Check the request that Switch forwards to payeefsp",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              ",
													"              //Check the Headers",
													"              var headers = response.json().headers;",
													"              ",
													"                pm.test(\"payeefsp fspiop-source is goldenpayerfsp\", function () {",
													"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-destination is goldenpayeefsp\", function () {",
													"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
													"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
													"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
													"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
													"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
													"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
													"                });",
													"                ",
													"                ",
													"                //Check the data",
													"                var jsonData = response.json().data;",
													"                pm.test(\"payeefsp data should have the same transferId as request\", function () {",
													"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));",
													"                });",
													"                pm.test(\"payeefsp data should have the same payerfspId as request\", function () {",
													"                  pm.expect(jsonData.payerFsp).to.eql('payerfsp');",
													"                });",
													"                pm.test(\"payeefsp data should have the same payeefspId as request\", function () {",
													"                  pm.expect('payeefsp');",
													"                });",
													"                pm.test(\"payeefsp data should have the same amount as request\", function () {",
													"                  pm.expect(jsonData.amount.amount).to.eql('10');",
													"                });",
													"                pm.test(\"payeefsp data should have the same currency as request\", function () {",
													"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
													"                });",
													"                pm.test(\"payeefsp data should have the same expiration as request\", function () {",
													"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
													"                });",
													"                pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
													"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
													"                });",
													"                pm.test(\"payeefsp data should have the same condition as request\", function () {",
													"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
													"                });",
													"                ",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response on payee side');",
													"              });",
													"              // postman.setNextRequest(null)",
													"          }",
													"  });",
													"}, 1100)",
													"",
													"//Check the callback response that Switch forwards to payerfsp",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"            //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is goldenpayeefsp \", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            ",
													"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            pm.test(\"Response data does not have transferId\", function () {",
													"               pm.expect(jsonData.transferId).to.eql(undefined);",
													"            });",
													"            pm.test(\"Response status is COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"            });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response on payer side');",
													"              });",
													"              // postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 1300)",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
													"       pm.test(\"payeefsp does not receive additional final notification\", function () {",
													"            pm.expect(response.text()).to.eql('');",
													"        });",
													"       ",
													"      ",
													"    });",
													"}, 2000)",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "88ac3be2-0dd6-421b-bc05-3ff57d6fed34",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"transferId\": pm.environment.get('transfer_ID'),",
													"  \"payerFsp\": \"payerfsp\",",
													"  \"payeeFsp\": \"payeefsp\",",
													"  \"amount\": {",
													"    \"amount\": \"10\",",
													"    \"currency\": pm.environment.get('currency')",
													"  },",
													"  \"expiration\": pm.environment.get('transferExpiration'),",
													"  \"ilpPacket\": pm.environment.get('ilpPacket'),",
													"  \"condition\": pm.environment.get('condition')",
													"}",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"transferRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
													"//console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "payeefsp"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/transfers"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transferRequest}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get payerfsp position after the transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef993e90-9b5d-48e9-82e8-9f90e11cbc94",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var expectedamount = Number.parseFloat(pm.environment.get(\"payerfspPositionBeforeTransferhp\")) + Number.parseFloat(10);",
													"//expectedamount = expectedamount.toFixed(2);",
													"console.log(expectedamount);",
													"//console.log(jsonData[0].value);",
													"/*if (pm.environment.get('ENV') === 'uat0') {",
													"pm.test(\"Position should be changed after transfer\", function () {",
													"    pm.expect(jsonData[1].value).to.eql(Number(expectedamount));",
													"});",
													"}else{",
													"    ",
													"    pm.test(\"Position should be changed after transfer\", function () {",
													"    pm.expect(jsonData[0].value).to.eql(Number(expectedamount));",
													"});",
													"}*/",
													"",
													"",
													"for (var i in jsonData) {",
													"    if (jsonData[i].currency === pm.environment.get('currency')) {",
													"        pm.test(\"Position should be changed after transfer\", function () {",
													"            pm.expect(jsonData[i].value).to.eql(Number(expectedamount));",
													"        });",
													"    }",
													"",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "hub_operator",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"positions"
											]
										},
										"description": "If transfer was successful then the position for payerfsp should change, we will get the current position for payerfsp and compare this value against initial payerfsp position captured in:  payerfspPositionBeforeTransferhp\nPositon should be increased in 1 XOF"
									},
									"response": []
								},
								{
									"name": "Get payeefsp position after the transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11a67c73-5299-4a07-b022-ad0be8484b5d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"var expectedamount = Number.parseFloat(pm.environment.get(\"payeefspPositionBeforeTransferhp\")) - Number.parseFloat(10);",
													"//expectedamount = expectedPayerAccountBalanceAfterSettlementx.toFixed(2);",
													"/*console.log(expectedamount);",
													"pm.test(\"Position should be changed after transfer\", function () {",
													"    pm.expect(Number(jsonData[0].value)).to.eql(Number(expectedamount));",
													"});*/",
													"",
													"for (var i in jsonData) {",
													"    if (jsonData[i].currency === pm.environment.get('currency')) {",
													"        pm.test(\"Position should be changed after transfer\", function () {",
													"            pm.expect(Number(jsonData[i].value)).to.eql(Number(expectedamount));",
													"        });",
													"    }",
													"",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "hub_operator",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payeefsp}}",
												"positions"
											]
										},
										"description": "If transfer was successful then the position for payeefsp should change, we will get the current position for payeefsp and compare this value against initial payeefsp position captured in:  payeefspPositionBeforeTransferhp\nPositon should be increased in 1 XOF"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Author: Sridevi Miriyala",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1d130072-402a-4e11-a44f-5b6d2c0657a4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "50ce063c-e28e-4e57-a1a8-0acde889dab6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "post_scenarios",
					"item": [
						{
							"name": "positive",
							"item": [
								{
									"name": "Add party to payeefsp - MSISDN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6975714-afdd-4f94-90e2-d624d632b6e6",
												"exec": [
													"pm.test(\"Successful POST request\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([204,500]);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"displayName\": \"PayeeFirst PayeeLast\",\n    \"firstName\": \"PayeeFirst\",\n    \"middleName\": \"PayeeMiddle\",\n    \"lastName\": \"PayeeLast\",\n    \"dateOfBirth\": \"2010-10-10\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"{{payeefspMSISDN}}\"\n}"
										},
										"url": {
											"raw": "{{PAYEEFSP_BACKEND_TESTAPI_URL}}/repository/parties",
											"host": [
												"{{PAYEEFSP_BACKEND_TESTAPI_URL}}"
											],
											"path": [
												"repository",
												"parties"
											]
										},
										"description": "Create a party"
									},
									"response": []
								},
								{
									"name": "Post scenarios - MSISDN - payerfsp to payeefsp",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d53a6153-4da9-4b75-a809-301a49238411",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
													"",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'PayeeFirst');",
													"pm.variables.set('expectedPayeeLastName', 'PayeeLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "198dee4f-c562-451b-8f62-19e69ab68ee0",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(`Payer name is ${pm.variables.get('payerName')}`, function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.from.displayName).to.eql(pm.variables.get('payerName'));",
													"});",
													"pm.test(\"payer idType is MSISDN\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.from.idType).to.eql(\"MSISDN\");",
													"});",
													"pm.test(\"payer idValue is 44123456789\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.from.idValue).to.eql(pm.environment.get('payerfspMSISDN'));",
													"});",
													"",
													"pm.test(\"Payee idType is MSISDN\", function () {",
													"    var jsonData = pm.response.json();",
													"     pm.expect(jsonData.scenario1.result.to.idType).to.eql(\"MSISDN\");",
													"});",
													"",
													"pm.test(`Payee idValue is ${pm.variables.get('payeefspMSISDN')}`, function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.to.idValue).to.eql(pm.variables.get('payeefspMSISDN'));",
													"});",
													"",
													"pm.test(\"payee fspId is payeefsp\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.to.fspId).to.eql(\"payeefsp\");",
													"});",
													"",
													"pm.test(\"payee First name is PayeeFirst\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.to.firstName).to.eql(\"PayeeFirst\");",
													"});   ",
													"",
													"pm.test(\"payee Last name is PayeeLast\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.to.lastName).to.eql(\"PayeeLast\");",
													"});",
													"",
													"pm.test(\"payee DOB is 2010-10-10\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
													"});",
													"",
													"pm.test(\"amount type is SEND\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.amountType).to.eql(\"SEND\");",
													"});",
													"",
													"pm.test(`Currency is ${pm.environment.get('currency')}`, function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.currency).to.eql(pm.environment.get('currency'));",
													"});",
													"",
													"pm.test(\"Transfer Amount is 10\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.amount).to.eql(\"10\");",
													"});",
													"",
													"pm.test(\"Transaction type is Transfer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.transactionType).to.eql(\"TRANSFER\");",
													"});",
													"   ",
													"  pm.test(\"Initiator type is CONSUMER\", function () {",
													"    var jsonData = pm.response.json(); ",
													"    pm.expect(jsonData.scenario1.result.initiatorType).to.eql(\"CONSUMER\");",
													" });  ",
													" ",
													" pm.test(\"Note is TESTPAYMENT\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.note).to.eql(\"test payment\");",
													"});",
													"",
													"// pm.test(`quote Id is ${pm.environment.get('quoteId')} `, function () {",
													"//     var jsonData = pm.response.json();",
													"    ",
													"//     pm.expect(jsonData.scenario1.result.quoteResponse.quoteId).to.eql(pm.environment.get('quoteId'));",
													"// });",
													"",
													"pm.test(`transferId is ${pm.environment.get('transferId')}`, function () {",
													"    var jsonData = pm.response.json();",
													"     pm.expect(jsonData.scenario1.result.transferId).to.eql(jsonData.scenario2.result.transferId);",
													"});",
													"",
													"pm.test(\"Home transaction Id is 123ABC\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.homeTransactionId).to.eql(\"123ABC\");",
													"});",
													"    ",
													"pm.test(\"Current state on quote is COMPLETED\", function () {",
													"    var jsonData = pm.response.json();",
													"  pm.expect(jsonData.scenario1.result.currentState).to.eql(\"COMPLETED\");",
													"});",
													"",
													"pm.test(`Transfer amount is ${pm.environment.get('amount')}`, function () {",
													"    var jsonData = pm.response.json();  ",
													"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
													"});",
													"",
													"pm.test(`Currency is ${pm.environment.get('currency')}`, function () {",
													"    var jsonData = pm.response.json();  ",
													"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.currency).to.eql(pm.environment.get('currency'));",
													"});",
													"  ",
													"pm.test(\"Quote response expiration is not null\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario1.result.quoteResponse.expiration).not.eql(undefined);",
													"});",
													"",
													"pm.test(\"Qupte request ILP packet is not null\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario1.result.quoteResponse.ilpPacket).not.eql(undefined);",
													"});",
													"",
													"pm.test(\"Quote response condition is not null\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario1.result.quoteResponse.condition).not.eql(undefined);",
													"});",
													"  ",
													"pm.test(\"Payeefsp Fee amount is 0\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.amount).to.eql('0');",
													"});",
													"",
													"pm.test(\"PayeeFSP fee currency is \", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.currency).to.eql(pm.environment.get('currency'));",
													"});",
													"",
													"pm.test(\" Payeefsp Commission amount is 0\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
													"});",
													"",
													"pm.test(`Currency is ${pm.environment.get('currency')}`, function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.currency).to.eql(pm.environment.get('currency'));",
													"});",
													"  ",
													"// Scenario 2 tests",
													"",
													"pm.test(\"payer fsp nameis:${pm.environment.get('payerName')\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.from.displayName).to.eql(pm.variables.get('payerName'));",
													"});",
													" ",
													"pm.test(\"IdType is MSISDN\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.from.idType).to.eql(\"MSISDN\");",
													"});",
													"   ",
													"pm.test(`Payer MSISDN is ${pm.environment.get('payerfspMSISDN')} `, function () {",
													"var jsonData = pm.response.json(); ",
													"pm.expect(jsonData.scenario2.result.from.idValue).to.eql(pm.variables.get('payerfspMSISDN'));",
													"});",
													"",
													"pm.test(\"IdType is MSISDN\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.to.idType).to.eql(\"MSISDN\");",
													"});",
													"",
													"pm.test(`goldenpayeefspReceiverMSISDN Value is ${pm.environment.get('payeefspMSISDN')}`, function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.to.idValue).to.eql(pm.variables.get('payeefspMSISDN'));",
													"});",
													"",
													"pm.test(\"fspId is payeefsp\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.to.fspId).to.eql(\"payeefsp\");",
													"});",
													"",
													"pm.test(\"First name of the party is PayeeFirst\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.to.firstName).to.eql(\"PayeeFirst\");",
													"});",
													"",
													"pm.test(\"First name of the party is PayeeLast \", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.to.lastName).to.eql(\"PayeeLast\");",
													"});",
													"",
													"pm.test(\"Date of Birth of the MSISDN is 2010-10-10 \", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
													"});",
													"",
													"pm.test(\"Amount-Type in Quote request is SEND\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.amountType).to.eql(\"SEND\");",
													"});",
													"",
													"pm.test(` Currency in quotes is ${pm.environment.get('currency')}`, function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.currency).to.eql(pm.environment.get('currency'));",
													"});",
													"    ",
													"pm.test(\" Transfer amount is 10\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.amount).to.eql(\"10\");",
													"});",
													"   ",
													"pm.test(\" Transaction Type is TRANSFER\", function () {",
													"var jsonData = pm.response.json(); ",
													"pm.expect(jsonData.scenario2.result.transactionType).to.eql(\"TRANSFER\");",
													"});",
													"   ",
													"pm.test(\"Initiator type is CONSUMER\", function () {",
													"var jsonData = pm.response.json(); ",
													"pm.expect(jsonData.scenario2.result.initiatorType).to.eql(\"CONSUMER\");",
													"});",
													"   ",
													"pm.test(\"note is test payment\", function () {",
													"var jsonData = pm.response.json(); ",
													"pm.expect(jsonData.scenario2.result.note).to.eql(\"test payment\");",
													"});",
													"   ",
													"pm.test(\"HomeTransactionId is 123ABC\", function () {",
													"var jsonData = pm.response.json(); ",
													"pm.expect(jsonData.scenario2.result.homeTransactionId).to.eql(\"123ABC\");",
													"});",
													"    ",
													"pm.test(\"Current state of the transfer is COMPLETED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.currentState).to.eql(\"COMPLETED\");",
													"});",
													"  ",
													"pm.test(\"Transfer Amount is 10\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
													"});",
													"",
													"pm.test(\"Response validation\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.quoteResponse.transferAmount.currency).to.eql(pm.environment.get('currency'));",
													"});",
													"",
													"pm.test(\"Quote Expiration is not Null\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.quoteResponse.expiration).not.eql(null);",
													"});",
													"",
													"pm.test(\"Response ilpPacket is not null\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.quoteResponse.ilpPacket).not.eql(null);",
													"});",
													"",
													"pm.test(\"Response condition is not null\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.quoteResponse.condition).not.eql(null);",
													"});",
													"",
													"pm.test(\"PayeeFspFee is 0\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspFee.amount).to.eql(\"0\");",
													"});",
													"",
													"pm.test(`Payeefsp fee currency is ${pm.environment.get('currency')}` , function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspFee.currency).to.eql(pm.environment.get('currency'));",
													"});",
													"",
													"pm.test(\"Payeefsp commission is 0\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
													"});",
													"",
													"pm.test(` Transfer currency is ${pm.environment.get('currency')}`, function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspCommission.currency).to.eql(pm.environment.get('currency'));",
													"});",
													"",
													"pm.test(\"CompletedTimestamp is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.fulfil.completedTimestamp).not.eql(null);",
													"});",
													"",
													"pm.test(\" transferState is COMMITTED\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.fulfil.transferState).to.eql(\"COMMITTED\");",
													"});",
													"",
													"pm.test(\" Fulfilment is not empty\", function () {",
													"var jsonData = pm.response.json();",
													"pm.expect(jsonData.scenario2.result.fulfil.fulfilment).not.eql(null);",
													"",
													"});",
													"  ",
													"  //Check Headers for parties endpoint on payee side",
													"  setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.variables.get(\"payeefspMSISDN\"), function (err, response) {",
													"       ",
													"      if(response.responseSize !== 0) { ",
													"      //Checking headers",
													"        var headers = response.json().headers;",
													"        pm.test(\"On payerfsp fspiop-source is payerfsp\", function () {",
													"            pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"        });",
													"        ",
													"        // pm.test(\"goldenpayeefsp fspiop-destination is goldenpayeefsp\", function () {",
													"        //     pm.expect(headers['fspiop-destination']).to.eql('goldenpayeefsp');",
													"        // });",
													"        ",
													"        pm.test(\"On goldenpayeefsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
													"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
													"        });",
													"        ",
													"        pm.test(\"On goldenpayeefsp accept should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
													"            pm.expect(headers['accept']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
													"        });",
													"        ",
													"        pm.test(\"On goldenpayeefsp date cannot be null\", function () {",
													"            pm.expect(headers['date']).to.not.eql(undefined);",
													"        });",
													"        ",
													"      } else {",
													"          pm.test(\"Parties FAILED - payeeFSP\", function () {",
													"            throw new Error('Did not receive response');",
													"          });",
													"           ",
													"      }",
													"      ",
													"    });",
													"}, 100)",
													"",
													"//Check Headers and data for parties endpoint on payer side",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.variables.get(\"payeefspMSISDN\"), function (err, response) {",
													"       ",
													"      if(response.responseSize !== 0) { ",
													"      //Checking headers",
													"        var headers = response.json().headers;",
													"        pm.test(\"On payerfsp fspiop-source is payeefsp\", function () {",
													"            pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"        });",
													"        ",
													"        pm.test(\"On payerfsp fspiop-destination is payerfsp\", function () {",
													"            pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"        });",
													"        ",
													"        pm.test(\"On payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
													"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
													"        });",
													"        ",
													"        pm.test(\"payerfsp accept is empty\", function () {",
													"            pm.expect(headers['accept']).to.eql(undefined);",
													"        });",
													"        ",
													"        //Validate protected header inside Signature",
													"        var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"        var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"        console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"        ",
													"        // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
													"        //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
													"        // });",
													"        ",
													"        pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"            pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"        });",
													"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"payeefspMSISDN\"), function () {",
													"            pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/'+pm.environment.get(\"payeefspMSISDN\"));",
													"        });",
													"        ",
													"",
													"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"            pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"        });",
													"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be payeefsp\", function () {",
													"            pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
													"        });",
													"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
													"            pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
													"        });",
													"        pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"            pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
													"        });",
													"       ",
													"        pm.test(\"payerfsp FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"payeefspMSISDN\"), function () {",
													"            pm.expect(headers['fspiop-uri']).to.eql('/parties/MSISDN/'+pm.environment.get(\"payeefspMSISDN\"));",
													"        });",
													"        ",
													"        pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"            pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"        });",
													"        ",
													"      //Checking data",
													"      var jsonData = response.json().data;",
													"        pm.test(\"Expected partyIdType is MSISDN\", function () {",
													"          pm.expect(jsonData.party.partyIdInfo.partyIdType).to.eql('MSISDN');",
													"        });",
													"        pm.test(\"Expected partyIdentifier is \"+pm.environment.get('payeefspMSISDN'), function () {",
													"          pm.expect(jsonData.party.partyIdInfo.partyIdentifier).to.eql(pm.environment.get('payeefspMSISDN'));",
													"        });",
													"        pm.test(\"Expected fspId is payeefsp\", function () {",
													"          pm.expect(jsonData.party.partyIdInfo.fspId).to.eql('payeefsp');",
													"        });",
													"        ",
													"      pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedPayeeFirstName\"), function () {",
													"          pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedPayeeFirstName\"));",
													"        });",
													"        pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedPayeeLastName\"), function () {",
													"          pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedPayeeLastName\"));",
													"        });",
													"        pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedPayeeDOB\"), function () {",
													"          pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedPayeeDOB\"));",
													"        });  ",
													"        ",
													"      } else {",
													"          pm.test(\"Parties FAILED - payerFSP\", function () {",
													"            throw new Error('Did not receive response');",
													"          });",
													"        }",
													"    });",
													"}, 100)",
													"",
													"var transferID = pm.response.json().scenario1.result.transferId",
													"//Check the request that Switch forwards to payeefsp",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+transferID, function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              ",
													"              //Check the Headers",
													"              var headers = response.json().headers;",
													"              ",
													"                pm.test(\"On payeefsp fspiop-source is payerfsp\", function () {",
													"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"                });",
													"                ",
													"                pm.test(\"On payeefsp fspiop-destination is payeefsp\", function () {",
													"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"                });",
													"                ",
													"                pm.test(\"On payeefsp content-typeis same as sent in the request\", function () {",
													"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"                });",
													"                ",
													"                pm.test(\"On payeefsp accept is same as sent in the request\", function () {",
													"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"                });",
													"                ",
													"                pm.test(\"On payeefsp fspiop-http-method is POST\", function () {",
													"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
													"                });",
													"                ",
													"                pm.test(\"On payeefsp fspiop-uri is /transfers\", function () {",
													"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
													"                });",
													"                ",
													"                ",
													"                //Check the data",
													"                var jsonData = response.json().data;",
													"                pm.test(\"On payeefsp data should have the same transferId as request\", function () {",
													"                  pm.expect(jsonData.transferId).to.eql(transferID);",
													"                });",
													"                pm.test(\"On payeefsp data should have the same payerfspId as request\", function () {",
													"                  pm.expect(jsonData.payerFsp).to.eql('payerfsp');",
													"                });",
													"                pm.test(\"On payeefsp data should have the same payeefspId as request\", function () {",
													"                  pm.expect(jsonData.payeeFsp).to.eql('payeefsp');",
													"                });",
													"                pm.test(\"On payeefsp data should have the same amount as request\", function () {",
													"                  pm.expect(jsonData.amount.amount).to.eql('10');",
													"                });",
													"                pm.test(\"payeefsp data should have the same currency as request\", function () {",
													"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
													"                });",
													"                // pm.test(\"payeefsp data should have the same expiration as request\", function () {",
													"                //   pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
													"                // });",
													"                // pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
													"                //   pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
													"                // });",
													"                // pm.test(\"payeefsp data should have the same condition as request\", function () {",
													"                //   pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
													"                // });",
													"                ",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"",
													"          }",
													"  });",
													"}, 100)",
													"",
													"//Check the callback response that Switch forwards to payerfsp",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+transferID, function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"            //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"On payerfsp fspiop-source is payeefsp\", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"            });",
													"            ",
													"            pm.test(\"On payerfsp fspiop-destination is payerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"On payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            // pm.test(\"fspiop-signature is returned\", function () {",
													"            //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"payeefsp_fspiop_signature\"));",
													"            // });",
													"           ",
													"            ",
													"            pm.test(\"payerfsp fspiop-uri includes transfers\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.include('/transfers');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            pm.test(\"Response data does not have transferId\", function () {",
													"              pm.expect(jsonData.transferId).to.eql(undefined);",
													"            });",
													"            pm.test(\"Response status is COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"            });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"",
													"          }",
													"  });",
													"}, 100)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Date",
												"value": "{{transferDate}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}",
												"type": "text",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"{{payerName}}\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{payerfspMSISDN}}\"\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{payeefspMSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"10\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
										},
										"url": {
											"raw": "{{PAYERFSP_BACKEND_TESTAPI_URL}}/scenarios",
											"host": [
												"{{PAYERFSP_BACKEND_TESTAPI_URL}}"
											],
											"path": [
												"scenarios"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Author: Sridevi Miriyala\nDescription: Contains scripts that test with post /scenarios on majaloop sim backend",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "block_transfer",
					"item": [
						{
							"name": "GET limits-payerfsp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83d1a019-b0bc-4b94-91ab-97b3bcb06849",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"jsonData.forEach( ndcPerCurrency => {",
											"    pm.environment.set(`payerfsp${ndcPerCurrency.currency}NDC`, `${ndcPerCurrency.limit.value}`)",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "hub_operator",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payerfsp/limits",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"payerfsp",
										"limits"
									]
								},
								"description": "review the payerfsp limits/NDC"
							},
							"response": []
						},
						{
							"name": "GET limits -payeefsp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4dffce8f-ee15-42e1-a54c-c49a3ffc32c0",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var payeeNDC = jsonData[0].limit.value",
											"pm.environment.set('payeeNDC',payeeNDC)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "hub_operator",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/limits",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payeefsp}}",
										"limits"
									]
								},
								"description": "review payeefsp limits/NDC"
							},
							"response": []
						},
						{
							"name": "Get payerfsp position before TheTransfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac241fef-d940-423e-a2ec-c3511f352e14",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"/*var result;",
											"",
											"jsonData.forEach( entry => {(entry.currency === pm.environment.get(\"currency\")) ? result = entry.value: result =",
											" undefined})",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.environment.set(\"payerfspPositionBeforeTransfer\", result);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"*/",
											"",
											"// for (var i in jsonData){",
											"//     if(jsonData[i].currency === \"XOF\") {",
											"//   pm.test(\"Atleast one account position should be returned\", function () {",
											"//     pm.environment.set(\"payerfspPositionBeforeTransfer\", jsonData[i].value);",
											"//     pm.expect(jsonData).to.be.not.empty;",
											"//   });",
											"//     }",
											"   ",
											"// }",
											"",
											"jsonData.forEach(positionPerCurrency => {",
											"    pm.environment.set(`payerfsp${positionPerCurrency.currency}PositionBeforeTransfer`, positionPerCurrency.value);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "hub_operator",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								},
								"description": "view payerfsp current position before sending the transfer"
							},
							"response": []
						},
						{
							"name": "Get payeefsp position before TheTransfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e07cedcd-6aac-44bb-add8-88c1bc6b0029",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"/*var result;",
											"",
											"jsonData.forEach( entry => {(entry.currency === pm.environment.get(\"currency\")) ? result = entry.value: result =",
											" undefined})",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.environment.set(\"payeefspPositionBeforeTransfer\", result);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});*/",
											"",
											"for (var i in jsonData){",
											"    if(jsonData[i].currency === \"XOF\") {",
											"  pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.environment.set(\"payeefspPositionBeforeTransfer\", jsonData[i].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"  });",
											"    }",
											"   ",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "hub_operator",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payeefsp}}",
										"positions"
									]
								},
								"description": "Get payeefsp current position before sending the transfer"
							},
							"response": []
						},
						{
							"name": "Send Quote",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5803cb6f-ccb1-4d4e-9152-11ce39cae4d1",
										"exec": [
											"var navigator = {}; ",
											"var window = {}; ",
											"eval(pm.environment.get('jrsassign'));",
											"",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"generatedUUID = uuid.v4();",
											"pm.environment.set('transactionId', generatedUUID);",
											"",
											"pm.variables.set('quoteDate', (new Date()).toUTCString());",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
											"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
											"var sHeader = JSON.stringify(oHeader);",
											"console.log(`sHeader: ${sHeader}`)",
											"",
											"var objPayload = {",
											"  \"quoteId\": pm.environment.get('quoteId'),",
											"  \"transactionId\": pm.environment.get('transactionId'),",
											"  \"payer\": {",
											"    \"partyIdInfo\": {",
											"      \"partyIdType\": \"MSISDN\",",
											"      \"partyIdentifier\": pm.variables.get('payerfspMSISDN'),",
											"      \"fspId\": \"payerfsp\"",
											"    },",
											"    \"personalInfo\": {",
											"      \"complexName\": {",
											"        \"firstName\": \"Mats\",",
											"        \"lastName\": \"Hagman\"",
											"      },",
											"      \"dateOfBirth\": \"1983-10-25\"",
											"    }",
											"  },",
											"  \"payee\": {",
											"    \"partyIdInfo\": {",
											"      \"partyIdType\": \"MSISDN\",",
											"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
											"      \"fspId\": \"payeefsp\"",
											"    }",
											"  },",
											"  \"amountType\": \"RECEIVE\",",
											"  \"amount\": {",
											"    \"amount\": \"60\",",
											"    \"currency\": pm.environment.get('currency')",
											"  },",
											"  \"transactionType\": {",
											"    \"scenario\": \"TRANSFER\",",
											"    \"initiator\": \"PAYER\",",
											"    \"initiatorType\": \"CONSUMER\"",
											"  },",
											"  \"note\": \"hej\"",
											"}",
											"",
											"var sPayload = JSON.stringify(objPayload)",
											"console.log(`sPayload: ${sPayload}`)",
											"pm.variables.set(\"quoteRequest\", sPayload);",
											"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
											"console.log(`token: ${token}`)",
											"",
											"// var encodedHeaders = btoa(sHeader)",
											"",
											"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
											"// var token = JSON.stringify(ofspiopSignature)",
											"",
											"const [ protectedHeaderBase64, , signature ] = token.split('.');",
											"",
											"const signatureObject = {",
											"    signature: signature.replace('\"', ''),",
											"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
											"};",
											"",
											"console.log(JSON.stringify(signatureObject))",
											"",
											"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c601c85d-e57a-4112-8b1d-cdf156dc8d11",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              ",
											"              //Check the Headers",
											"              var headers = response.json().headers;",
											"              ",
											"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
											"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
											"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
											"                });",
											"                ",
											"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
											"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
											"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {",
											"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
											"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
											"                });",
											"                ",
											"          } else {",
											"              pm.test(\"Quote FAILED\", function () {",
											"                throw new Error('Did not receive request on payee side');",
											"              });",
											"              // postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 1100)",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"          //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            ",
											"            ",
											"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
											"            // var strData = JSON.stringify(response.json().data)",
											"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
											"            // console.log(`token: ${token}`)",
											"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
											"            // console.log(`isValid: ${isValid}`)",
											"            // pm.test(\"Check if the response is JWS valid\", function () {",
											"            //     pm.expect(isValid).to.eql(true);",
											"            // });",
											"            ",
											"            //Validate protected header inside Signature",
											"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
											"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
											"            ",
											"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
											"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
											"            });",
											"            ",
											"",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
											"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
											"            });",
											"           ",
											"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            ",
											"            pm.test(\"Response quoteId is  null\", function () {",
											"                pm.expect(jsonData.quoteId).to.eql(undefined);",
											"                ",
											"            });",
											"          ",
											"            pm.test(\"Response ilpPacket is not null\", function () {",
											"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
											"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
											"            });",
											"       ",
											"           pm.test(\"Response condition is not null\", function () {",
											"               pm.expect(jsonData.condition).not.equal(undefined);",
											"               pm.environment.set(\"condition\", jsonData.condition);",
											"           });",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response on Payer side');",
											"           });",
											"           // postman.setNextRequest(null);",
											"      }",
											"       ",
											"   });",
											"}, 1000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYERFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "payeefsp"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "{{fspiopSignature}}"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"type": "text",
										"value": "POST"
									},
									{
										"key": "FSPIOP-URI",
										"type": "text",
										"value": "/quotes"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{quoteRequest}}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Block Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94b7d6ad-5e9c-48e9-ab8c-a90a2d4ece73",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
											"// });",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              var jsonData = response.json().data;",
											"              var headers = response.json().headers;",
											"              pm.test(\"Error Code should be returned\", function () {",
											"                pm.expect(jsonData.errorInformation.errorCode).to.eql('4001');",
											"              });",
											"              pm.test(\"Error Description should be returned\", function () {",
											"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Payer FSP insufficient liquidity');",
											"              });",
											"              pm.test(\"fspiop-source is switch\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('switch');",
											"            });",
											"",
											"            pm.test(\"fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"fspiop-signature is present\", function () {",
											"                pm.expect(headers['fspiop-signature']).to.not.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"fspiop-uri is /transfers/{ID}/error\", function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${pm.environment.get('transfer_ID')}/error`);",
											"            });",
											"            ",
											"            pm.test(\"fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              // postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 5000)",
											"",
											"pm.environment.set('transferAmount', 100);",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "808de876-94fc-40d7-8076-f096f288047a",
										"exec": [
											"var navigator = {}; //fake a navigator object for the lib",
											"var window = {}; //fake a window object for the lib",
											"eval(pm.environment.get('jrsassign'));",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"pm.environment.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
											"",
											"var payerfspDefCurNDC = `payerfsp${pm.environment.get('currency')}NDC`",
											"var payerfspDefCurPositionBeforeTransfer = `payerfsp${pm.environment.get('currency')}PositionBeforeTransfer`",
											"",
											"console.log(pm.environment.get(payerfspDefCurNDC))",
											"console.log(pm.environment.get(payerfspDefCurPositionBeforeTransfer))",
											"var amount = Number(pm.environment.get(payerfspDefCurNDC))-Number( pm.environment.get(payerfspDefCurPositionBeforeTransfer))+100",
											"",
											"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
											"var sHeader = JSON.stringify(oHeader);",
											"console.log(`sHeader: ${sHeader}`)",
											"",
											"var objPayload = {",
											"  \"transferId\": pm.environment.get('transfer_ID'),",
											"  \"payerFsp\": \"payerfsp\",",
											"  \"payeeFsp\": \"payeefsp\",",
											"  \"amount\": {",
											"    \"amount\": `${amount}`,",
											"    \"currency\": pm.environment.get('currency')",
											"  },",
											"  \"expiration\": pm.environment.get('transferExpiration'),",
											"  \"ilpPacket\": pm.environment.get('ilpPacket'),",
											"  \"condition\": pm.environment.get('condition')",
											"}",
											"var sPayload = JSON.stringify(objPayload)",
											"console.log(`sPayload: ${sPayload}`)",
											"pm.variables.set(\"transferRequest\", sPayload);",
											"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
											"//console.log(`token: ${token}`)",
											"",
											"// var encodedHeaders = btoa(sHeader)",
											"",
											"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
											"// var token = JSON.stringify(ofspiopSignature)",
											"",
											"const [ protectedHeaderBase64, , signature ] = token.split('.');",
											"",
											"const signatureObject = {",
											"    signature: signature.replace('\"', ''),",
											"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
											"};",
											"",
											"console.log(JSON.stringify(signatureObject))",
											"",
											"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYERFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiopSignature}}",
										"type": "text"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "POST",
										"type": "text"
									},
									{
										"key": "FSPIOP-URI",
										"value": "/transfers",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{transferRequest}}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								},
								"description": "send a tranfer request with ilp packet and condition that are generated in quotes response along with expiry, fspiop source,fspiop destination, amount and currency."
							},
							"response": []
						},
						{
							"name": "Get payerfsp position after the transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e49b5a22-009a-447d-ac4b-772f3b8313fb",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"/*pm.test(\"Position before and after the transfer should be the same\", function () {",
											"    pm.expect(jsonData[0].value).to.eql(pm.environment.get(\"payerfspPositionBeforeTransfer\"));",
											"});*/",
											"",
											"for (var i in jsonData){",
											"    if(jsonData[i].currency === \"XOF\") {",
											"  pm.test(\"Position before and after the transfer should be the same\", function () {",
											"    pm.expect(jsonData[i].value).to.eql(pm.environment.get(\"payerfspXOFPositionBeforeTransfer\"));",
											"  });",
											"    }",
											"   ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "hub_operator",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get payeefsp position after the transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4cad52c5-3938-4309-b67d-f926c74f873f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"/*pm.test(\"Position before and after the transfer should be the same\", function () {",
											"    pm.expect(Number(jsonData[0].value)).to.eql(Number(pm.environment.get(\"payeefspPositionBeforeTransfer\")));",
											"});*/",
											"",
											"for (var i in jsonData){",
											"    if(jsonData[i].currency === \"XOF\") {",
											"  pm.test(\"Position before and after the transfer should be the same\", function () {",
											"    pm.expect(Number(jsonData[i].value)).to.eql(Number(pm.environment.get(\"payeefspPositionBeforeTransfer\")));",
											"  });",
											"    }",
											"   ",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "hub_operator",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payeefsp}}",
										"positions"
									]
								}
							},
							"response": []
						}
					],
					"description": "Author: Sridevi Miriyala\n\nThis features testes, if a transfer is blocked when position of a participant exceeds the Net Debit Cap for the transfer amount.\n\nSTEPS:\n\nGET Limits\nGET Positions for payer and payee\nset amount=(NDC-P) + 10\nPOST Quotes - send to payee that responds COMMITTED\nPOST Transfers-Prepare\n      -Payerfsp should get error msg \"insufficient liquidity in payerfsp to perform transfer \" \nGET positions - \n  current payer position = prev position \n  current payee position = prev position \n(Failure of the transfer due to insufficient liquidity from payerfsp, results no change in positions)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8b73f71f-5637-4ea3-b930-31addc19550e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9c9d0590-6a76-440f-9864-bbaeaa839c65",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "get_transfers",
					"item": [
						{
							"name": "Send Quote",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "367067ba-494a-4a57-9642-bd5d8d659bfd",
										"exec": [
											"var navigator = {}; ",
											"var window = {}; ",
											"eval(pm.environment.get('jrsassign'));",
											"",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('quoteId', generatedUUID);",
											"generatedUUID = uuid.v4();",
											"pm.environment.set('transactionId', generatedUUID);",
											"",
											"pm.variables.set('quoteDate', (new Date()).toUTCString());",
											"pm.variables.set('payerName', 'PayerFirst PayerLast');",
											"pm.variables.set('payerMSISDN', '918381008987');",
											"",
											"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
											"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
											"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
											"",
											"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
											"var sHeader = JSON.stringify(oHeader);",
											"console.log(`sHeader: ${sHeader}`)",
											"",
											"var objPayload = {",
											"  \"quoteId\": pm.environment.get('quoteId'),",
											"  \"transactionId\": pm.environment.get('transactionId'),",
											"  \"payer\": {",
											"    \"partyIdInfo\": {",
											"      \"partyIdType\": \"MSISDN\",",
											"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
											"      \"fspId\": \"payerfsp\"",
											"    },",
											"    \"personalInfo\": {",
											"      \"complexName\": {",
											"        \"firstName\": \"Mats\",",
											"        \"lastName\": \"Hagman\"",
											"      },",
											"      \"dateOfBirth\": \"1983-10-25\"",
											"    }",
											"  },",
											"  \"payee\": {",
											"    \"partyIdInfo\": {",
											"      \"partyIdType\": \"MSISDN\",",
											"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
											"      \"fspId\": \"payeefsp\"",
											"    }",
											"  },",
											"  \"amountType\": \"RECEIVE\",",
											"  \"amount\": {",
											"    \"amount\": \"60\",",
											"    \"currency\": pm.environment.get('currency')",
											"  },",
											"  \"transactionType\": {",
											"    \"scenario\": \"TRANSFER\",",
											"    \"initiator\": \"PAYER\",",
											"    \"initiatorType\": \"CONSUMER\"",
											"  },",
											"  \"note\": \"hej\"",
											"}",
											"",
											"var sPayload = JSON.stringify(objPayload)",
											"console.log(`sPayload: ${sPayload}`)",
											"pm.variables.set(\"quoteRequest\", sPayload);",
											"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
											"console.log(`token: ${token}`)",
											"",
											"// var encodedHeaders = btoa(sHeader)",
											"",
											"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
											"// var token = JSON.stringify(ofspiopSignature)",
											"",
											"const [ protectedHeaderBase64, , signature ] = token.split('.');",
											"",
											"const signatureObject = {",
											"    signature: signature.replace('\"', ''),",
											"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
											"};",
											"",
											"console.log(JSON.stringify(signatureObject))",
											"",
											"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f5d4daf6-9c02-47a8-8e2b-91c4b94d7a74",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              ",
											"              //Check the Headers",
											"              var headers = response.json().headers;",
											"              ",
											"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
											"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
											"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
											"                });",
											"                ",
											"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
											"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
											"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {",
											"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
											"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
											"                });",
											"                ",
											"          } else {",
											"              pm.test(\"Quote FAILED\", function () {",
											"                throw new Error('Did not receive request on payee side');",
											"              });",
											"              // postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 1100)",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"          //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            ",
											"            ",
											"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
											"            // var strData = JSON.stringify(response.json().data)",
											"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
											"            // console.log(`token: ${token}`)",
											"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
											"            // console.log(`isValid: ${isValid}`)",
											"            // pm.test(\"Check if the response is JWS valid\", function () {",
											"            //     pm.expect(isValid).to.eql(true);",
											"            // });",
											"            ",
											"            //Validate protected header inside Signature",
											"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
											"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
											"            ",
											"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
											"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
											"            });",
											"            ",
											"",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
											"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
											"            });",
											"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
											"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);",
											"            });",
											"           ",
											"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            ",
											"            pm.test(\"Response quoteId is  null\", function () {",
											"                pm.expect(jsonData.quoteId).to.eql(undefined);",
											"                ",
											"            });",
											"          ",
											"            pm.test(\"Response ilpPacket is not null\", function () {",
											"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
											"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
											"            });",
											"       ",
											"           pm.test(\"Response condition is not null\", function () {",
											"               pm.expect(jsonData.condition).not.equal(undefined);",
											"               pm.environment.set(\"condition\", jsonData.condition);",
											"           });",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response on Payer side');",
											"           });",
											"           // postman.setNextRequest(null);",
											"      }",
											"       ",
											"   });",
											"}, 1000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYERFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "payeefsp"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "{{fspiopSignature}}"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"type": "text",
										"value": "POST"
									},
									{
										"key": "FSPIOP-URI",
										"type": "text",
										"value": "/quotes"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{quoteRequest}}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70ca4b84-0b84-4596-9a1f-c7f1c0bbd323",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// //Check the request that Switch forwards to payeefsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              ",
											"              //Check the Headers",
											"              var headers = response.json().headers;",
											"              ",
											"                pm.test(\"payeefsp fspiop-source is goldenpayerfsp\", function () {",
											"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-destination is goldenpayeefsp\", function () {",
											"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
											"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
											"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
											"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
											"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
											"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
											"                });",
											"                ",
											"                ",
											"                //Check the data",
											"                var jsonData = response.json().data;",
											"                pm.test(\"payeefsp data should have the same transferId as request\", function () {",
											"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same payerfspId as request\", function () {",
											"                  pm.expect(jsonData.payerFsp).to.eql('payerfsp');",
											"                });",
											"                pm.test(\"payeefsp data should have the same payeefspId as request\", function () {",
											"                  pm.expect('payeefsp');",
											"                });",
											"                pm.test(\"payeefsp data should have the same amount as request\", function () {",
											"                  pm.expect(jsonData.amount.amount).to.eql('10');",
											"                });",
											"                pm.test(\"payeefsp data should have the same currency as request\", function () {",
											"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same expiration as request\", function () {",
											"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
											"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same condition as request\", function () {",
											"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
											"                });",
											"                ",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response on payee side');",
											"              });",
											"              // postman.setNextRequest(null)",
											"          }",
											"  });",
											"}, 1100)",
											"",
											"//Check the callback response that Switch forwards to payerfsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"            //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is goldenpayeefsp \", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            ",
											"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            pm.test(\"Response data does not have transferId\", function () {",
											"               pm.expect(jsonData.transferId).to.eql(undefined);",
											"            });",
											"            pm.test(\"Response status is COMMITTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
											"            });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response on payer side');",
											"              });",
											"              // postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 1300)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "fd33bc37-e73d-4c4f-96fd-e65ac112539b",
										"exec": [
											"var navigator = {}; //fake a navigator object for the lib",
											"var window = {}; //fake a window object for the lib",
											"eval(pm.environment.get('jrsassign'));",
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
											"",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
											"",
											"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
											"var sHeader = JSON.stringify(oHeader);",
											"console.log(`sHeader: ${sHeader}`)",
											"",
											"var objPayload = {",
											"  \"transferId\": pm.environment.get('transfer_ID'),",
											"  \"payerFsp\": \"payerfsp\",",
											"  \"payeeFsp\": \"payeefsp\",",
											"  \"amount\": {",
											"    \"amount\": \"10\",",
											"    \"currency\": pm.environment.get('currency')",
											"  },",
											"  \"expiration\": pm.environment.get('transferExpiration'),",
											"  \"ilpPacket\": pm.environment.get('ilpPacket'),",
											"  \"condition\": pm.environment.get('condition')",
											"}",
											"var sPayload = JSON.stringify(objPayload)",
											"console.log(`sPayload: ${sPayload}`)",
											"pm.variables.set(\"transferRequest\", sPayload);",
											"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
											"//console.log(`token: ${token}`)",
											"",
											"// var encodedHeaders = btoa(sHeader)",
											"",
											"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
											"// var token = JSON.stringify(ofspiopSignature)",
											"",
											"const [ protectedHeaderBase64, , signature ] = token.split('.');",
											"",
											"const signatureObject = {",
											"    signature: signature.replace('\"', ''),",
											"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
											"};",
											"",
											"console.log(JSON.stringify(signatureObject))",
											"",
											"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYERFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "payeefsp"
									},
									{
										"key": "FSPIOP-Signature",
										"type": "text",
										"value": "{{fspiopSignature}}"
									},
									{
										"key": "FSPIOP-URI",
										"type": "text",
										"value": "/transfers"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"type": "text",
										"value": "POST"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{transferRequest}}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "GET transfer - COMMITTED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bfdaf534-81d9-41e8-9c72-a40a2772200a",
										"exec": [
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8816cc73-48eb-43df-88c2-afbc323de291",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check the callback response that Switch forwards to payerfsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"            //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is switch \", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('switch');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-signature is not empty\", function () {",
											"                pm.expect(headers['fspiop-signature']).not.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            pm.test(\"Response data does not have transferId\", function () {",
											"               pm.expect(jsonData.transferId).to.eql(undefined);",
											"            });",
											"            pm.test(\"Response status is COMMITTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
											"            });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response on payer side');",
											"              });",
											"              // postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 1300)",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYERFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Source is original receiver",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "220a7ed8-38d9-4545-8a77-6d8ed0b83af3",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('nonExistingtransferID', generatedUUID);",
											"pm.environment.set('dateHeader', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8017f739-f50d-4cab-b305-1b2c55db9fd6",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"            //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is switch\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('switch');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"payeefsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
											"            });",
											"            ",
											"            pm.test(\"payeefsp fspiop-signature is not null\", function () {",
											"                pm.expect(headers['fspiop-signature']).not.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            pm.test(\"Transfer State is COMMITTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
											"              });",
											"              ",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              // postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 2000)",
											"",
											"// setTimeout(function () {",
											"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"nonExistingtransferID\"), function (err, response) {",
											"//           if(response.responseSize !== 0) {",
											"//             //Checking headers",
											"//             var headers = response.json().headers;",
											"//             pm.test(\"payerfsp fspiop-source is switch\", function () {",
											"//                 pm.expect(headers['fspiop-source']).to.eql('switch');",
											"//             });",
											"            ",
											"//             pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"//                 pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"//             });",
											"            ",
											"//             pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"//                 pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"//             });",
											"            ",
											"//             pm.test(\"payerfsp accept is empty\", function () {",
											"//                 pm.expect(headers['accept']).to.eql(undefined);",
											"//             });",
											"            ",
											"//         //    pm.test(\"fspiop-signature is returned\", function () {",
											"//          //       pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"payeefsp_fspiop_signature\"));",
											"//         //    });",
											"        ",
											"//           pm.test(\"fspiop-signature is returned\", function () {",
											"//             pm.expect(headers['fspiop-signature']).to.eql(undefined);",
											"//           });",
											"           ",
											"            ",
											"//          /*   pm.test(\"payerfsp fspiop-uri includes transfers\", function () {",
											"//                 pm.expect(headers['fspiop-uri']).to.include('/transfers');",
											"//             });",
											"            ",
											"//             pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"//                 pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"//             });*/",
											"            ",
											"//             var jsonData = response.json().data;",
											"//             pm.test(\"Error Code should be returned\", function () {",
											"//                 pm.expect(jsonData.errorInformation.errorCode).to.eql('3208');",
											"//               });",
											"//               pm.test(\"Error Description should be returned\", function () {",
											"//                 pm.expect(jsonData.errorInformation.errorDescription).to.eql('Provided Transfer ID was not found on the server.');",
											"//               });",
											"//           } else {",
											"//               pm.test(\"Transfer FAILED\", function () {",
											"//                 throw new Error('Did not receive response');",
											"//               });",
											"//               // postman.setNextRequest(null)",
											"//           }",
											"//   });",
											"// }, 2000)",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYEEFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payeefsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								},
								"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer.\n\nTake a new UUID which does not exist in DB.i.e valid format but shd not exist in DB.\nor\nchange (not remove) one letter or digit from a transfer ID that exists in DB."
							},
							"response": []
						},
						{
							"name": "Source is not part of original sender/receiver",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5228f437-cc6f-4e8c-9bbe-0be6fb686972",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('nonExistingtransferID', generatedUUID);",
											"pm.environment.set('dateHeader', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "54b365a0-872e-4d21-bb8e-831995494d07",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"            //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is switch\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('switch');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"payeefsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\")+'/error');",
											"            });",
											"            ",
											"            pm.test(\"payeefsp fspiop-signature is not null\", function () {",
											"                pm.expect(headers['fspiop-signature']).not.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            pm.test(\"Error Code should be returned\", function () {",
											"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3000');",
											"              });",
											"              pm.test(\"Error Description should be returned\", function () {",
											"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Generic client error');",
											"              });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              // postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 2000)",
											"",
											"// setTimeout(function () {",
											"//   pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"nonExistingtransferID\"), function (err, response) {",
											"//           if(response.responseSize !== 0) {",
											"//             //Checking headers",
											"//             var headers = response.json().headers;",
											"//             pm.test(\"payerfsp fspiop-source is switch\", function () {",
											"//                 pm.expect(headers['fspiop-source']).to.eql('switch');",
											"//             });",
											"            ",
											"//             pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"//                 pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"//             });",
											"            ",
											"//             pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"//                 pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"//             });",
											"            ",
											"//             pm.test(\"payerfsp accept is empty\", function () {",
											"//                 pm.expect(headers['accept']).to.eql(undefined);",
											"//             });",
											"            ",
											"//         //    pm.test(\"fspiop-signature is returned\", function () {",
											"//          //       pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"payeefsp_fspiop_signature\"));",
											"//         //    });",
											"        ",
											"//           pm.test(\"fspiop-signature is returned\", function () {",
											"//             pm.expect(headers['fspiop-signature']).to.eql(undefined);",
											"//           });",
											"           ",
											"            ",
											"//          /*   pm.test(\"payerfsp fspiop-uri includes transfers\", function () {",
											"//                 pm.expect(headers['fspiop-uri']).to.include('/transfers');",
											"//             });",
											"            ",
											"//             pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"//                 pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"//             });*/",
											"            ",
											"//             var jsonData = response.json().data;",
											"//             pm.test(\"Error Code should be returned\", function () {",
											"//                 pm.expect(jsonData.errorInformation.errorCode).to.eql('3208');",
											"//               });",
											"//               pm.test(\"Error Description should be returned\", function () {",
											"//                 pm.expect(jsonData.errorInformation.errorDescription).to.eql('Provided Transfer ID was not found on the server.');",
											"//               });",
											"//           } else {",
											"//               pm.test(\"Transfer FAILED\", function () {",
											"//                 throw new Error('Did not receive response');",
											"//               });",
											"//               // postman.setNextRequest(null)",
											"//           }",
											"//   });",
											"// }, 2000)",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{TESTFSP1_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "testfsp1"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								},
								"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer.\n\nTake a new UUID which does not exist in DB.i.e valid format but shd not exist in DB.\nor\nchange (not remove) one letter or digit from a transfer ID that exists in DB."
							},
							"response": []
						},
						{
							"name": "200 - 3208 - TransferId not found",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "87d563ea-5f58-4d1a-9af1-3b8b38105836",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('nonExistingtransferID', generatedUUID);",
											"pm.environment.set('dateHeader', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cd122472-72ad-4c49-81c6-9804fd19849a",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"",
											"//Check the callback response that Switch forwards to payerfsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"nonExistingtransferID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"            //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is switch\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('switch');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"payeefsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"nonExistingtransferID\")+'/error');",
											"            });",
											"            ",
											"            pm.test(\"payeefsp fspiop-signature is not null\", function () {",
											"                pm.expect(headers['fspiop-signature']).not.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            pm.test(\"Error Code should be returned 3208\", function () {",
											"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3208');",
											"              });",
											"              pm.test(\"Error Description Transfer ID not found should be returned\", function () {",
											"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Transfer ID not found - Provided Transfer ID was not found on the server.');",
											"              });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              // postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 2000)",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYERFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{nonExistingtransferID}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{nonExistingtransferID}}"
									]
								},
								"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer.\n\nTake a new UUID which does not exist in DB.i.e valid format but shd not exist in DB.\nor\nchange (not remove) one letter or digit from a transfer ID that exists in DB."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "funds_out",
					"item": [
						{
							"name": "Reserve&Commit",
							"item": [
								{
									"name": "Record Funds Out Prepare&Reserve- payerfsp",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "17de07a9-1dbb-491a-85db-80a0ed796ffb",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('fundsOutPrepareReserveTransferId', generatedUUID);",
													"pm.environment.set('fundsOutPrepareReserveAmount', 1000);",
													"",
													"",
													"const payerfspGetStatusRequest = {",
													"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
													"  method: 'GET',",
													"  header: {",
													"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"      \"FSPIOP-Source\": \"hub_operator\",",
													"      \"Content-Type\": \"application/json\"",
													"  }",
													"};",
													"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
													"    console.log(response.json())",
													"    var jsonData = response.json()",
													"    for(var i in jsonData) {",
													"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"            pm.environment.set(\"payerfspSettlementAccountId\",jsonData[i].id)",
													"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutPrepare\",jsonData[i].value)",
													"        }",
													"    }",
													"});",
													"",
													"const hubGetStatusRequest = {",
													"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
													"  method: 'GET',",
													"  header: {",
													"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"      \"FSPIOP-Source\": \"hub_operator\",",
													"      \"Content-Type\": \"application/json\"",
													"  }",
													"};",
													"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
													"    console.log(response.json())",
													"    var jsonData = response.json()",
													"    for(var i in jsonData) {",
													"        if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutPrepare\",jsonData[i].value)",
													"        }",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4e251f26-b470-473b-b3f0-b5a83dc55692",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"    const payerfspGetStatusRequest = {",
													"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
													"      method: 'GET',",
													"      header: {",
													"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"          \"FSPIOP-Source\": \"hub_operator\",",
													"          \"Content-Type\": \"application/json\"",
													"      }",
													"    };",
													"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
													"        console.log(response.json())",
													"        var jsonData = response.json()",
													"        var payerfspSettlementAccountBalanceAfterFundsOutPrepare",
													"        for(var i in jsonData) {",
													"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"                payerfspSettlementAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
													"            }",
													"        }",
													"        var payerfspExpectedBalance = -(-Number(pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutPrepare'))- Number(pm.environment.get(\"fundsOutPrepareReserveAmount\")))",
													"        pm.test(\"Final Payerfsp Settlement Account Balance should decrease by the transfer amount\", function () {",
													"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutPrepare).to.eql(payerfspExpectedBalance);",
													"          });    ",
													"    ",
													"    });",
													"    ",
													"    const hubGetStatusRequest = {",
													"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
													"      method: 'GET',",
													"      header: {",
													"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"          \"Content-Type\": \"application/json\"",
													"      }",
													"    };",
													"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
													"        console.log(response.json())",
													"        var jsonData = response.json()",
													"        var hubReconAccountBalanceAfterFundsOutPrepare",
													"        for(var i in jsonData) {",
													"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"                hubReconAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
													"            }",
													"        }",
													"        var hubExpectedBalance = pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutPrepare\")//-pm.environment.get(\"fundsOutPrepareReserveAmount\")",
													"        pm.test(\"Final Hub Reconciliation Account Balance should stay the same in prepare phase\", function () {",
													"            pm.expect(hubReconAccountBalanceAfterFundsOutPrepare).to.eql(hubExpectedBalance);",
													"          });  ",
													"    });",
													"}, 2000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "hub_operator"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{fundsOutPrepareReserveTransferId}}\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsOutPrepareReserve\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": {{fundsOutPrepareReserveAmount}},\n    \"currency\": \"{{currency}}\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"accounts",
												"{{payerfspSettlementAccountId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Record Funds Out Prepare&Reserve - transferStatus",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e88b0997-a066-4ec9-b931-517a8c014c1b",
												"exec": [
													"pm.environment.set('dateHeader', (new Date()).toUTCString());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4379e341-a299-4396-8c94-a4377be32070",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"    ",
													"    const getTransferResponse = {",
													"      url: pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"fundsOutPrepareReserveTransferId\"),",
													"      method: 'GET',",
													"      header: {",
													"          \"Authorization\":\"Bearer \"+pm.environment.get(\"PAYERFSP_BEARER_TOKEN\"),",
													"          \"FSPIOP-Source\": pm.environment.get(\"payerfsp\"),",
													"          \"Content-Type\": \"application/json\"",
													"      }",
													"    };",
													"    pm.sendRequest(getTransferResponse, function (err, response) {",
													"        if(response.responseSize !== 0) {",
													"            ",
													"            //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is switch \", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('switch');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-signature is not empty\", function () {",
													"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
													"                });",
													"            ",
													"            ",
													"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{fundsOutPrepareReserveTransferId}}\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"fundsOutPrepareReserveTransferId\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"                ",
													"            var jsonData = response.json().data",
													"            pm.test(\"Transfer State should be RESERVED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql(\"RESERVED\");",
													"              });    ",
													"        } else {",
													"            pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"            });",
													"            // postman.setNextRequest(null)",
													"        }",
													"    });",
													"}, 2000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{dateHeader}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											}
										],
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsOutPrepareReserveTransferId}}",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers",
												"{{fundsOutPrepareReserveTransferId}}"
											]
										},
										"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
									},
									"response": []
								},
								{
									"name": "Record Funds Out Commit - payerfsp",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c721f6a5-fa55-4d4f-9f8a-1e9fb859ae57",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('fundsOutCommitTransferId', generatedUUID);",
													"pm.environment.set('fundsOutCommitAmount', 1000);",
													"",
													"",
													"const payerfspGetStatusRequest = {",
													"    url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/' + pm.environment.get(\"payerfsp\") + '/accounts',",
													"    method: 'GET',",
													"    header: {",
													"        \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"        \"FSPIOP-Source\": \"hub_operator\",",
													"        \"Content-Type\": \"application/json\"",
													"    }",
													"};",
													"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
													"    console.log(response.json())",
													"    var jsonData = response.json()",
													"    for (var i in jsonData) {",
													"        if (jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutCommit\", jsonData[i].value)",
													"        }",
													"    }",
													"});",
													"",
													"const hubGetStatusRequest = {",
													"    url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/Hub/accounts',",
													"    method: 'GET',",
													"    header: {",
													"        \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"        \"FSPIOP-Source\": \"hub_operator\",",
													"        \"Content-Type\": \"application/json\"",
													"    }",
													"};",
													"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
													"    console.log(response.json())",
													"    var jsonData = response.json()",
													"    for (var i in jsonData) {",
													"        if (jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutCommit\", jsonData[i].value)",
													"        }",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9bdf89d3-2508-4c31-abfb-92f1d826ba1d",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"    const payerfspGetStatusRequest = {",
													"        url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/' + pm.environment.get(\"payerfsp\") + '/accounts',",
													"        method: 'GET',",
													"        header: {",
													"            \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"            \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"            \"Content-Type\": \"application/json\"",
													"        }",
													"    };",
													"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
													"        console.log(response.json())",
													"        var jsonData = response.json()",
													"        var payerfspSettlementAccountBalanceAfterFundsOutCommit",
													"        for (var i in jsonData) {",
													"            if (jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"                payerfspSettlementAccountBalanceAfterFundsOutCommit = jsonData[i].value",
													"            }",
													"        }",
													"        var payerfspExpectedBalance = pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutCommit')//-pm.environment.get(\"fundsOutPrepareAmount\")",
													"        pm.test(\"Final Payerfsp Settlement Account Balance should not change during commit phase\", function () {",
													"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutCommit).to.eql(payerfspExpectedBalance);",
													"        });",
													"",
													"    });",
													"",
													"    const hubGetStatusRequest = {",
													"        url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/Hub/accounts',",
													"        method: 'GET',",
													"        header: {",
													"            \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"            \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"            \"Content-Type\": \"application/json\"",
													"        }",
													"    };",
													"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
													"        console.log(response.json())",
													"        var jsonData = response.json()",
													"        var hubReconAccountBalanceAfterFundsOutCommit",
													"        for (var i in jsonData) {",
													"            if (jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"                hubReconAccountBalanceAfterFundsOutCommit = jsonData[i].value",
													"            }",
													"        }",
													"        console.log(`hubReconAccountBalanceBeforeFundsOutCommit: ${Number(pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutCommit\"))}`);",
													"        console.log(`fundsOutCommitAmount: ${Number(pm.environment.get(\"fundsOutCommitAmount\"))}`);",
													"",
													"        var hubExpectedBalance = Number(pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutCommit\")) - Number(pm.environment.get(\"fundsOutCommitAmount\"))",
													"        pm.test(\"Final Hub Reconciliation Account Balance should decrease by the transfer amount\", function () {",
													"            pm.expect(hubReconAccountBalanceAfterFundsOutCommit).to.eql(hubExpectedBalance);",
													"        });",
													"    });",
													"}, 2000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{hub_operator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"recordFundsOutCommit\",\n  \"reason\": \"Reason for out flow of funds\"\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}/transfers/{{fundsOutPrepareReserveTransferId}}",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"accounts",
												"{{payerfspSettlementAccountId}}",
												"transfers",
												"{{fundsOutPrepareReserveTransferId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Record Funds Out Commit - transfer status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ea78bb68-1807-45a5-9f71-810de279d972",
												"exec": [
													"pm.environment.set('dateHeader', (new Date()).toUTCString());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e43ddd41-c975-4113-a93e-9a8c4db6c6b0",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"    ",
													"    const getTransferResponse = {",
													"      url: pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"fundsOutPrepareReserveTransferId\"),",
													"      method: 'GET',",
													"      header: {",
													"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"          \"FSPIOP-Source\": \"hub_operator\",",
													"          \"Content-Type\": \"application/json\"",
													"      }",
													"    };",
													"    pm.sendRequest(getTransferResponse, function (err, response) {",
													"        if(response.responseSize !== 0) {",
													"            //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is switch \", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('switch');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-signature is not empty\", function () {",
													"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
													"                });",
													"            ",
													"            ",
													"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{fundsOutPrepareReserveTransferId}}\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"fundsOutPrepareReserveTransferId\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data",
													"            pm.test(\"Transfer State should be COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql(\"COMMITTED\");",
													"              });    ",
													"        } else {",
													"            pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"            });",
													"            // postman.setNextRequest(null)",
													"        }",
													"    });",
													"}, 2000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{dateHeader}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											}
										],
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsOutPrepareReserveTransferId}}",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers",
												"{{fundsOutPrepareReserveTransferId}}"
											]
										},
										"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Reserve&Abort",
							"item": [
								{
									"name": "Record Funds Out Prepare&Reserve- payerfsp",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "dd4646ea-0161-4b2a-af03-0847244b4ecf",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('fundsOutPrepareReserveTransferId', generatedUUID);",
													"pm.environment.set('fundsOutPrepareReserveAmount', 1000);",
													"",
													"",
													"const payerfspGetStatusRequest = {",
													"    url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/' + pm.environment.get(\"payerfsp\") + '/accounts',",
													"    method: 'GET',",
													"    header: {",
													"        \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"        \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"        \"Content-Type\": \"application/json\"",
													"    }",
													"};",
													"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
													"    console.log(response.json())",
													"    var jsonData = response.json()",
													"    for (var i in jsonData) {",
													"        if (jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"            pm.environment.set(\"payerfspSettlementAccountId\", jsonData[i].id)",
													"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutPrepare\", jsonData[i].value)",
													"        }",
													"    }",
													"});",
													"",
													"const hubGetStatusRequest = {",
													"    url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/Hub/accounts',",
													"    method: 'GET',",
													"    header: {",
													"        \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"        \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"        \"Content-Type\": \"application/json\"",
													"    }",
													"};",
													"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
													"    console.log(response.json())",
													"    var jsonData = response.json()",
													"    for (var i in jsonData) {",
													"        if (jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutPrepare\", jsonData[i].value)",
													"        }",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "06fc4215-dda9-45f7-9aec-ea831e1119e7",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"    const payerfspGetStatusRequest = {",
													"        url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/' + pm.environment.get(\"payerfsp\") + '/accounts',",
													"        method: 'GET',",
													"        header: {",
													"            \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"            \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"            \"Content-Type\": \"application/json\"",
													"        }",
													"    };",
													"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
													"        console.log(response.json())",
													"        var jsonData = response.json()",
													"        var payerfspSettlementAccountBalanceAfterFundsOutPrepare",
													"        for (var i in jsonData) {",
													"            if (jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"                payerfspSettlementAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
													"            }",
													"        }",
													"        var payerfspExpectedBalance = -(-Number(pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutPrepare')) - Number(pm.environment.get(\"fundsOutPrepareReserveAmount\")))",
													"        pm.test(\"Final Payerfsp Settlement Account Balance should decrease by the transfer amount\", function () {",
													"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutPrepare).to.eql(payerfspExpectedBalance);",
													"        });",
													"",
													"    });",
													"",
													"    const hubGetStatusRequest = {",
													"        url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/Hub/accounts',",
													"        method: 'GET',",
													"        header: {",
													"            \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"            \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"            \"Content-Type\": \"application/json\"",
													"        }",
													"    };",
													"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
													"        console.log(response.json())",
													"        var jsonData = response.json()",
													"        var hubReconAccountBalanceAfterFundsOutPrepare",
													"        for (var i in jsonData) {",
													"            if (jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"                hubReconAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
													"            }",
													"        }",
													"        var hubExpectedBalance = pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutPrepare\")//-pm.environment.get(\"fundsOutPrepareReserveAmount\")",
													"        pm.test(\"Final Hub Reconciliation Account Balance should stay the same in prepare phase\", function () {",
													"            pm.expect(hubReconAccountBalanceAfterFundsOutPrepare).to.eql(hubExpectedBalance);",
													"        });",
													"    });",
													"}, 2000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "hub_operator"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{fundsOutPrepareReserveTransferId}}\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsOutPrepareReserve\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": {{fundsOutPrepareReserveAmount}},\n    \"currency\": \"{{currency}}\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"accounts",
												"{{payerfspSettlementAccountId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Record Funds Out Prepare&Reserve - transfer status (BUG)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8987c464-5929-4749-9dcd-86c2c338e5e5",
												"exec": [
													"pm.environment.set('dateHeader', (new Date()).toUTCString());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "62884037-2fb0-41a9-887b-719634a59412",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"    ",
													"    const getTransferResponse = {",
													"      url: pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"fundsOutPrepareReserveTransferId\"),",
													"      method: 'GET',",
													"      header: {",
													"          \"Authorization\":\"Bearer \"+pm.environment.get(\"PAYERFSP_BEARER_TOKEN\"),",
													"          \"FSPIOP-Source\": pm.environment.get(\"payerfsp\"),",
													"          \"Content-Type\": \"application/json\"",
													"      }",
													"    };",
													"    pm.sendRequest(getTransferResponse, function (err, response) {",
													"        if(response.responseSize !== 0) {",
													"            ",
													"            //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is switch \", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('switch');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-signature is not empty\", function () {",
													"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
													"                });",
													"            ",
													"            ",
													"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{fundsOutPrepareReserveTransferId}}\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"fundsOutPrepareReserveTransferId\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data",
													"            pm.test(\"Transfer State should be RESERVED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql(\"RESERVED\");",
													"              }); ",
													"        } else {",
													"            pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"            });",
													"            // postman.setNextRequest(null)",
													"        }",
													"    ",
													"    });",
													"}, 2000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{dateHeader}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											}
										],
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsOutPrepareReserveTransferId}}",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers",
												"{{fundsOutPrepareReserveTransferId}}"
											]
										},
										"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
									},
									"response": []
								},
								{
									"name": "Record Funds Out Abort - payerfsp",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3435c151-6ae7-40ce-9b14-a1867e9b87d2",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('fundsOutCommitAmount', 1000);",
													"",
													"",
													"const payerfspGetStatusRequest = {",
													"    url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/' + pm.environment.get(\"payerfsp\") + '/accounts',",
													"    method: 'GET',",
													"    header: {",
													"        \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"        \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"        \"Content-Type\": \"application/json\"",
													"    }",
													"};",
													"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
													"    console.log(response.json())",
													"    var jsonData = response.json()",
													"    for (var i in jsonData) {",
													"        if (jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutAbort\", jsonData[i].value)",
													"        }",
													"    }",
													"});",
													"",
													"const hubGetStatusRequest = {",
													"    url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/Hub/accounts',",
													"    method: 'GET',",
													"    header: {",
													"        \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"        \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"        \"Content-Type\": \"application/json\"",
													"    }",
													"};",
													"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
													"    console.log(response.json())",
													"    var jsonData = response.json()",
													"    for (var i in jsonData) {",
													"        if (jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutAbort\", jsonData[i].value)",
													"        }",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4e922852-ceb9-4c62-a0e8-5b8323315ae1",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"    const payerfspGetStatusRequest = {",
													"        url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/' + pm.environment.get(\"payerfsp\") + '/accounts',",
													"        method: 'GET',",
													"        header: {",
													"            \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"            \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"            \"Content-Type\": \"application/json\"",
													"        }",
													"    };",
													"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
													"        console.log(response.json())",
													"        var jsonData = response.json()",
													"        var payerfspSettlementAccountBalanceAfterFundsOutAbort",
													"        for (var i in jsonData) {",
													"            if (jsonData[i].ledgerAccountType === 'SETTLEMENT' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"                payerfspSettlementAccountBalanceAfterFundsOutAbort = jsonData[i].value",
													"            }",
													"        }",
													"        var payerfspExpectedBalance = pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutPrepare')//-pm.environment.get(\"fundsOutPrepareAmount\")",
													"        pm.test(\"Final Payerfsp Settlement Account Balance should rollback to the value before Prepare\", function () {",
													"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutAbort).to.eql(payerfspExpectedBalance);",
													"        });",
													"",
													"    });",
													"",
													"    const hubGetStatusRequest = {",
													"        url: pm.environment.get(\"HOST_CENTRAL_LEDGER\") + pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\") + '/participants/Hub/accounts',",
													"        method: 'GET',",
													"        header: {",
													"            \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"            \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"            \"Content-Type\": \"application/json\"",
													"        }",
													"    };",
													"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
													"        console.log(response.json())",
													"        var jsonData = response.json()",
													"        var hubReconAccountBalanceAfterFundsOutCommit",
													"        for (var i in jsonData) {",
													"            if (jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION' && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
													"                hubReconAccountBalanceAfterFundsOutAbort = jsonData[i].value",
													"            }",
													"        }",
													"        var hubExpectedBalance = Number(pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutAbort\"))",
													"        pm.test(\"Final Hub Reconciliation Account Balance should not change\", function () {",
													"            pm.expect(hubReconAccountBalanceAfterFundsOutAbort).to.eql(hubExpectedBalance);",
													"        });",
													"    });",
													"}, 2000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{hub_operator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"action\": \"recordFundsOutAbort\",\n  \"reason\": \"Reason for out flow of funds\"\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}/transfers/{{fundsOutPrepareReserveTransferId}}",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"accounts",
												"{{payerfspSettlementAccountId}}",
												"transfers",
												"{{fundsOutPrepareReserveTransferId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "(BUG)Record Funds Out Abort - transfer status",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b6dff8f0-a445-45e9-98d8-ed03d2c8f5f4",
												"exec": [
													"pm.environment.set('dateHeader', (new Date()).toUTCString());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "09aa2480-beb9-45bf-9122-b25fec62316b",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"    ",
													"    const getTransferResponse = {",
													"      url: pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"fundsOutPrepareReserveTransferId\"),",
													"      method: 'GET',",
													"      header: {",
													"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
													"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"          \"Content-Type\": \"application/json\"",
													"      }",
													"    };",
													"    pm.sendRequest(getTransferResponse, function (err, response) {",
													"        if(response.responseSize !== 0) {",
													"            ",
													"            //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is switch \", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('switch');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-signature is not empty\", function () {",
													"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
													"                });",
													"            ",
													"            ",
													"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"fundsOutPrepareReserveTransferId\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data",
													"            pm.test(\"Transfer State should be ABORTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql(\"ABORTED\");",
													"              });    ",
													"        } else {",
													"            pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"            });",
													"            // postman.setNextRequest(null)",
													"        }",
													"    ",
													"    });",
													"}, 2000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{dateHeader}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											}
										],
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsOutPrepareReserveTransferId}}",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers",
												"{{fundsOutPrepareReserveTransferId}}"
											]
										},
										"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "funds_in",
					"item": [
						{
							"name": "Record Funds In - prepare",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dcc2b0e5-c7c8-4295-9e77-4a508a40bf3b",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('fundsInPrepareTransferId', generatedUUID);",
											"pm.environment.set('fundsInPrepareAmount', 5000);",
											"",
											"",
											"const payerfspGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if((jsonData[i].ledgerAccountType === 'SETTLEMENT') && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"payerfspSettlementAccountId\",jsonData[i].id)",
											"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsIn\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											"",
											"const hubGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if((jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsIn\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "71aa2e11-0aeb-432e-a6e1-7b70be17ce3e",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    const payerfspGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"        console.log('payerfsp accounts: ',response.json())",
											"        var jsonData = response.json()",
											"        var payerfspSettlementAccountBalanceAfterFundsIn",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT'  && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                payerfspSettlementAccountBalanceAfterFundsIn = jsonData[i].value",
											"            }",
											"        }",
											"        var payerfspExpectedBalance = -(-Number(pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsIn')) + Number(pm.environment.get('fundsInPrepareAmount')))",
											"        pm.test(\"Final Payerfsp Settlement Account Balance should be same as before FundsIn + fundsInPrepareAmount\", function () {",
											"            pm.expect(payerfspSettlementAccountBalanceAfterFundsIn).to.eql(payerfspExpectedBalance);",
											"          });    ",
											"    ",
											"    });",
											"    ",
											"    const hubGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/Hub/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"        console.log('hub accounts balance: ',response.json())",
											"        var jsonData = response.json()",
											"        var currentHubReconAccountBalance",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION'  && (jsonData[i].currency === pm.environment.get(\"currency\"))) {",
											"                hubReconAccountBalanceAfterFundsIn = jsonData[i].value",
											"            }",
											"        }",
											"        var hubExpectedBalance = Number(pm.environment.get(\"hubReconAccountBalanceBeforeFundsIn\"))+Number(pm.environment.get('fundsInPrepareAmount'))",
											"        console.log(hubExpectedBalance)",
											"        pm.test(\"Final Hub Reconciliation Account Balance should be same as before FundsIn + fundsInPrepareAmount\", function () {",
											"            pm.expect(hubReconAccountBalanceAfterFundsIn).to.eql(hubExpectedBalance);",
											"          });  ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "hub_operator"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{fundsInPrepareTransferId}}\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsIn\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": \"{{fundsInPrepareAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Record Funds In - prepare transfer status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f15a71f4-1edc-40f8-bd55-ee8178d7c0bc",
										"exec": [
											"pm.environment.set('dateHeader', (new Date()).toUTCString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9633cfda-619f-4842-a8f5-8255d0ff12fb",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    ",
											"    const getTransferResponse = {",
											"      url: pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"fundsInPrepareTransferId\"),",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"PAYERFSP_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"payerfsp\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    }",
											"    pm.sendRequest(getTransferResponse, function (err, response) {",
											"        if(response.responseSize !== 0) {",
											"            ",
											"            //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is switch \", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('switch');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-signature is not empty\", function () {",
											"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
											"                });",
											"            ",
											"            ",
											"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"fundsInPrepareTransferId\"));",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
											"            });",
											"            ",
											"            var jsonData = response.json().data",
											"            pm.test(\"Transfer State should be COMMITTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql(\"COMMITTED\");",
											"            });   ",
											"            ",
											"        } else {",
											"            pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"            });",
											"            // postman.setNextRequest(null)",
											"        }",
											"    ",
											"    });",
											"}, 4000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYERFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "payerfsp"
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsInPrepareTransferId}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{fundsInPrepareTransferId}}"
									]
								},
								"description": "The HTTP request GET /transfers/<ID> is used to get information regarding an earlier created or requested transfer. The <ID> in the URI should contain the transferId that was used for the creation of the transfer."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "settlement_management",
					"item": [
						{
							"name": "SETTLE  settlement",
							"item": [
								{
									"name": "Setup Settlement",
									"item": [
										{
											"name": "Setup Accounts",
											"item": [
												{
													"name": "Activate currency Account",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6d3b6559-3c99-4f1d-9d4a-e689fc5472cf",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"const fsps = ['payerfsp','payeefsp','testfsp1','testfsp2'];",
																	"",
																	"pm.response.json().map(participant => {",
																	"    if(fsps.include(participant.name)) {",
																	"       const participantGetRequest = {",
																	"          url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+participant.name,",
																	"          method: 'GET',",
																	"          header: {",
																	"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
																	"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
																	"              \"Content-Type\": \"application/json\"",
																	"          }",
																	"        };",
																	"        pm.sendRequest(participantGetRequest, function (err, response) {",
																	"            if(response.responseSize !== 0) {",
																	"                response.json().accounts.map(account => {",
																	"                    const url = pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+participant.name+'/accounts/'+account.id;",
																	"                    const header =  {",
																	"                          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
																	"                          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
																	"                          \"Content-Type\": \"application/json\"",
																	"                      };",
																	"                    if(account.currency === pm.environment.get('currency')) {",
																	"                        const participantOutRequest = {",
																	"                          url: url,",
																	"                          method: 'PUT',",
																	"                          header: header,",
																	"                          body: {",
																	"                              \"isActive\": true",
																	"                            }",
																	"                        };",
																	"                    } else {",
																	"                        const participantOutRequest = {",
																	"                          url: url,",
																	"                          method: 'PUT',",
																	"                          header: header,",
																	"                          body: {",
																	"                              \"isActive\": false",
																	"                            }",
																	"                        };",
																	"                    }",
																	"                })",
																	"            } else {",
																	"                pm.test(\"Request FAILED\", function () {",
																	"                    throw new Error('Did not receive response');",
																	"                });",
																	"                // postman.setNextRequest(null)",
																	"            }",
																	"        }); ",
																	"    }",
																	"})"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"value": "hub_operator",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants",
															"host": [
																"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
															],
															"path": [
																"participants"
															]
														}
													},
													"response": []
												}
											],
											"description": "Activate only XOF accounts and disable rest of the accounts",
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Create Settlement on the current open window",
											"item": [
												{
													"name": "Get Existing Open Window",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "2c9d8aa8-0334-4655-8097-dc90389c85bd",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"State should be OPEN\", function () {",
																	"    var jsonData = pm.response.json();",
																	"    pm.expect(jsonData[0].state).to.eql('OPEN');",
																	"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
																	"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"value": "hub_operator",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/json",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
															"host": [
																"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
															],
															"path": [
																"settlementWindows"
															],
															"query": [
																{
																	"key": "state",
																	"value": "OPEN"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Close Existing Window",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "df7e3efc-7b40-4d15-aa8d-943c4a262949",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"New window State should be OPEN\", function () {",
																	"    pm.expect(pm.response.json().state).to.eql('OPEN');",
																	"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
																	"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
																	"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
																	"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{hub_operator}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
														},
														"url": {
															"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
															"host": [
																"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
															],
															"path": [
																"settlementWindows",
																"{{openWindowID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Settlement for Closed Window",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "61856019-aa3b-4c64-ab51-1d7f3cabf276",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.environment.set(\"settlementId\", pm.response.json().id);",
																	"var jsonData = pm.response.json();",
																	"    ",
																	"pm.test(\"Settlement State should be PENDING_SETTLEMENT\", function () {",
																	"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
																	"});",
																	"",
																	"pm.test(\"Number of associated windows should be 1\", function () {",
																	"    pm.expect(jsonData.settlementWindows.length).to.eql(1);",
																	"});",
																	"",
																	"pm.test(\"Associated Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
																	"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
																	"});",
																	"",
																	"pm.test(\"Associated Settlement Window state should be PENDING_SETTLEMENT \", function () {",
																	"    pm.expect(jsonData.settlementWindows[0].state).to.eql('PENDING_SETTLEMENT');",
																	"});",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{hub_operator}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"settlementModel\": \"DEFERREDNET\",\n  \"reason\": \"TESTING\",\n  \"settlementWindows\": [\n    {\n      \"id\": {{closedWindowID}}\n    }\n  ]\n}\n"
														},
														"url": {
															"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
															"host": [
																"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
															],
															"path": [
																"settlements"
															]
														}
													},
													"response": []
												},
												{
													"name": "Prepare Settlement",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "3a9a8618-815c-415b-8af8-7e3b8754378c",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"var jsonData = pm.response.json();",
																	"jsonData.participants.map(participant => {",
																	"  participant.accounts",
																	"    .filter(account => account.netSettlementAmount.currency === pm.environment.get('currency'))",
																	"    .forEach(curAccount => {",
																	"      const participantPutRequest = {",
																	"        url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\") + pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\") + '/settlements/' + pm.environment.get(\"settlementId\"),",
																	"        method: 'PUT',",
																	"        header: {",
																	"          \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
																	"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
																	"          \"Content-Type\": \"application/json\"",
																	"        },",
																	"        body: {",
																	"          mode: 'raw',",
																	"          raw: JSON.stringify(",
																	"            {",
																	"              \"participants\": [",
																	"                {",
																	"                  \"id\": participant.id,",
																	"                  \"accounts\": [",
																	"                    {",
																	"                      \"id\": curAccount.id,",
																	"                      \"reason\": \"Transfers recorded for payer\",",
																	"                      \"state\": \"PS_TRANSFERS_RECORDED\"",
																	"                    }",
																	"                  ]",
																	"                }",
																	"              ]",
																	"            }",
																	"          )",
																	"        }",
																	"      };",
																	"      pm.sendRequest(participantPutRequest, function (err, response) {",
																	"        console.log(response.json());",
																	"      });",
																	"    })",
																	"})",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{hub_operator}}"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
															"host": [
																"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
															],
															"path": [
																"settlements",
																"{{settlementId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reserve Settlement",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "f5cd6456-a362-490f-95f4-8ac9c635adaf",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"var jsonData = pm.response.json();",
																	"jsonData.participants.map(participant => {",
																	"  participant.accounts",
																	"    .filter(account => account.netSettlementAmount.currency === pm.environment.get('currency'))",
																	"    .forEach(curAccount => {",
																	"      const participantPutRequest = {",
																	"        url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\") + pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\") + '/settlements/' + pm.environment.get(\"settlementId\"),",
																	"        method: 'PUT',",
																	"        header: {",
																	"          \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
																	"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
																	"          \"Content-Type\": \"application/json\"",
																	"        },",
																	"        body: {",
																	"          mode: 'raw',",
																	"          raw: JSON.stringify(",
																	"            {",
																	"              \"participants\": [",
																	"                {",
																	"                  \"id\": participant.id,",
																	"                  \"accounts\": [",
																	"                    {",
																	"                      \"id\": curAccount.id,",
																	"                      \"reason\": \"Transfers reserved\",",
																	"                      \"state\": \"PS_TRANSFERS_RESERVED\"",
																	"                    }",
																	"                  ]",
																	"                }",
																	"              ]",
																	"            }",
																	"          )",
																	"        }",
																	"      };",
																	"      pm.sendRequest(participantPutRequest, function (err, response) {",
																	"        console.log(response.json());",
																	"      });",
																	"    })",
																	"})"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{hub_operator}}"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
															"host": [
																"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
															],
															"path": [
																"settlements",
																"{{settlementId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Commit Settlement",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "bca2c045-7969-46d1-a3e6-39138fcc578a",
																"exec": [
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"var jsonData = pm.response.json();",
																	"jsonData.participants.map(participant => {",
																	"    participant.accounts",
																	"                    .filter(account => account.netSettlementAmount.currency === pm.environment.get('currency'))",
																	"                    .forEach(curAccount => {",
																	"                        const participantPutRequest = {",
																	"                          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
																	"                          method: 'PUT',",
																	"                          header: {",
																	"                              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
																	"                              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
																	"                              \"Content-Type\": \"application/json\"",
																	"                          },",
																	"                          body: {",
																	"                            mode: 'raw',",
																	"                            raw: JSON.stringify(",
																	"                                {",
																	"                                  \"participants\": [",
																	"                                    {",
																	"                                      \"id\": participant.id,",
																	"                                      \"accounts\": [",
																	"                                        {",
																	"                                          \"id\": curAccount.id,",
																	"                                          \"reason\": \"Transfers committed\",",
																	"                                          \"state\": \"PS_TRANSFERS_COMMITTED\"",
																	"                                        }",
																	"                                      ]",
																	"                                    }",
																	"                                  ]",
																	"                                }",
																	"                            )",
																	"                          }",
																	"                        };",
																	"                        pm.sendRequest(participantPutRequest, function (err, response) {",
																	"                            console.log(response.json());",
																	"                        });",
																	"                    })",
																	"})",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{hub_operator}}"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
															"host": [
																"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
															],
															"path": [
																"settlements",
																"{{settlementId}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Settle Settlement",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "a8e47cee-22fc-4603-8295-1e7c3cce0f46",
																"exec": [
																	"",
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"jsonData.participants.map(participant => {",
																	"    participant.accounts",
																	"                    .filter(account => account.netSettlementAmount.currency === pm.environment.get('currency'))",
																	"                    .forEach(curAccount => {",
																	"                        const participantPutRequest = {",
																	"                          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
																	"                          method: 'PUT',",
																	"                          header: {",
																	"                              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
																	"                              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
																	"                              \"Content-Type\": \"application/json\"",
																	"                          },",
																	"                          body: {",
																	"                            mode: 'raw',",
																	"                            raw: JSON.stringify(",
																	"                                {",
																	"                                  \"participants\": [",
																	"                                    {",
																	"                                      \"id\": participant.id,",
																	"                                      \"accounts\": [",
																	"                                        {",
																	"                                          \"id\": curAccount.id,",
																	"                                          \"reason\": \"Transfers settled for payer\",",
																	"                                          \"state\": \"SETTLED\"",
																	"                                        }",
																	"                                      ]",
																	"                                    }",
																	"                                  ]",
																	"                                }",
																	"                            )",
																	"                          }",
																	"                        };",
																	"                        pm.sendRequest(participantPutRequest, function (err, response) {",
																	"                            console.log(response.json());",
																	"                        });",
																	"                    })",
																	"})",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{hub_operator}}"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
															"host": [
																"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
															],
															"path": [
																"settlements",
																"{{settlementId}}"
															]
														}
													},
													"response": []
												}
											],
											"description": "This will allow us to not leave any window unsettled. Means eachwindow that we close using this collection will be gone through the whole manual settlement process and the positions gets reset.",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "87d39929-2c89-4496-8b6f-b0b4f5e62259",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "aa7a0dc1-a633-480a-a5a1-6ba23436366c",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Store Settlement&Position Account Balances Before Transfers",
											"item": [
												{
													"name": "testfsp1 balances",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "40d61972-4f2d-44da-967e-7432c4202855",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"jsonData",
																	"    .filter(account => account.currency === pm.environment.get('currency'))",
																	"    .forEach(curAccount => {",
																	"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
																	"            pm.environment.set(\"testfsp1SettleAccountBalanceBeforeTransfer\", curAccount.value);",
																	"        }",
																	"        if(curAccount.ledgerAccountType === \"POSITION\") {",
																	"            pm.environment.set(\"testfsp1PositionAccountBalanceBeforeTransfer\", curAccount.value);",
																	"    /*        pm.test(\"testfsp1 position account balance is 0\", function () {",
																	"                pm.expect(curAccount.value).to.eql(0);",
																	"            });*/",
																	"        }",
																	"    })",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"value": "{{hub_operator}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
															"host": [
																"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
															],
															"path": [
																"participants",
																"testfsp1",
																"accounts"
															]
														}
													},
													"response": []
												},
												{
													"name": "testfsp2 balances",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "f0d835d5-0f10-4962-be2a-3b4704305bcd",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"jsonData",
																	"    .filter(account => account.currency === pm.environment.get('currency'))",
																	"    .forEach(curAccount => {",
																	"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
																	"            pm.environment.set(\"testfsp2SettleAccountBalanceBeforeTransfer\", curAccount.value);",
																	"        }",
																	"        if(curAccount.ledgerAccountType === \"POSITION\") {",
																	"            pm.environment.set(\"testfsp2PositionAccountBalanceBeforeTransfer\", curAccount.value);",
																	"    /*        pm.test(\"testfsp2 position account balance is 0\", function () {",
																	"                pm.expect(curAccount.value).to.eql(0);",
																	"            });*/",
																	"        }",
																	"    })",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"value": "{{hub_operator}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
															"host": [
																"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
															],
															"path": [
																"participants",
																"testfsp2",
																"accounts"
															]
														}
													},
													"response": []
												},
												{
													"name": "payerfsp balances",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "46f4d3f3-000c-470a-8071-3b9a7eaed767",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"jsonData",
																	"    .filter(account => account.currency === pm.environment.get('currency'))",
																	"    .forEach(curAccount => {",
																	"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
																	"            pm.environment.set(\"payerfspSettleAccountBalanceBeforeTransfer\", curAccount.value);",
																	"        }",
																	"        if(curAccount.ledgerAccountType === \"POSITION\") {",
																	"            pm.environment.set(\"payerfspPositionAccountBalanceBeforeTransfer\", curAccount.value);",
																	"     /*       pm.test(\"payerfsp position account balance is 0\", function () {",
																	"                pm.expect(curAccount.value).to.eql(0);",
																	"            });*/",
																	"        }",
																	"    })",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{hub_operator}}"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payerfsp/accounts",
															"host": [
																"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
															],
															"path": [
																"participants",
																"payerfsp",
																"accounts"
															]
														}
													},
													"response": []
												},
												{
													"name": "payeefsp balances",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "aef43375-5707-479a-a5ac-046322e831c5",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"jsonData",
																	"    .filter(account => account.currency === pm.environment.get('currency'))",
																	"    .forEach(curAccount => {",
																	"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
																	"            pm.environment.set(\"payeefspSettleAccountBalanceBeforeTransfer\", curAccount.value);",
																	"        }",
																	"        if(curAccount.ledgerAccountType === \"POSITION\") {",
																	"            pm.environment.set(\"payeefspPositionAccountBalanceBeforeTransfer\", curAccount.value);",
																	"       /*     pm.test(\"payeefsp position account balance is 0\", function () {",
																	"                pm.expect(curAccount.value).to.eql(0);",
																	"            });*/",
																	"        }",
																	"    })",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{hub_operator}}"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payeefsp/accounts",
															"host": [
																"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
															],
															"path": [
																"participants",
																"payeefsp",
																"accounts"
															]
														}
													},
													"response": []
												},
												{
													"name": "HUB balances",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "9239785b-f5de-4aca-8b6d-21f92368baec",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"jsonData",
																	"    .filter(account => account.currency === pm.environment.get('currency'))",
																	"    .forEach(curAccount => {",
																	"        if(curAccount.ledgerAccountType === \"HUB_RECONCILIATION\") {",
																	"            pm.environment.set(\"hubReconciliationAccountBalanceBeforeTransfer\", curAccount.value);",
																	"        }",
																	"        if(curAccount.ledgerAccountType === \"HUB_MULTILATERAL_SETTLEMENT\") {",
																	"            pm.environment.set(\"hubMultilateralAccountBalanceBeforeTransfer\", curAccount.value);",
																	"        }",
																	"    })",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{hub_operator}}"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/Hub/accounts",
															"host": [
																"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
															],
															"path": [
																"participants",
																"Hub",
																"accounts"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Run Quote & Transfers",
											"item": [
												{
													"name": "Send Quote 1 (testfsp1 to testfsp2)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "6a97099a-7820-498b-9ec6-b34ebabb84f3",
																"exec": [
																	"  var navigator = {}; ",
																	"var window = {}; ",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('quoteId', generatedUUID);",
																	"generatedUUID = uuid.v4();",
																	"pm.environment.set('transactionId', generatedUUID);",
																	"",
																	"pm.variables.set('quoteDate', (new Date()).toUTCString());",
																	"pm.variables.set('payerName', 'PayerFirst PayerLast');",
																	"pm.variables.set('payerMSISDN', '918381008987');",
																	"",
																	"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
																	"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
																	"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp1\",\"FSPIOP-Destination\":\"testfsp2\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"  \"quoteId\": pm.environment.get('quoteId'),",
																	"  \"transactionId\": pm.environment.get('transactionId'),",
																	"  \"payer\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
																	"      \"fspId\": \"testfsp1\"",
																	"    },",
																	"    \"personalInfo\": {",
																	"      \"complexName\": {",
																	"        \"firstName\": \"Mats\",",
																	"        \"lastName\": \"Hagman\"",
																	"      },",
																	"      \"dateOfBirth\": \"1983-10-25\"",
																	"    }",
																	"  },",
																	"  \"payee\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
																	"      \"fspId\": \"testfsp2\"",
																	"    }",
																	"  },",
																	"  \"amountType\": \"RECEIVE\",",
																	"  \"amount\": {",
																	"    \"amount\": \"60\",",
																	"    \"currency\": pm.environment.get('currency')",
																	"  },",
																	"  \"transactionType\": {",
																	"    \"scenario\": \"TRANSFER\",",
																	"    \"initiator\": \"PAYER\",",
																	"    \"initiatorType\": \"CONSUMER\"",
																	"  },",
																	"  \"note\": \"hej\"",
																	"}",
																	"",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"quoteRequest\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp1JWSKey'));",
																	"console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "abf9e979-cbe1-488e-b28c-01cc11340c54",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    pm.sendRequest(pm.environment.get(\"TESTFSP2_SDK_TESTAPI_URL\") + \"/requests/\" + pm.environment.get(\"quoteId\"), function (err, response) {\r",
																	"        if (response.responseSize !== 0) {\r",
																	"\r",
																	"            //Check the Headers\r",
																	"            var headers = response.json().headers;\r",
																	"\r",
																	"            pm.test(\"testfsp2 fspiop-source is testfsp1\", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('testfsp1');\r",
																	"            });\r",
																	"\r",
																	"            pm.test(\"testfsp2 fspiop-destination is testfsp2\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('testfsp2');\r",
																	"            });\r",
																	"\r",
																	"            pm.test(\"testfsp2 fspiop-signature is same as sent in the request\", function () {\r",
																	"                pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
																	"            });\r",
																	"\r",
																	"            pm.test(\"testfsp2 accept is same as sent in the request\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"            });\r",
																	"\r",
																	"            pm.test(\"testfsp2 content-typeis same as sent in the request\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"            });\r",
																	"\r",
																	"            pm.test(\"testfsp2 fspiop-uri is /quotes\", function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes');\r",
																	"            });\r",
																	"\r",
																	"            pm.test(\"testfsp2 fspiop-http-method is POST\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
																	"            });\r",
																	"\r",
																	"        } else {\r",
																	"            pm.test(\"Quote FAILED\", function () {\r",
																	"                throw new Error('Did not receive request on payee side');\r",
																	"            });\r",
																	"            // postman.setNextRequest(null)\r",
																	"        }\r",
																	"    });\r",
																	"}, 2500)\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"    pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_TESTAPI_URL\") + \"/callbacks/\" + pm.environment.get(\"quoteId\"), function (err, response) {\r",
																	"        if (response.responseSize !== 0) {\r",
																	"            //Checking headers\r",
																	"            var headers = response.json().headers;\r",
																	"            pm.test(\"testfsp1 fspiop-source is testfsp2\", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('testfsp2');\r",
																	"            });\r",
																	"\r",
																	"            pm.test(\"testfsp1 fspiop-destination is testfsp1\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');\r",
																	"            });\r",
																	"\r",
																	"            pm.test(\"testfsp1 content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"            });\r",
																	"\r",
																	"            pm.test(\"testfsp1 accept is empty\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql(undefined);\r",
																	"            });\r",
																	"\r",
																	"\r",
																	"\r",
																	"            var { signature, protectedHeader } = JSON.parse(headers['fspiop-signature'])\r",
																	"            // var strData = JSON.stringify(response.json().data)\r",
																	"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`\r",
																	"            // console.log(`token: ${token}`)\r",
																	"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldentestfsp2JWSPubKey'), {alg: ['RS256']})\r",
																	"            // console.log(`isValid: ${isValid}`)\r",
																	"            // pm.test(\"Check if the response is JWS valid\", function () {\r",
																	"            //     pm.expect(isValid).to.eql(true);\r",
																	"            // });\r",
																	"\r",
																	"            //Validate protected header inside Signature\r",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))\r",
																	"            console.log('decodedProtectedHeaders:', decodedProtectedHeaders)\r",
																	"\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\" + pm.environment.get(\"quoteId\"), function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/' + pm.environment.get(\"quoteId\"));\r",
																	"            });\r",
																	"\r",
																	"\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldentestfsp2\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('testfsp2');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be testfsp1\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('testfsp1');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);\r",
																	"            });\r",
																	"\r",
																	"            pm.test(\"testfsp1 FSPIOP-URI to be /quotes/\" + pm.environment.get(\"quoteId\"), function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/' + pm.environment.get(\"quoteId\"));\r",
																	"            });\r",
																	"\r",
																	"            pm.test(\"testfsp1 fspiop-http-method is PUT\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
																	"            });\r",
																	"\r",
																	"            var jsonData = response.json().data;\r",
																	"\r",
																	"            pm.test(\"Response quoteId is  null\", function () {\r",
																	"                pm.expect(jsonData.quoteId).to.eql(undefined);\r",
																	"\r",
																	"            });\r",
																	"\r",
																	"            pm.test(\"Response ilpPacket is not null\", function () {\r",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);\r",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);\r",
																	"            });\r",
																	"\r",
																	"            pm.test(\"Response condition is not null\", function () {\r",
																	"                pm.expect(jsonData.condition).not.equal(undefined);\r",
																	"                pm.environment.set(\"condition\", jsonData.condition);\r",
																	"            });\r",
																	"        } else {\r",
																	"            pm.test(\"Quote FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on Payer side');\r",
																	"            });\r",
																	"            // postman.setNextRequest(null);\r",
																	"        }\r",
																	"\r",
																	"    });\r",
																	"}, 2000)\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TESTFSP1_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "testfsp1",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "testfsp2",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/quotes",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{quoteRequest}}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Transfer 1 ( testfsp1 to testfsp2 )",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "fef26277-bad8-4292-889d-fb113de2c33b",
																"exec": [
																	"var navigator = {}; //fake a navigator object for the lib\r",
																	"var window = {}; //fake a window object for the lib\r",
																	"eval(pm.environment.get('jrsassign'));\r",
																	"\r",
																	"var uuid = require('uuid');\r",
																	"var generatedUUID = uuid.v4();\r",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
																	"\r",
																	"\r",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
																	"\r",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
																	"\r",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp1\",\"FSPIOP-Destination\":\"testfsp2\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};\r",
																	"var sHeader = JSON.stringify(oHeader);\r",
																	"console.log(`sHeader: ${sHeader}`)\r",
																	"\r",
																	"var objPayload = {\r",
																	"  \"transferId\": pm.environment.get('transfer_ID'),\r",
																	"  \"payerFsp\": \"testfsp1\",\r",
																	"  \"payeeFsp\": \"testfsp2\",\r",
																	"  \"amount\": {\r",
																	"    \"amount\": \"60\",\r",
																	"    \"currency\": pm.environment.get('currency')\r",
																	"  },\r",
																	"  \"expiration\": pm.environment.get('transferExpiration'),\r",
																	"  \"ilpPacket\": pm.environment.get('ilpPacket'),\r",
																	"  \"condition\": pm.environment.get('condition')\r",
																	"}\r",
																	"var sPayload = JSON.stringify(objPayload)\r",
																	"console.log(`sPayload: ${sPayload}`)\r",
																	"pm.variables.set(\"transferRequest\", sPayload);\r",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp1JWSKey'));\r",
																	"//console.log(`token: ${token}`)\r",
																	"\r",
																	"// var encodedHeaders = btoa(sHeader)\r",
																	"\r",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
																	"// var token = JSON.stringify(ofspiopSignature)\r",
																	"\r",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
																	"\r",
																	"const signatureObject = {\r",
																	"    signature: signature.replace('\"', ''),\r",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
																	"};\r",
																	"\r",
																	"console.log(JSON.stringify(signatureObject))\r",
																	"\r",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "f17b08c9-feb1-4fd4-afad-20d08a6c8283",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});\r",
																	"\r",
																	"// //Check the request that Switch forwards to testfsp2\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"TESTFSP2_SDK_TESTAPI_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"              \r",
																	"              //Check the Headers\r",
																	"              var headers = response.json().headers;\r",
																	"              \r",
																	"                pm.test(\"testfsp2 fspiop-source is goldentestfsp1\", function () {\r",
																	"                    pm.expect(headers['fspiop-source']).to.eql('testfsp1');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-destination is goldentestfsp2\", function () {\r",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('testfsp2');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 content-typeis same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 accept is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-signature is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-http-method is POST\", function () {\r",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-uri is /transfers\", function () {\r",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');\r",
																	"                });\r",
																	"                \r",
																	"                \r",
																	"                //Check the data\r",
																	"                var jsonData = response.json().data;\r",
																	"                pm.test(\"testfsp2 data should have the same transferId as request\", function () {\r",
																	"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));\r",
																	"                });\r",
																	"                pm.test(\"testfsp2 data should have the same amount as request\", function () {\r",
																	"                  pm.expect(jsonData.amount.amount).to.eql('60');\r",
																	"                });\r",
																	"                pm.test(\"testfsp2 data should have the same currency as request\", function () {\r",
																	"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));\r",
																	"                });\r",
																	"                pm.test(\"testfsp2 data should have the same expiration as request\", function () {\r",
																	"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));\r",
																	"                });\r",
																	"                pm.test(\"testfsp2 data should have the same ilpPacket as request\", function () {\r",
																	"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));\r",
																	"                });\r",
																	"                pm.test(\"testfsp2 data should have the same condition as request\", function () {\r",
																	"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));\r",
																	"                });\r",
																	"                \r",
																	"          } else {\r",
																	"              pm.test(\"Transfer FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on payee side');\r",
																	"              });\r",
																	"              // postman.setNextRequest(null)\r",
																	"          }\r",
																	"  });\r",
																	"}, 1100)\r",
																	"\r",
																	"//Check the callback response that Switch forwards to testfsp1\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"            //Checking headers\r",
																	"            var headers = response.json().headers;\r",
																	"            pm.test(\"testfsp1 fspiop-source is goldentestfsp2 \", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('testfsp2');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 fspiop-destination is goldentestfsp1\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 accept is empty\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql(undefined);\r",
																	"            });\r",
																	"            \r",
																	"            \r",
																	"            pm.test(\"testfsp1 fspiop-uri includes /transfers/{{transfer_ID}}\", function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 fspiop-http-method is PUT\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
																	"            });\r",
																	"            \r",
																	"            var jsonData = response.json().data;\r",
																	"            pm.test(\"Response data does not have transferId\", function () {\r",
																	"               pm.expect(jsonData.transferId).to.eql(undefined);\r",
																	"            });\r",
																	"            pm.test(\"Response status is COMMITTED\", function () {\r",
																	"                pm.expect(jsonData.transferState).to.eql('COMMITTED');\r",
																	"            });\r",
																	"          } else {\r",
																	"              pm.test(\"Transfer FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on payer side');\r",
																	"              });\r",
																	"              // postman.setNextRequest(null)\r",
																	"          }\r",
																	"   });\r",
																	"}, 1500)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TESTFSP1_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "testfsp1",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "testfsp2",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferRequest}}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Quote 2 (testfsp1 to payeefsp)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "048ea8bd-706c-4ae2-a3c6-eb4237a8ddb4",
																"exec": [
																	"var navigator = {}; ",
																	"var window = {}; ",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('quoteId', generatedUUID);",
																	"generatedUUID = uuid.v4();",
																	"pm.environment.set('transactionId', generatedUUID);",
																	"",
																	"pm.variables.set('quoteDate', (new Date()).toUTCString());",
																	"pm.variables.set('payerName', 'PayerFirst PayerLast');",
																	"pm.variables.set('payerMSISDN', '918381008987');",
																	"",
																	"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
																	"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
																	"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp1\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"  \"quoteId\": pm.environment.get('quoteId'),",
																	"  \"transactionId\": pm.environment.get('transactionId'),",
																	"  \"payer\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
																	"      \"fspId\": \"testfsp1\"",
																	"    },",
																	"    \"personalInfo\": {",
																	"      \"complexName\": {",
																	"        \"firstName\": \"Mats\",",
																	"        \"lastName\": \"Hagman\"",
																	"      },",
																	"      \"dateOfBirth\": \"1983-10-25\"",
																	"    }",
																	"  },",
																	"  \"payee\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
																	"      \"fspId\": \"payeefsp\"",
																	"    }",
																	"  },",
																	"  \"amountType\": \"RECEIVE\",",
																	"  \"amount\": {",
																	"    \"amount\": \"55\",",
																	"    \"currency\": pm.environment.get('currency')",
																	"  },",
																	"  \"transactionType\": {",
																	"    \"scenario\": \"TRANSFER\",",
																	"    \"initiator\": \"PAYER\",",
																	"    \"initiatorType\": \"CONSUMER\"",
																	"  },",
																	"  \"note\": \"hej\"",
																	"}",
																	"",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"quoteRequest\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp1JWSKey'));",
																	"console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "57dd336e-479b-4077-9fdc-524b214c388c",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"              \r",
																	"              //Check the Headers\r",
																	"              var headers = response.json().headers;\r",
																	"              \r",
																	"                pm.test(\"payeefsp fspiop-source is testfsp1\", function () {\r",
																	"                    pm.expect(headers['fspiop-source']).to.eql('testfsp1');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {\r",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payeefsp accept is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {\r",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {\r",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
																	"                });\r",
																	"                \r",
																	"          } else {\r",
																	"              pm.test(\"Quote FAILED\", function () {\r",
																	"                throw new Error('Did not receive request on payee side');\r",
																	"              });\r",
																	"              // postman.setNextRequest(null)\r",
																	"          }\r",
																	"   });\r",
																	"}, 1100)\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {\r",
																	"      if(response.responseSize !== 0) {\r",
																	"          //Checking headers\r",
																	"            var headers = response.json().headers;\r",
																	"            pm.test(\"testfsp1 fspiop-source is payeefsp\", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 fspiop-destination is testfsp1\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 accept is empty\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql(undefined);\r",
																	"            });\r",
																	"            \r",
																	"            \r",
																	"            \r",
																	"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])\r",
																	"            // var strData = JSON.stringify(response.json().data)\r",
																	"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`\r",
																	"            // console.log(`token: ${token}`)\r",
																	"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})\r",
																	"            // console.log(`isValid: ${isValid}`)\r",
																	"            // pm.test(\"Check if the response is JWS valid\", function () {\r",
																	"            //     pm.expect(isValid).to.eql(true);\r",
																	"            // });\r",
																	"            \r",
																	"            //Validate protected header inside Signature\r",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))\r",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)\r",
																	"            \r",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
																	"            });\r",
																	"            \r",
																	"\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be testfsp1\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('testfsp1');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);\r",
																	"            });\r",
																	"           \r",
																	"            pm.test(\"testfsp1 FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 fspiop-http-method is PUT\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
																	"            });\r",
																	"            \r",
																	"            var jsonData = response.json().data;\r",
																	"            \r",
																	"            pm.test(\"Response quoteId is  null\", function () {\r",
																	"                pm.expect(jsonData.quoteId).to.eql(undefined);\r",
																	"                \r",
																	"            });\r",
																	"          \r",
																	"            pm.test(\"Response ilpPacket is not null\", function () {\r",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);\r",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);\r",
																	"            });\r",
																	"       \r",
																	"           pm.test(\"Response condition is not null\", function () {\r",
																	"               pm.expect(jsonData.condition).not.equal(undefined);\r",
																	"               pm.environment.set(\"condition\", jsonData.condition);\r",
																	"           });\r",
																	"      } else {\r",
																	"          pm.test(\"Quote FAILED\", function () {\r",
																	"            throw new Error('Did not receive response on Payer side');\r",
																	"           });\r",
																	"           // postman.setNextRequest(null);\r",
																	"      }\r",
																	"       \r",
																	"   });\r",
																	"}, 1000)\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TESTFSP1_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "testfsp1",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "payeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/quotes",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{quoteRequest}}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Transfer 2 (testfsp1 to payeefsp)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "b8cbe91b-01ed-4f32-be2a-c2ab3994b052",
																"exec": [
																	"var navigator = {}; //fake a navigator object for the lib\r",
																	"var window = {}; //fake a window object for the lib\r",
																	"eval(pm.environment.get('jrsassign'));\r",
																	"\r",
																	"var uuid = require('uuid');\r",
																	"var generatedUUID = uuid.v4();\r",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
																	"\r",
																	"\r",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
																	"\r",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
																	"\r",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp1\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};\r",
																	"var sHeader = JSON.stringify(oHeader);\r",
																	"console.log(`sHeader: ${sHeader}`)\r",
																	"\r",
																	"var objPayload = {\r",
																	"  \"transferId\": pm.environment.get('transfer_ID'),\r",
																	"  \"payerFsp\": \"testfsp1\",\r",
																	"  \"payeeFsp\": \"payeefsp\",\r",
																	"  \"amount\": {\r",
																	"    \"amount\": \"55\",\r",
																	"    \"currency\": pm.environment.get('currency')\r",
																	"  },\r",
																	"  \"expiration\": pm.environment.get('transferExpiration'),\r",
																	"  \"ilpPacket\": pm.environment.get('ilpPacket'),\r",
																	"  \"condition\": pm.environment.get('condition')\r",
																	"}\r",
																	"var sPayload = JSON.stringify(objPayload)\r",
																	"console.log(`sPayload: ${sPayload}`)\r",
																	"pm.variables.set(\"transferRequest\", sPayload);\r",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp1JWSKey'));\r",
																	"//console.log(`token: ${token}`)\r",
																	"\r",
																	"// var encodedHeaders = btoa(sHeader)\r",
																	"\r",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
																	"// var token = JSON.stringify(ofspiopSignature)\r",
																	"\r",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
																	"\r",
																	"const signatureObject = {\r",
																	"    signature: signature.replace('\"', ''),\r",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
																	"};\r",
																	"\r",
																	"console.log(JSON.stringify(signatureObject))\r",
																	"\r",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "cb859d32-d27b-4a9d-9085-8a5ccba46fa5",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});\r",
																	"\r",
																	"// //Check the request that Switch forwards to payeefsp\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"              \r",
																	"              //Check the Headers\r",
																	"              var headers = response.json().headers;\r",
																	"              \r",
																	"                pm.test(\"payeefsp fspiop-source is goldentestfsp1\", function () {\r",
																	"                    pm.expect(headers['fspiop-source']).to.eql('testfsp1');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payeefsp fspiop-destination is goldenpayeefsp\", function () {\r",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payeefsp accept is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {\r",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {\r",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');\r",
																	"                });\r",
																	"                \r",
																	"                \r",
																	"                //Check the data\r",
																	"                var jsonData = response.json().data;\r",
																	"                pm.test(\"payeefsp data should have the same transferId as request\", function () {\r",
																	"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));\r",
																	"                });\r",
																	"                pm.test(\"payeefsp data should have the same amount as request\", function () {\r",
																	"                  pm.expect(jsonData.amount.amount).to.eql('55');\r",
																	"                });\r",
																	"                pm.test(\"payeefsp data should have the same currency as request\", function () {\r",
																	"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));\r",
																	"                });\r",
																	"                pm.test(\"payeefsp data should have the same expiration as request\", function () {\r",
																	"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));\r",
																	"                });\r",
																	"                pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {\r",
																	"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));\r",
																	"                });\r",
																	"                pm.test(\"payeefsp data should have the same condition as request\", function () {\r",
																	"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));\r",
																	"                });\r",
																	"                \r",
																	"          } else {\r",
																	"              pm.test(\"Transfer FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on payee side');\r",
																	"              });\r",
																	"              // postman.setNextRequest(null)\r",
																	"          }\r",
																	"  });\r",
																	"}, 3000)\r",
																	"\r",
																	"//Check the callback response that Switch forwards to testfsp1\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"            //Checking headers\r",
																	"            var headers = response.json().headers;\r",
																	"            pm.test(\"testfsp1 fspiop-source is goldenpayeefsp \", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 fspiop-destination is goldentestfsp1\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 accept is empty\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql(undefined);\r",
																	"            });\r",
																	"            \r",
																	"            \r",
																	"            pm.test(\"testfsp1 fspiop-uri includes /transfers/{{transfer_ID}}\", function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp1 fspiop-http-method is PUT\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
																	"            });\r",
																	"            \r",
																	"            var jsonData = response.json().data;\r",
																	"            pm.test(\"Response data does not have transferId\", function () {\r",
																	"               pm.expect(jsonData.transferId).to.eql(undefined);\r",
																	"            });\r",
																	"            pm.test(\"Response status is COMMITTED\", function () {\r",
																	"                pm.expect(jsonData.transferState).to.eql('COMMITTED');\r",
																	"            });\r",
																	"          } else {\r",
																	"              pm.test(\"Transfer FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on payer side');\r",
																	"              });\r",
																	"              // postman.setNextRequest(null)\r",
																	"          }\r",
																	"   });\r",
																	"}, 3000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TESTFSP1_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "testfsp1",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "payeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Quote 3 (payerfspto testfsp1)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "33e45a49-da4a-4e42-9a1f-e778d4e0bf60",
																"exec": [
																	"var navigator = {}; \r",
																	"var window = {}; \r",
																	"eval(pm.environment.get('jrsassign'));\r",
																	"\r",
																	"\r",
																	"var uuid = require('uuid');\r",
																	"var generatedUUID = uuid.v4();\r",
																	"pm.environment.set('quoteId', generatedUUID);\r",
																	"generatedUUID = uuid.v4();\r",
																	"pm.environment.set('transactionId', generatedUUID);\r",
																	"\r",
																	"pm.variables.set('quoteDate', (new Date()).toUTCString());\r",
																	"pm.variables.set('payerName', 'PayerFirst PayerLast');\r",
																	"pm.variables.set('payerMSISDN', '918381008987');\r",
																	"\r",
																	"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');\r",
																	"pm.variables.set('expectedPayeeLastName', 'GoldenLast');\r",
																	"pm.variables.set('expectedPayeeDOB', '2010-10-10');\r",
																	"\r",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"testfsp1\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};\r",
																	"var sHeader = JSON.stringify(oHeader);\r",
																	"console.log(`sHeader: ${sHeader}`)\r",
																	"\r",
																	"var objPayload = {\r",
																	"  \"quoteId\": pm.environment.get('quoteId'),\r",
																	"  \"transactionId\": pm.environment.get('transactionId'),\r",
																	"  \"payer\": {\r",
																	"    \"partyIdInfo\": {\r",
																	"      \"partyIdType\": \"MSISDN\",\r",
																	"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),\r",
																	"      \"fspId\": \"payerfsp\"\r",
																	"    },\r",
																	"    \"personalInfo\": {\r",
																	"      \"complexName\": {\r",
																	"        \"firstName\": \"Mats\",\r",
																	"        \"lastName\": \"Hagman\"\r",
																	"      },\r",
																	"      \"dateOfBirth\": \"1983-10-25\"\r",
																	"    }\r",
																	"  },\r",
																	"  \"payee\": {\r",
																	"    \"partyIdInfo\": {\r",
																	"      \"partyIdType\": \"MSISDN\",\r",
																	"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),\r",
																	"      \"fspId\": \"testfsp1\"\r",
																	"    }\r",
																	"  },\r",
																	"  \"amountType\": \"RECEIVE\",\r",
																	"  \"amount\": {\r",
																	"    \"amount\": \"35\",\r",
																	"    \"currency\": pm.environment.get('currency')\r",
																	"  },\r",
																	"  \"transactionType\": {\r",
																	"    \"scenario\": \"TRANSFER\",\r",
																	"    \"initiator\": \"PAYER\",\r",
																	"    \"initiatorType\": \"CONSUMER\"\r",
																	"  },\r",
																	"  \"note\": \"hej\"\r",
																	"}\r",
																	"\r",
																	"var sPayload = JSON.stringify(objPayload)\r",
																	"console.log(`sPayload: ${sPayload}`)\r",
																	"pm.variables.set(\"quoteRequest\", sPayload);\r",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));\r",
																	"console.log(`token: ${token}`)\r",
																	"\r",
																	"// var encodedHeaders = btoa(sHeader)\r",
																	"\r",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
																	"// var token = JSON.stringify(ofspiopSignature)\r",
																	"\r",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
																	"\r",
																	"const signatureObject = {\r",
																	"    signature: signature.replace('\"', ''),\r",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
																	"};\r",
																	"\r",
																	"console.log(JSON.stringify(signatureObject))\r",
																	"\r",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "7e1c0885-4adb-459c-a337-2b3aab715f28",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_TESTAPI_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"              \r",
																	"              //Check the Headers\r",
																	"              var headers = response.json().headers;\r",
																	"              \r",
																	"                pm.test(\"testfsp1 fspiop-source is payerfsp\", function () {\r",
																	"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp1 fspiop-destination is testfsp1\", function () {\r",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('testfsp1');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp1 fspiop-signature is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp1 accept is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp1 content-typeis same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp1 fspiop-uri is /quotes\", function () {\r",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp1 fspiop-http-method is POST\", function () {\r",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
																	"                });\r",
																	"                \r",
																	"          } else {\r",
																	"              pm.test(\"Quote FAILED\", function () {\r",
																	"                throw new Error('Did not receive request on payee side');\r",
																	"              });\r",
																	"              // postman.setNextRequest(null)\r",
																	"          }\r",
																	"   });\r",
																	"}, 1100)\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {\r",
																	"      if(response.responseSize !== 0) {\r",
																	"          //Checking headers\r",
																	"            var headers = response.json().headers;\r",
																	"            pm.test(\"payerfsp fspiop-source is testfsp1\", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('testfsp1');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payerfsp accept is empty\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql(undefined);\r",
																	"            });\r",
																	"            \r",
																	"            \r",
																	"            \r",
																	"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])\r",
																	"            // var strData = JSON.stringify(response.json().data)\r",
																	"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`\r",
																	"            // console.log(`token: ${token}`)\r",
																	"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldentestfsp1JWSPubKey'), {alg: ['RS256']})\r",
																	"            // console.log(`isValid: ${isValid}`)\r",
																	"            // pm.test(\"Check if the response is JWS valid\", function () {\r",
																	"            //     pm.expect(isValid).to.eql(true);\r",
																	"            // });\r",
																	"            \r",
																	"            //Validate protected header inside Signature\r",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))\r",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)\r",
																	"            \r",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
																	"            });\r",
																	"            \r",
																	"\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldentestfsp1\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('testfsp1');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);\r",
																	"            });\r",
																	"           \r",
																	"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
																	"            });\r",
																	"            \r",
																	"            var jsonData = response.json().data;\r",
																	"            \r",
																	"            pm.test(\"Response quoteId is  null\", function () {\r",
																	"                pm.expect(jsonData.quoteId).to.eql(undefined);\r",
																	"                \r",
																	"            });\r",
																	"          \r",
																	"            pm.test(\"Response ilpPacket is not null\", function () {\r",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);\r",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);\r",
																	"            });\r",
																	"       \r",
																	"           pm.test(\"Response condition is not null\", function () {\r",
																	"               pm.expect(jsonData.condition).not.equal(undefined);\r",
																	"               pm.environment.set(\"condition\", jsonData.condition);\r",
																	"           });\r",
																	"      } else {\r",
																	"          pm.test(\"Quote FAILED\", function () {\r",
																	"            throw new Error('Did not receive response on Payer side');\r",
																	"           });\r",
																	"           // postman.setNextRequest(null);\r",
																	"      }\r",
																	"       \r",
																	"   });\r",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "testfsp1",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/quotes",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{quoteRequest}}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Transfer 3 (payerfsp to testfsp1)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "52230947-2a62-416f-9630-9c8a0e0e9058",
																"exec": [
																	"var navigator = {}; //fake a navigator object for the lib\r",
																	"var window = {}; //fake a window object for the lib\r",
																	"eval(pm.environment.get('jrsassign'));\r",
																	"\r",
																	"var uuid = require('uuid');\r",
																	"var generatedUUID = uuid.v4();\r",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
																	"\r",
																	"\r",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
																	"\r",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
																	"\r",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"testfsp1\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};\r",
																	"var sHeader = JSON.stringify(oHeader);\r",
																	"console.log(`sHeader: ${sHeader}`)\r",
																	"\r",
																	"var objPayload = {\r",
																	"  \"transferId\": pm.environment.get('transfer_ID'),\r",
																	"  \"payerFsp\": \"payerfsp\",\r",
																	"  \"payeeFsp\": \"testfsp1\",\r",
																	"  \"amount\": {\r",
																	"    \"amount\": \"35\",\r",
																	"    \"currency\": pm.environment.get('currency')\r",
																	"  },\r",
																	"  \"expiration\": pm.environment.get('transferExpiration'),\r",
																	"  \"ilpPacket\": pm.environment.get('ilpPacket'),\r",
																	"  \"condition\": pm.environment.get('condition')\r",
																	"}\r",
																	"var sPayload = JSON.stringify(objPayload)\r",
																	"console.log(`sPayload: ${sPayload}`)\r",
																	"pm.variables.set(\"transferRequest\", sPayload);\r",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));\r",
																	"//console.log(`token: ${token}`)\r",
																	"\r",
																	"// var encodedHeaders = btoa(sHeader)\r",
																	"\r",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
																	"// var token = JSON.stringify(ofspiopSignature)\r",
																	"\r",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
																	"\r",
																	"const signatureObject = {\r",
																	"    signature: signature.replace('\"', ''),\r",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
																	"};\r",
																	"\r",
																	"console.log(JSON.stringify(signatureObject))\r",
																	"\r",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "910a8796-b110-4fcd-9260-5c9df7ab6045",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});\r",
																	"\r",
																	"// //Check the request that Switch forwards to testfsp1\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_TESTAPI_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"              \r",
																	"              //Check the Headers\r",
																	"              var headers = response.json().headers;\r",
																	"              \r",
																	"                pm.test(\"testfsp1 fspiop-source is goldenpayerfsp\", function () {\r",
																	"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp1 fspiop-destination is goldentestfsp1\", function () {\r",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('testfsp1');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp1 content-typeis same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp1 accept is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp1 fspiop-signature is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp1 fspiop-http-method is POST\", function () {\r",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp1 fspiop-uri is /transfers\", function () {\r",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');\r",
																	"                });\r",
																	"                \r",
																	"                \r",
																	"                //Check the data\r",
																	"                var jsonData = response.json().data;\r",
																	"                pm.test(\"testfsp1 data should have the same transferId as request\", function () {\r",
																	"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));\r",
																	"                });\r",
																	"                pm.test(\"testfsp1 data should have the same payerfspId as request\", function () {\r",
																	"                  pm.expect(jsonData.payerFsp).to.eql('payerfsp');\r",
																	"                });\r",
																	"                pm.test(\"testfsp1 data should have the same testfsp1Id as request\", function () {\r",
																	"                  pm.expect('testfsp1');\r",
																	"                });\r",
																	"                pm.test(\"testfsp1 data should have the same amount as request\", function () {\r",
																	"                  pm.expect(jsonData.amount.amount).to.eql('35');\r",
																	"                });\r",
																	"                pm.test(\"testfsp1 data should have the same currency as request\", function () {\r",
																	"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));\r",
																	"                });\r",
																	"                pm.test(\"testfsp1 data should have the same expiration as request\", function () {\r",
																	"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));\r",
																	"                });\r",
																	"                pm.test(\"testfsp1 data should have the same ilpPacket as request\", function () {\r",
																	"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));\r",
																	"                });\r",
																	"                pm.test(\"testfsp1 data should have the same condition as request\", function () {\r",
																	"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));\r",
																	"                });\r",
																	"                \r",
																	"          } else {\r",
																	"              pm.test(\"Transfer FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on payee side');\r",
																	"              });\r",
																	"              // postman.setNextRequest(null)\r",
																	"          }\r",
																	"  });\r",
																	"}, 2000)\r",
																	"\r",
																	"//Check the callback response that Switch forwards to payerfsp\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"            //Checking headers\r",
																	"            var headers = response.json().headers;\r",
																	"            pm.test(\"payerfsp fspiop-source is goldentestfsp1 \", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('testfsp1');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payerfsp accept is empty\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql(undefined);\r",
																	"            });\r",
																	"            \r",
																	"            \r",
																	"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
																	"            });\r",
																	"            \r",
																	"            var jsonData = response.json().data;\r",
																	"            pm.test(\"Response data does not have transferId\", function () {\r",
																	"               pm.expect(jsonData.transferId).to.eql(undefined);\r",
																	"            });\r",
																	"            pm.test(\"Response status is COMMITTED\", function () {\r",
																	"                pm.expect(jsonData.transferState).to.eql('COMMITTED');\r",
																	"            });\r",
																	"          } else {\r",
																	"              pm.test(\"Transfer FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on payer side');\r",
																	"              });\r",
																	"              // postman.setNextRequest(null)\r",
																	"          }\r",
																	"   });\r",
																	"}, 2000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "testfsp1",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Quote 4 (testfsp2 to payerfsp)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "b94e5af5-0187-4bd4-a4c7-cda6131ba945",
																"exec": [
																	"var navigator = {}; ",
																	"var window = {}; ",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('quoteId', generatedUUID);",
																	"generatedUUID = uuid.v4();",
																	"pm.environment.set('transactionId', generatedUUID);",
																	"",
																	"pm.variables.set('quoteDate', (new Date()).toUTCString());",
																	"pm.variables.set('payerName', 'PayerFirst PayerLast');",
																	"pm.variables.set('payerMSISDN', '918381008987');",
																	"",
																	"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
																	"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
																	"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp2\",\"FSPIOP-Destination\":\"payerfsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"  \"quoteId\": pm.environment.get('quoteId'),",
																	"  \"transactionId\": pm.environment.get('transactionId'),",
																	"  \"payer\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
																	"      \"fspId\": \"testfsp2\"",
																	"    },",
																	"    \"personalInfo\": {",
																	"      \"complexName\": {",
																	"        \"firstName\": \"Mats\",",
																	"        \"lastName\": \"Hagman\"",
																	"      },",
																	"      \"dateOfBirth\": \"1983-10-25\"",
																	"    }",
																	"  },",
																	"  \"payee\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
																	"      \"fspId\": \"payerfsp\"",
																	"    }",
																	"  },",
																	"  \"amountType\": \"RECEIVE\",",
																	"  \"amount\": {",
																	"    \"amount\": \"20\",",
																	"    \"currency\": pm.environment.get('currency')",
																	"  },",
																	"  \"transactionType\": {",
																	"    \"scenario\": \"TRANSFER\",",
																	"    \"initiator\": \"PAYER\",",
																	"    \"initiatorType\": \"CONSUMER\"",
																	"  },",
																	"  \"note\": \"hej\"",
																	"}",
																	"",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"quoteRequest\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp2JWSKey'));",
																	"console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "a3c60411-e51c-45b0-b842-5a68900b7fdc",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"              \r",
																	"              //Check the Headers\r",
																	"              var headers = response.json().headers;\r",
																	"              \r",
																	"                pm.test(\"payerfsp fspiop-source is testfsp2\", function () {\r",
																	"                    pm.expect(headers['fspiop-source']).to.eql('testfsp2');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {\r",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-signature is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp accept is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp content-typeis same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-uri is /quotes\", function () {\r",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-http-method is POST\", function () {\r",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
																	"                });\r",
																	"                \r",
																	"          } else {\r",
																	"              pm.test(\"Quote FAILED\", function () {\r",
																	"                throw new Error('Did not receive request on payee side');\r",
																	"              });\r",
																	"              // postman.setNextRequest(null)\r",
																	"          }\r",
																	"   });\r",
																	"}, 1100)\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"TESTFSP2_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {\r",
																	"      if(response.responseSize !== 0) {\r",
																	"          //Checking headers\r",
																	"            var headers = response.json().headers;\r",
																	"            pm.test(\"testfsp2 fspiop-source is payerfsp\", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('payerfsp');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp2 fspiop-destination is testfsp2\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('testfsp2');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp2 content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp2 accept is empty\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql(undefined);\r",
																	"            });\r",
																	"            \r",
																	"            \r",
																	"            \r",
																	"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])\r",
																	"            // var strData = JSON.stringify(response.json().data)\r",
																	"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`\r",
																	"            // console.log(`token: ${token}`)\r",
																	"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayerfspJWSPubKey'), {alg: ['RS256']})\r",
																	"            // console.log(`isValid: ${isValid}`)\r",
																	"            // pm.test(\"Check if the response is JWS valid\", function () {\r",
																	"            //     pm.expect(isValid).to.eql(true);\r",
																	"            // });\r",
																	"            \r",
																	"            //Validate protected header inside Signature\r",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))\r",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)\r",
																	"            \r",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
																	"            });\r",
																	"            \r",
																	"\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayerfsp\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payerfsp');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be testfsp2\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('testfsp2');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);\r",
																	"            });\r",
																	"           \r",
																	"            pm.test(\"testfsp2 FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp2 fspiop-http-method is PUT\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
																	"            });\r",
																	"            \r",
																	"            var jsonData = response.json().data;\r",
																	"            \r",
																	"            pm.test(\"Response quoteId is  null\", function () {\r",
																	"                pm.expect(jsonData.quoteId).to.eql(undefined);\r",
																	"                \r",
																	"            });\r",
																	"          \r",
																	"            pm.test(\"Response ilpPacket is not null\", function () {\r",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);\r",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);\r",
																	"            });\r",
																	"       \r",
																	"           pm.test(\"Response condition is not null\", function () {\r",
																	"               pm.expect(jsonData.condition).not.equal(undefined);\r",
																	"               pm.environment.set(\"condition\", jsonData.condition);\r",
																	"           });\r",
																	"      } else {\r",
																	"          pm.test(\"Quote FAILED\", function () {\r",
																	"            throw new Error('Did not receive response on Payer side');\r",
																	"           });\r",
																	"           // postman.setNextRequest(null);\r",
																	"      }\r",
																	"       \r",
																	"   });\r",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TESTFSP2_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "testfsp2",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "payerfsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/quotes",
																"type": "text"
															},
															{
																"key": "x-forwarded-for",
																"value": "34.245.65.70",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{quoteRequest}}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Transfer 4 (testfsp2 to payerfsp)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "12fea16a-f65b-49a6-ac09-275dfa56b068",
																"exec": [
																	"var navigator = {}; //fake a navigator object for the lib\r",
																	"var window = {}; //fake a window object for the lib\r",
																	"eval(pm.environment.get('jrsassign'));\r",
																	"\r",
																	"var uuid = require('uuid');\r",
																	"var generatedUUID = uuid.v4();\r",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
																	"\r",
																	"\r",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
																	"\r",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
																	"\r",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp2\",\"FSPIOP-Destination\":\"payerfsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};\r",
																	"var sHeader = JSON.stringify(oHeader);\r",
																	"console.log(`sHeader: ${sHeader}`)\r",
																	"\r",
																	"var objPayload = {\r",
																	"  \"transferId\": pm.environment.get('transfer_ID'),\r",
																	"  \"payerFsp\": \"testfsp2\",\r",
																	"  \"payeeFsp\": \"payerfsp\",\r",
																	"  \"amount\": {\r",
																	"    \"amount\": \"20\",\r",
																	"    \"currency\": pm.environment.get('currency')\r",
																	"  },\r",
																	"  \"expiration\": pm.environment.get('transferExpiration'),\r",
																	"  \"ilpPacket\": pm.environment.get('ilpPacket'),\r",
																	"  \"condition\": pm.environment.get('condition')\r",
																	"}\r",
																	"var sPayload = JSON.stringify(objPayload)\r",
																	"console.log(`sPayload: ${sPayload}`)\r",
																	"pm.variables.set(\"transferRequest\", sPayload);\r",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp2JWSKey'));\r",
																	"//console.log(`token: ${token}`)\r",
																	"\r",
																	"// var encodedHeaders = btoa(sHeader)\r",
																	"\r",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
																	"// var token = JSON.stringify(ofspiopSignature)\r",
																	"\r",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
																	"\r",
																	"const signatureObject = {\r",
																	"    signature: signature.replace('\"', ''),\r",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
																	"};\r",
																	"\r",
																	"console.log(JSON.stringify(signatureObject))\r",
																	"\r",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "98b15aa2-baf6-42af-ab22-ab09628e9915",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});\r",
																	"\r",
																	"// //Check the request that Switch forwards to payerfsp\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"              \r",
																	"              //Check the Headers\r",
																	"              var headers = response.json().headers;\r",
																	"              \r",
																	"                pm.test(\"payerfsp fspiop-source is goldentestfsp2\", function () {\r",
																	"                    pm.expect(headers['fspiop-source']).to.eql('testfsp2');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {\r",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp content-typeis same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp accept is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-signature is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-http-method is POST\", function () {\r",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-uri is /transfers\", function () {\r",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');\r",
																	"                });\r",
																	"                \r",
																	"                \r",
																	"                //Check the data\r",
																	"                var jsonData = response.json().data;\r",
																	"                pm.test(\"payerfsp data should have the same transferId as request\", function () {\r",
																	"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));\r",
																	"                });\r",
																	"                pm.test(\"payerfsp data should have the same amount as request\", function () {\r",
																	"                  pm.expect(jsonData.amount.amount).to.eql('20');\r",
																	"                });\r",
																	"                pm.test(\"payerfsp data should have the same currency as request\", function () {\r",
																	"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));\r",
																	"                });\r",
																	"                pm.test(\"payerfsp data should have the same expiration as request\", function () {\r",
																	"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));\r",
																	"                });\r",
																	"                pm.test(\"payerfsp data should have the same ilpPacket as request\", function () {\r",
																	"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));\r",
																	"                });\r",
																	"                pm.test(\"payerfsp data should have the same condition as request\", function () {\r",
																	"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));\r",
																	"                });\r",
																	"                \r",
																	"          } else {\r",
																	"              pm.test(\"Transfer FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on payee side');\r",
																	"              });\r",
																	"              // postman.setNextRequest(null)\r",
																	"          }\r",
																	"  });\r",
																	"}, 2000)\r",
																	"\r",
																	"//Check the callback response that Switch forwards to testfsp2\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"TESTFSP2_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"            //Checking headers\r",
																	"            var headers = response.json().headers;\r",
																	"            pm.test(\"testfsp2 fspiop-source is goldenpayerfsp \", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('payerfsp');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp2 fspiop-destination is goldentestfsp2\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('testfsp2');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp2 content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp2 accept is empty\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql(undefined);\r",
																	"            });\r",
																	"            \r",
																	"            \r",
																	"            pm.test(\"testfsp2 fspiop-uri includes /transfers/{{transfer_ID}}\", function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"testfsp2 fspiop-http-method is PUT\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
																	"            });\r",
																	"            \r",
																	"            var jsonData = response.json().data;\r",
																	"            pm.test(\"Response data does not have transferId\", function () {\r",
																	"               pm.expect(jsonData.transferId).to.eql(undefined);\r",
																	"            });\r",
																	"            pm.test(\"Response status is COMMITTED\", function () {\r",
																	"                pm.expect(jsonData.transferState).to.eql('COMMITTED');\r",
																	"            });\r",
																	"          } else {\r",
																	"              pm.test(\"Transfer FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on payer side');\r",
																	"              });\r",
																	"              // postman.setNextRequest(null)\r",
																	"          }\r",
																	"   });\r",
																	"}, 2000)\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{TESTFSP2_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "testfsp2",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "payerfsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Quote 5 (payeefsp to testfsp2)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2cc56fc2-7831-445f-b594-8aeff25a35fa",
																"exec": [
																	"var navigator = {}; \r",
																	"var window = {}; \r",
																	"eval(pm.environment.get('jrsassign'));\r",
																	"\r",
																	"\r",
																	"var uuid = require('uuid');\r",
																	"var generatedUUID = uuid.v4();\r",
																	"pm.environment.set('quoteId', generatedUUID);\r",
																	"generatedUUID = uuid.v4();\r",
																	"pm.environment.set('transactionId', generatedUUID);\r",
																	"\r",
																	"pm.variables.set('quoteDate', (new Date()).toUTCString());\r",
																	"pm.variables.set('payerName', 'PayerFirst PayerLast');\r",
																	"pm.variables.set('payerMSISDN', '918381008987');\r",
																	"\r",
																	"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');\r",
																	"pm.variables.set('expectedPayeeLastName', 'GoldenLast');\r",
																	"pm.variables.set('expectedPayeeDOB', '2010-10-10');\r",
																	"\r",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payeefsp\",\"FSPIOP-Destination\":\"testfsp2\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};\r",
																	"var sHeader = JSON.stringify(oHeader);\r",
																	"console.log(`sHeader: ${sHeader}`)\r",
																	"\r",
																	"var objPayload = {\r",
																	"  \"quoteId\": pm.environment.get('quoteId'),\r",
																	"  \"transactionId\": pm.environment.get('transactionId'),\r",
																	"  \"payer\": {\r",
																	"    \"partyIdInfo\": {\r",
																	"      \"partyIdType\": \"MSISDN\",\r",
																	"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),\r",
																	"      \"fspId\": \"payeefsp\"\r",
																	"    },\r",
																	"    \"personalInfo\": {\r",
																	"      \"complexName\": {\r",
																	"        \"firstName\": \"Mats\",\r",
																	"        \"lastName\": \"Hagman\"\r",
																	"      },\r",
																	"      \"dateOfBirth\": \"1983-10-25\"\r",
																	"    }\r",
																	"  },\r",
																	"  \"payee\": {\r",
																	"    \"partyIdInfo\": {\r",
																	"      \"partyIdType\": \"MSISDN\",\r",
																	"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),\r",
																	"      \"fspId\": \"testfsp2\"\r",
																	"    }\r",
																	"  },\r",
																	"  \"amountType\": \"RECEIVE\",\r",
																	"  \"amount\": {\r",
																	"    \"amount\": \"35\",\r",
																	"    \"currency\": pm.environment.get('currency')\r",
																	"  },\r",
																	"  \"transactionType\": {\r",
																	"    \"scenario\": \"TRANSFER\",\r",
																	"    \"initiator\": \"PAYER\",\r",
																	"    \"initiatorType\": \"CONSUMER\"\r",
																	"  },\r",
																	"  \"note\": \"hej\"\r",
																	"}\r",
																	"\r",
																	"var sPayload = JSON.stringify(objPayload)\r",
																	"console.log(`sPayload: ${sPayload}`)\r",
																	"pm.variables.set(\"quoteRequest\", sPayload);\r",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payeefspJWSKey'));\r",
																	"console.log(`token: ${token}`)\r",
																	"\r",
																	"// var encodedHeaders = btoa(sHeader)\r",
																	"\r",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
																	"// var token = JSON.stringify(ofspiopSignature)\r",
																	"\r",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
																	"\r",
																	"const signatureObject = {\r",
																	"    signature: signature.replace('\"', ''),\r",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
																	"};\r",
																	"\r",
																	"console.log(JSON.stringify(signatureObject))\r",
																	"\r",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "2332735a-b6c4-4392-a8cc-a6c04a8e4868",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"TESTFSP2_SDK_TESTAPI_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"              \r",
																	"              //Check the Headers\r",
																	"              var headers = response.json().headers;\r",
																	"              \r",
																	"                pm.test(\"testfsp2 fspiop-source is payeefsp\", function () {\r",
																	"                    pm.expect(headers['fspiop-source']).to.eql('payeefsp');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-destination is testfsp2\", function () {\r",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('testfsp2');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-signature is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 accept is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 content-typeis same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-uri is /quotes\", function () {\r",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-http-method is POST\", function () {\r",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
																	"                });\r",
																	"                \r",
																	"          } else {\r",
																	"              pm.test(\"Quote FAILED\", function () {\r",
																	"                throw new Error('Did not receive request on payee side');\r",
																	"              });\r",
																	"              // postman.setNextRequest(null)\r",
																	"          }\r",
																	"   });\r",
																	"}, 1100)\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {\r",
																	"      if(response.responseSize !== 0) {\r",
																	"          //Checking headers\r",
																	"            var headers = response.json().headers;\r",
																	"            pm.test(\"payeefsp fspiop-source is testfsp2\", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('testfsp2');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp accept is empty\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql(undefined);\r",
																	"            });\r",
																	"            \r",
																	"            \r",
																	"            \r",
																	"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])\r",
																	"            // var strData = JSON.stringify(response.json().data)\r",
																	"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`\r",
																	"            // console.log(`token: ${token}`)\r",
																	"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldentestfsp2JWSPubKey'), {alg: ['RS256']})\r",
																	"            // console.log(`isValid: ${isValid}`)\r",
																	"            // pm.test(\"Check if the response is JWS valid\", function () {\r",
																	"            //     pm.expect(isValid).to.eql(true);\r",
																	"            // });\r",
																	"            \r",
																	"            //Validate protected header inside Signature\r",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))\r",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)\r",
																	"            \r",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
																	"            });\r",
																	"            \r",
																	"\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldentestfsp2\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('testfsp2');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payeefsp\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payeefsp');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);\r",
																	"            });\r",
																	"           \r",
																	"            pm.test(\"payeefsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp fspiop-http-method is PUT\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
																	"            });\r",
																	"            \r",
																	"            var jsonData = response.json().data;\r",
																	"            \r",
																	"            pm.test(\"Response quoteId is  null\", function () {\r",
																	"                pm.expect(jsonData.quoteId).to.eql(undefined);\r",
																	"                \r",
																	"            });\r",
																	"          \r",
																	"            pm.test(\"Response ilpPacket is not null\", function () {\r",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);\r",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);\r",
																	"            });\r",
																	"       \r",
																	"           pm.test(\"Response condition is not null\", function () {\r",
																	"               pm.expect(jsonData.condition).not.equal(undefined);\r",
																	"               pm.environment.set(\"condition\", jsonData.condition);\r",
																	"           });\r",
																	"      } else {\r",
																	"          pm.test(\"Quote FAILED\", function () {\r",
																	"            throw new Error('Did not receive response on Payer side');\r",
																	"           });\r",
																	"           // postman.setNextRequest(null);\r",
																	"      }\r",
																	"       \r",
																	"   });\r",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "testfsp2",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/quotes",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{quoteRequest}}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Transfer 5 (payeefsp to testfsp2)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "4370085c-836c-4b41-8d72-070b5af6b638",
																"exec": [
																	"var navigator = {}; //fake a navigator object for the lib\r",
																	"var window = {}; //fake a window object for the lib\r",
																	"eval(pm.environment.get('jrsassign'));\r",
																	"\r",
																	"var uuid = require('uuid');\r",
																	"var generatedUUID = uuid.v4();\r",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
																	"\r",
																	"\r",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
																	"\r",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
																	"\r",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payeefsp\",\"FSPIOP-Destination\":\"testfsp2\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};\r",
																	"var sHeader = JSON.stringify(oHeader);\r",
																	"console.log(`sHeader: ${sHeader}`)\r",
																	"\r",
																	"var objPayload = {\r",
																	"  \"transferId\": pm.environment.get('transfer_ID'),\r",
																	"  \"payerFsp\": \"payeefsp\",\r",
																	"  \"payeeFsp\": \"testfsp2\",\r",
																	"  \"amount\": {\r",
																	"    \"amount\": \"35\",\r",
																	"    \"currency\": pm.environment.get('currency')\r",
																	"  },\r",
																	"  \"expiration\": pm.environment.get('transferExpiration'),\r",
																	"  \"ilpPacket\": pm.environment.get('ilpPacket'),\r",
																	"  \"condition\": pm.environment.get('condition')\r",
																	"}\r",
																	"var sPayload = JSON.stringify(objPayload)\r",
																	"console.log(`sPayload: ${sPayload}`)\r",
																	"pm.variables.set(\"transferRequest\", sPayload);\r",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payeefspJWSKey'));\r",
																	"//console.log(`token: ${token}`)\r",
																	"\r",
																	"// var encodedHeaders = btoa(sHeader)\r",
																	"\r",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
																	"// var token = JSON.stringify(ofspiopSignature)\r",
																	"\r",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
																	"\r",
																	"const signatureObject = {\r",
																	"    signature: signature.replace('\"', ''),\r",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
																	"};\r",
																	"\r",
																	"console.log(JSON.stringify(signatureObject))\r",
																	"\r",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "a6632951-bcf0-4568-8dfc-41b72f848a8c",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});\r",
																	"\r",
																	"// //Check the request that Switch forwards to testfsp2\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"TESTFSP2_SDK_TESTAPI_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"              \r",
																	"              //Check the Headers\r",
																	"              var headers = response.json().headers;\r",
																	"              \r",
																	"                pm.test(\"testfsp2 fspiop-source is goldenpayeefsp\", function () {\r",
																	"                    pm.expect(headers['fspiop-source']).to.eql('payeefsp');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-destination is goldentestfsp2\", function () {\r",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('testfsp2');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 content-typeis same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 accept is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-signature is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-http-method is POST\", function () {\r",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"testfsp2 fspiop-uri is /transfers\", function () {\r",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');\r",
																	"                });\r",
																	"                \r",
																	"                \r",
																	"                //Check the data\r",
																	"                var jsonData = response.json().data;\r",
																	"                pm.test(\"testfsp2 data should have the same transferId as request\", function () {\r",
																	"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));\r",
																	"                });\r",
																	"                pm.test(\"testfsp2 data should have the same amount as request\", function () {\r",
																	"                  pm.expect(jsonData.amount.amount).to.eql('35');\r",
																	"                });\r",
																	"                pm.test(\"testfsp2 data should have the same currency as request\", function () {\r",
																	"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));\r",
																	"                });\r",
																	"                pm.test(\"testfsp2 data should have the same expiration as request\", function () {\r",
																	"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));\r",
																	"                });\r",
																	"                pm.test(\"testfsp2 data should have the same ilpPacket as request\", function () {\r",
																	"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));\r",
																	"                });\r",
																	"                pm.test(\"testfsp2 data should have the same condition as request\", function () {\r",
																	"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));\r",
																	"                });\r",
																	"                \r",
																	"          } else {\r",
																	"              pm.test(\"Transfer FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on payee side');\r",
																	"              });\r",
																	"              // postman.setNextRequest(null)\r",
																	"          }\r",
																	"  });\r",
																	"}, 2000)\r",
																	"\r",
																	"//Check the callback response that Switch forwards to payeefsp\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"            //Checking headers\r",
																	"            var headers = response.json().headers;\r",
																	"            pm.test(\"payeefsp fspiop-source is goldentestfsp2 \", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('testfsp2');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp fspiop-destination is goldenpayeefsp\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp accept is empty\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql(undefined);\r",
																	"            });\r",
																	"            \r",
																	"            \r",
																	"            pm.test(\"payeefsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp fspiop-http-method is PUT\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
																	"            });\r",
																	"            \r",
																	"            var jsonData = response.json().data;\r",
																	"            pm.test(\"Response data does not have transferId\", function () {\r",
																	"               pm.expect(jsonData.transferId).to.eql(undefined);\r",
																	"            });\r",
																	"            pm.test(\"Response status is COMMITTED\", function () {\r",
																	"                pm.expect(jsonData.transferState).to.eql('COMMITTED');\r",
																	"            });\r",
																	"          } else {\r",
																	"              pm.test(\"Transfer FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on payer side');\r",
																	"              });\r",
																	"              // postman.setNextRequest(null)\r",
																	"          }\r",
																	"   });\r",
																	"}, 2000)\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "testfsp2",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Quote 6 (payeefsp to payerfsp)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "52763396-1c9b-4b27-b442-998d5c830573",
																"exec": [
																	"var navigator = {}; \r",
																	"var window = {}; \r",
																	"eval(pm.environment.get('jrsassign'));\r",
																	"\r",
																	"\r",
																	"var uuid = require('uuid');\r",
																	"var generatedUUID = uuid.v4();\r",
																	"pm.environment.set('quoteId', generatedUUID);\r",
																	"generatedUUID = uuid.v4();\r",
																	"pm.environment.set('transactionId', generatedUUID);\r",
																	"\r",
																	"pm.variables.set('quoteDate', (new Date()).toUTCString());\r",
																	"pm.variables.set('payerName', 'PayerFirst PayerLast');\r",
																	"pm.variables.set('payerMSISDN', '918381008987');\r",
																	"\r",
																	"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');\r",
																	"pm.variables.set('expectedPayeeLastName', 'GoldenLast');\r",
																	"pm.variables.set('expectedPayeeDOB', '2010-10-10');\r",
																	"\r",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payeefsp\",\"FSPIOP-Destination\":\"payerfsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};\r",
																	"var sHeader = JSON.stringify(oHeader);\r",
																	"console.log(`sHeader: ${sHeader}`)\r",
																	"\r",
																	"var objPayload = {\r",
																	"  \"quoteId\": pm.environment.get('quoteId'),\r",
																	"  \"transactionId\": pm.environment.get('transactionId'),\r",
																	"  \"payer\": {\r",
																	"    \"partyIdInfo\": {\r",
																	"      \"partyIdType\": \"MSISDN\",\r",
																	"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),\r",
																	"      \"fspId\": \"payeefsp\"\r",
																	"    },\r",
																	"    \"personalInfo\": {\r",
																	"      \"complexName\": {\r",
																	"        \"firstName\": \"Mats\",\r",
																	"        \"lastName\": \"Hagman\"\r",
																	"      },\r",
																	"      \"dateOfBirth\": \"1983-10-25\"\r",
																	"    }\r",
																	"  },\r",
																	"  \"payee\": {\r",
																	"    \"partyIdInfo\": {\r",
																	"      \"partyIdType\": \"MSISDN\",\r",
																	"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),\r",
																	"      \"fspId\": \"payerfsp\"\r",
																	"    }\r",
																	"  },\r",
																	"  \"amountType\": \"RECEIVE\",\r",
																	"  \"amount\": {\r",
																	"    \"amount\": \"25\",\r",
																	"    \"currency\": pm.environment.get('currency')\r",
																	"  },\r",
																	"  \"transactionType\": {\r",
																	"    \"scenario\": \"TRANSFER\",\r",
																	"    \"initiator\": \"PAYER\",\r",
																	"    \"initiatorType\": \"CONSUMER\"\r",
																	"  },\r",
																	"  \"note\": \"hej\"\r",
																	"}\r",
																	"\r",
																	"var sPayload = JSON.stringify(objPayload)\r",
																	"console.log(`sPayload: ${sPayload}`)\r",
																	"pm.variables.set(\"quoteRequest\", sPayload);\r",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payeefspJWSKey'));\r",
																	"console.log(`token: ${token}`)\r",
																	"\r",
																	"// var encodedHeaders = btoa(sHeader)\r",
																	"\r",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
																	"// var token = JSON.stringify(ofspiopSignature)\r",
																	"\r",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
																	"\r",
																	"const signatureObject = {\r",
																	"    signature: signature.replace('\"', ''),\r",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
																	"};\r",
																	"\r",
																	"console.log(JSON.stringify(signatureObject))\r",
																	"\r",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "ef0fee81-ffac-47ff-b41c-121f1574fb3a",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"              \r",
																	"              //Check the Headers\r",
																	"              var headers = response.json().headers;\r",
																	"              \r",
																	"                pm.test(\"payerfsp fspiop-source is payeefsp\", function () {\r",
																	"                    pm.expect(headers['fspiop-source']).to.eql('payeefsp');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {\r",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-signature is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp accept is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp content-typeis same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-uri is /quotes\", function () {\r",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-http-method is POST\", function () {\r",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
																	"                });\r",
																	"                \r",
																	"          } else {\r",
																	"              pm.test(\"Quote FAILED\", function () {\r",
																	"                throw new Error('Did not receive request on payee side');\r",
																	"              });\r",
																	"              // postman.setNextRequest(null)\r",
																	"          }\r",
																	"   });\r",
																	"}, 1100)\r",
																	"\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {\r",
																	"      if(response.responseSize !== 0) {\r",
																	"          //Checking headers\r",
																	"            var headers = response.json().headers;\r",
																	"            pm.test(\"payeefsp fspiop-source is payerfsp\", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('payerfsp');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp accept is empty\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql(undefined);\r",
																	"            });\r",
																	"            \r",
																	"            \r",
																	"            \r",
																	"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])\r",
																	"            // var strData = JSON.stringify(response.json().data)\r",
																	"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`\r",
																	"            // console.log(`token: ${token}`)\r",
																	"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayerfspJWSPubKey'), {alg: ['RS256']})\r",
																	"            // console.log(`isValid: ${isValid}`)\r",
																	"            // pm.test(\"Check if the response is JWS valid\", function () {\r",
																	"            //     pm.expect(isValid).to.eql(true);\r",
																	"            // });\r",
																	"            \r",
																	"            //Validate protected header inside Signature\r",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))\r",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)\r",
																	"            \r",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
																	"            });\r",
																	"            \r",
																	"\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayerfsp\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payerfsp');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payeefsp\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payeefsp');\r",
																	"            });\r",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {\r",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);\r",
																	"            });\r",
																	"           \r",
																	"            pm.test(\"payeefsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp fspiop-http-method is PUT\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
																	"            });\r",
																	"            \r",
																	"            var jsonData = response.json().data;\r",
																	"            \r",
																	"            pm.test(\"Response quoteId is  null\", function () {\r",
																	"                pm.expect(jsonData.quoteId).to.eql(undefined);\r",
																	"                \r",
																	"            });\r",
																	"          \r",
																	"            pm.test(\"Response ilpPacket is not null\", function () {\r",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);\r",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);\r",
																	"            });\r",
																	"       \r",
																	"           pm.test(\"Response condition is not null\", function () {\r",
																	"               pm.expect(jsonData.condition).not.equal(undefined);\r",
																	"               pm.environment.set(\"condition\", jsonData.condition);\r",
																	"           });\r",
																	"      } else {\r",
																	"          pm.test(\"Quote FAILED\", function () {\r",
																	"            throw new Error('Did not receive response on Payer side');\r",
																	"           });\r",
																	"           // postman.setNextRequest(null);\r",
																	"      }\r",
																	"       \r",
																	"   });\r",
																	"}, 1000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "payeefsp"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "payerfsp"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiopSignature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/quotes"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{quoteRequest}}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Transfer 6 (payeefsp to payerfsp)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "85fc6c38-1392-4c5d-84f7-4ede44e27550",
																"exec": [
																	"var navigator = {}; //fake a navigator object for the lib\r",
																	"var window = {}; //fake a window object for the lib\r",
																	"eval(pm.environment.get('jrsassign'));\r",
																	"\r",
																	"var uuid = require('uuid');\r",
																	"var generatedUUID = uuid.v4();\r",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
																	"\r",
																	"\r",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
																	"\r",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
																	"\r",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payeefsp\",\"FSPIOP-Destination\":\"payerfsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};\r",
																	"var sHeader = JSON.stringify(oHeader);\r",
																	"console.log(`sHeader: ${sHeader}`)\r",
																	"\r",
																	"var objPayload = {\r",
																	"  \"transferId\": pm.environment.get('transfer_ID'),\r",
																	"  \"payerFsp\": \"payeefsp\",\r",
																	"  \"payeeFsp\": \"payerfsp\",\r",
																	"  \"amount\": {\r",
																	"    \"amount\": \"25\",\r",
																	"    \"currency\": pm.environment.get('currency')\r",
																	"  },\r",
																	"  \"expiration\": pm.environment.get('transferExpiration'),\r",
																	"  \"ilpPacket\": pm.environment.get('ilpPacket'),\r",
																	"  \"condition\": pm.environment.get('condition')\r",
																	"}\r",
																	"var sPayload = JSON.stringify(objPayload)\r",
																	"console.log(`sPayload: ${sPayload}`)\r",
																	"pm.variables.set(\"transferRequest\", sPayload);\r",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payeefspJWSKey'));\r",
																	"//console.log(`token: ${token}`)\r",
																	"\r",
																	"// var encodedHeaders = btoa(sHeader)\r",
																	"\r",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
																	"// var token = JSON.stringify(ofspiopSignature)\r",
																	"\r",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
																	"\r",
																	"const signatureObject = {\r",
																	"    signature: signature.replace('\"', ''),\r",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
																	"};\r",
																	"\r",
																	"console.log(JSON.stringify(signatureObject))\r",
																	"\r",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "3e82190f-2bda-418d-b536-5f0ab8869939",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {\r",
																	"    pm.response.to.have.status(202);\r",
																	"});\r",
																	"\r",
																	"// //Check the request that Switch forwards to payerfsp\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"              \r",
																	"              //Check the Headers\r",
																	"              var headers = response.json().headers;\r",
																	"              \r",
																	"                pm.test(\"payerfsp fspiop-source is goldenpayeefsp\", function () {\r",
																	"                    pm.expect(headers['fspiop-source']).to.eql('payeefsp');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {\r",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp content-typeis same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp accept is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-signature is same as sent in the request\", function () {\r",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-http-method is POST\", function () {\r",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
																	"                });\r",
																	"                \r",
																	"                pm.test(\"payerfsp fspiop-uri is /transfers\", function () {\r",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');\r",
																	"                });\r",
																	"                \r",
																	"                \r",
																	"                //Check the data\r",
																	"                var jsonData = response.json().data;\r",
																	"                pm.test(\"payerfsp data should have the same transferId as request\", function () {\r",
																	"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));\r",
																	"                });\r",
																	"                pm.test(\"payerfsp data should have the same payeefspId as request\", function () {\r",
																	"                  pm.expect(jsonData.payeeFsp).to.eql('payerfsp');\r",
																	"                });\r",
																	"                pm.test(\"payerfsp data should have the same payerfspId as request\", function () {\r",
																	"                  pm.expect(jsonData.payerFsp).to.eql('payeefsp');\r",
																	"                });\r",
																	"                pm.test(\"payerfsp data should have the same amount as request\", function () {\r",
																	"                  pm.expect(jsonData.amount.amount).to.eql('25');\r",
																	"                });\r",
																	"                pm.test(\"payerfsp data should have the same currency as request\", function () {\r",
																	"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));\r",
																	"                });\r",
																	"                pm.test(\"payerfsp data should have the same expiration as request\", function () {\r",
																	"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));\r",
																	"                });\r",
																	"                pm.test(\"payerfsp data should have the same ilpPacket as request\", function () {\r",
																	"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));\r",
																	"                });\r",
																	"                pm.test(\"payerfsp data should have the same condition as request\", function () {\r",
																	"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));\r",
																	"                });\r",
																	"                \r",
																	"          } else {\r",
																	"              pm.test(\"Transfer FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on payee side');\r",
																	"              });\r",
																	"              // postman.setNextRequest(null)\r",
																	"          }\r",
																	"  });\r",
																	"}, 2000)\r",
																	"\r",
																	"//Check the callback response that Switch forwards to payeefsp\r",
																	"setTimeout(function () {\r",
																	"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
																	"          if(response.responseSize !== 0) {\r",
																	"            //Checking headers\r",
																	"            var headers = response.json().headers;\r",
																	"            pm.test(\"payeefsp fspiop-source is goldenpayerfsp \", function () {\r",
																	"                pm.expect(headers['fspiop-source']).to.eql('payerfsp');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp fspiop-destination is goldenpayeefsp\", function () {\r",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payeefsp');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {\r",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp accept is empty\", function () {\r",
																	"                pm.expect(headers['accept']).to.eql(undefined);\r",
																	"            });\r",
																	"            \r",
																	"            \r",
																	"            pm.test(\"payeefsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {\r",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));\r",
																	"            });\r",
																	"            \r",
																	"            pm.test(\"payeefsp fspiop-http-method is PUT\", function () {\r",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
																	"            });\r",
																	"            \r",
																	"            var jsonData = response.json().data;\r",
																	"            pm.test(\"Response data does not have transferId\", function () {\r",
																	"               pm.expect(jsonData.transferId).to.eql(undefined);\r",
																	"            });\r",
																	"            pm.test(\"Response status is COMMITTED\", function () {\r",
																	"                pm.expect(jsonData.transferState).to.eql('COMMITTED');\r",
																	"            });\r",
																	"          } else {\r",
																	"              pm.test(\"Transfer FAILED\", function () {\r",
																	"                throw new Error('Did not receive response on payer side');\r",
																	"              });\r",
																	"              // postman.setNextRequest(null)\r",
																	"          }\r",
																	"   });\r",
																	"}, 2000)\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.transfers+json;version=1.0"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.transfers+json;version=1.0"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{transferDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "payeefsp"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "payerfsp"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiopSignature}}"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/transfers"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Create Settlement",
											"item": [
												{
													"name": "Get Existing Open Window",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c0eae844-79e3-4673-a65d-668ed50e5925",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"State should be OPEN\", function () {",
																	"    var jsonData = pm.response.json();",
																	"    pm.expect(jsonData[0].state).to.eql('OPEN');",
																	"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
																	"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
																	"});",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"value": "{{hub_operator}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
															"host": [
																"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
															],
															"path": [
																"settlementWindows"
															],
															"query": [
																{
																	"key": "state",
																	"value": "OPEN"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "Close Existing Window",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "8d804590-83f1-46b8-b72f-f7b474576d70",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.test(\"New window State should be OPEN\", function () {",
																	"    console.log(pm.response.json());",
																	"    pm.expect(pm.response.json().state).to.eql('OPEN');",
																	"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
																	"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
																	"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
																	"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{hub_operator}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
														},
														"url": {
															"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
															"host": [
																"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
															],
															"path": [
																"settlementWindows",
																"{{openWindowID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Create Settlement for Closed Window",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "67c03976-297a-4175-87c6-3823d8ee8a02",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"pm.environment.set(\"settlementId\", pm.response.json().id);",
																	"var jsonData = pm.response.json();",
																	"    ",
																	"pm.test(\"Settlement State should be PENDING_SETTLEMENT\", function () {",
																	"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
																	"});",
																	"",
																	"pm.test(\"Number of associated windows should be 1\", function () {",
																	"    pm.expect(jsonData.settlementWindows.length).to.eql(1);",
																	"});",
																	"",
																	"pm.test(\"Associated Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
																	"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
																	"});",
																	"",
																	"pm.test(\"Associated Settlement Window state should be PENDING_SETTLEMENT \", function () {",
																	"    pm.expect(jsonData.settlementWindows[0].state).to.eql('PENDING_SETTLEMENT');",
																	"});",
																	"",
																	"pm.test(\"Associated number of participants should be 4 \", function () {",
																	"    pm.expect(jsonData.participants.length).to.eql(4);",
																	"});",
																	"",
																	"for(var j in jsonData.participants) {",
																	"    for(var k in jsonData.participants[j].accounts) {",
																	"        console.log(jsonData.participants[j].accounts[k].id)",
																	"        if(jsonData.participants[j].accounts[k].id === Number(pm.environment.get(\"payerFspAccountId\"))) {",
																	"            console.log('payerfspNetSettlementAmount:',jsonData.participants[j].accounts[k].netSettlementAmount.amount)",
																	"            pm.environment.set(\"payerfspNetSettlementAmount\",jsonData.participants[j].accounts[k].netSettlementAmount.amount);",
																	"        } else if(jsonData.participants[j].accounts[k].id === Number(pm.environment.get(\"payeeFspAccountId\"))) {",
																	"            console.log('payeefspNetSettlementAmount:',jsonData.participants[j].accounts[k].netSettlementAmount.amount)",
																	"            pm.environment.set(\"payeefspNetSettlementAmount\",jsonData.participants[j].accounts[k].netSettlementAmount.amount);",
																	"        }",
																	"        ",
																	"    }",
																	"}",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{hub_operator}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"settlementModel\": \"DEFERREDNET\",\n  \"reason\": \"TESTING\",\n  \"settlementWindows\": [\n    {\n      \"id\": {{closedWindowID}}\n    }\n  ]\n}"
														},
														"url": {
															"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
															"host": [
																"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
															],
															"path": [
																"settlements"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Store Settlement&Position Account Balances After Transfers",
											"item": [
												{
													"name": "testfsp1 balances",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "a1ad4eaa-e405-420c-9251-82a31fe10b83",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"jsonData",
																	"    .filter(account => account.currency === pm.environment.get('currency'))",
																	"    .forEach(curAccount => {",
																	"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
																	"            pm.environment.set(\"testfsp1SettleAccountBalanceAfterTransfer\", curAccount.value);",
																	"        }",
																	"        if(curAccount.ledgerAccountType === \"POSITION\") {",
																	"            pm.environment.set(\"testfsp1PositionAccountBalanceAfterTransfer\", curAccount.value);",
																	"        }",
																	"    })",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"value": "{{hub_operator}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
															"host": [
																"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
															],
															"path": [
																"participants",
																"testfsp1",
																"accounts"
															]
														}
													},
													"response": []
												},
												{
													"name": "testfsp2 balances",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "5466f5dc-caec-42b8-a4f1-02086efe53cd",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"jsonData",
																	"    .filter(account => account.currency === pm.environment.get('currency'))",
																	"    .map(curAccount => {",
																	"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
																	"            pm.environment.set(\"testfsp2SettleAccountBalanceAfterTransfer\", curAccount.value);",
																	"        }",
																	"        if(curAccount.ledgerAccountType === \"POSITION\") {",
																	"            pm.environment.set(\"testfsp2PositionAccountBalanceAfterTransfer\", curAccount.value);",
																	"        }",
																	"    })",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"value": "{{hub_operator}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
															"host": [
																"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
															],
															"path": [
																"participants",
																"testfsp2",
																"accounts"
															]
														}
													},
													"response": []
												},
												{
													"name": "payerfsp balances",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "b8e324e9-6aab-426f-8e13-3a7a3d49a98e",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"jsonData",
																	"    .filter(account => account.currency === pm.environment.get('currency'))",
																	"    .map(curAccount => {",
																	"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
																	"            pm.environment.set(\"payerfspSettleAccountBalanceAfterTransfer\", curAccount.value);",
																	"        }",
																	"        if(curAccount.ledgerAccountType === \"POSITION\") {",
																	"            pm.environment.set(\"payerfspPositionAccountBalanceAfterTransfer\", curAccount.value);",
																	"        }",
																	"    })",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"value": "{{hub_operator}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payerfsp/accounts",
															"host": [
																"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
															],
															"path": [
																"participants",
																"payerfsp",
																"accounts"
															]
														}
													},
													"response": []
												},
												{
													"name": "payeefsp balances",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "d41c6719-b21b-4f3f-9fe9-2b7cb197e5f0",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"jsonData",
																	"    .filter(account => account.currency === pm.environment.get('currency'))",
																	"    .map(curAccount => {",
																	"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
																	"            pm.environment.set(\"payeefspSettleAccountBalanceAfterTransfer\", curAccount.value);",
																	"        }",
																	"        if(curAccount.ledgerAccountType === \"POSITION\") {",
																	"            pm.environment.set(\"payeefspPositionAccountBalanceAfterTransfer\", curAccount.value);",
																	"        }",
																	"    })",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{hub_operator}}"
															}
														],
														"url": {
															"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payeefsp/accounts",
															"host": [
																"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
															],
															"path": [
																"participants",
																"payeefsp",
																"accounts"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Prepare Settlement",
									"item": [
										{
											"name": "Prepare Settlement",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2b230dce-80ea-40f2-b056-c7a362eb359e",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"var jsonData = pm.response.json();",
															"jsonData.participants.map(participant => {",
															"  participant.accounts",
															"    .filter(account => account.netSettlementAmount.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"      const participantPutRequest = {",
															"        url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\") + pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\") + '/settlements/' + pm.environment.get(\"settlementId\"),",
															"        method: 'PUT',",
															"        header: {",
															"          \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
															"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
															"          \"Content-Type\": \"application/json\"",
															"        },",
															"        body: {",
															"          mode: 'raw',",
															"          raw: JSON.stringify(",
															"            {",
															"              \"participants\": [",
															"                {",
															"                  \"id\": participant.id,",
															"                  \"accounts\": [",
															"                    {",
															"                      \"id\": curAccount.id,",
															"                      \"reason\": \"Transfers recorded for payer\",",
															"                      \"state\": \"PS_TRANSFERS_RECORDED\"",
															"                    }",
															"                  ]",
															"                }",
															"              ]",
															"            }",
															"          )",
															"        }",
															"      };",
															"      pm.sendRequest(participantPutRequest, function (err, response) {",
															"        console.log(response.json());",
															"      });",
															"    })",
															"})",
															"// for(var j in jsonData.participants) {",
															"//     for(var k in jsonData.participants[j].accounts) {",
															"//         console.log(jsonData.participants[j].accounts[k].id)",
															"//         if(jsonData.participants[j].accounts[k].currency === 'XOF') {",
															"//             const participantPutRequest = {",
															"//               url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
															"//               method: 'PUT',",
															"//               header: {",
															"//                   \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
															"//                   \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
															"//                   \"Content-Type\": \"application/json\"",
															"//               },",
															"//               body: {",
															"//                 mode: 'raw',",
															"//                 raw: JSON.stringify(",
															"//                     {",
															"//                       \"participants\": [",
															"//                         {",
															"//                           \"id\": jsonData.participants[j].id,",
															"//                           \"accounts\": [",
															"//                             {",
															"//                               \"id\": jsonData.participants[j].accounts[k].id,",
															"//                               \"reason\": \"Transfers recorded for payer\",",
															"//                               \"state\": \"PS_TRANSFERS_RECORDED\"",
															"//                             }",
															"//                           ]",
															"//                         }",
															"//                       ]",
															"//                     }",
															"//                 )",
															"//               }",
															"//             };",
															"//             pm.sendRequest(participantPutRequest, function (err, response) {",
															"//                 console.log(response.json());",
															"//             });",
															"//         }",
															"",
															"",
															"//     }",
															"// }"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements",
														"{{settlementId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "check state for participants after prepare",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b17e8dbc-f54c-4a45-a63c-67d555416949",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"    ",
															"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
															"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
															"});",
															"",
															"pm.test(\"Settlement state should be PS_TRANSFERS_RECORDED\", function () {",
															"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_RECORDED\");",
															"});",
															"",
															"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
															"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
															"});",
															"",
															"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
															"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
															"});",
															"",
															"jsonData.participants.map(participant => {",
															"    participant.accounts",
															"                    .filter(account => account.netSettlementAmount.currency === pm.environment.get('currency'))",
															"                    .forEach(curAccount => {",
															"                        pm.test(`Participant Account ${curAccount.id} state is PS_TRANSFERS_RECORDED`, function () {",
															"                            pm.expect(curAccount.state).to.eql(\"PS_TRANSFERS_RECORDED\");",
															"                        });",
															"                    })",
															"})",
															"",
															"// for(var j in jsonData.participants) {",
															"//     for(var k in jsonData.participants[j].accounts) {",
															"//         pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_RECORDED`, function () {",
															"//             pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_RECORDED\");",
															"//         });",
															"//     }",
															"// }",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements",
														"{{settlementId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp1 settlement&position accont balance after prepare",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "941b864e-0ba6-47ad-8745-18f1901b21fd",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var testfsp1SettleAccountBalanceAfterPrepare;",
															"var testfsp1PositionAccountBalanceAfterPrepare;",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            testfsp1SettleAccountBalanceAfterPrepare = curAccount.value",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            testfsp1PositionAccountBalanceAfterPrepare = curAccount.value",
															"        }",
															"    })",
															"",
															"",
															"pm.test(\"Testfsp1 settlement account balance before and  after prepare should be the same.\", function () {",
															"    pm.expect(testfsp1SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
															"});",
															"",
															"",
															"pm.test(\"Testfsp1 position account balance before and  after prepare should be the same.\", function () {",
															"    pm.expect(testfsp1PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceAfterTransfer\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2 settlement&position accont balance after prepare",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f25f5eef-5f30-414b-9da4-ffdba34c39ca",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var testfsp2SettleAccountBalanceAfterPrepare;",
															"var testfsp2PositionAccountBalanceAfterPrepare;",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            testfsp2SettleAccountBalanceAfterPrepare = curAccount.value",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            testfsp2PositionAccountBalanceAfterPrepare = curAccount.value",
															"        }",
															"    })",
															"",
															"pm.test(\"Testfsp2 settlement account balance before and  after prepare should be the same.\", function () {",
															"    pm.expect(testfsp2SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
															"});",
															"",
															"pm.test(\"Testfsp2 position account balance before and  after prepare should be the same.\", function () {",
															"    pm.expect(testfsp2PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceAfterTransfer\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "payerfsp settlement&position accont balance after prepare",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "770ee77a-d343-4b9f-bd16-29f472eaafcf",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"var payerfspSettleAccountBalanceAfterPrepare;\r",
															"var payerfspPositionAccountBalanceAfterPrepare;\r",
															"jsonData\r",
															"    .filter(account => account.currency === pm.environment.get('currency'))\r",
															"    .forEach(curAccount => {\r",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {\r",
															"            payerfspSettleAccountBalanceAfterPrepare = curAccount.value\r",
															"        }\r",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {\r",
															"            payerfspPositionAccountBalanceAfterPrepare = curAccount.value\r",
															"        }\r",
															"    })\r",
															"\r",
															"\r",
															"pm.test(\"payerfsp settlement account balance before and  after reserve should be the same.\", function () {\r",
															"    pm.expect(payerfspSettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"payerfspSettleAccountBalanceAfterTransfer\"));\r",
															"});\r",
															"\r",
															"pm.test(\"payerfsp position account balance before and  after prepare should be the same.\", function () {\r",
															"    pm.expect(payerfspPositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"payerfspPositionAccountBalanceAfterTransfer\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payerfsp/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"payerfsp",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "payeefsp settlement&position accont balance after prepare",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d5b5f2e3-f451-4623-9c23-4accaaa16a91",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"var payeefspSettleAccountBalanceAfterPrepare;\r",
															"var payeefspPositionAccountBalanceAfterPrepare;\r",
															"jsonData\r",
															"    .filter(account => account.currency === pm.environment.get('currency'))\r",
															"    .forEach(curAccount => {\r",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {\r",
															"            payeefspSettleAccountBalanceAfterPrepare = curAccount.value\r",
															"        }\r",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {\r",
															"            payeefspPositionAccountBalanceAfterPrepare = curAccount.value\r",
															"        }\r",
															"    })\r",
															"\r",
															"pm.test(\"payeefsp settlement account balance before and  after prepare should be the same.\", function () {\r",
															"    pm.expect(payeefspSettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"payeefspSettleAccountBalanceAfterTransfer\"));\r",
															"});\r",
															"\r",
															"pm.test(\"payeefsp position account balance before and  after prepare should be the same.\", function () {\r",
															"    pm.expect(payeefspPositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"payeefspPositionAccountBalanceAfterTransfer\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payeefsp/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"payeefsp",
														"accounts"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Reserve Settlement",
									"item": [
										{
											"name": "Reserve Settlement",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "dbe29888-126c-4e6d-bf55-68b68677e629",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"jsonData.participants.map(participant => {",
															"  participant.accounts",
															"    .filter(account => account.netSettlementAmount.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"      const participantPutRequest = {",
															"        url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\") + pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\") + '/settlements/' + pm.environment.get(\"settlementId\"),",
															"        method: 'PUT',",
															"        header: {",
															"          \"Authorization\": \"Bearer \" + pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
															"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
															"          \"Content-Type\": \"application/json\"",
															"        },",
															"        body: {",
															"          mode: 'raw',",
															"          raw: JSON.stringify(",
															"            {",
															"              \"participants\": [",
															"                {",
															"                  \"id\": participant.id,",
															"                  \"accounts\": [",
															"                    {",
															"                      \"id\": curAccount.id,",
															"                      \"reason\": \"Transfers reserved\",",
															"                      \"state\": \"PS_TRANSFERS_RESERVED\"",
															"                    }",
															"                  ]",
															"                }",
															"              ]",
															"            }",
															"          )",
															"        }",
															"      };",
															"      pm.sendRequest(participantPutRequest, function (err, response) {",
															"        console.log(response.json());",
															"      });",
															"    })",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements",
														"{{settlementId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "check state for participants after reserve",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d9864673-5756-49c7-ad01-a4dd64cccb38",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"    ",
															"pm.test(\"Settlement Id should be: \" + pm.environment.get('settlementId'), function () {",
															"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
															"});",
															"",
															"pm.test(\"Settlement state should be PS_TRANSFERS_RESERVED\", function () {",
															"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_RESERVED\");",
															"});",
															"",
															"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
															"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
															"});",
															"",
															"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
															"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
															"});",
															"",
															"jsonData.participants.map(participant => {",
															"    participant.accounts",
															"                    .filter(account => account.netSettlementAmount.currency === pm.environment.get('currency'))",
															"                    .forEach(curAccount => {",
															"                        pm.test(`Participant Account ${curAccount.id} state is PS_TRANSFERS_RESERVED`, function () {",
															"                            pm.expect(curAccount.state).to.eql(\"PS_TRANSFERS_RESERVED\");",
															"                        });",
															"                    })",
															"})",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements",
														"{{settlementId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp1 settlement&position accont balance after reserve",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6ce29808-fbb4-4c7a-9f6b-41990d533227",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var testfsp1SettleAccountBalanceAfterReserve;",
															"var testfsp1PositionAccountBalanceAfterReserve;",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            testfsp1SettleAccountBalanceAfterReserve = curAccount.value",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            testfsp1PositionAccountBalanceAfterReserve = curAccount.value",
															"        }",
															"    })",
															"",
															"",
															"pm.test(\"Testfsp1 settlement account balance before and  after reserve should be the same.\", function () {",
															"    pm.expect(testfsp1SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
															"});",
															"",
															"pm.test(\"Testfsp1 position account balance before and  after reserve should be the same.\", function () {",
															"    pm.expect(testfsp1PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceAfterTransfer\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2 settlement&position accont balance after reserve",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bb773178-3668-4b94-8221-1817c409d0a3",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var testfsp2SettleAccountBalanceAfterReserve;",
															"var testfsp2PositionAccountBalanceAfterReserve;",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            testfsp2SettleAccountBalanceAfterReserve = curAccount.value",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            testfsp2PositionAccountBalanceAfterReserve = curAccount.value",
															"        }",
															"    })",
															"",
															"pm.test(\"Testfsp2 settlement account balance before and  after reserve should be the same.\", function () {",
															"    pm.expect(testfsp2SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceBeforeTransfer\"));",
															"});",
															"",
															"pm.test(\"Testfsp2 position account balance after reserve gets increased by its net settlement  amount.\", function () {",
															"    pm.expect(testfsp2PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "payerfsp settlement&position accont balance after reserve",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5ed95560-f360-485e-8513-d1607c2f7222",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"var payerfspSettleAccountBalanceAfterReserve;\r",
															"var payerfspPositionAccountBalanceAfterReserve;\r",
															"jsonData\r",
															"    .filter(account => account.currency === pm.environment.get('currency'))\r",
															"    .map(curAccount => {\r",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {\r",
															"            payerfspSettleAccountBalanceAfterReserve = curAccount.value\r",
															"        }\r",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {\r",
															"            payerfspPositionAccountBalanceAfterReserve = curAccount.value\r",
															"        }\r",
															"    })\r",
															"\r",
															"pm.test(\"payerfsp settlement account balance before and  after reserve should be the same.\", function () {\r",
															"    pm.expect(payerfspSettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"payerfspSettleAccountBalanceAfterTransfer\"));\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"payerfsp position account balance after reserve gets increased by its net settlement  amount.\", function () {\r",
															"    pm.expect(payerfspPositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"payerfspPositionAccountBalanceBeforeTransfer\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payerfsp/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"payerfsp",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "payeefsp settlement&position accont balance after reserve",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "eace43a0-5605-4948-b8aa-fe16877fe2e4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"var payeefspSettleAccountBalanceAfterReserve;\r",
															"var payeefspPositionAccountBalanceAfterReserve;\r",
															"jsonData\r",
															"    .filter(account => account.currency === pm.environment.get('currency'))\r",
															"    .map(curAccount => {\r",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {\r",
															"            payeefspSettleAccountBalanceAfterReserve = curAccount.value\r",
															"        }\r",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {\r",
															"            payeefspPositionAccountBalanceAfterReserve = curAccount.value\r",
															"        }\r",
															"    })\r",
															"\r",
															"\r",
															"pm.test(\"payeefsp settlement account balance before and  after reserve should be the same.\", function () {\r",
															"    pm.expect(payeefspSettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"payeefspSettleAccountBalanceAfterTransfer\"));\r",
															"});\r",
															"\r",
															"pm.test(\"payeefsp position account balance before and  after reserve should be the same.\", function () {\r",
															"    pm.expect(payeefspPositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"payeefspPositionAccountBalanceAfterTransfer\"));\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payeefsp/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"payeefsp",
														"accounts"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Commit Settlement",
									"item": [
										{
											"name": "Commit Settlement",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "81a7b77e-c11d-4222-af9b-07d2a13e9b92",
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"var jsonData = pm.response.json();",
															"jsonData.participants.map(participant => {",
															"    participant.accounts",
															"                    .filter(account => account.netSettlementAmount.currency === pm.environment.get('currency'))",
															"                    .forEach(curAccount => {",
															"                        const participantPutRequest = {",
															"                          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
															"                          method: 'PUT',",
															"                          header: {",
															"                              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
															"                              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
															"                              \"Content-Type\": \"application/json\"",
															"                          },",
															"                          body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(",
															"                                {",
															"                                  \"participants\": [",
															"                                    {",
															"                                      \"id\": participant.id,",
															"                                      \"accounts\": [",
															"                                        {",
															"                                          \"id\": curAccount.id,",
															"                                          \"reason\": \"Transfers committed\",",
															"                                          \"state\": \"PS_TRANSFERS_COMMITTED\"",
															"                                        }",
															"                                      ]",
															"                                    }",
															"                                  ]",
															"                                }",
															"                            )",
															"                          }",
															"                        };",
															"                        pm.sendRequest(participantPutRequest, function (err, response) {",
															"                            console.log(response.json());",
															"                        });",
															"                    })",
															"})",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements",
														"{{settlementId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "check state for participants after commit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a729bb13-fd72-4741-b5d8-a284e3ea83f5",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"    ",
															"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
															"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
															"});",
															"",
															"pm.test(\"Settlement state should be PS_TRANSFERS_COMMITTED\", function () {",
															"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_COMMITTED\");",
															"});",
															"",
															"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
															"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
															"});",
															"",
															"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
															"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
															"});",
															"",
															"jsonData.participants.map(participant => {",
															"    participant.accounts",
															"                    .filter(account => account.netSettlementAmount.currency === 'XOF')",
															"                    .forEach(xofAccount => {",
															"                        pm.test(`Participant Account ${xofAccount.id} state is PS_TRANSFERS_COMMITTED`, function () {",
															"                            pm.expect(xofAccount.state).to.eql(\"PS_TRANSFERS_COMMITTED\");",
															"                        });",
															"                    })",
															"})",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements",
														"{{settlementId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp1 settlement&position accont balance after commit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ee2ceb3a-8ce9-4380-87c0-0f59f1b004aa",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var testfsp1SettleAccountBalanceAfterCommit;",
															"var testfsp1PositionAccountBalanceAfterCommit;",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            testfsp1SettleAccountBalanceAfterCommit = curAccount.value",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            testfsp1PositionAccountBalanceAfterCommit = curAccount.value",
															"        }",
															"    })",
															"",
															"",
															"pm.test(\"Testfsp1 settlement account balance before and  after commit should be the same.\", function () {",
															"    pm.expect(testfsp1SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
															"});",
															"",
															"pm.test(\"Testfsp1 position account balance after commit should be reduced by its net settlement amount.\", function () {",
															"    pm.expect(testfsp1PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceBeforeTransfer\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2 settlement&position accont balance after commit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ec6c3b18-310b-453c-86ad-8a6a195e6530",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var testfsp2SettleAccountBalanceAfterCommit;",
															"var testfsp2PositionAccountBalanceAfterCommit;",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            testfsp2SettleAccountBalanceAfterCommit = curAccount.value",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            testfsp2PositionAccountBalanceAfterCommit = curAccount.value",
															"        }",
															"    })",
															"",
															"pm.test(\"Testfsp2 settlement account balance before and  after commit should be the same.\", function () {",
															"    pm.expect(testfsp2SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceBeforeTransfer\"));",
															"});",
															"",
															"pm.test(\"Testfsp2 position account balance before and after commit should be the same.\", function () {",
															"    pm.expect(testfsp2PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "payerfsp settlement&position accont balance after commit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "744cfeb6-429c-41d3-9a12-df2fa1161ede",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"var payerfspSettleAccountBalanceAfterCommit;\r",
															"var payerfspPositionAccountBalanceAfterCommit;\r",
															"jsonData\r",
															"    .filter(account => account.currency === pm.environment.get('currency'))\r",
															"    .forEach(curAccount => {\r",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {\r",
															"            payerfspSettleAccountBalanceAfterCommit = curAccount.value\r",
															"        }\r",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {\r",
															"            payerfspPositionAccountBalanceAfterCommit = curAccount.value\r",
															"        }\r",
															"    })\r",
															"\r",
															"pm.test(\"payerfsp settlement account balance before and  after commit should be the same.\", function () {\r",
															"    pm.expect(payerfspSettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"payerfspSettleAccountBalanceAfterTransfer\"));\r",
															"});\r",
															"\r",
															"pm.test(\"payerfsp position account balance before and  after commit should be the same.\", function () {\r",
															"    pm.expect(payerfspPositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"payerfspPositionAccountBalanceBeforeTransfer\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payerfsp/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"payerfsp",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "payeefsp settlement&position accont balance after commit",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "10c5dd3f-cf93-4768-872c-1e08cfa62022",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"var payeefspSettleAccountBalanceAfterCommit;\r",
															"var payeefspPositionAccountBalanceAfterCommit;\r",
															"jsonData\r",
															"    .filter(account => account.currency === pm.environment.get('currency'))\r",
															"    .forEach(curAccount => {\r",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {\r",
															"            payeefspSettleAccountBalanceAfterCommit = curAccount.value\r",
															"        }\r",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {\r",
															"            payeefspPositionAccountBalanceAfterCommit = curAccount.value\r",
															"        }\r",
															"    })\r",
															"\r",
															"pm.test(\"payeefsp settlement account balance before and  after commit should be the same.\", function () {\r",
															"    pm.expect(payeefspSettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"payeefspSettleAccountBalanceAfterTransfer\"));\r",
															"});\r",
															"\r",
															"pm.test(\"payeefsp position account balance after commit should be reduced by its net settlement amount.\", function () {\r",
															"    pm.expect(payeefspPositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"payeefspPositionAccountBalanceBeforeTransfer\"));\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payeefsp/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"payeefsp",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "hub account balance check",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b807244d-62e0-4988-87eb-33bc359c8d0b",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"var hubReconciliationAccountBalanceAfterCommit;\r",
															"var hubMultilateralAccountBalanceAfterCommit;\r",
															"jsonData\r",
															"    .filter(account => account.currency === pm.environment.get('currency'))\r",
															"    .forEach(curAccount => {\r",
															"        if(curAccount.ledgerAccountType === \"HUB_RECONCILIATION\") {\r",
															"            hubReconciliationAccountBalanceAfterCommit = curAccount.value;\r",
															"        }\r",
															"        if(curAccount.ledgerAccountType === \"HUB_MULTILATERAL_SETTLEMENT\") {\r",
															"            hubMultilateralAccountBalanceAfterCommit = curAccount.value;\r",
															"        }\r",
															"    })\r",
															"\r",
															"\r",
															"pm.test(\"hub reconciliation account balance before transfer and  after commit should be the same.\", function () {\r",
															"    pm.expect(hubReconciliationAccountBalanceAfterCommit).to.eql(pm.environment.get(\"hubReconciliationAccountBalanceBeforeTransfer\"));\r",
															"});\r",
															"\r",
															"pm.test(\"hub multilateral account balance before transfer and  after commit should be the same.\", function () {\r",
															"    pm.expect(hubMultilateralAccountBalanceAfterCommit).to.eql(pm.environment.get(\"hubMultilateralAccountBalanceBeforeTransfer\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/Hub/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"Hub",
														"accounts"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Settle Settlement",
									"item": [
										{
											"name": "Settle Settlement",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b62bcb56-b9e1-4a8e-8200-0c2fb1eb7586",
														"exec": [
															"",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"jsonData.participants.map(participant => {",
															"    participant.accounts",
															"                    .filter(account => account.netSettlementAmount.currency === pm.environment.get('currency'))",
															"                    .forEach(curAccount => {",
															"                        const participantPutRequest = {",
															"                          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
															"                          method: 'PUT',",
															"                          header: {",
															"                              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
															"                              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
															"                              \"Content-Type\": \"application/json\"",
															"                          },",
															"                          body: {",
															"                            mode: 'raw',",
															"                            raw: JSON.stringify(",
															"                                {",
															"                                  \"participants\": [",
															"                                    {",
															"                                      \"id\": participant.id,",
															"                                      \"accounts\": [",
															"                                        {",
															"                                          \"id\": curAccount.id,",
															"                                          \"reason\": \"Transfers settled for payer\",",
															"                                          \"state\": \"SETTLED\"",
															"                                        }",
															"                                      ]",
															"                                    }",
															"                                  ]",
															"                                }",
															"                            )",
															"                          }",
															"                        };",
															"                        pm.sendRequest(participantPutRequest, function (err, response) {",
															"                            console.log(response.json());",
															"                        });",
															"                    })",
															"})",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{hub_operator}}"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements",
														"{{settlementId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "check state for participants after settle",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ea419fb6-3638-409f-877e-a8d738171c9f",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"    ",
															"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
															"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
															"});",
															"",
															"pm.test(\"Settlement state should be SETTLED\", function () {",
															"    pm.expect(jsonData.state).to.eql(\"SETTLED\");",
															"});",
															"",
															"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
															"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
															"});",
															"",
															"pm.test(\"Settlement Window State should be SETTLED\", function () {",
															"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"SETTLED\");",
															"});",
															"",
															"jsonData.participants.map(participant => {",
															"    participant.accounts",
															"                    .filter(account => account.netSettlementAmount.currency === pm.environment.get('currency'))",
															"                    .forEach(curAccount => {",
															"                        pm.test(`Participant Account ${curAccount.id} state is SETTLED`, function () {",
															"                            pm.expect(curAccount.state).to.eql(\"SETTLED\");",
															"                        });",
															"                    })",
															"})",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements",
														"{{settlementId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp1 settlement&position accont balance after settle",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a3976a75-7a40-4300-bfdf-a4493cd7d371",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var testfsp1SettleAccountBalanceAfterSettle;",
															"var testfsp1PositionAccountBalanceAfterSettle;",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            testfsp1SettleAccountBalanceAfterSettle = curAccount.value",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            testfsp1PositionAccountBalanceAfterSettle = curAccount.value",
															"        }",
															"    })",
															"",
															"pm.test(\"Testfsp1 settlement account balance before and  after settle should be the same.\", function () {",
															"    pm.expect(testfsp1SettleAccountBalanceAfterSettle).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceBeforeTransfer\"));",
															"});",
															"",
															"pm.test(\"Testfsp1 position account balance before and  after settle should be the same.\", function () {",
															"    pm.expect(testfsp1PositionAccountBalanceAfterSettle).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceBeforeTransfer\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2 settlement&position accont balance after settle",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5e508b20-9171-4d00-bdd4-846a9cae5442",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"var testfsp2SettleAccountBalanceAfterCommit;",
															"var testfsp2PositionAccountBalanceAfterCommit;",
															"jsonData",
															"    .filter(account => account.currency === pm.environment.get('currency'))",
															"    .forEach(curAccount => {",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {",
															"            testfsp2SettleAccountBalanceAfterCommit = curAccount.value",
															"        }",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {",
															"            testfsp2PositionAccountBalanceAfterCommit = curAccount.value",
															"        }",
															"    })",
															"",
															"pm.test(\"Testfsp2 settlement account balance before and  after commit should be the same.\", function () {",
															"    pm.expect(testfsp2SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceBeforeTransfer\"));",
															"});",
															"",
															"pm.test(\"Testfsp2 position account balance before and  after commit should be the same.\", function () {",
															"    pm.expect(testfsp2PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "payerfsp settlement&position accont balance after settle",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "55c1573e-fa9c-416e-9de3-f146a69c65ef",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"var payerfspSettleAccountBalanceAfterCommit;\r",
															"var payerfspPositionAccountBalanceAfterCommit;\r",
															"jsonData\r",
															"    .filter(account => account.currency === pm.environment.get('currency'))\r",
															"    .forEach(curAccount => {\r",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {\r",
															"            payerfspSettleAccountBalanceAfterCommit = curAccount.value\r",
															"        }\r",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {\r",
															"            payerfspPositionAccountBalanceAfterCommit = curAccount.value\r",
															"        }\r",
															"    })\r",
															"\r",
															"\r",
															"pm.test(\"payerfsp settlement account balance before and  after commit should be the same.\", function () {\r",
															"    pm.expect(payerfspSettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"payerfspSettleAccountBalanceAfterTransfer\"));\r",
															"});\r",
															"\r",
															"pm.test(\"payerfsp position account balance before and  after commit should be the same.\", function () {\r",
															"    pm.expect(payerfspPositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"payerfspPositionAccountBalanceBeforeTransfer\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payerfsp/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"payerfsp",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "payeefsp settlement&position accont balance after settle",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "45514e77-797c-4b34-b590-1daace3c22d9",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"var payeefspSettleAccountBalanceAfterCommit;\r",
															"var payeefspPositionAccountBalanceAfterCommit;\r",
															"jsonData\r",
															"    .filter(account => account.currency === pm.environment.get('currency'))\r",
															"    .forEach(curAccount => {\r",
															"        if(curAccount.ledgerAccountType === \"SETTLEMENT\") {\r",
															"            payeefspSettleAccountBalanceAfterCommit = curAccount.value\r",
															"        }\r",
															"        if(curAccount.ledgerAccountType === \"POSITION\") {\r",
															"            payeefspPositionAccountBalanceAfterCommit = curAccount.value\r",
															"        }\r",
															"    })\r",
															"\r",
															"pm.test(\"payeefsp settlement account balance before and  after commit should be the same.\", function () {\r",
															"    pm.expect(payeefspSettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"payeefspSettleAccountBalanceAfterTransfer\"));\r",
															"});\r",
															"\r",
															"pm.test(\"payeefsp position account balance before and  after commit should be the same.\", function () {\r",
															"    pm.expect(payeefspPositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"payeefspPositionAccountBalanceBeforeTransfer\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "{{hub_operator}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payeefsp/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"payeefsp",
														"accounts"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Author: Sridevi Miriyala",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c10c331b-dbf8-4a2e-957a-e71dc515a355",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a57d9f4c-b606-49ba-ba7a-e73a74ebab62",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "transfer_negative_scenarios",
					"item": [
						{
							"name": "payee_abort",
							"item": [
								{
									"name": "Store Payerfsp position before prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2dd4dd49-6323-4f88-94e0-7f11714119db",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"jsonData",
													"    .filter(position => position.currency === pm.environment.get('currency'))",
													"    .forEach(position => {",
													"        pm.environment.set(\"payerfspPositionBeforePrepare\", position.value);",
													"    })",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c4427b45-cfaa-4e43-807f-9b8ac52148b7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "hub_operator"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"positions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Store Payeefsp position before prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4404796-4e67-455b-a9dd-2c4354e099f0",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"jsonData",
													"    .filter(position => position.currency === pm.environment.get('currency'))",
													"    .forEach(position => {",
													"        pm.environment.set(\"payeefspPositionBeforePrepare\", position.value);",
													"    })",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3ad64400-839c-489d-b7d5-3e59199351ac",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{hub_operator}}"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payeefsp}}",
												"positions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Quote - RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9cfc1075-467f-410b-a03f-dd5ca781b360",
												"exec": [
													"var navigator = {}; ",
													"var window = {}; ",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
													"      \"fspId\": \"payerfsp\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"      \"dateOfBirth\": \"1983-10-25\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
													"      \"fspId\": \"payeefsp\"",
													"    }",
													"  },",
													"  \"amountType\": \"RECEIVE\",",
													"  \"amount\": {",
													"    \"amount\": \"60\",",
													"    \"currency\": pm.environment.get('currency')",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "22221cdc-b0d7-4923-adb3-b657e440d785",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              ",
													"              //Check the Headers",
													"              var headers = response.json().headers;",
													"              ",
													"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
													"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
													"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
													"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
													"                });",
													"                ",
													"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
													"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
													"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {",
													"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
													"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
													"                });",
													"                ",
													"          } else {",
													"              pm.test(\"Quote FAILED\", function () {",
													"                throw new Error('Did not receive request on payee side');",
													"              });",
													"              // postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 1100)",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
													"      if(response.responseSize !== 0) {",
													"          //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            ",
													"            ",
													"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"            // var strData = JSON.stringify(response.json().data)",
													"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
													"            // console.log(`token: ${token}`)",
													"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
													"            // console.log(`isValid: ${isValid}`)",
													"            // pm.test(\"Check if the response is JWS valid\", function () {",
													"            //     pm.expect(isValid).to.eql(true);",
													"            // });",
													"            ",
													"            //Validate protected header inside Signature",
													"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"            ",
													"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"            });",
													"            ",
													"",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);",
													"            });",
													"           ",
													"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            ",
													"            pm.test(\"Response quoteId is  null\", function () {",
													"                pm.expect(jsonData.quoteId).to.eql(undefined);",
													"                ",
													"            });",
													"          ",
													"            pm.test(\"Response ilpPacket is not null\", function () {",
													"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
													"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
													"            });",
													"       ",
													"           pm.test(\"Response condition is not null\", function () {",
													"               pm.expect(jsonData.condition).not.equal(undefined);",
													"               pm.environment.set(\"condition\", jsonData.condition);",
													"           });",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('Did not receive response on Payer side');",
													"           });",
													"           // postman.setNextRequest(null);",
													"      }",
													"       ",
													"   });",
													"}, 1000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "payeefsp"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Prepare",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "769b134a-f741-4afa-b097-93c81d238fb5",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib\r",
													"var window = {}; //fake a window object for the lib\r",
													"eval(pm.environment.get('jrsassign'));\r",
													"\r",
													"var uuid = require('uuid');\r",
													"var generatedUUID = uuid.v4();\r",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
													"\r",
													"\r",
													"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
													"\r",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
													"\r",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"noresponsepayeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};\r",
													"var sHeader = JSON.stringify(oHeader);\r",
													"console.log(`sHeader: ${sHeader}`)\r",
													"\r",
													"var objPayload = {\r",
													"  \"transferId\": pm.environment.get('transfer_ID'),\r",
													"  \"payerFsp\": \"payerfsp\",\r",
													"  \"payeeFsp\": \"noresponsepayeefsp\",\r",
													"  \"amount\": {\r",
													"    \"amount\": \"10\",\r",
													"    \"currency\": pm.environment.get('currency')\r",
													"  },\r",
													"  \"expiration\": pm.environment.get('transferExpiration'),\r",
													"  \"ilpPacket\": pm.environment.get('ilpPacket'),\r",
													"  \"condition\": pm.environment.get('validCondition')\r",
													"}\r",
													"var sPayload = JSON.stringify(objPayload)\r",
													"console.log(`sPayload: ${sPayload}`)\r",
													"pm.variables.set(\"transferRequest\", sPayload);\r",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));\r",
													"//console.log(`token: ${token}`)\r",
													"\r",
													"// var encodedHeaders = btoa(sHeader)\r",
													"\r",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
													"// var token = JSON.stringify(ofspiopSignature)\r",
													"\r",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
													"\r",
													"const signatureObject = {\r",
													"    signature: signature.replace('\"', ''),\r",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
													"};\r",
													"\r",
													"console.log(JSON.stringify(signatureObject))\r",
													"\r",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "eacda49e-d080-4569-a771-0e8ad87d6000",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp",
												"type": "text"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "noresponsepayeefsp",
												"type": "text"
											},
											{
												"key": "FSPIOP-Signature",
												"value": "{{fspiopSignature}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-URI",
												"value": "/transfers",
												"type": "text"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"value": "POST",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transferRequest}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Store Payerfsp position after Prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0be1e4cc-90b8-46fb-80fa-f516ad524b3e",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"jsonData",
													"    .filter(position => position.currency === pm.environment.get('currency'))",
													"    .forEach(position => {",
													"        pm.environment.set(\"payerfspPositionAfterPrepare\", position.value);",
													"    })",
													"    "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d3c847a8-b87f-4e3f-a98a-a2fa50f49f17",
												"exec": [
													"setTimeout(function () {",
													"  pm.sendRequest('www.google.com', function (err, response) {}",
													"    );",
													"}, 3000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{hub_operator}}"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"positions"
											]
										}
									},
									"response": []
								},
								{
									"name": "(BUG) Send Payee Abort",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2f5d9139-f734-4c71-bbbe-11f41ca63d80",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"//pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"noresponsepayeefsp\",\"FSPIOP-Destination\":\"payerfsp\", \"FSPIOP-URI\":`/transfers/${pm.environment.get('transfer_ID')}`, \"FSPIOP-HTTP-Method\":\"PUT\", \"Date\":pm.variables.get('transferDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"var objPayload = {",
													"  \"fulfilment\": pm.environment.get('validFulfillment'),",
													"  \"completedTimestamp\": pm.environment.get('completedTimestamp'),",
													"  \"transferState\": \"ABORTED\"",
													"}",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"transferResponse\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payeefspJWSKey'));",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"console.log(JSON.stringify(signatureObject))",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "43372fa0-a761-4385-826c-cef60df9a9de",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"            //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is noresponsepayeefsp \", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-signature is not null\", function () {",
													"                pm.expect(headers['fspiop-signature']).not.eql(undefined);",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            pm.test(\"Response data does not have transferId\", function () {",
													"               pm.expect(jsonData.transferId).to.eql(undefined);",
													"            });",
													"            pm.test(\"Response status is ABORTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
													"            });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response on payer side');",
													"              });",
													"              // postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 3000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{NORESPONSEPAYEEFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-Source",
												"value": "noresponsepayeefsp",
												"type": "text"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payerfsp}}",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"type": "text"
											},
											{
												"key": "FSPIOP-Signature",
												"value": "{{fspiopSignature}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-URI",
												"value": "/transfers/{{transfer_ID}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"value": "PUT",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transferResponse}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers",
												"{{transfer_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "(BUG) Check Transfer status - ABORTED",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7b440679-ad10-4748-88e2-3ec29695bd46",
												"exec": [
													"",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a4a53ae8-ef4e-4501-90d0-8fde1e521baf",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// pm.test(\"Check that Content-Type is present\", function () {",
													"//     pm.response.to.have.header(\"Content-Type\");",
													"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
													"// });",
													"",
													"/*setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
													"          if(response !== null) {",
													"              var jsonData = response.json();",
													"              ",
													"              pm.test(\"Response status is ABORTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
													"              });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"              // postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 3000)*/",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"            //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is switch \", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('switch');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"         /* THIS TEST WAS SUCCESSFUL IN LEGACY SIM   ",
													"            pm.test(\"fspiop-signature is empty\", function () {",
													"             pm.expect(headers['fspiop-signature']).to.eql(undefined);",
													"            });",
													"            */",
													"",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-signature is not null\", function () {",
													"                pm.expect(headers['fspiop-signature']).not.eql(undefined);",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            pm.test(\"Response data does not have transferId\", function () {",
													"               pm.expect(jsonData.transferId).to.eql(undefined);",
													"            });",
													"            pm.test(\"Response status is ABORTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
													"            });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response on payer side');",
													"              });",
													"              // postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 1300)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers",
												"{{transfer_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check Payerfsp position after Abort",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9bd6cb3-bca5-415b-8212-ac05f9d7d9c5",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"jsonData",
													"    .filter(position => position.currency === pm.environment.get('currency'))",
													"    .forEach(position => {",
													"        pm.test(\"Payerfsp position after Payee ABORT should be same as position before prepare.\", function () {",
													"            pm.expect(position.value).to.equal(Number(pm.environment.get('payerfspPositionBeforePrepare')));",
													"        });",
													"    })",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "640823a1-8fd8-433a-bbdd-a66c4aa82501",
												"exec": [
													"setTimeout(function () {",
													"  pm.sendRequest('www.google.com', function (err, response) {}",
													"    );",
													"}, 10000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{hub_operator}}"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"positions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check Payeefsp position after Abort",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6731ad2-52d8-43cf-ba65-1013b93fa94d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"jsonData",
													"    .filter(position => position.currency === pm.environment.get('currency'))",
													"    .forEach(position => {",
													"        pm.test(\"Payeefsp position after Payee ABORT should be same as position before prepare.\", function () {",
													"            pm.expect(position.value).to.equal(Number(pm.environment.get('payeefspPositionBeforePrepare')));",
													"        });",
													"    })",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "af62876e-02dd-4a13-b53e-c981f418fe60",
												"exec": [
													"setTimeout(function () {",
													"  pm.sendRequest('www.google.com', function (err, response) {}",
													"    );",
													"}, 10000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{hub_operator}}"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payeefsp}}",
												"positions"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "payee_invalid_fulfillment",
							"item": [
								{
									"name": "Store Payerfsp position",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54217405-a2cf-4464-9872-638e15e401ca",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"jsonData",
													"    .filter(position => position.currency === pm.environment.get('currency'))",
													"    .forEach(position => {",
													"        pm.environment.set(\"payerfspPositionBeforeTransfer\", position.value);",
													"    })",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "26358367-c407-4c84-b0c2-3696ce9abc2c",
												"exec": [
													"setTimeout(function () {",
													"  pm.sendRequest('www.google.com', function (err, response) {}",
													"    );",
													"}, 3000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "{{hub_operator}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"positions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Store Payeefsp position",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d9efb8b-f599-4617-87a7-9304f042c3d2",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"jsonData",
													"    .filter(position => position.currency === pm.environment.get('currency'))",
													"    .forEach(position => {",
													"        pm.environment.set(\"payeefspPositionBeforeTransfer\", position.value);",
													"    })",
													"    ",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0488e78b-5bec-4e51-883e-c4c3c82aa19d",
												"exec": [
													"setTimeout(function () {",
													"  pm.sendRequest('www.google.com', function (err, response) {}",
													"    );",
													"}, 3000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{hub_operator}}"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payeefsp}}",
												"positions"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Quote - RECEIVE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3d081eb8-b33f-4fbe-9c94-be1ff274d4ac",
												"exec": [
													"var navigator = {}; ",
													"var window = {}; ",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
													"      \"fspId\": \"payerfsp\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"      \"dateOfBirth\": \"1983-10-25\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
													"      \"fspId\": \"payeefsp\"",
													"    }",
													"  },",
													"  \"amountType\": \"RECEIVE\",",
													"  \"amount\": {",
													"    \"amount\": \"60\",",
													"    \"currency\": pm.environment.get('currency')",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "338178d7-5aa2-4cbf-ba9d-1391b3cda302",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"              ",
													"              //Check the Headers",
													"              var headers = response.json().headers;",
													"              ",
													"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
													"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
													"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
													"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
													"                });",
													"                ",
													"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
													"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
													"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {",
													"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');",
													"                });",
													"                ",
													"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
													"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
													"                });",
													"                ",
													"          } else {",
													"              pm.test(\"Quote FAILED\", function () {",
													"                throw new Error('Did not receive request on payee side');",
													"              });",
													"              // postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 1100)",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
													"      if(response.responseSize !== 0) {",
													"          //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            ",
													"            ",
													"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"            // var strData = JSON.stringify(response.json().data)",
													"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
													"            // console.log(`token: ${token}`)",
													"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
													"            // console.log(`isValid: ${isValid}`)",
													"            // pm.test(\"Check if the response is JWS valid\", function () {",
													"            //     pm.expect(isValid).to.eql(true);",
													"            // });",
													"            ",
													"            //Validate protected header inside Signature",
													"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"            ",
													"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"            });",
													"            ",
													"",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);",
													"            });",
													"           ",
													"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            ",
													"            pm.test(\"Response quoteId is  null\", function () {",
													"                pm.expect(jsonData.quoteId).to.eql(undefined);",
													"                ",
													"            });",
													"          ",
													"            pm.test(\"Response ilpPacket is not null\", function () {",
													"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
													"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
													"            });",
													"       ",
													"           pm.test(\"Response condition is not null\", function () {",
													"               pm.expect(jsonData.condition).not.equal(undefined);",
													"               pm.environment.set(\"condition\", jsonData.condition);",
													"           });",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('Did not receive response on Payer side');",
													"           });",
													"           // postman.setNextRequest(null);",
													"      }",
													"       ",
													"   });",
													"}, 1000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "payeefsp"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Prepare",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7baaf510-4b31-4937-84a2-165e39eb9f1d",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib\r",
													"var window = {}; //fake a window object for the lib\r",
													"eval(pm.environment.get('jrsassign'));\r",
													"\r",
													"var uuid = require('uuid');\r",
													"var generatedUUID = uuid.v4();\r",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
													"\r",
													"\r",
													"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
													"\r",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
													"\r",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"noresponsepayeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};\r",
													"var sHeader = JSON.stringify(oHeader);\r",
													"console.log(`sHeader: ${sHeader}`)\r",
													"\r",
													"var objPayload = {\r",
													"  \"transferId\": pm.environment.get('transfer_ID'),\r",
													"  \"payerFsp\": \"payerfsp\",\r",
													"  \"payeeFsp\": \"noresponsepayeefsp\",\r",
													"  \"amount\": {\r",
													"    \"amount\": \"10\",\r",
													"    \"currency\": pm.environment.get('currency')\r",
													"  },\r",
													"  \"expiration\": pm.environment.get('transferExpiration'),\r",
													"  \"ilpPacket\": pm.environment.get('ilpPacket'),\r",
													"  \"condition\": pm.environment.get('condition')\r",
													"}\r",
													"var sPayload = JSON.stringify(objPayload)\r",
													"console.log(`sPayload: ${sPayload}`)\r",
													"pm.variables.set(\"transferRequest\", sPayload);\r",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));\r",
													"//console.log(`token: ${token}`)\r",
													"\r",
													"// var encodedHeaders = btoa(sHeader)\r",
													"\r",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
													"// var token = JSON.stringify(ofspiopSignature)\r",
													"\r",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
													"\r",
													"const signatureObject = {\r",
													"    signature: signature.replace('\"', ''),\r",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
													"};\r",
													"\r",
													"console.log(JSON.stringify(signatureObject))\r",
													"\r",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "574cb0cf-3f30-4a67-9801-2547f52140ec",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp",
												"type": "text"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "noresponsepayeefsp",
												"type": "text"
											},
											{
												"key": "FSPIOP-Signature",
												"value": "{{fspiopSignature}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-URI",
												"value": "/transfers",
												"type": "text"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"value": "POST",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transferRequest}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Payee Invalid Fulfillment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "dcdb93f4-6fe2-44d0-b2fa-5f69a9402459",
												"exec": [
													"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ba308387-daa6-4e70-a042-6413295fd9b6",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//TODO Need to doublecheck ML Backend functionality in the new release",
													"// setTimeout(function () {",
													"//   pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
													"//           if(response.responseSize !== 0) {",
													"//             //Checking headers",
													"//             var headers = response.json().headers;",
													"//             pm.test(\"payeefsp fspiop-source is switch \", function () {",
													"//                 pm.expect(headers['fspiop-source']).to.eql('switch');",
													"//             });",
													"            ",
													"//             pm.test(\"payeefsp fspiop-destination is noresponsepayeefsp\", function () {",
													"//                 pm.expect(headers['fspiop-destination']).to.eql('noresponsepayeefsp');",
													"//             });",
													"            ",
													"//             pm.test(\"payeefsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
													"//                 pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"//             });",
													"            ",
													"//             pm.test(\"payeefsp accept is empty\", function () {",
													"//                 pm.expect(headers['accept']).to.eql(undefined);",
													"//             });",
													"            ",
													"            ",
													"//             pm.test(\"payeefsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
													"//                 pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
													"//             });",
													"            ",
													"//             pm.test(\"payeefsp fspiop-signature is not null\", function () {",
													"//                 pm.expect(headers['fspiop-signature']).not.eql(undefined);",
													"//             });",
													"            ",
													"//             pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
													"//                 pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"//             });",
													"            ",
													"//             var jsonData = response.json().data;",
													"//             pm.test(\"Response Error Code is 3100\", function () {",
													"//               pm.expect(jsonData.errorInformation.errorCode).to.eql('3100');",
													"//             });",
													"//             pm.test(\"Response Error Description is Generic validation error - invalid fulfilment\", function () {",
													"//               pm.expect(jsonData.errorInformation.errorDescription).to.eql('Generic validation error - invalid fulfilment');",
													"//             });",
													"//           } else {",
													"//               pm.test(\"Transfer FAILED\", function () {",
													"//                 throw new Error('Did not receive response on payer side');",
													"//               });",
													"//               // postman.setNextRequest(null)",
													"//           }",
													"//   });",
													"// }, 3000)",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{NORESPONSEPAYEEFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{dateHeader}}"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "noresponsepayeefsp"
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payerfsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"fulfilment\": \"{{invalidFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers",
												"{{transfer_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check Transfer status on Payerfsp - ABORTED",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "611cccea-c00c-4e73-be70-73c5856493de",
												"exec": [
													"",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('transferId', generatedUUID);",
													"",
													"   pm.variables.set('transferDate', (new Date()).toUTCString());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "58872af6-00cd-41de-9d74-a33999581f20",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// pm.test(\"Check that Content-Type is present\", function () {",
													"//     pm.response.to.have.header(\"Content-Type\");",
													"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
													"// });",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
													"          if(response !== null) {",
													"              var jsonData = response.json().data;",
													"              ",
													"              pm.test(\"Response status is ABORTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
													"              });",
													"              pm.test(\"Extension List value is 3100: Generic validation error - invalid fulfilment\", function () {",
													"                pm.expect(jsonData.extensionList.extension[0].value).to.eql('3100: Generic validation error - invalid fulfilment');",
													"              });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"              // postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 3000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYERFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers",
												"{{transfer_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Check Payerfsp&Payeefsp position",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e57d9788-e1a0-42e3-bfb8-ce58673dd531",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Payerfsp position after transfer and after Payee ABORT should be same as position before transfer.\", function () {",
													"    ",
													"    pm.expect(jsonData[0].value).to.equal(Number(pm.environment.get('payerfspPositionBeforeTransfer')));",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b6fe832f-bfd6-420a-9567-0de60bf4cbbf",
												"exec": [
													"setTimeout(function () {",
													"  pm.sendRequest('www.google.com', function (err, response) {}",
													"    );",
													"}, 10000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "{{hub_operator}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"{{payerfsp}}",
												"positions"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Author: Sridevi Miriyala",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f585b294-8fcd-4b46-9634-589927de0b24",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "04bb8fca-1a03-4574-b732-208692f6350e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "duplicate_handling",
					"item": [
						{
							"name": "transfers",
							"item": [
								{
									"name": "original_transfer_at_committed",
									"item": [
										{
											"name": "Send Quote - RECEIVE",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d3e648e8-9ca8-42c5-8ee0-32f90b68442b",
														"exec": [
															"var navigator = {}; ",
															"var window = {}; ",
															"eval(pm.environment.get('jrsassign'));",
															"",
															"",
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"generatedUUID = uuid.v4();",
															"pm.environment.set('transactionId', generatedUUID);",
															"",
															"pm.variables.set('quoteDate', (new Date()).toUTCString());",
															"pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"pm.variables.set('payerMSISDN', '918381008987');",
															"",
															"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
															"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
															"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
															"var sHeader = JSON.stringify(oHeader);",
															"console.log(`sHeader: ${sHeader}`)",
															"",
															"var objPayload = {",
															"  \"quoteId\": pm.environment.get('quoteId'),",
															"  \"transactionId\": pm.environment.get('transactionId'),",
															"  \"payer\": {",
															"    \"partyIdInfo\": {",
															"      \"partyIdType\": \"MSISDN\",",
															"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
															"      \"fspId\": \"payerfsp\"",
															"    },",
															"    \"personalInfo\": {",
															"      \"complexName\": {",
															"        \"firstName\": \"Mats\",",
															"        \"lastName\": \"Hagman\"",
															"      },",
															"      \"dateOfBirth\": \"1983-10-25\"",
															"    }",
															"  },",
															"  \"payee\": {",
															"    \"partyIdInfo\": {",
															"      \"partyIdType\": \"MSISDN\",",
															"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
															"      \"fspId\": \"payeefsp\"",
															"    }",
															"  },",
															"  \"amountType\": \"RECEIVE\",",
															"  \"amount\": {",
															"    \"amount\": \"1\",",
															"    \"currency\": pm.environment.get('currency')",
															"  },",
															"  \"transactionType\": {",
															"    \"scenario\": \"TRANSFER\",",
															"    \"initiator\": \"PAYER\",",
															"    \"initiatorType\": \"CONSUMER\"",
															"  },",
															"  \"note\": \"hej\"",
															"}",
															"",
															"var sPayload = JSON.stringify(objPayload)",
															"console.log(`sPayload: ${sPayload}`)",
															"pm.variables.set(\"quoteRequest\", sPayload);",
															"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
															"console.log(`token: ${token}`)",
															"",
															"// var encodedHeaders = btoa(sHeader)",
															"",
															"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
															"// var token = JSON.stringify(ofspiopSignature)",
															"",
															"const [ protectedHeaderBase64, , signature ] = token.split('.');",
															"",
															"const signatureObject = {",
															"    signature: signature.replace('\"', ''),",
															"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
															"};",
															"",
															"console.log(JSON.stringify(signatureObject))",
															"",
															"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "87d96f6a-3397-42db-8ac6-92d077195d5c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              ",
															"              //Check the Headers",
															"              var headers = response.json().headers;",
															"              ",
															"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
															"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
															"                });",
															"                ",
															"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
															"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
															"                });",
															"                ",
															"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
															"                });",
															"                ",
															"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
															"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
															"                });",
															"                ",
															"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
															"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
															"                });",
															"                ",
															"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {",
															"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');",
															"                });",
															"                ",
															"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
															"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
															"                });",
															"                ",
															"          } else {",
															"              pm.test(\"Quote FAILED\", function () {",
															"                throw new Error('Did not receive request on payee side');",
															"              });",
															"              // postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 1100)",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          //Checking headers",
															"            var headers = response.json().headers;",
															"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
															"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
															"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
															"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp accept is empty\", function () {",
															"                pm.expect(headers['accept']).to.eql(undefined);",
															"            });",
															"            ",
															"            ",
															"            ",
															"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
															"            // var strData = JSON.stringify(response.json().data)",
															"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
															"            // console.log(`token: ${token}`)",
															"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
															"            // console.log(`isValid: ${isValid}`)",
															"            // pm.test(\"Check if the response is JWS valid\", function () {",
															"            //     pm.expect(isValid).to.eql(true);",
															"            // });",
															"            ",
															"            //Validate protected header inside Signature",
															"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
															"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
															"            ",
															"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
															"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
															"            });",
															"            ",
															"",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
															"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);",
															"            });",
															"           ",
															"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
															"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
															"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
															"            });",
															"            ",
															"            var jsonData = response.json().data;",
															"            ",
															"            pm.test(\"Response quoteId is  null\", function () {",
															"                pm.expect(jsonData.quoteId).to.eql(undefined);",
															"                ",
															"            });",
															"          ",
															"            pm.test(\"Response ilpPacket is not null\", function () {",
															"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
															"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
															"            });",
															"       ",
															"           pm.test(\"Response condition is not null\", function () {",
															"               pm.expect(jsonData.condition).not.equal(undefined);",
															"               pm.environment.set(\"condition\", jsonData.condition);",
															"           });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response on Payer side');",
															"           });",
															"           // postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 1000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYERFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "payeefsp"
													},
													{
														"key": "FSPIOP-Signature",
														"type": "text",
														"value": "{{fspiopSignature}}"
													},
													{
														"key": "FSPIOP-HTTP-Method",
														"type": "text",
														"value": "POST"
													},
													{
														"key": "FSPIOP-URI",
														"type": "text",
														"value": "/quotes"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{quoteRequest}}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d18edd8c-4d7e-46cb-a3a1-5a251af21538",
														"exec": [
															"pm.test(\"Status code is 202\", function () {\r",
															"    pm.response.to.have.status(202);\r",
															"});\r",
															"\r",
															"// //Check the request that Switch forwards to payeefsp\r",
															"setTimeout(function () {\r",
															"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
															"          if(response.responseSize !== 0) {\r",
															"              \r",
															"              //Check the Headers\r",
															"              var headers = response.json().headers;\r",
															"              \r",
															"                pm.test(\"payeefsp fspiop-source is goldenpayerfsp\", function () {\r",
															"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');\r",
															"                });\r",
															"                \r",
															"                pm.test(\"payeefsp fspiop-destination is goldenpayeefsp\", function () {\r",
															"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');\r",
															"                });\r",
															"                \r",
															"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {\r",
															"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
															"                });\r",
															"                \r",
															"                pm.test(\"payeefsp accept is same as sent in the request\", function () {\r",
															"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
															"                });\r",
															"                \r",
															"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {\r",
															"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
															"                });\r",
															"                \r",
															"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {\r",
															"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
															"                });\r",
															"                \r",
															"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {\r",
															"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');\r",
															"                });\r",
															"                \r",
															"                \r",
															"                //Check the data\r",
															"                var jsonData = response.json().data;\r",
															"                pm.test(\"payeefsp data should have the same transferId as request\", function () {\r",
															"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));\r",
															"                });\r",
															"                pm.test(\"payeefsp data should have the same payerfspId as request\", function () {\r",
															"                  pm.expect(jsonData.payerFsp).to.eql('payerfsp');\r",
															"                });\r",
															"                pm.test(\"payeefsp data should have the same payeefspId as request\", function () {\r",
															"                  pm.expect('payeefsp');\r",
															"                });\r",
															"                pm.test(\"payeefsp data should have the same amount as request\", function () {\r",
															"                  pm.expect(jsonData.amount.amount).to.eql('1');\r",
															"                });\r",
															"                pm.test(\"payeefsp data should have the same currency as request\", function () {\r",
															"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));\r",
															"                });\r",
															"                pm.test(\"payeefsp data should have the same expiration as request\", function () {\r",
															"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));\r",
															"                });\r",
															"                pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {\r",
															"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));\r",
															"                });\r",
															"                pm.test(\"payeefsp data should have the same condition as request\", function () {\r",
															"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));\r",
															"                });\r",
															"                \r",
															"          } else {\r",
															"              pm.test(\"Transfer FAILED\", function () {\r",
															"                throw new Error('Did not receive response on payee side');\r",
															"              });\r",
															"              // postman.setNextRequest(null)\r",
															"          }\r",
															"  });\r",
															"}, 1500)\r",
															"\r",
															"//Check the callback response that Switch forwards to payerfsp\r",
															"setTimeout(function () {\r",
															"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
															"          if(response.responseSize !== 0) {\r",
															"            //Checking headers\r",
															"            var headers = response.json().headers;\r",
															"            pm.test(\"payerfsp fspiop-source is goldenpayeefsp \", function () {\r",
															"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');\r",
															"            });\r",
															"            \r",
															"            pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {\r",
															"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');\r",
															"            });\r",
															"            \r",
															"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {\r",
															"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
															"            });\r",
															"            \r",
															"            pm.test(\"payerfsp accept is empty\", function () {\r",
															"                pm.expect(headers['accept']).to.eql(undefined);\r",
															"            });\r",
															"            \r",
															"            \r",
															"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {\r",
															"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));\r",
															"            });\r",
															"            \r",
															"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {\r",
															"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
															"            });\r",
															"            \r",
															"            var jsonData = response.json().data;\r",
															"            pm.test(\"Response data does not have transferId\", function () {\r",
															"               pm.expect(jsonData.transferId).to.eql(undefined);\r",
															"            });\r",
															"            pm.test(\"Response status is COMMITTED\", function () {\r",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');\r",
															"            });\r",
															"            pm.test(\"Response fulfillment is not null\", function () {\r",
															"                pm.expect(jsonData.fulfilment).not.eql(undefined);\r",
															"                pm.environment.set('DupTransferFulfillment',jsonData.fulfilment)\r",
															"            });\r",
															"          } else {\r",
															"              pm.test(\"Transfer FAILED\", function () {\r",
															"                throw new Error('Did not receive response on payer side');\r",
															"              });\r",
															"              // postman.setNextRequest(null)\r",
															"          }\r",
															"   });\r",
															"}, 1500)"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "045d485e-a3f9-4411-b1b1-a970351abbcd",
														"exec": [
															"var navigator = {}; //fake a navigator object for the lib\r",
															"var window = {}; //fake a window object for the lib\r",
															"eval(pm.environment.get('jrsassign'));\r",
															"\r",
															"var uuid = require('uuid');\r",
															"var generatedUUID = uuid.v4();\r",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
															"\r",
															"\r",
															"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
															"\r",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
															"\r",
															"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};\r",
															"var sHeader = JSON.stringify(oHeader);\r",
															"console.log(`sHeader: ${sHeader}`)\r",
															"\r",
															"var objPayload = {\r",
															"  \"transferId\": pm.environment.get('transfer_ID'),\r",
															"  \"payerFsp\": \"payerfsp\",\r",
															"  \"payeeFsp\": \"payeefsp\",\r",
															"  \"amount\": {\r",
															"    \"amount\": \"1\",\r",
															"    \"currency\": pm.environment.get('currency')\r",
															"  },\r",
															"  \"expiration\": pm.environment.get('transferExpiration'),\r",
															"  \"ilpPacket\": pm.environment.get('ilpPacket'),\r",
															"  \"condition\": pm.environment.get('condition')\r",
															"}\r",
															"var sPayload = JSON.stringify(objPayload)\r",
															"console.log(`sPayload: ${sPayload}`)\r",
															"pm.variables.set(\"transferRequest\", sPayload);\r",
															"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));\r",
															"//console.log(`token: ${token}`)\r",
															"\r",
															"// var encodedHeaders = btoa(sHeader)\r",
															"\r",
															"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
															"// var token = JSON.stringify(ofspiopSignature)\r",
															"\r",
															"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
															"\r",
															"const signatureObject = {\r",
															"    signature: signature.replace('\"', ''),\r",
															"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
															"};\r",
															"\r",
															"console.log(JSON.stringify(signatureObject))\r",
															"\r",
															"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYERFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"type": "text"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}",
														"type": "text"
													},
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "payeefsp",
														"type": "text"
													},
													{
														"key": "FSPIOP-Signature",
														"value": "{{fspiopSignature}}",
														"type": "text"
													},
													{
														"key": "FSPIOP-URI",
														"value": "/transfers",
														"type": "text"
													},
													{
														"key": "FSPIOP-HTTP-Method",
														"value": "POST",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{transferRequest}}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Duplicate Transfer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "78e4f324-7c0f-4505-b65e-ef63e3a279c2",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"           var jsonData = response.json().data;",
															"              var headers = response.json().headers",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"          ",
															"              pm.test(\"fspiop-source is switch\", function () {",
															"                pm.expect(headers['fspiop-source']).to.eql('switch');",
															"              });",
															"              ",
															"              pm.test(\"fspiop-destination is payerfsp\", function () {",
															"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"              });",
															"              ",
															"              pm.test(\"content-type is application/vnd.interoperability.transfers+json;version=1.0\", function () {",
															"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"                });",
															"                ",
															"                pm.test(\"accept is empty\", function () {",
															"                    pm.expect(headers['accept']).to.eql(undefined);",
															"                });",
															"                ",
															"                pm.test(\"fspiop-signature is not null\", function () {",
															"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
															"                });",
															"                ",
															"                pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
															"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
															"                });",
															"                ",
															"                pm.test(`payeefsp fspiop-uri is /transfers/${pm.environment.get('transfer_ID')}`, function () {",
															"                    pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${pm.environment.get('transfer_ID')}`);",
															"                });",
															"              ",
															"               //Check data    ",
															"             ",
															"              ",
															"              pm.test(\"Response State is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql(\"COMMITTED\");",
															"              });",
															"              ",
															"              pm.test(\"Response fulfillmet is same as sent in request'\", function () {",
															"                pm.expect(jsonData.fulfilment).to.eql(pm.environment.get('DupTransferFulfillment'));",
															"              });",
															"              ",
															"              ",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response on payer side');",
															"              });",
															"              // postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 1500)",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e836bb30-9968-469c-b978-3ce091e5c82a",
														"exec": [
															"var navigator = {}; //fake a navigator object for the lib\r",
															"var window = {}; //fake a window object for the lib\r",
															"eval(pm.environment.get('jrsassign'));\r",
															"\r",
															"var uuid = require('uuid');\r",
															"var generatedUUID = uuid.v4();\r",
															"//pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
															"\r",
															"\r",
															"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
															"\r",
															"//pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
															"\r",
															"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};\r",
															"var sHeader = JSON.stringify(oHeader);\r",
															"console.log(`sHeader: ${sHeader}`)\r",
															"\r",
															"var objPayload = {\r",
															"  \"transferId\": pm.environment.get('transfer_ID'),\r",
															"  \"payerFsp\": \"payerfsp\",\r",
															"  \"payeeFsp\": \"payeefsp\",\r",
															"  \"amount\": {\r",
															"    \"amount\": \"1\",\r",
															"    \"currency\": pm.environment.get('currency')\r",
															"  },\r",
															"  \"expiration\": pm.environment.get('transferExpiration'),\r",
															"  \"ilpPacket\": pm.environment.get('ilpPacket'),\r",
															"  \"condition\": pm.environment.get('condition')\r",
															"}\r",
															"var sPayload = JSON.stringify(objPayload)\r",
															"console.log(`sPayload: ${sPayload}`)\r",
															"pm.variables.set(\"transferRequest\", sPayload);\r",
															"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));\r",
															"//console.log(`token: ${token}`)\r",
															"\r",
															"// var encodedHeaders = btoa(sHeader)\r",
															"\r",
															"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
															"// var token = JSON.stringify(ofspiopSignature)\r",
															"\r",
															"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
															"\r",
															"const signatureObject = {\r",
															"    signature: signature.replace('\"', ''),\r",
															"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
															"};\r",
															"\r",
															"console.log(JSON.stringify(signatureObject))\r",
															"\r",
															"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{PAYERFSP_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0",
														"type": "text"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}",
														"type": "text"
													},
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "payeefsp",
														"type": "text"
													},
													{
														"key": "FSPIOP-Signature",
														"value": "{{fspiopSignature}}",
														"type": "text"
													},
													{
														"key": "FSPIOP-URI",
														"value": "/transfers",
														"type": "text"
													},
													{
														"key": "FSPIOP-HTTP-Method",
														"value": "POST",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{transferRequest}}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "fulfill_commit",
									"item": [
										{
											"name": "positive",
											"item": [
												{
													"name": "Send Quote - RECEIVE",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "a451a0b2-c4ce-45ee-96a7-d9c2a6bb6ce9",
																"exec": [
																	"var navigator = {}; ",
																	"var window = {}; ",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('quoteId', generatedUUID);",
																	"generatedUUID = uuid.v4();",
																	"pm.environment.set('transactionId', generatedUUID);",
																	"",
																	"pm.variables.set('quoteDate', (new Date()).toUTCString());",
																	"pm.variables.set('payerName', 'PayerFirst PayerLast');",
																	"pm.variables.set('payerMSISDN', '918381008987');",
																	"",
																	"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
																	"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
																	"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"  \"quoteId\": pm.environment.get('quoteId'),",
																	"  \"transactionId\": pm.environment.get('transactionId'),",
																	"  \"payer\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
																	"      \"fspId\": \"payerfsp\"",
																	"    },",
																	"    \"personalInfo\": {",
																	"      \"complexName\": {",
																	"        \"firstName\": \"Mats\",",
																	"        \"lastName\": \"Hagman\"",
																	"      },",
																	"      \"dateOfBirth\": \"1983-10-25\"",
																	"    }",
																	"  },",
																	"  \"payee\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
																	"      \"fspId\": \"payeefsp\"",
																	"    }",
																	"  },",
																	"  \"amountType\": \"RECEIVE\",",
																	"  \"amount\": {",
																	"    \"amount\": \"1\",",
																	"    \"currency\": pm.environment.get('currency')",
																	"  },",
																	"  \"transactionType\": {",
																	"    \"scenario\": \"TRANSFER\",",
																	"    \"initiator\": \"PAYER\",",
																	"    \"initiatorType\": \"CONSUMER\"",
																	"  },",
																	"  \"note\": \"hej\"",
																	"}",
																	"",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"quoteRequest\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
																	"console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "859a4c3d-0031-49f2-8492-05594890fe20",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              ",
																	"              //Check the Headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
																	"                });",
																	"                ",
																	"          } else {",
																	"              pm.test(\"Quote FAILED\", function () {",
																	"                throw new Error('Did not receive request on payee side');",
																	"              });",
																	"              // postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 1100)",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
																	"      if(response.responseSize !== 0) {",
																	"          //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"            // var strData = JSON.stringify(response.json().data)",
																	"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
																	"            // console.log(`token: ${token}`)",
																	"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
																	"            // console.log(`isValid: ${isValid}`)",
																	"            // pm.test(\"Check if the response is JWS valid\", function () {",
																	"            //     pm.expect(isValid).to.eql(true);",
																	"            // });",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);",
																	"            });",
																	"           ",
																	"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            ",
																	"            pm.test(\"Response quoteId is  null\", function () {",
																	"                pm.expect(jsonData.quoteId).to.eql(undefined);",
																	"                ",
																	"            });",
																	"          ",
																	"            pm.test(\"Response ilpPacket is not null\", function () {",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
																	"            });",
																	"       ",
																	"           pm.test(\"Response condition is not null\", function () {",
																	"               pm.expect(jsonData.condition).not.equal(undefined);",
																	"               pm.environment.set(\"condition\", jsonData.condition);",
																	"           });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response on Payer side');",
																	"           });",
																	"           // postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 1000)",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "payeefsp"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiopSignature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/quotes"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{quoteRequest}}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Transfer-Prepare",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "eaac5f81-dd3d-4cec-996f-ab1f75109d24",
																"exec": [
																	"",
																	"var navigator = {}; //fake a navigator object for the lib",
																	"var window = {}; //fake a window object for the lib",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																	"",
																	"",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"noresponsepayeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"  \"transferId\": pm.environment.get('transfer_ID'),",
																	"  \"payerFsp\": \"payerfsp\",",
																	"  \"payeeFsp\": \"noresponsepayeefsp\",",
																	"  \"amount\": {",
																	"    \"amount\": \"1\",",
																	"    \"currency\": pm.environment.get('currency')",
																	"  },",
																	"  \"expiration\": pm.environment.get('transferExpiration'),",
																	"  \"ilpPacket\": pm.environment.get('validIlpPacket'),",
																	"  \"condition\": pm.environment.get('validCondition')",
																	"}",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"transferRequest\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
																	"//console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "cd507e13-d454-4c68-b840-697486d58379",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "noresponsepayeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Fulfill",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "d91cc579-32f7-4383-a9a7-d21871b763b8",
																"exec": [
																	"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
																	"var navigator = {}; //fake a navigator object for the lib",
																	"var window = {}; //fake a window object for the lib",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"//pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																	"",
																	"",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"noresponsepayeefsp\",\"FSPIOP-Destination\":\"payerfsp\", \"FSPIOP-URI\":`/transfers/${pm.environment.get('transfer_ID')}`, \"FSPIOP-HTTP-Method\":\"PUT\", \"Date\":pm.variables.get('transferDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"    ",
																	"  \"fulfilment\": pm.environment.get('validFulfillment'),",
																	"  \"completedTimestamp\": pm.environment.get('completedTimestamp'),",
																	"  \"transferState\": \"COMMITTED\"",
																	"}",
																	"",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"transferResponse\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payeefspJWSKey'));",
																	"//console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "1ad14edd-fcc8-47f6-9dcd-1e9a0c48f779",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                //Uncomment after JWS is implemented",
																	"                // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
																	"                //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
																	"                // });",
																	"                ",
																	"                ",
																	"                pm.test(\"payeefsp content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"              //Check data",
																	"              var jsonData = response.json().data;",
																	"              pm.test(\"Response transferState should be COMMITTED\", function () {",
																	"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
																	"              });",
																	"              ",
																	"              pm.test(\"Response fulfilment should be same as in request\", function () {",
																	"                pm.expect(jsonData.fulfilment).to.eql(pm.environment.get(\"validFulfillment\"));",
																	"              });",
																	"              ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              // postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 5000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{NORESPONSEPAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "noresponsepayeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "payerfsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers/{{transfer_ID}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "PUT",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferResponse}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Duplicate Fulfill",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "ff89d01a-867b-4abb-81e6-373afb12b3bd",
																"exec": [
																	"var navigator = {}; //fake a navigator object for the lib",
																	"var window = {}; //fake a window object for the lib",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"//pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																	"",
																	"",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());",
																	"",
																	"//pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"noresponsepayeefsp\",\"FSPIOP-Destination\":\"payerfsp\", \"FSPIOP-URI\":`/transfers/${pm.environment.get('transfer_ID')}`, \"FSPIOP-HTTP-Method\":\"PUT\", \"Date\":pm.variables.get('transferDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`);",
																	"",
																	"var objPayload = {",
																	"    ",
																	"  \"fulfilment\": pm.environment.get('validFulfillment'),",
																	"  \"completedTimestamp\": pm.environment.get('completedTimestamp'),",
																	"  \"transferState\": \"COMMITTED\"",
																	"}",
																	"",
																	"var sPayload = JSON.stringify(objPayload);",
																	"console.log(`sPayload: ${sPayload}`);",
																	"pm.variables.set(\"transferResponse2\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payeefspJWSKey'));",
																	"//console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "66c95d18-eee5-4f72-9b75-e0d815b25494",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"            //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is switch\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('switch');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is noresponsepayeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('noresponsepayeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\" content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-signature is not null\", function () {",
																	"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"                });",
																	"                ",
																	"                pm.test(`payeefsp fspiop-uri is /transfers/${pm.environment.get('transfer_ID')}`, function () {",
																	"                    pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${pm.environment.get('transfer_ID')}`);",
																	"                });",
																	"                ",
																	"             //Check data    ",
																	"              var jsonData = response.json().data;",
																	"              pm.test(\"Response transferState should be COMMITTED\", function () {",
																	"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
																	"              });",
																	"              ",
																	"              pm.test(\"Response fulfilment should be same as in request\", function () {",
																	"                pm.expect(jsonData.fulfilment).to.eql(pm.environment.get(\"validFulfillment\"));",
																	"              });",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response on payer side');",
																	"              });",
																	"              // postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 1300)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{NORESPONSEPAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "noresponsepayeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "payerfsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers/{{transfer_ID}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "PUT",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferResponse2}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nTo test this feature, since there is no simulator as noresponsepayeefsp, the endpoints for it is set to payeefsp's endpoint. so in the tests, you get the response from payeefsp/callbacks and do assertions."
													},
													"response": []
												},
												{
													"name": "Check Transfer status",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "7bfe2dec-7b10-47bf-bde0-af608e34bfb0",
																"exec": [
																	"",
																	"   pm.variables.set('transferDate', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "c8c07c95-a684-4022-a1d0-0b8639a58cb7",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"            //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is switch\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('switch');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                pm.test(\" content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-signature is not null\", function () {",
																	"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\" fspiop-http-method is PUT\", function () {",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"                });",
																	"                ",
																	"                pm.test(` fspiop-uri is /transfers/${pm.environment.get('transfer_ID')}`, function () {",
																	"                    pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${pm.environment.get('transfer_ID')}`);",
																	"                });",
																	"                ",
																	"             //Check data    ",
																	"              var jsonData = response.json().data;",
																	"              pm.test(\"Response transferState should be COMMITTED\", function () {",
																	"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
																	"              });",
																	"              ",
																	"              pm.test(\"Response fulfilment should be same as in request\", function () {",
																	"                pm.expect(jsonData.fulfilment).to.eql(pm.environment.get(\"validFulfillment\"));",
																	"              });",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response on payer side');",
																	"              });",
																	"              // postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 1300)",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1.0"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "negative",
											"item": [
												{
													"name": "Send Quote - RECEIVE",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "0a12b098-89ea-4c8e-bded-24bcdd93e232",
																"exec": [
																	"var navigator = {}; ",
																	"var window = {}; ",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('quoteId', generatedUUID);",
																	"generatedUUID = uuid.v4();",
																	"pm.environment.set('transactionId', generatedUUID);",
																	"",
																	"pm.variables.set('quoteDate', (new Date()).toUTCString());",
																	"pm.variables.set('payerName', 'PayerFirst PayerLast');",
																	"pm.variables.set('payerMSISDN', '918381008987');",
																	"",
																	"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
																	"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
																	"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"  \"quoteId\": pm.environment.get('quoteId'),",
																	"  \"transactionId\": pm.environment.get('transactionId'),",
																	"  \"payer\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
																	"      \"fspId\": \"payerfsp\"",
																	"    },",
																	"    \"personalInfo\": {",
																	"      \"complexName\": {",
																	"        \"firstName\": \"Mats\",",
																	"        \"lastName\": \"Hagman\"",
																	"      },",
																	"      \"dateOfBirth\": \"1983-10-25\"",
																	"    }",
																	"  },",
																	"  \"payee\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
																	"      \"fspId\": \"payeefsp\"",
																	"    }",
																	"  },",
																	"  \"amountType\": \"RECEIVE\",",
																	"  \"amount\": {",
																	"    \"amount\": \"1\",",
																	"    \"currency\": pm.environment.get('currency')",
																	"  },",
																	"  \"transactionType\": {",
																	"    \"scenario\": \"TRANSFER\",",
																	"    \"initiator\": \"PAYER\",",
																	"    \"initiatorType\": \"CONSUMER\"",
																	"  },",
																	"  \"note\": \"hej\"",
																	"}",
																	"",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"quoteRequest\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
																	"console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "968b6821-edbe-45dd-b858-c35f0297fa54",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              ",
																	"              //Check the Headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
																	"                });",
																	"                ",
																	"          } else {",
																	"              pm.test(\"Quote FAILED\", function () {",
																	"                throw new Error('Did not receive request on payee side');",
																	"              });",
																	"              // postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 1100)",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
																	"      if(response.responseSize !== 0) {",
																	"          //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"            // var strData = JSON.stringify(response.json().data)",
																	"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
																	"            // console.log(`token: ${token}`)",
																	"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
																	"            // console.log(`isValid: ${isValid}`)",
																	"            // pm.test(\"Check if the response is JWS valid\", function () {",
																	"            //     pm.expect(isValid).to.eql(true);",
																	"            // });",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);",
																	"            });",
																	"           ",
																	"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            ",
																	"            pm.test(\"Response quoteId is  null\", function () {",
																	"                pm.expect(jsonData.quoteId).to.eql(undefined);",
																	"                ",
																	"            });",
																	"          ",
																	"            pm.test(\"Response ilpPacket is not null\", function () {",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
																	"            });",
																	"       ",
																	"           pm.test(\"Response condition is not null\", function () {",
																	"               pm.expect(jsonData.condition).not.equal(undefined);",
																	"               pm.environment.set(\"condition\", jsonData.condition);",
																	"           });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response on Payer side');",
																	"           });",
																	"           // postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 1000)",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "payeefsp"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiopSignature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/quotes"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{quoteRequest}}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Transfer-Prepare",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "68cd58aa-aa3d-4638-8b66-d37ce27792af",
																"exec": [
																	"",
																	"var navigator = {}; //fake a navigator object for the lib",
																	"var window = {}; //fake a window object for the lib",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																	"",
																	"",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"noresponsepayeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"  \"transferId\": pm.environment.get('transfer_ID'),",
																	"  \"payerFsp\": \"payerfsp\",",
																	"  \"payeeFsp\": \"noresponsepayeefsp\",",
																	"  \"amount\": {",
																	"    \"amount\": \"10\",",
																	"    \"currency\": pm.environment.get('currency')",
																	"  },",
																	"  \"expiration\": pm.environment.get('transferExpiration'),",
																	"  \"ilpPacket\": pm.environment.get('validIlpPacket'),",
																	"  \"condition\": pm.environment.get('validCondition')",
																	"}",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"transferRequest\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
																	"//console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "9c9a51e6-ddbf-450e-8b5f-af0123439b3a",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "noresponsepayeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Fulfill",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "a7e3504b-1013-4443-84d3-bf3ad6a2966f",
																"exec": [
																	"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
																	"var navigator = {}; //fake a navigator object for the lib",
																	"var window = {}; //fake a window object for the lib",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																	"",
																	"",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"noresponsepayeefsp\",\"FSPIOP-Destination\":\"payerfsp\", \"FSPIOP-URI\":`/transfers/${pm.environment.get('transfer_ID')}`, \"FSPIOP-HTTP-Method\":\"PUT\", \"Date\":pm.variables.get('transferDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"    ",
																	"  \"fulfilment\": pm.environment.get('validFulfillment'),",
																	"  \"completedTimestamp\": pm.environment.get('completedTimestamp'),",
																	"  \"transferState\": \"COMMITTED\"",
																	"}",
																	"",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"transferResponse\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payeefspJWSKey'));",
																	"//console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "c6368f0f-e93f-440c-aa16-1447d01a5ec2",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"             //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-signature is not empty\", function () {",
																	"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-uri contains\"+pm.environment.get('transfer_ID'), function () {",
																	"                    pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${pm.environment.get('transfer_ID')}`);",
																	"                });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"                ",
																	"             //Check data    ",
																	"              var jsonData = response.json().data;",
																	"              ",
																	"              pm.test(\"Response transferState should be COMMITTED\", function () {",
																	"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
																	"              });",
																	"              ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response on payer side');",
																	"              });",
																	"              // postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 1000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{NORESPONSEPAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "noresponsepayeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "payerfsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers/{{transfer_ID}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "PUT",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferResponse}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Invalid Duplicate Fulfill",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "6b5f5f05-0d4f-45f6-a5a4-187cbc931350",
																"exec": [
																	"pm.variables.set(\"updatedTimestamp\",new Date().toISOString());",
																	"var navigator = {}; //fake a navigator object for the lib",
																	"var window = {}; //fake a window object for the lib",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																	"",
																	"",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"noresponsepayeefsp\",\"FSPIOP-Destination\":\"payerfsp\", \"FSPIOP-URI\":`/transfers/${pm.environment.get('transfer_ID')}`, \"FSPIOP-HTTP-Method\":\"PUT\", \"Date\":pm.variables.get('transferDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"    ",
																	"  \"fulfilment\": pm.environment.get('invalidFulfillment'),",
																	"  \"completedTimestamp\": pm.variables.get('updatedTimestamp'),",
																	"  \"transferState\": \"COMMITTED\"",
																	"}",
																	"",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"transferResponse\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payeefspJWSKey'));",
																	"//console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "98c92e7d-464c-499a-a1b9-374aed016bd8",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"             //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is switch\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('switch');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is noresponsepayeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('noresponsepayeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-signature is not empty\", function () {",
																	"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-http-method is PUT\", function () {",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"                });",
																	"                ",
																	"                pm.test(`payerfsp fspiop-uri is /transfers/${pm.environment.get('transfer_ID')}/error);`, function () {",
																	"                    pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${pm.environment.get('transfer_ID')}/error`);",
																	"                });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"                ",
																	"             //Check data    ",
																	"              var jsonData = response.json().data;",
																	"              ",
																	"              pm.test(\"Response Error Code is 3106\", function () {",
																	"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3106');",
																	"              });",
																	"              ",
																	"              pm.test(\"Response Error Desription is 'Modified request'\", function () {",
																	"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Modified request');",
																	"              });",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response on payer side');",
																	"              });",
																	"              // postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 1300)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{NORESPONSEPAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "noresponsepayeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "payerfsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers/{{transfer_ID}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "PUT",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferResponse}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"description": "Send a transfer-prepare from payerfsp to payeefsp\nDo not send transfer-fulfil from payeefsp.\n\nSend a duplicate transfer-prepare with same params.\ncheck the simulator logs to make sure that there should not be any response for the duplicate transfer when the actual transfer is not at terminal state which means neither committed nor aborted but in process.\n\nThis is same as sending duplicate transfer when actual transfer is at ABORTED state.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bb305d10-c96d-44d1-8532-3cff9dcd9749",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dd55dbd2-fa1d-4fc3-8b84-97ca58f178c5",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "fulfill_reject",
									"item": [
										{
											"name": "positive",
											"item": [
												{
													"name": "Send Quote - RECEIVE",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "63635e80-98d2-4fea-a333-7b634e501554",
																"exec": [
																	"var navigator = {}; ",
																	"var window = {}; ",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('quoteId', generatedUUID);",
																	"generatedUUID = uuid.v4();",
																	"pm.environment.set('transactionId', generatedUUID);",
																	"",
																	"pm.variables.set('quoteDate', (new Date()).toUTCString());",
																	"pm.variables.set('payerName', 'PayerFirst PayerLast');",
																	"pm.variables.set('payerMSISDN', '918381008987');",
																	"",
																	"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
																	"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
																	"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"  \"quoteId\": pm.environment.get('quoteId'),",
																	"  \"transactionId\": pm.environment.get('transactionId'),",
																	"  \"payer\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
																	"      \"fspId\": \"payerfsp\"",
																	"    },",
																	"    \"personalInfo\": {",
																	"      \"complexName\": {",
																	"        \"firstName\": \"Mats\",",
																	"        \"lastName\": \"Hagman\"",
																	"      },",
																	"      \"dateOfBirth\": \"1983-10-25\"",
																	"    }",
																	"  },",
																	"  \"payee\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
																	"      \"fspId\": \"payeefsp\"",
																	"    }",
																	"  },",
																	"  \"amountType\": \"RECEIVE\",",
																	"  \"amount\": {",
																	"    \"amount\": \"1\",",
																	"    \"currency\": pm.environment.get('currency')",
																	"  },",
																	"  \"transactionType\": {",
																	"    \"scenario\": \"TRANSFER\",",
																	"    \"initiator\": \"PAYER\",",
																	"    \"initiatorType\": \"CONSUMER\"",
																	"  },",
																	"  \"note\": \"hej\"",
																	"}",
																	"",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"quoteRequest\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
																	"console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "c0796e7d-2774-49cb-b881-b1e043463bed",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              ",
																	"              //Check the Headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
																	"                });",
																	"                ",
																	"          } else {",
																	"              pm.test(\"Quote FAILED\", function () {",
																	"                throw new Error('Did not receive request on payee side');",
																	"              });",
																	"              // postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 1100)",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
																	"      if(response.responseSize !== 0) {",
																	"          //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"            // var strData = JSON.stringify(response.json().data)",
																	"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
																	"            // console.log(`token: ${token}`)",
																	"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
																	"            // console.log(`isValid: ${isValid}`)",
																	"            // pm.test(\"Check if the response is JWS valid\", function () {",
																	"            //     pm.expect(isValid).to.eql(true);",
																	"            // });",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);",
																	"            });",
																	"           ",
																	"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            ",
																	"            pm.test(\"Response quoteId is  null\", function () {",
																	"                pm.expect(jsonData.quoteId).to.eql(undefined);",
																	"                ",
																	"            });",
																	"          ",
																	"            pm.test(\"Response ilpPacket is not null\", function () {",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
																	"            });",
																	"       ",
																	"           pm.test(\"Response condition is not null\", function () {",
																	"               pm.expect(jsonData.condition).not.equal(undefined);",
																	"               pm.environment.set(\"condition\", jsonData.condition);",
																	"           });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response on Payer side');",
																	"           });",
																	"           // postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 1000)",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "payeefsp"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiopSignature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/quotes"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{quoteRequest}}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Transfer-Prepare",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "f89a8903-7ddb-4fc6-9fb6-8cc1b65fb83b",
																"exec": [
																	"",
																	"var navigator = {}; //fake a navigator object for the lib",
																	"var window = {}; //fake a window object for the lib",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																	"",
																	"",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"noresponsepayeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"  \"transferId\": pm.environment.get('transfer_ID'),",
																	"  \"payerFsp\": \"payerfsp\",",
																	"  \"payeeFsp\": \"noresponsepayeefsp\",",
																	"  \"amount\": {",
																	"    \"amount\": \"10\",",
																	"    \"currency\": pm.environment.get('currency')",
																	"  },",
																	"  \"expiration\": pm.environment.get('transferExpiration'),",
																	"  \"ilpPacket\": pm.environment.get('validIlpPacket'),",
																	"  \"condition\": pm.environment.get('validCondition')",
																	"}",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"transferRequest\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
																	"//console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "28803a49-5539-4d3b-adfd-086e820c994d",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "noresponsepayeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Fulfill-Reject",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c39410f2-3a0a-481c-9062-a4e17222ded8",
																"exec": [
																	"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
																	"var navigator = {}; //fake a navigator object for the lib",
																	"var window = {}; //fake a window object for the lib",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																	"",
																	"",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"noresponsepayeefsp\",\"FSPIOP-Destination\":\"payerfsp\", \"FSPIOP-URI\":`/transfers/${pm.environment.get('transfer_ID')}/error`, \"FSPIOP-HTTP-Method\":\"PUT\", \"Date\":pm.variables.get('transferDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"\t\"errorInformation\": {",
																	"\t\t\"errorCode\": \"5101\",",
																	"\t\t\"errorDescription\": \"Payee transaction limit reached\",",
																	"\t\t\"extensionList\": {",
																	"\t\t\t\"extension\": [{",
																	"\t\t\t\t\"key\": \"errorDetail\",",
																	"\t\t\t\t\"value\": \"This is an abort extension\"",
																	"\t\t\t}]",
																	"\t\t}",
																	"\t}",
																	"}",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"fulfillResponse\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payeefspJWSKey'));",
																	"//console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "eae443b9-560d-4191-b097-13730cc44e4a",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payerfsp content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"payerfsp fspiop-signature is not null\", function () {",
																	"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"                });",
																	"                ",
																	"                pm.test(`payerfsp fspiop-uri is /transfers/${pm.environment.get('transfer_ID')}/error);`, function () {",
																	"                    pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${pm.environment.get('transfer_ID')}/error`);",
																	"                });",
																	"                ",
																	"              //Check data",
																	"              var jsonData = response.json().data;",
																	"              pm.test(\"Response Error Code is 5101\", function () {",
																	"                pm.expect(jsonData.errorInformation.errorCode).to.eql('5101');",
																	"              });",
																	"              ",
																	"              pm.test(\"Response Error Desription is 'Payee transaction limit reached'\", function () {",
																	"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Payee transaction limit reached');",
																	"              });",
																	"              ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              // postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 5000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{NORESPONSEPAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.transfers+json;version=1.0"
															},
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{transferDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "noresponsepayeefsp"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "PUT",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers/{{transfer_ID}}/error",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{fulfillResponse}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}/error",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}",
																"error"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Duplicate Fulfill-Reject",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "0b582602-72d6-4da3-a989-e76b995c4aeb",
																"exec": [
																	"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
																	"var navigator = {}; //fake a navigator object for the lib",
																	"var window = {}; //fake a window object for the lib",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																	"",
																	"",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"noresponsepayeefsp\",\"FSPIOP-Destination\":\"payerfsp\", \"FSPIOP-URI\":`/transfers/${pm.environment.get('transfer_ID')}/error`, \"FSPIOP-HTTP-Method\":\"PUT\", \"Date\":pm.variables.get('transferDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"\t\"errorInformation\": {",
																	"\t\t\"errorCode\": \"5101\",",
																	"\t\t\"errorDescription\": \"Payee transaction limit reached\",",
																	"\t\t\"extensionList\": {",
																	"\t\t\t\"extension\": [{",
																	"\t\t\t\t\"key\": \"errorDetail\",",
																	"\t\t\t\t\"value\": \"This is an abort extension\"",
																	"\t\t\t}]",
																	"\t\t}",
																	"\t}",
																	"}",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"fulfillResponse\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payeefspJWSKey'));",
																	"//console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "070f6e66-6350-42e9-9113-121f81f844ad",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payerfsp content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"payerfsp fspiop-signature is not null\", function () {",
																	"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"                });",
																	"                ",
																	"                pm.test(`payerfsp fspiop-uri is /transfers/${pm.environment.get('transfer_ID')}/error);`, function () {",
																	"                    pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${pm.environment.get('transfer_ID')}/error`);",
																	"                });",
																	"                ",
																	"              //Check data",
																	"              var jsonData = response.json().data;",
																	"              pm.test(\"Response Error Code is 5101\", function () {",
																	"                pm.expect(jsonData.errorInformation.errorCode).to.eql('5101');",
																	"              });",
																	"              ",
																	"              pm.test(\"Response Error Desription is 'Payee transaction limit reached'\", function () {",
																	"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Payee transaction limit reached');",
																	"              });",
																	"              ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              // postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 5000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{NORESPONSEPAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "noresponsepayeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "PUT",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers/{{transfer_ID}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{fulfillResponse}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}/error",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}",
																"error"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "negative",
											"item": [
												{
													"name": "Send Quote - RECEIVE",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "4e4fd518-2d08-4036-9fd1-e1588a27baa9",
																"exec": [
																	"var navigator = {}; ",
																	"var window = {}; ",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('quoteId', generatedUUID);",
																	"generatedUUID = uuid.v4();",
																	"pm.environment.set('transactionId', generatedUUID);",
																	"",
																	"pm.variables.set('quoteDate', (new Date()).toUTCString());",
																	"pm.variables.set('payerName', 'PayerFirst PayerLast');",
																	"pm.variables.set('payerMSISDN', '918381008987');",
																	"",
																	"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
																	"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
																	"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"  \"quoteId\": pm.environment.get('quoteId'),",
																	"  \"transactionId\": pm.environment.get('transactionId'),",
																	"  \"payer\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
																	"      \"fspId\": \"payerfsp\"",
																	"    },",
																	"    \"personalInfo\": {",
																	"      \"complexName\": {",
																	"        \"firstName\": \"Mats\",",
																	"        \"lastName\": \"Hagman\"",
																	"      },",
																	"      \"dateOfBirth\": \"1983-10-25\"",
																	"    }",
																	"  },",
																	"  \"payee\": {",
																	"    \"partyIdInfo\": {",
																	"      \"partyIdType\": \"MSISDN\",",
																	"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
																	"      \"fspId\": \"payeefsp\"",
																	"    }",
																	"  },",
																	"  \"amountType\": \"RECEIVE\",",
																	"  \"amount\": {",
																	"    \"amount\": \"1\",",
																	"    \"currency\": pm.environment.get('currency')",
																	"  },",
																	"  \"transactionType\": {",
																	"    \"scenario\": \"TRANSFER\",",
																	"    \"initiator\": \"PAYER\",",
																	"    \"initiatorType\": \"CONSUMER\"",
																	"  },",
																	"  \"note\": \"hej\"",
																	"}",
																	"",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"quoteRequest\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
																	"console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "640dc417-54b1-4a34-a232-f51389691a1f",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYEEFSP_SDK_TESTAPI_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              ",
																	"              //Check the Headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
																	"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
																	"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-uri is /quotes\", function () {",
																	"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
																	"                });",
																	"                ",
																	"          } else {",
																	"              pm.test(\"Quote FAILED\", function () {",
																	"                throw new Error('Did not receive request on payee side');",
																	"              });",
																	"              // postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 1100)",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
																	"      if(response.responseSize !== 0) {",
																	"          //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"            // var strData = JSON.stringify(response.json().data)",
																	"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
																	"            // console.log(`token: ${token}`)",
																	"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
																	"            // console.log(`isValid: ${isValid}`)",
																	"            // pm.test(\"Check if the response is JWS valid\", function () {",
																	"            //     pm.expect(isValid).to.eql(true);",
																	"            // });",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);",
																	"            });",
																	"           ",
																	"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            ",
																	"            pm.test(\"Response quoteId is  null\", function () {",
																	"                pm.expect(jsonData.quoteId).to.eql(undefined);",
																	"                ",
																	"            });",
																	"          ",
																	"            pm.test(\"Response ilpPacket is not null\", function () {",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
																	"            });",
																	"       ",
																	"           pm.test(\"Response condition is not null\", function () {",
																	"               pm.expect(jsonData.condition).not.equal(undefined);",
																	"               pm.environment.set(\"condition\", jsonData.condition);",
																	"           });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response on Payer side');",
																	"           });",
																	"           // postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 1000)",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "payeefsp"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiopSignature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/quotes"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{quoteRequest}}"
														},
														"url": {
															"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
															"host": [
																"{{HOST_QUOTING_SERVICE}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Transfer-Prepare",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "6d253a71-455e-429b-ad1c-ce3807e8de9d",
																"exec": [
																	"",
																	"var navigator = {}; //fake a navigator object for the lib",
																	"var window = {}; //fake a window object for the lib",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																	"",
																	"",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"noresponsepayeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"  \"transferId\": pm.environment.get('transfer_ID'),",
																	"  \"payerFsp\": \"payerfsp\",",
																	"  \"payeeFsp\": \"noresponsepayeefsp\",",
																	"  \"amount\": {",
																	"    \"amount\": \"10\",",
																	"    \"currency\": pm.environment.get('currency')",
																	"  },",
																	"  \"expiration\": pm.environment.get('transferExpiration'),",
																	"  \"ilpPacket\": pm.environment.get('validIlpPacket'),",
																	"  \"condition\": pm.environment.get('validCondition')",
																	"}",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"transferRequest\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payerfspJWSKey'));",
																	"//console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "4d25aaf4-c6ce-4ee8-a170-6c4eb562bf1b",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYERFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "payerfsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "noresponsepayeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "POST",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{transferRequest}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Fulfill-Reject",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "024277ad-5678-42ce-8a62-b85f32451a8c",
																"exec": [
																	"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
																	"var navigator = {}; //fake a navigator object for the lib",
																	"var window = {}; //fake a window object for the lib",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																	"",
																	"",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"noresponsepayeefsp\",\"FSPIOP-Destination\":\"payerfsp\", \"FSPIOP-URI\":`/transfers/${pm.environment.get('transfer_ID')}/error`, \"FSPIOP-HTTP-Method\":\"PUT\", \"Date\":pm.variables.get('transferDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"\t\"errorInformation\": {",
																	"\t\t\"errorCode\": \"5101\",",
																	"\t\t\"errorDescription\": \"Payee transaction limit reached\",",
																	"\t\t\"extensionList\": {",
																	"\t\t\t\"extension\": [{",
																	"\t\t\t\t\"key\": \"errorDetail\",",
																	"\t\t\t\t\"value\": \"This is an abort extension\"",
																	"\t\t\t}]",
																	"\t\t}",
																	"\t}",
																	"}",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"fulfillResponse\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payeefspJWSKey'));",
																	"//console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "198d66d8-35df-4476-b030-0d6f03f4b3ee",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payerfsp content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"payerfsp fspiop-signature is not null\", function () {",
																	"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"                });",
																	"                ",
																	"                pm.test(`payerfsp fspiop-uri is /transfers/${pm.environment.get('transfer_ID')}`, function () {",
																	"                    pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${pm.environment.get('transfer_ID')}/error`);",
																	"                });",
																	"                ",
																	"              //Check data",
																	"              var jsonData = response.json().data;",
																	"              pm.test(\"Response Error Code is 5101\", function () {",
																	"                pm.expect(jsonData.errorInformation.errorCode).to.eql('5101');",
																	"              });",
																	"              ",
																	"              pm.test(\"Response Error Desription is 'Payee transaction limit reached'\", function () {",
																	"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Payee transaction limit reached');",
																	"              });",
																	"              ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              // postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 2000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{NORESPONSEPAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{transferDate}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "noresponsepayeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "PUT",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers/{{transfer_ID}}/error",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{fulfillResponse}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}/error",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}",
																"error"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Invalid Duplicate Fulfill-Reject",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "0b1d9019-a345-409c-8825-3ed4a514efbf",
																"exec": [
																	"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
																	"var navigator = {}; //fake a navigator object for the lib",
																	"var window = {}; //fake a window object for the lib",
																	"eval(pm.environment.get('jrsassign'));",
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																	"",
																	"",
																	"pm.variables.set('transferDate', (new Date()).toUTCString());",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
																	"",
																	"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"payerfsp\",\"FSPIOP-Destination\":\"payeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
																	"var sHeader = JSON.stringify(oHeader);",
																	"console.log(`sHeader: ${sHeader}`)",
																	"",
																	"var objPayload = {",
																	"\t\"errorInformation\": {",
																	"\t\t\"errorCode\": \"5101\",",
																	"\t\t\"errorDescription\": \"This is an invalid duplicate request\",",
																	"\t\t\"extensionList\": {",
																	"\t\t\t\"extension\": [{",
																	"\t\t\t\t\"key\": \"errorDetail\",",
																	"\t\t\t\t\"value\": \"This is an abort extension\"",
																	"\t\t\t}]",
																	"\t\t}",
																	"\t}",
																	"}",
																	"var sPayload = JSON.stringify(objPayload)",
																	"console.log(`sPayload: ${sPayload}`)",
																	"pm.variables.set(\"fulfillResponse\", sPayload);",
																	"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('payeefspJWSKey'));",
																	"//console.log(`token: ${token}`)",
																	"",
																	"// var encodedHeaders = btoa(sHeader)",
																	"",
																	"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
																	"// var token = JSON.stringify(ofspiopSignature)",
																	"",
																	"const [ protectedHeaderBase64, , signature ] = token.split('.');",
																	"",
																	"const signatureObject = {",
																	"    signature: signature.replace('\"', ''),",
																	"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
																	"};",
																	"",
																	"console.log(JSON.stringify(signatureObject))",
																	"",
																	"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "ccc0abfd-cfd1-4cb4-aab6-5be3e0a02e76",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"PAYERFSP_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payerfsp content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"                pm.test(\"payerfsp fspiop-signature is not null\", function () {",
																	"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                    pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"                });",
																	"                ",
																	"                pm.test(`payerfsp fspiop-uri is /transfers/${pm.environment.get('transfer_ID')}/error`, function () {",
																	"                    pm.expect(headers['fspiop-uri']).to.eql(`/transfers/${pm.environment.get('transfer_ID')}/error`);",
																	"                });",
																	"                ",
																	"              //Check data",
																	"              var jsonData = response.json().data;",
																	"              pm.test(\"Response Error Code is 5101\", function () {",
																	"                pm.expect(jsonData.errorInformation.errorCode).to.eql('5101');",
																	"              });",
																	"              ",
																	"              pm.test(\"Response Error Desription is 'Payee transaction limit reached'\", function () {",
																	"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Payee transaction limit reached');",
																	"              });",
																	"              ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              // postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 5000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{NORESPONSEPAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1.0",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "noresponsepayeefsp",
																"type": "text"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiopSignature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "PUT",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/transfers/{{transfer_ID}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{{fulfillResponse}}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}/error",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}",
																"error"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"description": "Send a transfer-prepare from payerfsp to payeefsp\nDo not send transfer-fulfil from payeefsp.\n\nSend a duplicate transfer-prepare with same params.\ncheck the simulator logs to make sure that there should not be any response for the duplicate transfer when the actual transfer is not at terminal state which means neither committed nor aborted but in process.\n\nThis is same as sending duplicate transfer when actual transfer is at ABORTED state.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "95101f6f-b525-4c89-a448-51602638fc2b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "eec0af10-4a5c-4838-b623-12c2b5fcf358",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Active_Inactive_participants",
					"item": [
						{
							"name": "089 - Active and inactive participant",
							"item": [
								{
									"name": "Update participant (testfsp2 to inactive)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a28ecdad-6188-46ce-ba41-b7e94080a035",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{hub_operator}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"isActive\": false\r\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2"
											]
										},
										"description": "Inactives participant testfsp4"
									},
									"response": []
								},
								{
									"name": "(BUG) Send Quote fail (testfsp1 to testfsp2)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8bbc322b-3be7-4165-b333-fbc5fcdca161",
												"exec": [
													"var navigator = {}; ",
													"var window = {}; ",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp1\",\"FSPIOP-Destination\":\"testfsp2\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
													"      \"fspId\": \"testfsp1\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"      \"dateOfBirth\": \"1983-10-25\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
													"      \"fspId\": \"testfsp2\"",
													"    }",
													"  },",
													"  \"amountType\": \"RECEIVE\",",
													"  \"amount\": {",
													"    \"amount\": \"60\",",
													"    \"currency\": pm.environment.get('currency')",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp1JWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "34de8180-12df-4888-a6f8-776ae3179794",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
													"      if(response.responseSize !== 0) {",
													"          //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"testfsp1 fspiop-source is switch\", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('switch');",
													"            });",
													"            ",
													"            pm.test(\"testfsp1 fspiop-destination is testfsp1\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');",
													"            });",
													"            ",
													"            pm.test(\"testfsp1 content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"testfsp1 accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            ",
													"            ",
													"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"            // var strData = JSON.stringify(response.json().data)",
													"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
													"            // console.log(`token: ${token}`)",
													"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
													"            // console.log(`isValid: ${isValid}`)",
													"            // pm.test(\"Check if the response is JWS valid\", function () {",
													"            //     pm.expect(isValid).to.eql(true);",
													"            // });",
													"            ",
													"            //Validate protected header inside Signature",
													"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"            ",
													"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\")+'/error');",
													"            });",
													"            ",
													"",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be switch\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('switch');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be testfsp1\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('testfsp1');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);",
													"            });",
													"           ",
													"            pm.test(\"testfsp1 FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\")+'/error');",
													"            });",
													"            ",
													"            pm.test(\"testfsp1 fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            ",
													"            pm.test(\"Error code is 3201\", function () {",
													"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3201');",
													"            });",
													"           ",
													"           pm.test(\"Error Description is Destination FSP Error - \\'testfsp2\\' is inactive \", function () {",
													"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Unsupported participant');",
													"           });",
													"           ",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('Did not receive response on Payer side');",
													"           });",
													"           // postman.setNextRequest(null);",
													"      }",
													"       ",
													"   });",
													"}, 1000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "testfsp1"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "testfsp2"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "(BUG) Send Transfer fail(testfsp1 to testfsp2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f8d936f-98c7-4533-8d0d-2323d63cbfae",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"//Check the callback response that Switch forwards to payerfsp",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"            //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"fspiop-source is switch \", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('switch');",
													"            });",
													"            ",
													"            pm.test(\"fspiop-destination is testfsp1\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');",
													"            });",
													"            ",
													"            pm.test(\"content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            pm.test(\"fspiop-signature is not empty\", function () {",
													"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
													"                });",
													"            ",
													"            ",
													"            pm.test(\"fspiop-uri includes /transfers/{{transfer_ID}/error}\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\")+'/error');",
													"            });",
													"            ",
													"            pm.test(\"fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            pm.test(\"Error code is 3100\", function () {",
													"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3100');",
													"            });",
													"           ",
													"           pm.test(\"Error Description is Generic validation error - Participant testfsp2 is inactive \", function () {",
													"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Generic validation error - Participant testfsp2 is inactive');",
													"           });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response on payer side');",
													"              });",
													"              // postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 1300)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f3953419-45be-4de0-8b7e-5c2afb5aa9e2",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp1\",\"FSPIOP-Destination\":\"testfsp2\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"transferId\": pm.environment.get('transfer_ID'),",
													"  \"payerFsp\": \"testfsp1\",",
													"  \"payeeFsp\": \"testfsp2\",",
													"  \"amount\": {",
													"    \"amount\": \"10\",",
													"    \"currency\": pm.environment.get('currency')",
													"  },",
													"  \"expiration\": pm.environment.get('transferExpiration'),",
													"  \"ilpPacket\": pm.environment.get('ilpPacket'),",
													"  \"condition\": pm.environment.get('condition')",
													"}",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"transferRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp1JWSKey'));",
													"//console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "testfsp1"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "testfsp2"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/transfers"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transferRequest}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update participant (testfsp2 to active)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be092efd-84fc-4936-b2a4-494f99b66ccd",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{hub_operator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n              \"isActive\": true\r\n            }"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2"
											]
										},
										"description": "Reactivate participant testfsp4"
									},
									"response": []
								},
								{
									"name": "Send Quote (testfsp1 to testfsp2) - pass",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3afae0a8-ee54-4f20-bb13-3bcbdf69ac72",
												"exec": [
													"  var navigator = {}; ",
													"var window = {}; ",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp1\",\"FSPIOP-Destination\":\"testfsp2\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
													"      \"fspId\": \"testfsp1\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"      \"dateOfBirth\": \"1983-10-25\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
													"      \"fspId\": \"testfsp2\"",
													"    }",
													"  },",
													"  \"amountType\": \"RECEIVE\",",
													"  \"amount\": {",
													"    \"amount\": \"60\",",
													"    \"currency\": pm.environment.get('currency')",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp1JWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0829d5ac-312f-495b-8b2f-8b2cc30de534",
												"exec": [
													"pm.test(\"Status code is 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});\r",
													"\r",
													"setTimeout(function () {\r",
													"  pm.sendRequest(pm.environment.get(\"TESTFSP2_SDK_TESTAPI_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {\r",
													"          if(response.responseSize !== 0) {\r",
													"              \r",
													"              //Check the Headers\r",
													"              var headers = response.json().headers;\r",
													"              \r",
													"                pm.test(\"testfsp2 fspiop-source is testfsp1\", function () {\r",
													"                    pm.expect(headers['fspiop-source']).to.eql('testfsp1');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-destination is testfsp2\", function () {\r",
													"                    pm.expect(headers['fspiop-destination']).to.eql('testfsp2');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-signature is same as sent in the request\", function () {\r",
													"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 accept is same as sent in the request\", function () {\r",
													"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 content-typeis same as sent in the request\", function () {\r",
													"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-uri is /quotes\", function () {\r",
													"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-http-method is POST\", function () {\r",
													"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
													"                });\r",
													"                \r",
													"          } else {\r",
													"              pm.test(\"Quote FAILED\", function () {\r",
													"                throw new Error('Did not receive request on payee side');\r",
													"              });\r",
													"              // postman.setNextRequest(null)\r",
													"          }\r",
													"   });\r",
													"}, 1100)\r",
													"\r",
													"setTimeout(function () {\r",
													"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {\r",
													"      if(response.responseSize !== 0) {\r",
													"          //Checking headers\r",
													"            var headers = response.json().headers;\r",
													"            pm.test(\"testfsp1 fspiop-source is testfsp2\", function () {\r",
													"                pm.expect(headers['fspiop-source']).to.eql('testfsp2');\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 fspiop-destination is testfsp1\", function () {\r",
													"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {\r",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 accept is empty\", function () {\r",
													"                pm.expect(headers['accept']).to.eql(undefined);\r",
													"            });\r",
													"            \r",
													"            \r",
													"            \r",
													"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])\r",
													"            // var strData = JSON.stringify(response.json().data)\r",
													"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`\r",
													"            // console.log(`token: ${token}`)\r",
													"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldentestfsp2JWSPubKey'), {alg: ['RS256']})\r",
													"            // console.log(`isValid: ${isValid}`)\r",
													"            // pm.test(\"Check if the response is JWS valid\", function () {\r",
													"            //     pm.expect(isValid).to.eql(true);\r",
													"            // });\r",
													"            \r",
													"            //Validate protected header inside Signature\r",
													"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))\r",
													"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)\r",
													"            \r",
													"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {\r",
													"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');\r",
													"            });\r",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
													"            });\r",
													"            \r",
													"\r",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {\r",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');\r",
													"            });\r",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldentestfsp2\", function () {\r",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('testfsp2');\r",
													"            });\r",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be testfsp1\", function () {\r",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('testfsp1');\r",
													"            });\r",
													"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {\r",
													"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);\r",
													"            });\r",
													"           \r",
													"            pm.test(\"testfsp1 FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
													"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 fspiop-http-method is PUT\", function () {\r",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
													"            });\r",
													"            \r",
													"            var jsonData = response.json().data;\r",
													"            \r",
													"            pm.test(\"Response quoteId is  null\", function () {\r",
													"                pm.expect(jsonData.quoteId).to.eql(undefined);\r",
													"                \r",
													"            });\r",
													"          \r",
													"            pm.test(\"Response ilpPacket is not null\", function () {\r",
													"                pm.expect(jsonData.ilpPacket).not.equal(undefined);\r",
													"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);\r",
													"            });\r",
													"       \r",
													"           pm.test(\"Response condition is not null\", function () {\r",
													"               pm.expect(jsonData.condition).not.equal(undefined);\r",
													"               pm.environment.set(\"condition\", jsonData.condition);\r",
													"           });\r",
													"      } else {\r",
													"          pm.test(\"Quote FAILED\", function () {\r",
													"            throw new Error('Did not receive response on Payer side');\r",
													"           });\r",
													"           // postman.setNextRequest(null);\r",
													"      }\r",
													"       \r",
													"   });\r",
													"}, 1000)\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-Source",
												"value": "testfsp1",
												"type": "text"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "testfsp2",
												"type": "text"
											},
											{
												"key": "FSPIOP-Signature",
												"value": "{{fspiopSignature}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"value": "POST",
												"type": "text"
											},
											{
												"key": "FSPIOP-URI",
												"value": "/quotes",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Transfer ( testfsp1 to testfsp2 ) - pass",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1fa5f9a0-6e12-4bc4-8b6c-9539f51ff9c8",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib\r",
													"var window = {}; //fake a window object for the lib\r",
													"eval(pm.environment.get('jrsassign'));\r",
													"\r",
													"var uuid = require('uuid');\r",
													"var generatedUUID = uuid.v4();\r",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
													"\r",
													"\r",
													"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
													"\r",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
													"\r",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp1\",\"FSPIOP-Destination\":\"testfsp2\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};\r",
													"var sHeader = JSON.stringify(oHeader);\r",
													"console.log(`sHeader: ${sHeader}`)\r",
													"\r",
													"var objPayload = {\r",
													"  \"transferId\": pm.environment.get('transfer_ID'),\r",
													"  \"payerFsp\": \"testfsp1\",\r",
													"  \"payeeFsp\": \"testfsp2\",\r",
													"  \"amount\": {\r",
													"    \"amount\": \"60\",\r",
													"    \"currency\": pm.environment.get('currency')\r",
													"  },\r",
													"  \"expiration\": pm.environment.get('transferExpiration'),\r",
													"  \"ilpPacket\": pm.environment.get('ilpPacket'),\r",
													"  \"condition\": pm.environment.get('condition')\r",
													"}\r",
													"var sPayload = JSON.stringify(objPayload)\r",
													"console.log(`sPayload: ${sPayload}`)\r",
													"pm.variables.set(\"transferRequest\", sPayload);\r",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp1JWSKey'));\r",
													"//console.log(`token: ${token}`)\r",
													"\r",
													"// var encodedHeaders = btoa(sHeader)\r",
													"\r",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
													"// var token = JSON.stringify(ofspiopSignature)\r",
													"\r",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
													"\r",
													"const signatureObject = {\r",
													"    signature: signature.replace('\"', ''),\r",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
													"};\r",
													"\r",
													"console.log(JSON.stringify(signatureObject))\r",
													"\r",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b8d307d5-6258-4d37-8c2e-34a8bacfe860",
												"exec": [
													"pm.test(\"Status code is 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});\r",
													"\r",
													"// //Check the request that Switch forwards to testfsp2\r",
													"setTimeout(function () {\r",
													"  pm.sendRequest(pm.environment.get(\"TESTFSP2_SDK_TESTAPI_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
													"          if(response.responseSize !== 0) {\r",
													"              \r",
													"              //Check the Headers\r",
													"              var headers = response.json().headers;\r",
													"              \r",
													"                pm.test(\"testfsp2 fspiop-source is goldentestfsp1\", function () {\r",
													"                    pm.expect(headers['fspiop-source']).to.eql('testfsp1');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-destination is goldentestfsp2\", function () {\r",
													"                    pm.expect(headers['fspiop-destination']).to.eql('testfsp2');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 content-typeis same as sent in the request\", function () {\r",
													"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 accept is same as sent in the request\", function () {\r",
													"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-signature is same as sent in the request\", function () {\r",
													"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-http-method is POST\", function () {\r",
													"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-uri is /transfers\", function () {\r",
													"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');\r",
													"                });\r",
													"                \r",
													"                \r",
													"                //Check the data\r",
													"                var jsonData = response.json().data;\r",
													"                pm.test(\"testfsp2 data should have the same transferId as request\", function () {\r",
													"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));\r",
													"                });\r",
													"                pm.test(\"testfsp2 data should have the same amount as request\", function () {\r",
													"                  pm.expect(jsonData.amount.amount).to.eql('60');\r",
													"                });\r",
													"                pm.test(\"testfsp2 data should have the same currency as request\", function () {\r",
													"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));\r",
													"                });\r",
													"                pm.test(\"testfsp2 data should have the same expiration as request\", function () {\r",
													"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));\r",
													"                });\r",
													"                pm.test(\"testfsp2 data should have the same ilpPacket as request\", function () {\r",
													"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));\r",
													"                });\r",
													"                pm.test(\"testfsp2 data should have the same condition as request\", function () {\r",
													"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));\r",
													"                });\r",
													"                \r",
													"          } else {\r",
													"              pm.test(\"Transfer FAILED\", function () {\r",
													"                throw new Error('Did not receive response on payee side');\r",
													"              });\r",
													"              // postman.setNextRequest(null)\r",
													"          }\r",
													"  });\r",
													"}, 1100)\r",
													"\r",
													"//Check the callback response that Switch forwards to testfsp1\r",
													"setTimeout(function () {\r",
													"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
													"          if(response.responseSize !== 0) {\r",
													"            //Checking headers\r",
													"            var headers = response.json().headers;\r",
													"            pm.test(\"testfsp1 fspiop-source is goldentestfsp2 \", function () {\r",
													"                pm.expect(headers['fspiop-source']).to.eql('testfsp2');\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 fspiop-destination is goldentestfsp1\", function () {\r",
													"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {\r",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 accept is empty\", function () {\r",
													"                pm.expect(headers['accept']).to.eql(undefined);\r",
													"            });\r",
													"            \r",
													"            \r",
													"            pm.test(\"testfsp1 fspiop-uri includes /transfers/{{transfer_ID}}\", function () {\r",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 fspiop-http-method is PUT\", function () {\r",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
													"            });\r",
													"            \r",
													"            var jsonData = response.json().data;\r",
													"            pm.test(\"Response data does not have transferId\", function () {\r",
													"               pm.expect(jsonData.transferId).to.eql(undefined);\r",
													"            });\r",
													"            pm.test(\"Response status is COMMITTED\", function () {\r",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');\r",
													"            });\r",
													"          } else {\r",
													"              pm.test(\"Transfer FAILED\", function () {\r",
													"                throw new Error('Did not receive response on payer side');\r",
													"              });\r",
													"              // postman.setNextRequest(null)\r",
													"          }\r",
													"   });\r",
													"}, 1500)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-Source",
												"value": "testfsp1",
												"type": "text"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "testfsp2",
												"type": "text"
											},
											{
												"key": "FSPIOP-Signature",
												"value": "{{fspiopSignature}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-URI",
												"value": "/transfers",
												"type": "text"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"value": "POST",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transferRequest}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "090 - Active and inactive participants accounts",
							"item": [
								{
									"name": "3. Get testfsp2 Participant Account",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9991a0c7-1ea7-48a2-95c9-e4a5f7beeb22",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a392309e-1fb3-455d-90aa-899b9afb12ec",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"jsonData",
													"    .filter(account => account.currency === pm.environment.get('currency'))",
													"    .forEach(curAccount => {",
													"        if(curAccount.ledgerAccountType === \"POSITION\") {",
													"            pm.environment.set(\"testfsp2PositionAccountId\", curAccount.id);",
													"            ",
													"        }",
													"    })",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{hub_operator}}"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update testfsp2 to inactive_XOF account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d974ca1-dd78-40cf-91ac-1042f52a97f9",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{hub_operator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"isActive\": false\r\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts/{{testfsp2PositionAccountId}}",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts",
												"{{testfsp2PositionAccountId}}"
											]
										},
										"description": "inactives testfsp4 position account"
									},
									"response": []
								},
								{
									"name": "Send Quote fail (testfsp1 to testfsp2)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6bc76b64-8485-4a08-9a11-e59863f7bd49",
												"exec": [
													"var navigator = {}; ",
													"var window = {}; ",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp1\",\"FSPIOP-Destination\":\"testfsp2\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
													"      \"fspId\": \"testfsp1\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"      \"dateOfBirth\": \"1983-10-25\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
													"      \"fspId\": \"testfsp2\"",
													"    }",
													"  },",
													"  \"amountType\": \"RECEIVE\",",
													"  \"amount\": {",
													"    \"amount\": \"60\",",
													"    \"currency\": pm.environment.get('currency')",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp1JWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a093d41b-1b56-4807-a2b0-07bfd570be06",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
													"      if(response.responseSize !== 0) {",
													"          //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"testfsp1 fspiop-source is switch\", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('switch');",
													"            });",
													"            ",
													"            pm.test(\"testfsp1 fspiop-destination is testfsp1\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');",
													"            });",
													"            ",
													"            pm.test(\"testfsp1 content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"testfsp1 accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            ",
													"            ",
													"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
													"            // var strData = JSON.stringify(response.json().data)",
													"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
													"            // console.log(`token: ${token}`)",
													"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
													"            // console.log(`isValid: ${isValid}`)",
													"            // pm.test(\"Check if the response is JWS valid\", function () {",
													"            //     pm.expect(isValid).to.eql(true);",
													"            // });",
													"            ",
													"            //Validate protected header inside Signature",
													"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
													"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
													"            ",
													"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
													"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\")+'/error');",
													"            });",
													"            ",
													"",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('switch');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('testfsp1');",
													"            });",
													"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
													"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);",
													"            });",
													"           ",
													"            pm.test(\"testfsp1 FSPIOP-URI to be /quotes/error\"+pm.environment.get(\"quoteId\"), function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\")+'/error');",
													"            });",
													"            ",
													"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            ",
													"            pm.test(\"Error code is 5000\", function () {",
													"                pm.expect(jsonData.errorInformation.errorCode).to.eql('5000');",
													"            });",
													"           ",
													"           pm.test(\"Error Description is Generic validation error - Participant account is inactive \", function () {",
													"                pm.expect(jsonData.errorInformation.errorDescription).to.include('Generic Payee error - Payee does not have any active account');",
													"           });",
													"           ",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('Did not receive response on Payer side');",
													"           });",
													"           // postman.setNextRequest(null);",
													"      }",
													"       ",
													"   });",
													"}, 1000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "testfsp1"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "testfsp2"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "(BUG) Send Transfer fail(testfsp1 to testfsp2)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "496e2c7a-8342-4ca1-8b21-c4d4081d4cf1",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"//Check the callback response that Switch forwards to payerfsp",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
													"          if(response.responseSize !== 0) {",
													"            //Checking headers",
													"            var headers = response.json().headers;",
													"            pm.test(\"fspiop-source is switch \", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('switch');",
													"            });",
													"            ",
													"            pm.test(\"fspiop-destination is testfsp1\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');",
													"            });",
													"            ",
													"            pm.test(\"content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
													"            });",
													"            ",
													"            pm.test(\"accept is empty\", function () {",
													"                pm.expect(headers['accept']).to.eql(undefined);",
													"            });",
													"            ",
													"            pm.test(\"fspiop-signature is not empty\", function () {",
													"                    pm.expect(headers['fspiop-signature']).not.eql(undefined);",
													"                });",
													"            ",
													"            ",
													"            pm.test(\"fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\")+'/error');",
													"            });",
													"            ",
													"            pm.test(\"fspiop-http-method is PUT\", function () {",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
													"            });",
													"            ",
													"            var jsonData = response.json().data;",
													"            pm.test(\"Error code is 3100\", function () {",
													"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3100');",
													"            });",
													"           ",
													"           pm.test(\"Error Description is GENERIC VALIDATION ERROR \", function () {",
													"                pm.expect(jsonData.errorInformation.errorDescription).to.include(`Generic validation error - Participant testfsp2 ${pm.environment.get('currency')} account is inactive`);",
													"           });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response on payer side');",
													"              });",
													"              // postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 1300)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d7a9ca67-6c29-49ab-89fe-aa1e70322f50",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
													"",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp1\",\"FSPIOP-Destination\":\"testfsp2\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"transferId\": pm.environment.get('transfer_ID'),",
													"  \"payerFsp\": \"testfsp1\",",
													"  \"payeeFsp\": \"testfsp2\",",
													"  \"amount\": {",
													"    \"amount\": \"10\",",
													"    \"currency\": pm.environment.get('currency')",
													"  },",
													"  \"expiration\": pm.environment.get('transferExpiration'),",
													"  \"ilpPacket\": pm.environment.get('ilpPacket'),",
													"  \"condition\": pm.environment.get('condition')",
													"}",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"transferRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp1JWSKey'));",
													"//console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "testfsp1"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "testfsp2"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/transfers"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transferRequest}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update participant (testfsp2 to active) account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87954d48-2643-40ad-ab7f-1bc739323d51",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{hub_operator}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"isActive\": true\r\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts/{{testfsp2PositionAccountId}}",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts",
												"{{testfsp2PositionAccountId}}"
											]
										},
										"description": "inactives testfsp4 position account"
									},
									"response": []
								},
								{
									"name": "Send Quote (testfsp1 to testfsp2) - pass",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b4350824-7e80-4a03-afb9-88c3ef7b1f90",
												"exec": [
													"  var navigator = {}; ",
													"var window = {}; ",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'PayerFirst PayerLast');",
													"pm.variables.set('payerMSISDN', '918381008987');",
													"",
													"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
													"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
													"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp1\",\"FSPIOP-Destination\":\"testfsp2\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
													"      \"fspId\": \"testfsp1\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"      \"dateOfBirth\": \"1983-10-25\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('payeefspMSISDN'),",
													"      \"fspId\": \"testfsp2\"",
													"    }",
													"  },",
													"  \"amountType\": \"RECEIVE\",",
													"  \"amount\": {",
													"    \"amount\": \"60\",",
													"    \"currency\": pm.environment.get('currency')",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"console.log(`sPayload: ${sPayload}`)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp1JWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5ced8d7e-a859-4e55-ad4f-0ab3dffcc643",
												"exec": [
													"pm.test(\"Status code is 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});\r",
													"\r",
													"setTimeout(function () {\r",
													"  pm.sendRequest(pm.environment.get(\"TESTFSP2_SDK_TESTAPI_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {\r",
													"          if(response.responseSize !== 0) {\r",
													"              \r",
													"              //Check the Headers\r",
													"              var headers = response.json().headers;\r",
													"              \r",
													"                pm.test(\"testfsp2 fspiop-source is testfsp1\", function () {\r",
													"                    pm.expect(headers['fspiop-source']).to.eql('testfsp1');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-destination is testfsp2\", function () {\r",
													"                    pm.expect(headers['fspiop-destination']).to.eql('testfsp2');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-signature is same as sent in the request\", function () {\r",
													"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 accept is same as sent in the request\", function () {\r",
													"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 content-typeis same as sent in the request\", function () {\r",
													"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-uri is /quotes\", function () {\r",
													"                    pm.expect(headers['fspiop-uri']).to.eql('/quotes');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-http-method is POST\", function () {\r",
													"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
													"                });\r",
													"                \r",
													"          } else {\r",
													"              pm.test(\"Quote FAILED\", function () {\r",
													"                throw new Error('Did not receive request on payee side');\r",
													"              });\r",
													"              // postman.setNextRequest(null)\r",
													"          }\r",
													"   });\r",
													"}, 1100)\r",
													"\r",
													"setTimeout(function () {\r",
													"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {\r",
													"      if(response.responseSize !== 0) {\r",
													"          //Checking headers\r",
													"            var headers = response.json().headers;\r",
													"            pm.test(\"testfsp1 fspiop-source is testfsp2\", function () {\r",
													"                pm.expect(headers['fspiop-source']).to.eql('testfsp2');\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 fspiop-destination is testfsp1\", function () {\r",
													"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {\r",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 accept is empty\", function () {\r",
													"                pm.expect(headers['accept']).to.eql(undefined);\r",
													"            });\r",
													"            \r",
													"            \r",
													"            \r",
													"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])\r",
													"            // var strData = JSON.stringify(response.json().data)\r",
													"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`\r",
													"            // console.log(`token: ${token}`)\r",
													"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldentestfsp2JWSPubKey'), {alg: ['RS256']})\r",
													"            // console.log(`isValid: ${isValid}`)\r",
													"            // pm.test(\"Check if the response is JWS valid\", function () {\r",
													"            //     pm.expect(isValid).to.eql(true);\r",
													"            // });\r",
													"            \r",
													"            //Validate protected header inside Signature\r",
													"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))\r",
													"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)\r",
													"            \r",
													"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {\r",
													"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');\r",
													"            });\r",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
													"            });\r",
													"            \r",
													"\r",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {\r",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');\r",
													"            });\r",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldentestfsp2\", function () {\r",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('testfsp2');\r",
													"            });\r",
													"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be testfsp1\", function () {\r",
													"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('testfsp1');\r",
													"            });\r",
													"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {\r",
													"                pm.expect(decodedProtectedHeaders['Date']).to.eql(headers['date']);\r",
													"            });\r",
													"           \r",
													"            pm.test(\"testfsp1 FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {\r",
													"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 fspiop-http-method is PUT\", function () {\r",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
													"            });\r",
													"            \r",
													"            var jsonData = response.json().data;\r",
													"            \r",
													"            pm.test(\"Response quoteId is  null\", function () {\r",
													"                pm.expect(jsonData.quoteId).to.eql(undefined);\r",
													"                \r",
													"            });\r",
													"          \r",
													"            pm.test(\"Response ilpPacket is not null\", function () {\r",
													"                pm.expect(jsonData.ilpPacket).not.equal(undefined);\r",
													"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);\r",
													"            });\r",
													"       \r",
													"           pm.test(\"Response condition is not null\", function () {\r",
													"               pm.expect(jsonData.condition).not.equal(undefined);\r",
													"               pm.environment.set(\"condition\", jsonData.condition);\r",
													"           });\r",
													"      } else {\r",
													"          pm.test(\"Quote FAILED\", function () {\r",
													"            throw new Error('Did not receive response on Payer side');\r",
													"           });\r",
													"           // postman.setNextRequest(null);\r",
													"      }\r",
													"       \r",
													"   });\r",
													"}, 1000)\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-Source",
												"value": "testfsp1",
												"type": "text"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "testfsp2",
												"type": "text"
											},
											{
												"key": "FSPIOP-Signature",
												"value": "{{fspiopSignature}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"value": "POST",
												"type": "text"
											},
											{
												"key": "FSPIOP-URI",
												"value": "/quotes",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Transfer ( testfsp1 to testfsp2 ) - pass",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c9f0189b-2e34-4837-8411-fbc35a11cfec",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib\r",
													"var window = {}; //fake a window object for the lib\r",
													"eval(pm.environment.get('jrsassign'));\r",
													"\r",
													"var uuid = require('uuid');\r",
													"var generatedUUID = uuid.v4();\r",
													"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));\r",
													"\r",
													"\r",
													"pm.variables.set('transferDate', (new Date()).toUTCString());\r",
													"\r",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))\r",
													"\r",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp1\",\"FSPIOP-Destination\":\"testfsp2\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};\r",
													"var sHeader = JSON.stringify(oHeader);\r",
													"console.log(`sHeader: ${sHeader}`)\r",
													"\r",
													"var objPayload = {\r",
													"  \"transferId\": pm.environment.get('transfer_ID'),\r",
													"  \"payerFsp\": \"testfsp1\",\r",
													"  \"payeeFsp\": \"testfsp2\",\r",
													"  \"amount\": {\r",
													"    \"amount\": \"60\",\r",
													"    \"currency\": pm.environment.get('currency')\r",
													"  },\r",
													"  \"expiration\": pm.environment.get('transferExpiration'),\r",
													"  \"ilpPacket\": pm.environment.get('ilpPacket'),\r",
													"  \"condition\": pm.environment.get('condition')\r",
													"}\r",
													"var sPayload = JSON.stringify(objPayload)\r",
													"console.log(`sPayload: ${sPayload}`)\r",
													"pm.variables.set(\"transferRequest\", sPayload);\r",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp1JWSKey'));\r",
													"//console.log(`token: ${token}`)\r",
													"\r",
													"// var encodedHeaders = btoa(sHeader)\r",
													"\r",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}\r",
													"// var token = JSON.stringify(ofspiopSignature)\r",
													"\r",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');\r",
													"\r",
													"const signatureObject = {\r",
													"    signature: signature.replace('\"', ''),\r",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')\r",
													"};\r",
													"\r",
													"console.log(JSON.stringify(signatureObject))\r",
													"\r",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b66841a-24e8-4e14-aa9e-e31a5de540e9",
												"exec": [
													"pm.test(\"Status code is 202\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});\r",
													"\r",
													"// //Check the request that Switch forwards to testfsp2\r",
													"setTimeout(function () {\r",
													"  pm.sendRequest(pm.environment.get(\"TESTFSP2_SDK_TESTAPI_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
													"          if(response.responseSize !== 0) {\r",
													"              \r",
													"              //Check the Headers\r",
													"              var headers = response.json().headers;\r",
													"              \r",
													"                pm.test(\"testfsp2 fspiop-source is goldentestfsp1\", function () {\r",
													"                    pm.expect(headers['fspiop-source']).to.eql('testfsp1');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-destination is goldentestfsp2\", function () {\r",
													"                    pm.expect(headers['fspiop-destination']).to.eql('testfsp2');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 content-typeis same as sent in the request\", function () {\r",
													"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 accept is same as sent in the request\", function () {\r",
													"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-signature is same as sent in the request\", function () {\r",
													"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-http-method is POST\", function () {\r",
													"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');\r",
													"                });\r",
													"                \r",
													"                pm.test(\"testfsp2 fspiop-uri is /transfers\", function () {\r",
													"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');\r",
													"                });\r",
													"                \r",
													"                \r",
													"                //Check the data\r",
													"                var jsonData = response.json().data;\r",
													"                pm.test(\"testfsp2 data should have the same transferId as request\", function () {\r",
													"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));\r",
													"                });\r",
													"                pm.test(\"testfsp2 data should have the same amount as request\", function () {\r",
													"                  pm.expect(jsonData.amount.amount).to.eql('60');\r",
													"                });\r",
													"                pm.test(\"testfsp2 data should have the same currency as request\", function () {\r",
													"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));\r",
													"                });\r",
													"                pm.test(\"testfsp2 data should have the same expiration as request\", function () {\r",
													"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));\r",
													"                });\r",
													"                pm.test(\"testfsp2 data should have the same ilpPacket as request\", function () {\r",
													"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));\r",
													"                });\r",
													"                pm.test(\"testfsp2 data should have the same condition as request\", function () {\r",
													"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));\r",
													"                });\r",
													"                \r",
													"          } else {\r",
													"              pm.test(\"Transfer FAILED\", function () {\r",
													"                throw new Error('Did not receive response on payee side');\r",
													"              });\r",
													"              // postman.setNextRequest(null)\r",
													"          }\r",
													"  });\r",
													"}, 1100)\r",
													"\r",
													"//Check the callback response that Switch forwards to testfsp1\r",
													"setTimeout(function () {\r",
													"  pm.sendRequest(pm.environment.get(\"TESTFSP1_SDK_TESTAPI_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {\r",
													"          if(response.responseSize !== 0) {\r",
													"            //Checking headers\r",
													"            var headers = response.json().headers;\r",
													"            pm.test(\"testfsp1 fspiop-source is goldentestfsp2 \", function () {\r",
													"                pm.expect(headers['fspiop-source']).to.eql('testfsp2');\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 fspiop-destination is goldentestfsp1\", function () {\r",
													"                pm.expect(headers['fspiop-destination']).to.eql('testfsp1');\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {\r",
													"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 accept is empty\", function () {\r",
													"                pm.expect(headers['accept']).to.eql(undefined);\r",
													"            });\r",
													"            \r",
													"            \r",
													"            pm.test(\"testfsp1 fspiop-uri includes /transfers/{{transfer_ID}}\", function () {\r",
													"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));\r",
													"            });\r",
													"            \r",
													"            pm.test(\"testfsp1 fspiop-http-method is PUT\", function () {\r",
													"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');\r",
													"            });\r",
													"            \r",
													"            var jsonData = response.json().data;\r",
													"            pm.test(\"Response data does not have transferId\", function () {\r",
													"               pm.expect(jsonData.transferId).to.eql(undefined);\r",
													"            });\r",
													"            pm.test(\"Response status is COMMITTED\", function () {\r",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');\r",
													"            });\r",
													"          } else {\r",
													"              pm.test(\"Transfer FAILED\", function () {\r",
													"                throw new Error('Did not receive response on payer side');\r",
													"              });\r",
													"              // postman.setNextRequest(null)\r",
													"          }\r",
													"   });\r",
													"}, 1500)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP1_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-Source",
												"value": "testfsp1",
												"type": "text"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "testfsp2",
												"type": "text"
											},
											{
												"key": "FSPIOP-Signature",
												"value": "{{fspiopSignature}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-URI",
												"value": "/transfers",
												"type": "text"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"value": "POST",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{transferRequest}}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "api-tests",
			"item": [
				{
					"name": "admin-api-tests",
					"item": [
						{
							"name": "Get participants List",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ba0e007-7680-4d95-a39f-d9e92f5175c5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{hub_operator}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Get Participant",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c39359f0-1f65-4c70-a3bd-a5687113cc00",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{hub_operator}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Get Hub Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa37b228-4638-4f64-95f3-5f004d9e6278",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{hub_operator}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/Hub/accounts",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"Hub",
										"accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Get Endpoints",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01c129c7-f6f7-4a20-846f-f5214b35ebaa",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{hub_operator}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payerfsp/endpoints",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"payerfsp",
										"endpoints"
									]
								},
								"description": "Generated from a curl request: \ncurl -i -X POST     http://test-central-ledger.mojaloop.test/admin/participants/testfsp2/initialPositionAndLimits     -H 'Cache-Control: no-cache'     -H 'Content-Type: application/json'     -d '{\n    \\\"currency\\\": \\\"USD\\\",\n    \\\"limit\\\": {\n      \\\"type\\\": \\\"NET_DEBIT_CAP\\\",\n      \\\"value\\\": 1000\n    },\n    \\\"initialPosition\\\": 0\n  }'"
							},
							"response": []
						},
						{
							"name": "Get - limits - All FSPs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2aac168-b5fc-4133-afb1-82e09f6e63cf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{hub_operator}}",
										"type": "text"
									},
									{
										"key": "currency",
										"value": "{{currency}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/limits?type=NET_DEBIT_CAP",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"limits"
									],
									"query": [
										{
											"key": "currency",
											"value": "{{currency}}",
											"disabled": true
										},
										{
											"key": "type",
											"value": "NET_DEBIT_CAP"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get payerfsp position",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5fde99f-abae-4971-a5a5-5c5f905d31f2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.variables.set(\"payerfspPositionBeforeTransfer\", jsonData[0].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{hub_operator}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						}
					],
					"description": "Author: Sridevi Miriyala\n\nThese are the requests that only HUB operator can run.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "15188e0a-2040-4fa1-8c75-ae2485596249",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "52beace7-3e76-40f7-97aa-8adbc236d44a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Quotes",
					"item": [
						{
							"name": "FN, LN",
							"item": [
								{
									"name": "Send Quote - payerFN missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "253e052c-3a2e-4526-83bb-3057757f8e40",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp3\",\"FSPIOP-Destination\":\"testfsp4\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp3MSISDN'),",
													"      \"fspId\": \"testfsp3\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"       ",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"      \"dateOfBirth\": \"1983-10-25\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp4MSISDN'),",
													"      \"fspId\": \"testfsp4\"",
													"    }",
													"  },",
													"  \"amountType\": \"SEND\",",
													"  \"amount\": {",
													"    \"amount\": \"10\",",
													"    \"currency\": \"EUR\"",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp3JWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "49ecf321-69be-47ca-bad5-8fdd7bebe673",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// Commented the following tests because the payer firstName is not required field",
													"",
													"// pm.test(\"Status code is 400\", function () {",
													"//     pm.response.to.have.status(400);",
													"// });",
													"",
													"// pm.test(\"ERROR code is 3102\", function () {",
													"//     var jsonData = pm.response.json();",
													"//     pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3102\");",
													"// });",
													"",
													"// pm.test(\"ERROR msg is Missing Payer firstName\", function () {",
													"//     var jsonData = pm.response.json();",
													"//     pm.expect(jsonData.errorInformation.errorDescription).to.eql(`Missing mandatory element - Quote request ${pm.environment.get('quoteId')} failed: firstName is required`);",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP3_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "testfsp3"
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "testfsp4"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "Send POST /quotes from simdfsp1 (EUR) to simdfsp2 (XOF) with extensionlist.\n\nLOGS:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Received POST quote request headers: { host: 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-request-id': '80d08b5eecc42ee029a319f8993d8cb7',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-real-ip': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-for': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-host': 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-port': '80',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-proto': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-scheme': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-forwarded-for': '52.174.6.185, 10.0.1.20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 2226,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-verify': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-sha1': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-before': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip, deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-dn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:42 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] activityid: '833294909889594271858448',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-after': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl': '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cert': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-issuer': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'Synapse-PT-HttpComponents-NIO',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: quote request body : {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Is request from FXP? : false\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payer currencies : [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.287Z, [quotesdatabase]: Cache miss for getForexProvider: [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: This is a FOREX request will be forwarded to FXP : DFSPEUR\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: Calculated sha256 hash of quote request with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: 5ed0d8f2f8eff39d06f6bda1856b8a00ad95cdd3df694a04a9ba478f526650b3\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: DB query for quote duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: New quote identified with quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiatorType: [ 'CONSUMER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiator: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getScenario: [ 'TRANSFER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getAmountType: [ 'SEND' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.311Z, [quotesdatabase]: inserted new transactionReference in db: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'EUR' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp1' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYER_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYEE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp2' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYEE_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.400Z, [quotesdatabase]: inserted new quoteParty in db: 12566\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.405Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6306 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.408Z, [quotesdatabase]: inserted new quoteParty in db: 12567\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPEUR', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp1\",\"FSPIOP-SourceCurrency\":\"EUR\",\"FSPIOP-Destination\":\"DFSPEUR\",\"FSPIOP-DestinationCurrency\":\"XOF\",\"FSPIOP-Signature\":\"{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-SourceCurrency': 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-DestinationCurrency': 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743208:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13892) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (264ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: Received POST quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1423,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: quote request body : {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: Is request from FXP? : true\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payer currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.507Z, [quotesmodel]: Calculated sha256 hash of quote request with id ebbd328d-32ad-4aff-870e-c886196db4ce as: a1e81388a4c1e7bb28032999a9cefbe6da5081b955bc877667fed3a9310e6c88\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: DB query for quote duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: New quote identified with quoteId ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiatorType [ 'CONSUMER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiator [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getScenario [ 'TRANSFER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getAmountType [ 'SEND' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.519Z, [quotesdatabase]: inserted new transactionReference in db: 9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'XOF' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp1' ]: 645\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYER_DFSP' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYEE' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp2' ]: 646\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYEE_DFSP' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.527Z, [quotesdatabase]: inserted new quoteParty in db: 12568\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.530Z, [quotesdatabase]: inserted new quoteParty in db: 12569\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.533Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6307 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp2', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://mowbkd-simulators:80/simdfsp2'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request to endpoint: http://mowbkd-simulators:80/simdfsp2/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPXOF\",\"FSPIOP-Destination\":\"simdfsp2\",\"FSPIOP-HTTP-Method\":\"POST\",\"FSPIOP-Signature\":\"{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://mowbkd-simulators:80/simdfsp2/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-HTTP-Method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-URI': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743486:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13893) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (84ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Received PUT quote request headers: { accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 406,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip,deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote id : ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Calculated sha256 hash of quote response with id ebbd328d-32ad-4aff-870e-c886196db4ce as: 892edfcbf04e070e104264e4b588f372450c75a2242ed3ea642f6156fec795da\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: DB query for quote response duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: Check duplicate for quoteId ebbd328d-32ad-4aff-870e-c886196db4ce update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.582Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.585Z, [quotesdatabase]: inserted new response duplicate check in db for quote ebbd328d-32ad-4aff-870e-c886196db4ce, quoteResponseId: 5276\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.588Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPXOF', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes/ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp2\",\"FSPIOP-Destination\":\"DFSPXOF\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743571:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13894) [response,api] http://0.0.0.0:3000: put /quotes/ebbd328d-32ad-4aff-870e-c886196db4ce {} 200 (45ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Received PUT quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'PUT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1277,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote id : d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Calculated sha256 hash of quote response with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: b95b3304d47e192475bb712d226a2f937cc0256c5ab9ff4d3f11ffbe42a3d39b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: DB query for quote response duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: Check duplicate for quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.641Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.643Z, [quotesdatabase]: inserted new response duplicate check in db for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb, quoteResponseId: 5277\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.646Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp1', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://mowbkd-simulators:80/simdfsp1'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response to endpoint: http://mowbkd-simulators:80/simdfsp1/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPEUR\",\"FSPIOP-Destination\":\"simdfsp1\",\"FSPIOP-HTTP-Method\":\"PUT\",\"FSPIOP-Signature\":\"{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743630:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13895) [response,api] http://0.0.0.0:3000: put /quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb {} 200 (40ms)"
									},
									"response": []
								},
								{
									"name": "Send Quote - payerLN missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4a5fd65c-91b3-4775-944b-b184063eacb2",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp3\",\"FSPIOP-Destination\":\"testfsp4\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp3MSISDN'),",
													"      \"fspId\": \"testfsp3\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\"",
													"       ",
													"      },",
													"      \"dateOfBirth\": \"1983-10-25\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp4MSISDN'),",
													"      \"fspId\": \"testfsp4\"",
													"    }",
													"  },",
													"  \"amountType\": \"SEND\",",
													"  \"amount\": {",
													"    \"amount\": \"10\",",
													"    \"currency\": \"EUR\"",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp3JWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1e378da5-2fd0-4e94-9308-c5d73f8580f7",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// Commented the following tests because the payer lastName is not required field",
													"",
													"// pm.test(\"Status code is 400\", function () {",
													"//     pm.response.to.have.status(400);",
													"// });",
													"",
													"// pm.test(\"ERROR code is 3102\", function () {",
													"//     var jsonData = pm.response.json();",
													"//     pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3102\");",
													"// });",
													"",
													"// pm.test(\"ERROR Description is Missing Payer lastName\", function () {",
													"//     var jsonData = pm.response.json();",
													"//     pm.expect(jsonData.errorInformation.errorDescription).to.eql(`Missing mandatory element - Quote request ${pm.environment.get('quoteId')} failed: lastName is required`);",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP3_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "testfsp3"
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "testfsp4"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "Send POST /quotes from simdfsp1 (EUR) to simdfsp2 (XOF) with extensionlist.\n\nLOGS:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Received POST quote request headers: { host: 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-request-id': '80d08b5eecc42ee029a319f8993d8cb7',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-real-ip': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-for': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-host': 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-port': '80',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-proto': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-scheme': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-forwarded-for': '52.174.6.185, 10.0.1.20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 2226,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-verify': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-sha1': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-before': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip, deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-dn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:42 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] activityid: '833294909889594271858448',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-after': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl': '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cert': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-issuer': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'Synapse-PT-HttpComponents-NIO',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: quote request body : {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Is request from FXP? : false\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payer currencies : [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.287Z, [quotesdatabase]: Cache miss for getForexProvider: [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: This is a FOREX request will be forwarded to FXP : DFSPEUR\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: Calculated sha256 hash of quote request with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: 5ed0d8f2f8eff39d06f6bda1856b8a00ad95cdd3df694a04a9ba478f526650b3\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: DB query for quote duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: New quote identified with quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiatorType: [ 'CONSUMER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiator: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getScenario: [ 'TRANSFER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getAmountType: [ 'SEND' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.311Z, [quotesdatabase]: inserted new transactionReference in db: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'EUR' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp1' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYER_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYEE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp2' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYEE_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.400Z, [quotesdatabase]: inserted new quoteParty in db: 12566\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.405Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6306 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.408Z, [quotesdatabase]: inserted new quoteParty in db: 12567\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPEUR', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp1\",\"FSPIOP-SourceCurrency\":\"EUR\",\"FSPIOP-Destination\":\"DFSPEUR\",\"FSPIOP-DestinationCurrency\":\"XOF\",\"FSPIOP-Signature\":\"{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-SourceCurrency': 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-DestinationCurrency': 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743208:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13892) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (264ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: Received POST quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1423,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: quote request body : {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: Is request from FXP? : true\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payer currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.507Z, [quotesmodel]: Calculated sha256 hash of quote request with id ebbd328d-32ad-4aff-870e-c886196db4ce as: a1e81388a4c1e7bb28032999a9cefbe6da5081b955bc877667fed3a9310e6c88\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: DB query for quote duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: New quote identified with quoteId ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiatorType [ 'CONSUMER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiator [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getScenario [ 'TRANSFER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getAmountType [ 'SEND' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.519Z, [quotesdatabase]: inserted new transactionReference in db: 9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'XOF' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp1' ]: 645\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYER_DFSP' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYEE' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp2' ]: 646\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYEE_DFSP' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.527Z, [quotesdatabase]: inserted new quoteParty in db: 12568\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.530Z, [quotesdatabase]: inserted new quoteParty in db: 12569\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.533Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6307 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp2', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://mowbkd-simulators:80/simdfsp2'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request to endpoint: http://mowbkd-simulators:80/simdfsp2/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPXOF\",\"FSPIOP-Destination\":\"simdfsp2\",\"FSPIOP-HTTP-Method\":\"POST\",\"FSPIOP-Signature\":\"{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://mowbkd-simulators:80/simdfsp2/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-HTTP-Method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-URI': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743486:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13893) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (84ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Received PUT quote request headers: { accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 406,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip,deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote id : ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Calculated sha256 hash of quote response with id ebbd328d-32ad-4aff-870e-c886196db4ce as: 892edfcbf04e070e104264e4b588f372450c75a2242ed3ea642f6156fec795da\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: DB query for quote response duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: Check duplicate for quoteId ebbd328d-32ad-4aff-870e-c886196db4ce update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.582Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.585Z, [quotesdatabase]: inserted new response duplicate check in db for quote ebbd328d-32ad-4aff-870e-c886196db4ce, quoteResponseId: 5276\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.588Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPXOF', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes/ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp2\",\"FSPIOP-Destination\":\"DFSPXOF\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743571:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13894) [response,api] http://0.0.0.0:3000: put /quotes/ebbd328d-32ad-4aff-870e-c886196db4ce {} 200 (45ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Received PUT quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'PUT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1277,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote id : d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Calculated sha256 hash of quote response with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: b95b3304d47e192475bb712d226a2f937cc0256c5ab9ff4d3f11ffbe42a3d39b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: DB query for quote response duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: Check duplicate for quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.641Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.643Z, [quotesdatabase]: inserted new response duplicate check in db for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb, quoteResponseId: 5277\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.646Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp1', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://mowbkd-simulators:80/simdfsp1'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response to endpoint: http://mowbkd-simulators:80/simdfsp1/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPEUR\",\"FSPIOP-Destination\":\"simdfsp1\",\"FSPIOP-HTTP-Method\":\"PUT\",\"FSPIOP-Signature\":\"{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743630:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13895) [response,api] http://0.0.0.0:3000: put /quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb {} 200 (40ms)"
									},
									"response": []
								},
								{
									"name": "Send Quote - Invalid payerLN (not a string)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2f3c3706-e734-4109-afdd-ad6baff0146a",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp3\",\"FSPIOP-Destination\":\"testfsp4\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp3MSISDN'),",
													"      \"fspId\": \"testfsp3\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"@#4768\"",
													"       ",
													"      },",
													"      \"dateOfBirth\": \"1983-10-25\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp4MSISDN'),",
													"      \"fspId\": \"testfsp4\"",
													"    }",
													"  },",
													"  \"amountType\": \"SEND\",",
													"  \"amount\": {",
													"    \"amount\": \"10\",",
													"    \"currency\": \"EUR\"",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp3JWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0e00bd0b-6bd0-42f6-940d-b6515cb5f461",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"ERROR code is 3100\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3100\");",
													"});",
													"",
													"pm.test(\"ERROR msg is Malformed Payer Lastname\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include(\"lastName\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP3_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "testfsp3"
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "testfsp4"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "Send POST /quotes from simdfsp1 (EUR) to simdfsp2 (XOF) with extensionlist.\n\nLOGS:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Received POST quote request headers: { host: 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-request-id': '80d08b5eecc42ee029a319f8993d8cb7',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-real-ip': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-for': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-host': 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-port': '80',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-proto': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-scheme': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-forwarded-for': '52.174.6.185, 10.0.1.20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 2226,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-verify': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-sha1': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-before': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip, deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-dn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:42 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] activityid: '833294909889594271858448',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-after': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl': '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cert': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-issuer': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'Synapse-PT-HttpComponents-NIO',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: quote request body : {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Is request from FXP? : false\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payer currencies : [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.287Z, [quotesdatabase]: Cache miss for getForexProvider: [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: This is a FOREX request will be forwarded to FXP : DFSPEUR\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: Calculated sha256 hash of quote request with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: 5ed0d8f2f8eff39d06f6bda1856b8a00ad95cdd3df694a04a9ba478f526650b3\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: DB query for quote duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: New quote identified with quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiatorType: [ 'CONSUMER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiator: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getScenario: [ 'TRANSFER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getAmountType: [ 'SEND' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.311Z, [quotesdatabase]: inserted new transactionReference in db: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'EUR' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp1' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYER_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYEE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp2' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYEE_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.400Z, [quotesdatabase]: inserted new quoteParty in db: 12566\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.405Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6306 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.408Z, [quotesdatabase]: inserted new quoteParty in db: 12567\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPEUR', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp1\",\"FSPIOP-SourceCurrency\":\"EUR\",\"FSPIOP-Destination\":\"DFSPEUR\",\"FSPIOP-DestinationCurrency\":\"XOF\",\"FSPIOP-Signature\":\"{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-SourceCurrency': 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-DestinationCurrency': 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743208:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13892) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (264ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: Received POST quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1423,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: quote request body : {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: Is request from FXP? : true\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payer currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.507Z, [quotesmodel]: Calculated sha256 hash of quote request with id ebbd328d-32ad-4aff-870e-c886196db4ce as: a1e81388a4c1e7bb28032999a9cefbe6da5081b955bc877667fed3a9310e6c88\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: DB query for quote duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: New quote identified with quoteId ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiatorType [ 'CONSUMER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiator [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getScenario [ 'TRANSFER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getAmountType [ 'SEND' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.519Z, [quotesdatabase]: inserted new transactionReference in db: 9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'XOF' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp1' ]: 645\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYER_DFSP' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYEE' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp2' ]: 646\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYEE_DFSP' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.527Z, [quotesdatabase]: inserted new quoteParty in db: 12568\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.530Z, [quotesdatabase]: inserted new quoteParty in db: 12569\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.533Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6307 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp2', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://mowbkd-simulators:80/simdfsp2'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request to endpoint: http://mowbkd-simulators:80/simdfsp2/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPXOF\",\"FSPIOP-Destination\":\"simdfsp2\",\"FSPIOP-HTTP-Method\":\"POST\",\"FSPIOP-Signature\":\"{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://mowbkd-simulators:80/simdfsp2/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-HTTP-Method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-URI': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743486:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13893) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (84ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Received PUT quote request headers: { accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 406,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip,deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote id : ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Calculated sha256 hash of quote response with id ebbd328d-32ad-4aff-870e-c886196db4ce as: 892edfcbf04e070e104264e4b588f372450c75a2242ed3ea642f6156fec795da\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: DB query for quote response duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: Check duplicate for quoteId ebbd328d-32ad-4aff-870e-c886196db4ce update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.582Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.585Z, [quotesdatabase]: inserted new response duplicate check in db for quote ebbd328d-32ad-4aff-870e-c886196db4ce, quoteResponseId: 5276\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.588Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPXOF', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes/ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp2\",\"FSPIOP-Destination\":\"DFSPXOF\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743571:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13894) [response,api] http://0.0.0.0:3000: put /quotes/ebbd328d-32ad-4aff-870e-c886196db4ce {} 200 (45ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Received PUT quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'PUT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1277,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote id : d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Calculated sha256 hash of quote response with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: b95b3304d47e192475bb712d226a2f937cc0256c5ab9ff4d3f11ffbe42a3d39b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: DB query for quote response duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: Check duplicate for quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.641Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.643Z, [quotesdatabase]: inserted new response duplicate check in db for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb, quoteResponseId: 5277\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.646Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp1', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://mowbkd-simulators:80/simdfsp1'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response to endpoint: http://mowbkd-simulators:80/simdfsp1/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPEUR\",\"FSPIOP-Destination\":\"simdfsp1\",\"FSPIOP-HTTP-Method\":\"PUT\",\"FSPIOP-Signature\":\"{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743630:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13895) [response,api] http://0.0.0.0:3000: put /quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb {} 200 (40ms)"
									},
									"response": []
								},
								{
									"name": "Send Quote Payer personal info missing",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7ab35a53-1221-442b-85de-c8585d0fb7b2",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp3\",\"FSPIOP-Destination\":\"testfsp4\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp3MSISDN'),",
													"      \"fspId\": \"testfsp3\"",
													"    },",
													"    ",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp4MSISDN'),",
													"      \"fspId\": \"testfsp4\"",
													"    }",
													"  },",
													"  \"amountType\": \"SEND\",",
													"  \"amount\": {",
													"    \"amount\": \"10\",",
													"    \"currency\": \"EUR\"",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp3JWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "83df18b7-3e7c-4743-bd26-f4d3634ad576",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// Commented the following tests because the payer personal info is not required object",
													"",
													"// pm.test(\"Status code is 400\", function () {",
													"//     pm.response.to.have.status(400);",
													"// });",
													"",
													"// pm.test(\"ERROR code is 3102\", function () {",
													"//     var jsonData = pm.response.json();",
													"//     pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3102\");",
													"// });",
													"",
													"// pm.test(\"ERROR msg is Missing Payer personalInfo\", function () {",
													"//     var jsonData = pm.response.json();",
													"//     pm.expect(jsonData.errorInformation.errorDescription).to.eql(`Missing mandatory element - Quote request ${pm.environment.get('quoteId')} failed: PartyPersonalInfo is required`);",
													"// });",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP3_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "testfsp3"
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "testfsp4"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "Send POST /quotes from simdfsp1 (EUR) to simdfsp2 (XOF) with extensionlist.\n\nLOGS:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Received POST quote request headers: { host: 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-request-id': '80d08b5eecc42ee029a319f8993d8cb7',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-real-ip': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-for': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-host': 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-port': '80',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-proto': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-scheme': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-forwarded-for': '52.174.6.185, 10.0.1.20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 2226,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-verify': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-sha1': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-before': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip, deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-dn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:42 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] activityid: '833294909889594271858448',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-after': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl': '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cert': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-issuer': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'Synapse-PT-HttpComponents-NIO',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: quote request body : {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Is request from FXP? : false\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payer currencies : [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.287Z, [quotesdatabase]: Cache miss for getForexProvider: [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: This is a FOREX request will be forwarded to FXP : DFSPEUR\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: Calculated sha256 hash of quote request with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: 5ed0d8f2f8eff39d06f6bda1856b8a00ad95cdd3df694a04a9ba478f526650b3\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: DB query for quote duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: New quote identified with quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiatorType: [ 'CONSUMER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiator: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getScenario: [ 'TRANSFER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getAmountType: [ 'SEND' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.311Z, [quotesdatabase]: inserted new transactionReference in db: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'EUR' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp1' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYER_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYEE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp2' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYEE_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.400Z, [quotesdatabase]: inserted new quoteParty in db: 12566\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.405Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6306 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.408Z, [quotesdatabase]: inserted new quoteParty in db: 12567\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPEUR', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp1\",\"FSPIOP-SourceCurrency\":\"EUR\",\"FSPIOP-Destination\":\"DFSPEUR\",\"FSPIOP-DestinationCurrency\":\"XOF\",\"FSPIOP-Signature\":\"{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-SourceCurrency': 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-DestinationCurrency': 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743208:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13892) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (264ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: Received POST quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1423,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: quote request body : {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: Is request from FXP? : true\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payer currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.507Z, [quotesmodel]: Calculated sha256 hash of quote request with id ebbd328d-32ad-4aff-870e-c886196db4ce as: a1e81388a4c1e7bb28032999a9cefbe6da5081b955bc877667fed3a9310e6c88\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: DB query for quote duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: New quote identified with quoteId ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiatorType [ 'CONSUMER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiator [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getScenario [ 'TRANSFER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getAmountType [ 'SEND' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.519Z, [quotesdatabase]: inserted new transactionReference in db: 9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'XOF' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp1' ]: 645\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYER_DFSP' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYEE' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp2' ]: 646\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYEE_DFSP' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.527Z, [quotesdatabase]: inserted new quoteParty in db: 12568\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.530Z, [quotesdatabase]: inserted new quoteParty in db: 12569\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.533Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6307 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp2', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://mowbkd-simulators:80/simdfsp2'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request to endpoint: http://mowbkd-simulators:80/simdfsp2/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPXOF\",\"FSPIOP-Destination\":\"simdfsp2\",\"FSPIOP-HTTP-Method\":\"POST\",\"FSPIOP-Signature\":\"{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://mowbkd-simulators:80/simdfsp2/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-HTTP-Method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-URI': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743486:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13893) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (84ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Received PUT quote request headers: { accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 406,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip,deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote id : ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Calculated sha256 hash of quote response with id ebbd328d-32ad-4aff-870e-c886196db4ce as: 892edfcbf04e070e104264e4b588f372450c75a2242ed3ea642f6156fec795da\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: DB query for quote response duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: Check duplicate for quoteId ebbd328d-32ad-4aff-870e-c886196db4ce update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.582Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.585Z, [quotesdatabase]: inserted new response duplicate check in db for quote ebbd328d-32ad-4aff-870e-c886196db4ce, quoteResponseId: 5276\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.588Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPXOF', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes/ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp2\",\"FSPIOP-Destination\":\"DFSPXOF\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743571:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13894) [response,api] http://0.0.0.0:3000: put /quotes/ebbd328d-32ad-4aff-870e-c886196db4ce {} 200 (45ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Received PUT quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'PUT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1277,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote id : d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Calculated sha256 hash of quote response with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: b95b3304d47e192475bb712d226a2f937cc0256c5ab9ff4d3f11ffbe42a3d39b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: DB query for quote response duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: Check duplicate for quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.641Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.643Z, [quotesdatabase]: inserted new response duplicate check in db for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb, quoteResponseId: 5277\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.646Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp1', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://mowbkd-simulators:80/simdfsp1'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response to endpoint: http://mowbkd-simulators:80/simdfsp1/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPEUR\",\"FSPIOP-Destination\":\"simdfsp1\",\"FSPIOP-HTTP-Method\":\"PUT\",\"FSPIOP-Signature\":\"{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743630:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13895) [response,api] http://0.0.0.0:3000: put /quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb {} 200 (40ms)"
									},
									"response": []
								},
								{
									"name": "Send Quote - String payerFN (Mats123) -",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bfac3b82-b911-4802-b35c-c28eeb5f10e6",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp3\",\"FSPIOP-Destination\":\"testfsp4\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp3MSISDN'),",
													"      \"fspId\": \"testfsp3\"",
													"    },",
													"     \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats123\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"      \"dateOfBirth\": \"1983-10-25\"",
													"    }",
													"    ",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp4MSISDN'),",
													"      \"fspId\": \"testfsp4\"",
													"    }",
													"  },",
													"  \"amountType\": \"SEND\",",
													"  \"amount\": {",
													"    \"amount\": \"10\",",
													"    \"currency\": \"EUR\"",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp3JWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e63afe25-a9d0-4d17-8232-26a6aa527291",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// pm.test(\"Check that Content-Type is present\", function () {",
													"//     pm.response.to.have.header(\"Content-Type\");",
													"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
													"// });",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP3_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "testfsp3"
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "testfsp4"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "Send POST /quotes from simdfsp1 (EUR) to simdfsp2 (XOF) with extensionlist.\n\nLOGS:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Received POST quote request headers: { host: 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-request-id': '80d08b5eecc42ee029a319f8993d8cb7',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-real-ip': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-for': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-host': 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-port': '80',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-proto': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-scheme': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-forwarded-for': '52.174.6.185, 10.0.1.20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 2226,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-verify': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-sha1': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-before': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip, deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-dn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:42 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] activityid: '833294909889594271858448',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-after': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl': '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cert': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-issuer': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'Synapse-PT-HttpComponents-NIO',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: quote request body : {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Is request from FXP? : false\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payer currencies : [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.287Z, [quotesdatabase]: Cache miss for getForexProvider: [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: This is a FOREX request will be forwarded to FXP : DFSPEUR\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: Calculated sha256 hash of quote request with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: 5ed0d8f2f8eff39d06f6bda1856b8a00ad95cdd3df694a04a9ba478f526650b3\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: DB query for quote duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: New quote identified with quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiatorType: [ 'CONSUMER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiator: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getScenario: [ 'TRANSFER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getAmountType: [ 'SEND' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.311Z, [quotesdatabase]: inserted new transactionReference in db: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'EUR' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp1' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYER_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYEE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp2' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYEE_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.400Z, [quotesdatabase]: inserted new quoteParty in db: 12566\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.405Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6306 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.408Z, [quotesdatabase]: inserted new quoteParty in db: 12567\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPEUR', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp1\",\"FSPIOP-SourceCurrency\":\"EUR\",\"FSPIOP-Destination\":\"DFSPEUR\",\"FSPIOP-DestinationCurrency\":\"XOF\",\"FSPIOP-Signature\":\"{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-SourceCurrency': 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-DestinationCurrency': 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743208:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13892) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (264ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: Received POST quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1423,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: quote request body : {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: Is request from FXP? : true\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payer currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.507Z, [quotesmodel]: Calculated sha256 hash of quote request with id ebbd328d-32ad-4aff-870e-c886196db4ce as: a1e81388a4c1e7bb28032999a9cefbe6da5081b955bc877667fed3a9310e6c88\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: DB query for quote duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: New quote identified with quoteId ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiatorType [ 'CONSUMER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiator [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getScenario [ 'TRANSFER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getAmountType [ 'SEND' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.519Z, [quotesdatabase]: inserted new transactionReference in db: 9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'XOF' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp1' ]: 645\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYER_DFSP' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYEE' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp2' ]: 646\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYEE_DFSP' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.527Z, [quotesdatabase]: inserted new quoteParty in db: 12568\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.530Z, [quotesdatabase]: inserted new quoteParty in db: 12569\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.533Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6307 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp2', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://mowbkd-simulators:80/simdfsp2'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request to endpoint: http://mowbkd-simulators:80/simdfsp2/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPXOF\",\"FSPIOP-Destination\":\"simdfsp2\",\"FSPIOP-HTTP-Method\":\"POST\",\"FSPIOP-Signature\":\"{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://mowbkd-simulators:80/simdfsp2/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-HTTP-Method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-URI': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743486:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13893) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (84ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Received PUT quote request headers: { accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 406,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip,deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote id : ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Calculated sha256 hash of quote response with id ebbd328d-32ad-4aff-870e-c886196db4ce as: 892edfcbf04e070e104264e4b588f372450c75a2242ed3ea642f6156fec795da\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: DB query for quote response duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: Check duplicate for quoteId ebbd328d-32ad-4aff-870e-c886196db4ce update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.582Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.585Z, [quotesdatabase]: inserted new response duplicate check in db for quote ebbd328d-32ad-4aff-870e-c886196db4ce, quoteResponseId: 5276\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.588Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPXOF', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes/ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp2\",\"FSPIOP-Destination\":\"DFSPXOF\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743571:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13894) [response,api] http://0.0.0.0:3000: put /quotes/ebbd328d-32ad-4aff-870e-c886196db4ce {} 200 (45ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Received PUT quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'PUT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1277,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote id : d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Calculated sha256 hash of quote response with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: b95b3304d47e192475bb712d226a2f937cc0256c5ab9ff4d3f11ffbe42a3d39b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: DB query for quote response duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: Check duplicate for quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.641Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.643Z, [quotesdatabase]: inserted new response duplicate check in db for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb, quoteResponseId: 5277\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.646Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp1', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://mowbkd-simulators:80/simdfsp1'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response to endpoint: http://mowbkd-simulators:80/simdfsp1/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPEUR\",\"FSPIOP-Destination\":\"simdfsp1\",\"FSPIOP-HTTP-Method\":\"PUT\",\"FSPIOP-Signature\":\"{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743630:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13895) [response,api] http://0.0.0.0:3000: put /quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb {} 200 (40ms)"
									},
									"response": []
								},
								{
									"name": "Send Quote - String payerFN (Mats123@#$)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f2a3991e-b17f-4ebf-b6d8-686dab97b2b4",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp3\",\"FSPIOP-Destination\":\"testfsp4\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp3MSISDN'),",
													"      \"fspId\": \"testfsp3\"",
													"    },",
													"     \"personalInfo\": {",
													"      \"complexName\": {",
													"         \"firstName\": \"Mats12@#$3\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"      \"dateOfBirth\": \"1983-10-25\"",
													"    }",
													"    ",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp4MSISDN'),",
													"      \"fspId\": \"testfsp4\"",
													"    }",
													"  },",
													"  \"amountType\": \"SEND\",",
													"  \"amount\": {",
													"    \"amount\": \"10\",",
													"    \"currency\": \"EUR\"",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp3JWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "904f808b-6628-4af8-aa6b-3394d20e51fe",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"ERROR code is 3100\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3100\");",
													"});",
													"",
													"pm.test(\"ERROR Description is Malformed Payer firstName\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include(\"firstName\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP3_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "testfsp3"
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "testfsp4"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "Send POST /quotes from simdfsp1 (EUR) to simdfsp2 (XOF) with extensionlist.\n\nLOGS:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Received POST quote request headers: { host: 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-request-id': '80d08b5eecc42ee029a319f8993d8cb7',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-real-ip': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-for': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-host': 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-port': '80',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-proto': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-scheme': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-forwarded-for': '52.174.6.185, 10.0.1.20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 2226,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-verify': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-sha1': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-before': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip, deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-dn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:42 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] activityid: '833294909889594271858448',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-after': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl': '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cert': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-issuer': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'Synapse-PT-HttpComponents-NIO',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: quote request body : {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Is request from FXP? : false\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payer currencies : [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.287Z, [quotesdatabase]: Cache miss for getForexProvider: [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: This is a FOREX request will be forwarded to FXP : DFSPEUR\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: Calculated sha256 hash of quote request with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: 5ed0d8f2f8eff39d06f6bda1856b8a00ad95cdd3df694a04a9ba478f526650b3\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: DB query for quote duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: New quote identified with quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiatorType: [ 'CONSUMER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiator: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getScenario: [ 'TRANSFER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getAmountType: [ 'SEND' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.311Z, [quotesdatabase]: inserted new transactionReference in db: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'EUR' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp1' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYER_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYEE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp2' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYEE_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.400Z, [quotesdatabase]: inserted new quoteParty in db: 12566\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.405Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6306 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.408Z, [quotesdatabase]: inserted new quoteParty in db: 12567\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPEUR', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp1\",\"FSPIOP-SourceCurrency\":\"EUR\",\"FSPIOP-Destination\":\"DFSPEUR\",\"FSPIOP-DestinationCurrency\":\"XOF\",\"FSPIOP-Signature\":\"{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-SourceCurrency': 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-DestinationCurrency': 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743208:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13892) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (264ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: Received POST quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1423,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: quote request body : {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: Is request from FXP? : true\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payer currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.507Z, [quotesmodel]: Calculated sha256 hash of quote request with id ebbd328d-32ad-4aff-870e-c886196db4ce as: a1e81388a4c1e7bb28032999a9cefbe6da5081b955bc877667fed3a9310e6c88\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: DB query for quote duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: New quote identified with quoteId ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiatorType [ 'CONSUMER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiator [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getScenario [ 'TRANSFER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getAmountType [ 'SEND' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.519Z, [quotesdatabase]: inserted new transactionReference in db: 9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'XOF' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp1' ]: 645\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYER_DFSP' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYEE' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp2' ]: 646\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYEE_DFSP' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.527Z, [quotesdatabase]: inserted new quoteParty in db: 12568\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.530Z, [quotesdatabase]: inserted new quoteParty in db: 12569\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.533Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6307 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp2', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://mowbkd-simulators:80/simdfsp2'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request to endpoint: http://mowbkd-simulators:80/simdfsp2/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPXOF\",\"FSPIOP-Destination\":\"simdfsp2\",\"FSPIOP-HTTP-Method\":\"POST\",\"FSPIOP-Signature\":\"{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://mowbkd-simulators:80/simdfsp2/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-HTTP-Method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-URI': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743486:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13893) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (84ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Received PUT quote request headers: { accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 406,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip,deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote id : ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Calculated sha256 hash of quote response with id ebbd328d-32ad-4aff-870e-c886196db4ce as: 892edfcbf04e070e104264e4b588f372450c75a2242ed3ea642f6156fec795da\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: DB query for quote response duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: Check duplicate for quoteId ebbd328d-32ad-4aff-870e-c886196db4ce update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.582Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.585Z, [quotesdatabase]: inserted new response duplicate check in db for quote ebbd328d-32ad-4aff-870e-c886196db4ce, quoteResponseId: 5276\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.588Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPXOF', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes/ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp2\",\"FSPIOP-Destination\":\"DFSPXOF\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743571:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13894) [response,api] http://0.0.0.0:3000: put /quotes/ebbd328d-32ad-4aff-870e-c886196db4ce {} 200 (45ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Received PUT quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'PUT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1277,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote id : d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Calculated sha256 hash of quote response with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: b95b3304d47e192475bb712d226a2f937cc0256c5ab9ff4d3f11ffbe42a3d39b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: DB query for quote response duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: Check duplicate for quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.641Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.643Z, [quotesdatabase]: inserted new response duplicate check in db for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb, quoteResponseId: 5277\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.646Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp1', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://mowbkd-simulators:80/simdfsp1'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response to endpoint: http://mowbkd-simulators:80/simdfsp1/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPEUR\",\"FSPIOP-Destination\":\"simdfsp1\",\"FSPIOP-HTTP-Method\":\"PUT\",\"FSPIOP-Signature\":\"{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743630:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13895) [response,api] http://0.0.0.0:3000: put /quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb {} 200 (40ms)"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "DOB",
							"item": [
								{
									"name": "Send Quote - Malformed DOB1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e55ef81f-ea89-4c3b-a548-9c6df7fb0271",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp3\",\"FSPIOP-Destination\":\"testfsp4\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp3MSISDN'),",
													"      \"fspId\": \"testfsp3\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"      \"dateOfBirth\": \"1983-25-25\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp4MSISDN'),",
													"      \"fspId\": \"testfsp4\"",
													"    }",
													"  },",
													"  \"amountType\": \"SEND\",",
													"  \"amount\": {",
													"    \"amount\": \"10\",",
													"    \"currency\": \"EUR\"",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp3JWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ebb901c8-2a6e-4822-87cb-1de5880861ec",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"ERROR code is 3100\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3100\");",
													"});",
													"",
													"pm.test(\"ERROR msg is Malformed Payer DOB\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include(\"dateOfBirth\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP3_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "testfsp3"
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "testfsp4"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "Send POST /quotes from simdfsp1 (EUR) to simdfsp2 (XOF) with extensionlist.\n\nLOGS:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Received POST quote request headers: { host: 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-request-id': '80d08b5eecc42ee029a319f8993d8cb7',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-real-ip': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-for': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-host': 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-port': '80',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-proto': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-scheme': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-forwarded-for': '52.174.6.185, 10.0.1.20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 2226,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-verify': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-sha1': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-before': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip, deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-dn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:42 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] activityid: '833294909889594271858448',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-after': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl': '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cert': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-issuer': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'Synapse-PT-HttpComponents-NIO',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: quote request body : {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Is request from FXP? : false\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payer currencies : [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.287Z, [quotesdatabase]: Cache miss for getForexProvider: [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: This is a FOREX request will be forwarded to FXP : DFSPEUR\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: Calculated sha256 hash of quote request with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: 5ed0d8f2f8eff39d06f6bda1856b8a00ad95cdd3df694a04a9ba478f526650b3\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: DB query for quote duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: New quote identified with quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiatorType: [ 'CONSUMER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiator: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getScenario: [ 'TRANSFER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getAmountType: [ 'SEND' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.311Z, [quotesdatabase]: inserted new transactionReference in db: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'EUR' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp1' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYER_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYEE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp2' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYEE_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.400Z, [quotesdatabase]: inserted new quoteParty in db: 12566\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.405Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6306 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.408Z, [quotesdatabase]: inserted new quoteParty in db: 12567\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPEUR', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp1\",\"FSPIOP-SourceCurrency\":\"EUR\",\"FSPIOP-Destination\":\"DFSPEUR\",\"FSPIOP-DestinationCurrency\":\"XOF\",\"FSPIOP-Signature\":\"{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-SourceCurrency': 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-DestinationCurrency': 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743208:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13892) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (264ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: Received POST quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1423,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: quote request body : {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: Is request from FXP? : true\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payer currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.507Z, [quotesmodel]: Calculated sha256 hash of quote request with id ebbd328d-32ad-4aff-870e-c886196db4ce as: a1e81388a4c1e7bb28032999a9cefbe6da5081b955bc877667fed3a9310e6c88\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: DB query for quote duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: New quote identified with quoteId ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiatorType [ 'CONSUMER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiator [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getScenario [ 'TRANSFER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getAmountType [ 'SEND' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.519Z, [quotesdatabase]: inserted new transactionReference in db: 9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'XOF' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp1' ]: 645\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYER_DFSP' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYEE' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp2' ]: 646\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYEE_DFSP' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.527Z, [quotesdatabase]: inserted new quoteParty in db: 12568\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.530Z, [quotesdatabase]: inserted new quoteParty in db: 12569\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.533Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6307 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp2', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://mowbkd-simulators:80/simdfsp2'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request to endpoint: http://mowbkd-simulators:80/simdfsp2/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPXOF\",\"FSPIOP-Destination\":\"simdfsp2\",\"FSPIOP-HTTP-Method\":\"POST\",\"FSPIOP-Signature\":\"{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://mowbkd-simulators:80/simdfsp2/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-HTTP-Method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-URI': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743486:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13893) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (84ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Received PUT quote request headers: { accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 406,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip,deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote id : ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Calculated sha256 hash of quote response with id ebbd328d-32ad-4aff-870e-c886196db4ce as: 892edfcbf04e070e104264e4b588f372450c75a2242ed3ea642f6156fec795da\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: DB query for quote response duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: Check duplicate for quoteId ebbd328d-32ad-4aff-870e-c886196db4ce update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.582Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.585Z, [quotesdatabase]: inserted new response duplicate check in db for quote ebbd328d-32ad-4aff-870e-c886196db4ce, quoteResponseId: 5276\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.588Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPXOF', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes/ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp2\",\"FSPIOP-Destination\":\"DFSPXOF\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743571:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13894) [response,api] http://0.0.0.0:3000: put /quotes/ebbd328d-32ad-4aff-870e-c886196db4ce {} 200 (45ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Received PUT quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'PUT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1277,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote id : d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Calculated sha256 hash of quote response with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: b95b3304d47e192475bb712d226a2f937cc0256c5ab9ff4d3f11ffbe42a3d39b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: DB query for quote response duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: Check duplicate for quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.641Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.643Z, [quotesdatabase]: inserted new response duplicate check in db for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb, quoteResponseId: 5277\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.646Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp1', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://mowbkd-simulators:80/simdfsp1'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response to endpoint: http://mowbkd-simulators:80/simdfsp1/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPEUR\",\"FSPIOP-Destination\":\"simdfsp1\",\"FSPIOP-HTTP-Method\":\"PUT\",\"FSPIOP-Signature\":\"{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743630:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13895) [response,api] http://0.0.0.0:3000: put /quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb {} 200 (40ms)"
									},
									"response": []
								},
								{
									"name": "RECEIVE Quote - empty string in DOB",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a486eb8d-cf22-42ac-9a4f-7b3400d69517",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp3\",\"FSPIOP-Destination\":\"testfsp4\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp3MSISDN'),",
													"      \"fspId\": \"testfsp3\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"      \"dateOfBirth\": \"\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp4MSISDN'),",
													"      \"fspId\": \"testfsp4\"",
													"    }",
													"  },",
													"  \"amountType\": \"SEND\",",
													"  \"amount\": {",
													"    \"amount\": \"10\",",
													"    \"currency\": \"EUR\"",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp3JWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7f50f975-ef91-4a40-b93c-29d90fe81543",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"ERROR code is 3100\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3100\");",
													"});",
													"",
													"pm.test(\"ERROR msg is Malformed Payer DOB\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include(\"dateOfBirth\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP3_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "testfsp3"
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "testfsp4"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "Send POST /quotes from simdfsp1 (EUR) to simdfsp2 (XOF) with extensionlist.\n\nLOGS:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Received POST quote request headers: { host: 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-request-id': '80d08b5eecc42ee029a319f8993d8cb7',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-real-ip': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-for': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-host': 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-port': '80',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-proto': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-scheme': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-forwarded-for': '52.174.6.185, 10.0.1.20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 2226,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-verify': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-sha1': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-before': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip, deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-dn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:42 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] activityid: '833294909889594271858448',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-after': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl': '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cert': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-issuer': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'Synapse-PT-HttpComponents-NIO',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: quote request body : {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Is request from FXP? : false\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payer currencies : [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.287Z, [quotesdatabase]: Cache miss for getForexProvider: [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: This is a FOREX request will be forwarded to FXP : DFSPEUR\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: Calculated sha256 hash of quote request with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: 5ed0d8f2f8eff39d06f6bda1856b8a00ad95cdd3df694a04a9ba478f526650b3\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: DB query for quote duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: New quote identified with quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiatorType: [ 'CONSUMER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiator: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getScenario: [ 'TRANSFER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getAmountType: [ 'SEND' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.311Z, [quotesdatabase]: inserted new transactionReference in db: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'EUR' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp1' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYER_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYEE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp2' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYEE_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.400Z, [quotesdatabase]: inserted new quoteParty in db: 12566\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.405Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6306 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.408Z, [quotesdatabase]: inserted new quoteParty in db: 12567\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPEUR', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp1\",\"FSPIOP-SourceCurrency\":\"EUR\",\"FSPIOP-Destination\":\"DFSPEUR\",\"FSPIOP-DestinationCurrency\":\"XOF\",\"FSPIOP-Signature\":\"{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-SourceCurrency': 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-DestinationCurrency': 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743208:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13892) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (264ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: Received POST quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1423,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: quote request body : {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: Is request from FXP? : true\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payer currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.507Z, [quotesmodel]: Calculated sha256 hash of quote request with id ebbd328d-32ad-4aff-870e-c886196db4ce as: a1e81388a4c1e7bb28032999a9cefbe6da5081b955bc877667fed3a9310e6c88\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: DB query for quote duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: New quote identified with quoteId ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiatorType [ 'CONSUMER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiator [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getScenario [ 'TRANSFER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getAmountType [ 'SEND' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.519Z, [quotesdatabase]: inserted new transactionReference in db: 9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'XOF' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp1' ]: 645\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYER_DFSP' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYEE' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp2' ]: 646\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYEE_DFSP' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.527Z, [quotesdatabase]: inserted new quoteParty in db: 12568\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.530Z, [quotesdatabase]: inserted new quoteParty in db: 12569\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.533Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6307 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp2', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://mowbkd-simulators:80/simdfsp2'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request to endpoint: http://mowbkd-simulators:80/simdfsp2/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPXOF\",\"FSPIOP-Destination\":\"simdfsp2\",\"FSPIOP-HTTP-Method\":\"POST\",\"FSPIOP-Signature\":\"{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://mowbkd-simulators:80/simdfsp2/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-HTTP-Method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-URI': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743486:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13893) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (84ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Received PUT quote request headers: { accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 406,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip,deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote id : ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Calculated sha256 hash of quote response with id ebbd328d-32ad-4aff-870e-c886196db4ce as: 892edfcbf04e070e104264e4b588f372450c75a2242ed3ea642f6156fec795da\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: DB query for quote response duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: Check duplicate for quoteId ebbd328d-32ad-4aff-870e-c886196db4ce update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.582Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.585Z, [quotesdatabase]: inserted new response duplicate check in db for quote ebbd328d-32ad-4aff-870e-c886196db4ce, quoteResponseId: 5276\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.588Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPXOF', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes/ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp2\",\"FSPIOP-Destination\":\"DFSPXOF\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743571:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13894) [response,api] http://0.0.0.0:3000: put /quotes/ebbd328d-32ad-4aff-870e-c886196db4ce {} 200 (45ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Received PUT quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'PUT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1277,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote id : d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Calculated sha256 hash of quote response with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: b95b3304d47e192475bb712d226a2f937cc0256c5ab9ff4d3f11ffbe42a3d39b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: DB query for quote response duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: Check duplicate for quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.641Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.643Z, [quotesdatabase]: inserted new response duplicate check in db for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb, quoteResponseId: 5277\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.646Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp1', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://mowbkd-simulators:80/simdfsp1'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response to endpoint: http://mowbkd-simulators:80/simdfsp1/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPEUR\",\"FSPIOP-Destination\":\"simdfsp1\",\"FSPIOP-HTTP-Method\":\"PUT\",\"FSPIOP-Signature\":\"{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743630:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13895) [response,api] http://0.0.0.0:3000: put /quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb {} 200 (40ms)"
									},
									"response": []
								},
								{
									"name": "Send Quote - null DOB_string",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ac8a5712-4923-481b-a5d7-841349cb2604",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp3\",\"FSPIOP-Destination\":\"testfsp4\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp3MSISDN'),",
													"      \"fspId\": \"testfsp3\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"      \"dateOfBirth\": \"null\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp4MSISDN'),",
													"      \"fspId\": \"testfsp4\"",
													"    }",
													"  },",
													"  \"amountType\": \"SEND\",",
													"  \"amount\": {",
													"    \"amount\": \"10\",",
													"    \"currency\": \"EUR\"",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp3JWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "520a850e-8ccd-4313-a807-b2020efce5a1",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"ERROR code is 3100\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3100\");",
													"});",
													"",
													"pm.test(\"ERROR msg is Malformed Payer DOB\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include(\"dateOfBirth\"",
													");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP3_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "testfsp3"
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "testfsp4"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "Send POST /quotes from simdfsp1 (EUR) to simdfsp2 (XOF) with extensionlist.\n\nLOGS:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Received POST quote request headers: { host: 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-request-id': '80d08b5eecc42ee029a319f8993d8cb7',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-real-ip': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-for': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-host': 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-port': '80',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-proto': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-scheme': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-forwarded-for': '52.174.6.185, 10.0.1.20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 2226,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-verify': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-sha1': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-before': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip, deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-dn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:42 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] activityid: '833294909889594271858448',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-after': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl': '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cert': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-issuer': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'Synapse-PT-HttpComponents-NIO',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: quote request body : {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Is request from FXP? : false\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payer currencies : [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.287Z, [quotesdatabase]: Cache miss for getForexProvider: [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: This is a FOREX request will be forwarded to FXP : DFSPEUR\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: Calculated sha256 hash of quote request with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: 5ed0d8f2f8eff39d06f6bda1856b8a00ad95cdd3df694a04a9ba478f526650b3\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: DB query for quote duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: New quote identified with quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiatorType: [ 'CONSUMER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiator: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getScenario: [ 'TRANSFER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getAmountType: [ 'SEND' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.311Z, [quotesdatabase]: inserted new transactionReference in db: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'EUR' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp1' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYER_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYEE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp2' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYEE_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.400Z, [quotesdatabase]: inserted new quoteParty in db: 12566\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.405Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6306 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.408Z, [quotesdatabase]: inserted new quoteParty in db: 12567\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPEUR', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp1\",\"FSPIOP-SourceCurrency\":\"EUR\",\"FSPIOP-Destination\":\"DFSPEUR\",\"FSPIOP-DestinationCurrency\":\"XOF\",\"FSPIOP-Signature\":\"{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-SourceCurrency': 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-DestinationCurrency': 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743208:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13892) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (264ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: Received POST quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1423,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: quote request body : {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: Is request from FXP? : true\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payer currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.507Z, [quotesmodel]: Calculated sha256 hash of quote request with id ebbd328d-32ad-4aff-870e-c886196db4ce as: a1e81388a4c1e7bb28032999a9cefbe6da5081b955bc877667fed3a9310e6c88\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: DB query for quote duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: New quote identified with quoteId ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiatorType [ 'CONSUMER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiator [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getScenario [ 'TRANSFER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getAmountType [ 'SEND' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.519Z, [quotesdatabase]: inserted new transactionReference in db: 9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'XOF' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp1' ]: 645\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYER_DFSP' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYEE' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp2' ]: 646\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYEE_DFSP' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.527Z, [quotesdatabase]: inserted new quoteParty in db: 12568\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.530Z, [quotesdatabase]: inserted new quoteParty in db: 12569\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.533Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6307 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp2', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://mowbkd-simulators:80/simdfsp2'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request to endpoint: http://mowbkd-simulators:80/simdfsp2/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPXOF\",\"FSPIOP-Destination\":\"simdfsp2\",\"FSPIOP-HTTP-Method\":\"POST\",\"FSPIOP-Signature\":\"{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://mowbkd-simulators:80/simdfsp2/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-HTTP-Method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-URI': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743486:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13893) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (84ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Received PUT quote request headers: { accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 406,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip,deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote id : ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Calculated sha256 hash of quote response with id ebbd328d-32ad-4aff-870e-c886196db4ce as: 892edfcbf04e070e104264e4b588f372450c75a2242ed3ea642f6156fec795da\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: DB query for quote response duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: Check duplicate for quoteId ebbd328d-32ad-4aff-870e-c886196db4ce update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.582Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.585Z, [quotesdatabase]: inserted new response duplicate check in db for quote ebbd328d-32ad-4aff-870e-c886196db4ce, quoteResponseId: 5276\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.588Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPXOF', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes/ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp2\",\"FSPIOP-Destination\":\"DFSPXOF\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743571:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13894) [response,api] http://0.0.0.0:3000: put /quotes/ebbd328d-32ad-4aff-870e-c886196db4ce {} 200 (45ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Received PUT quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'PUT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1277,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote id : d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Calculated sha256 hash of quote response with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: b95b3304d47e192475bb712d226a2f937cc0256c5ab9ff4d3f11ffbe42a3d39b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: DB query for quote response duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: Check duplicate for quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.641Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.643Z, [quotesdatabase]: inserted new response duplicate check in db for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb, quoteResponseId: 5277\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.646Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp1', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://mowbkd-simulators:80/simdfsp1'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response to endpoint: http://mowbkd-simulators:80/simdfsp1/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPEUR\",\"FSPIOP-Destination\":\"simdfsp1\",\"FSPIOP-HTTP-Method\":\"PUT\",\"FSPIOP-Signature\":\"{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743630:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13895) [response,api] http://0.0.0.0:3000: put /quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb {} 200 (40ms)"
									},
									"response": []
								},
								{
									"name": "Send Quote - null DOB",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6461079e-aac9-4fe0-9ae1-b1084c96955e",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp3\",\"FSPIOP-Destination\":\"testfsp4\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp3MSISDN'),",
													"      \"fspId\": \"testfsp3\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"      \"dateOfBirth\": null",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp4MSISDN'),",
													"      \"fspId\": \"testfsp4\"",
													"    }",
													"  },",
													"  \"amountType\": \"SEND\",",
													"  \"amount\": {",
													"    \"amount\": \"10\",",
													"    \"currency\": \"EUR\"",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp3JWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d761f2f5-e82a-4b1a-bd87-2617e379dcd7",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"ERROR code is 3100\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3100\");",
													"});",
													"",
													"pm.test(\"ERROR msg is Malformed Payer DOB\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include(\"dateOfBirth\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP3_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "testfsp3"
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "testfsp4"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "Send POST /quotes from simdfsp1 (EUR) to simdfsp2 (XOF) with extensionlist.\n\nLOGS:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Received POST quote request headers: { host: 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-request-id': '80d08b5eecc42ee029a319f8993d8cb7',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-real-ip': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-for': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-host': 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-port': '80',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-proto': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-scheme': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-forwarded-for': '52.174.6.185, 10.0.1.20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 2226,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-verify': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-sha1': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-before': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip, deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-dn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:42 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] activityid: '833294909889594271858448',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-after': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl': '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cert': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-issuer': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'Synapse-PT-HttpComponents-NIO',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: quote request body : {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Is request from FXP? : false\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payer currencies : [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.287Z, [quotesdatabase]: Cache miss for getForexProvider: [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: This is a FOREX request will be forwarded to FXP : DFSPEUR\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: Calculated sha256 hash of quote request with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: 5ed0d8f2f8eff39d06f6bda1856b8a00ad95cdd3df694a04a9ba478f526650b3\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: DB query for quote duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: New quote identified with quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiatorType: [ 'CONSUMER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiator: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getScenario: [ 'TRANSFER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getAmountType: [ 'SEND' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.311Z, [quotesdatabase]: inserted new transactionReference in db: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'EUR' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp1' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYER_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYEE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp2' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYEE_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.400Z, [quotesdatabase]: inserted new quoteParty in db: 12566\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.405Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6306 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.408Z, [quotesdatabase]: inserted new quoteParty in db: 12567\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPEUR', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp1\",\"FSPIOP-SourceCurrency\":\"EUR\",\"FSPIOP-Destination\":\"DFSPEUR\",\"FSPIOP-DestinationCurrency\":\"XOF\",\"FSPIOP-Signature\":\"{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-SourceCurrency': 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-DestinationCurrency': 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743208:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13892) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (264ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: Received POST quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1423,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: quote request body : {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: Is request from FXP? : true\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payer currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.507Z, [quotesmodel]: Calculated sha256 hash of quote request with id ebbd328d-32ad-4aff-870e-c886196db4ce as: a1e81388a4c1e7bb28032999a9cefbe6da5081b955bc877667fed3a9310e6c88\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: DB query for quote duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: New quote identified with quoteId ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiatorType [ 'CONSUMER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiator [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getScenario [ 'TRANSFER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getAmountType [ 'SEND' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.519Z, [quotesdatabase]: inserted new transactionReference in db: 9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'XOF' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp1' ]: 645\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYER_DFSP' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYEE' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp2' ]: 646\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYEE_DFSP' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.527Z, [quotesdatabase]: inserted new quoteParty in db: 12568\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.530Z, [quotesdatabase]: inserted new quoteParty in db: 12569\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.533Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6307 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp2', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://mowbkd-simulators:80/simdfsp2'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request to endpoint: http://mowbkd-simulators:80/simdfsp2/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPXOF\",\"FSPIOP-Destination\":\"simdfsp2\",\"FSPIOP-HTTP-Method\":\"POST\",\"FSPIOP-Signature\":\"{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://mowbkd-simulators:80/simdfsp2/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-HTTP-Method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-URI': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743486:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13893) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (84ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Received PUT quote request headers: { accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 406,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip,deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote id : ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Calculated sha256 hash of quote response with id ebbd328d-32ad-4aff-870e-c886196db4ce as: 892edfcbf04e070e104264e4b588f372450c75a2242ed3ea642f6156fec795da\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: DB query for quote response duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: Check duplicate for quoteId ebbd328d-32ad-4aff-870e-c886196db4ce update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.582Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.585Z, [quotesdatabase]: inserted new response duplicate check in db for quote ebbd328d-32ad-4aff-870e-c886196db4ce, quoteResponseId: 5276\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.588Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPXOF', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes/ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp2\",\"FSPIOP-Destination\":\"DFSPXOF\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743571:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13894) [response,api] http://0.0.0.0:3000: put /quotes/ebbd328d-32ad-4aff-870e-c886196db4ce {} 200 (45ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Received PUT quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'PUT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1277,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote id : d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Calculated sha256 hash of quote response with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: b95b3304d47e192475bb712d226a2f937cc0256c5ab9ff4d3f11ffbe42a3d39b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: DB query for quote response duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: Check duplicate for quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.641Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.643Z, [quotesdatabase]: inserted new response duplicate check in db for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb, quoteResponseId: 5277\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.646Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp1', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://mowbkd-simulators:80/simdfsp1'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response to endpoint: http://mowbkd-simulators:80/simdfsp1/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPEUR\",\"FSPIOP-Destination\":\"simdfsp1\",\"FSPIOP-HTTP-Method\":\"PUT\",\"FSPIOP-Signature\":\"{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743630:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13895) [response,api] http://0.0.0.0:3000: put /quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb {} 200 (40ms)"
									},
									"response": []
								},
								{
									"name": "Send Quote - invalid DOB format",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2beaf6a4-46ba-448e-b038-b91841c401bf",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp3\",\"FSPIOP-Destination\":\"testfsp4\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp3MSISDN'),",
													"      \"fspId\": \"testfsp3\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"      \"dateOfBirth\": \"1983/10/25\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp4MSISDN'),",
													"      \"fspId\": \"testfsp4\"",
													"    }",
													"  },",
													"  \"amountType\": \"SEND\",",
													"  \"amount\": {",
													"    \"amount\": \"10\",",
													"    \"currency\": \"EUR\"",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp3JWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8449bae2-50f6-4bf6-9146-7307cb818a14",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"ERROR code is 3100\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3100\");",
													"});",
													"",
													"pm.test(\"ERROR msg is Malformed Payer DOB\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include(\"dateOfBirth\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP3_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "testfsp3"
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "testfsp4"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "Send POST /quotes from simdfsp1 (EUR) to simdfsp2 (XOF) with extensionlist.\n\nLOGS:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Received POST quote request headers: { host: 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-request-id': '80d08b5eecc42ee029a319f8993d8cb7',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-real-ip': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-for': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-host': 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-port': '80',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-proto': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-scheme': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-forwarded-for': '52.174.6.185, 10.0.1.20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 2226,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-verify': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-sha1': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-before': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip, deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-dn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:42 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] activityid: '833294909889594271858448',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-after': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl': '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cert': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-issuer': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'Synapse-PT-HttpComponents-NIO',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: quote request body : {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Is request from FXP? : false\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payer currencies : [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.287Z, [quotesdatabase]: Cache miss for getForexProvider: [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: This is a FOREX request will be forwarded to FXP : DFSPEUR\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: Calculated sha256 hash of quote request with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: 5ed0d8f2f8eff39d06f6bda1856b8a00ad95cdd3df694a04a9ba478f526650b3\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: DB query for quote duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: New quote identified with quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiatorType: [ 'CONSUMER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiator: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getScenario: [ 'TRANSFER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getAmountType: [ 'SEND' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.311Z, [quotesdatabase]: inserted new transactionReference in db: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'EUR' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp1' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYER_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYEE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp2' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYEE_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.400Z, [quotesdatabase]: inserted new quoteParty in db: 12566\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.405Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6306 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.408Z, [quotesdatabase]: inserted new quoteParty in db: 12567\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPEUR', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp1\",\"FSPIOP-SourceCurrency\":\"EUR\",\"FSPIOP-Destination\":\"DFSPEUR\",\"FSPIOP-DestinationCurrency\":\"XOF\",\"FSPIOP-Signature\":\"{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-SourceCurrency': 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-DestinationCurrency': 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743208:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13892) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (264ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: Received POST quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1423,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: quote request body : {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: Is request from FXP? : true\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payer currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.507Z, [quotesmodel]: Calculated sha256 hash of quote request with id ebbd328d-32ad-4aff-870e-c886196db4ce as: a1e81388a4c1e7bb28032999a9cefbe6da5081b955bc877667fed3a9310e6c88\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: DB query for quote duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: New quote identified with quoteId ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiatorType [ 'CONSUMER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiator [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getScenario [ 'TRANSFER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getAmountType [ 'SEND' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.519Z, [quotesdatabase]: inserted new transactionReference in db: 9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'XOF' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp1' ]: 645\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYER_DFSP' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYEE' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp2' ]: 646\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYEE_DFSP' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.527Z, [quotesdatabase]: inserted new quoteParty in db: 12568\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.530Z, [quotesdatabase]: inserted new quoteParty in db: 12569\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.533Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6307 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp2', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://mowbkd-simulators:80/simdfsp2'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request to endpoint: http://mowbkd-simulators:80/simdfsp2/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPXOF\",\"FSPIOP-Destination\":\"simdfsp2\",\"FSPIOP-HTTP-Method\":\"POST\",\"FSPIOP-Signature\":\"{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://mowbkd-simulators:80/simdfsp2/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-HTTP-Method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-URI': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743486:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13893) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (84ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Received PUT quote request headers: { accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 406,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip,deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote id : ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Calculated sha256 hash of quote response with id ebbd328d-32ad-4aff-870e-c886196db4ce as: 892edfcbf04e070e104264e4b588f372450c75a2242ed3ea642f6156fec795da\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: DB query for quote response duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: Check duplicate for quoteId ebbd328d-32ad-4aff-870e-c886196db4ce update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.582Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.585Z, [quotesdatabase]: inserted new response duplicate check in db for quote ebbd328d-32ad-4aff-870e-c886196db4ce, quoteResponseId: 5276\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.588Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPXOF', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes/ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp2\",\"FSPIOP-Destination\":\"DFSPXOF\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743571:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13894) [response,api] http://0.0.0.0:3000: put /quotes/ebbd328d-32ad-4aff-870e-c886196db4ce {} 200 (45ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Received PUT quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'PUT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1277,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote id : d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Calculated sha256 hash of quote response with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: b95b3304d47e192475bb712d226a2f937cc0256c5ab9ff4d3f11ffbe42a3d39b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: DB query for quote response duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: Check duplicate for quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.641Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.643Z, [quotesdatabase]: inserted new response duplicate check in db for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb, quoteResponseId: 5277\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.646Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp1', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://mowbkd-simulators:80/simdfsp1'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response to endpoint: http://mowbkd-simulators:80/simdfsp1/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPEUR\",\"FSPIOP-Destination\":\"simdfsp1\",\"FSPIOP-HTTP-Method\":\"PUT\",\"FSPIOP-Signature\":\"{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743630:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13895) [response,api] http://0.0.0.0:3000: put /quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb {} 200 (40ms)"
									},
									"response": []
								},
								{
									"name": "Send Quote - missing DOB in payer object",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ca18105f-68cf-4b87-8a05-6ab8fc25fe75",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp3\",\"FSPIOP-Destination\":\"testfsp4\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp3MSISDN'),",
													"      \"fspId\": \"testfsp3\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"     ",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp4MSISDN'),",
													"      \"fspId\": \"testfsp4\"",
													"    }",
													"  },",
													"  \"amountType\": \"SEND\",",
													"  \"amount\": {",
													"    \"amount\": \"10\",",
													"    \"currency\": \"EUR\"",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp3JWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9e6d0b18-1db5-404e-bd6f-e3f7669f5537",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// Commented the following tests because the payer DOB is not required field",
													"",
													"// pm.test(\"Status code is 400\", function () {",
													"//     pm.response.to.have.status(400);",
													"// });",
													"",
													"// pm.test(\"ERROR code is 3102\", function () {",
													"//     var jsonData = pm.response.json();",
													"//     pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3102\");",
													"// });",
													"",
													"// pm.test(\"ERROR msg is Missing Payer DOB\", function () {",
													"//     var jsonData = pm.response.json();",
													"//     pm.expect(jsonData.errorInformation.errorDescription).to.eql(`Missing mandatory element - Quote request ${pm.environment.get('quoteId')} failed: dateOfBirth is required`);",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP3_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "testfsp3"
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "testfsp4"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "Send POST /quotes from simdfsp1 (EUR) to simdfsp2 (XOF) with extensionlist.\n\nLOGS:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Received POST quote request headers: { host: 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-request-id': '80d08b5eecc42ee029a319f8993d8cb7',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-real-ip': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-for': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-host': 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-port': '80',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-proto': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-scheme': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-forwarded-for': '52.174.6.185, 10.0.1.20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 2226,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-verify': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-sha1': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-before': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip, deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-dn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:42 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] activityid: '833294909889594271858448',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-after': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl': '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cert': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-issuer': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'Synapse-PT-HttpComponents-NIO',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: quote request body : {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Is request from FXP? : false\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payer currencies : [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.287Z, [quotesdatabase]: Cache miss for getForexProvider: [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: This is a FOREX request will be forwarded to FXP : DFSPEUR\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: Calculated sha256 hash of quote request with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: 5ed0d8f2f8eff39d06f6bda1856b8a00ad95cdd3df694a04a9ba478f526650b3\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: DB query for quote duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: New quote identified with quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiatorType: [ 'CONSUMER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiator: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getScenario: [ 'TRANSFER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getAmountType: [ 'SEND' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.311Z, [quotesdatabase]: inserted new transactionReference in db: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'EUR' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp1' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYER_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYEE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp2' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYEE_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.400Z, [quotesdatabase]: inserted new quoteParty in db: 12566\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.405Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6306 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.408Z, [quotesdatabase]: inserted new quoteParty in db: 12567\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPEUR', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp1\",\"FSPIOP-SourceCurrency\":\"EUR\",\"FSPIOP-Destination\":\"DFSPEUR\",\"FSPIOP-DestinationCurrency\":\"XOF\",\"FSPIOP-Signature\":\"{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-SourceCurrency': 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-DestinationCurrency': 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743208:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13892) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (264ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: Received POST quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1423,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: quote request body : {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: Is request from FXP? : true\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payer currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.507Z, [quotesmodel]: Calculated sha256 hash of quote request with id ebbd328d-32ad-4aff-870e-c886196db4ce as: a1e81388a4c1e7bb28032999a9cefbe6da5081b955bc877667fed3a9310e6c88\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: DB query for quote duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: New quote identified with quoteId ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiatorType [ 'CONSUMER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiator [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getScenario [ 'TRANSFER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getAmountType [ 'SEND' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.519Z, [quotesdatabase]: inserted new transactionReference in db: 9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'XOF' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp1' ]: 645\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYER_DFSP' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYEE' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp2' ]: 646\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYEE_DFSP' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.527Z, [quotesdatabase]: inserted new quoteParty in db: 12568\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.530Z, [quotesdatabase]: inserted new quoteParty in db: 12569\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.533Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6307 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp2', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://mowbkd-simulators:80/simdfsp2'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request to endpoint: http://mowbkd-simulators:80/simdfsp2/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPXOF\",\"FSPIOP-Destination\":\"simdfsp2\",\"FSPIOP-HTTP-Method\":\"POST\",\"FSPIOP-Signature\":\"{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://mowbkd-simulators:80/simdfsp2/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-HTTP-Method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-URI': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743486:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13893) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (84ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Received PUT quote request headers: { accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 406,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip,deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote id : ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Calculated sha256 hash of quote response with id ebbd328d-32ad-4aff-870e-c886196db4ce as: 892edfcbf04e070e104264e4b588f372450c75a2242ed3ea642f6156fec795da\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: DB query for quote response duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: Check duplicate for quoteId ebbd328d-32ad-4aff-870e-c886196db4ce update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.582Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.585Z, [quotesdatabase]: inserted new response duplicate check in db for quote ebbd328d-32ad-4aff-870e-c886196db4ce, quoteResponseId: 5276\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.588Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPXOF', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes/ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp2\",\"FSPIOP-Destination\":\"DFSPXOF\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743571:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13894) [response,api] http://0.0.0.0:3000: put /quotes/ebbd328d-32ad-4aff-870e-c886196db4ce {} 200 (45ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Received PUT quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'PUT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1277,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote id : d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Calculated sha256 hash of quote response with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: b95b3304d47e192475bb712d226a2f937cc0256c5ab9ff4d3f11ffbe42a3d39b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: DB query for quote response duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: Check duplicate for quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.641Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.643Z, [quotesdatabase]: inserted new response duplicate check in db for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb, quoteResponseId: 5277\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.646Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp1', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://mowbkd-simulators:80/simdfsp1'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response to endpoint: http://mowbkd-simulators:80/simdfsp1/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPEUR\",\"FSPIOP-Destination\":\"simdfsp1\",\"FSPIOP-HTTP-Method\":\"PUT\",\"FSPIOP-Signature\":\"{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743630:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13895) [response,api] http://0.0.0.0:3000: put /quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb {} 200 (40ms)"
									},
									"response": []
								},
								{
									"name": "Send Quote - Malformed DOB3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "233cbc63-07d3-4827-a6b1-b965b0f0c2bc",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp3\",\"FSPIOP-Destination\":\"testfsp4\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp3MSISDN'),",
													"      \"fspId\": \"testfsp3\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"       \"dateOfBirth\": \"abc@3#\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp4MSISDN'),",
													"      \"fspId\": \"testfsp4\"",
													"    }",
													"  },",
													"  \"amountType\": \"SEND\",",
													"  \"amount\": {",
													"    \"amount\": \"10\",",
													"    \"currency\": \"EUR\"",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp3JWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "41fdd90e-bbaf-4875-9389-f09df3cfe45d",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"ERROR code is 3100\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3100\");",
													"});",
													"",
													"pm.test(\"ERROR msg is Malformed Payer DOB\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include(\"dateOfBirth\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP3_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "testfsp3"
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "testfsp4"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "Send POST /quotes from simdfsp1 (EUR) to simdfsp2 (XOF) with extensionlist.\n\nLOGS:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Received POST quote request headers: { host: 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-request-id': '80d08b5eecc42ee029a319f8993d8cb7',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-real-ip': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-for': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-host': 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-port': '80',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-proto': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-scheme': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-forwarded-for': '52.174.6.185, 10.0.1.20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 2226,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-verify': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-sha1': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-before': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip, deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-dn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:42 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] activityid: '833294909889594271858448',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-after': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl': '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cert': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-issuer': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'Synapse-PT-HttpComponents-NIO',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: quote request body : {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Is request from FXP? : false\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payer currencies : [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.287Z, [quotesdatabase]: Cache miss for getForexProvider: [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: This is a FOREX request will be forwarded to FXP : DFSPEUR\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: Calculated sha256 hash of quote request with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: 5ed0d8f2f8eff39d06f6bda1856b8a00ad95cdd3df694a04a9ba478f526650b3\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: DB query for quote duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: New quote identified with quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiatorType: [ 'CONSUMER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiator: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getScenario: [ 'TRANSFER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getAmountType: [ 'SEND' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.311Z, [quotesdatabase]: inserted new transactionReference in db: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'EUR' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp1' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYER_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYEE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp2' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYEE_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.400Z, [quotesdatabase]: inserted new quoteParty in db: 12566\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.405Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6306 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.408Z, [quotesdatabase]: inserted new quoteParty in db: 12567\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPEUR', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp1\",\"FSPIOP-SourceCurrency\":\"EUR\",\"FSPIOP-Destination\":\"DFSPEUR\",\"FSPIOP-DestinationCurrency\":\"XOF\",\"FSPIOP-Signature\":\"{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-SourceCurrency': 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-DestinationCurrency': 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743208:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13892) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (264ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: Received POST quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1423,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: quote request body : {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: Is request from FXP? : true\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payer currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.507Z, [quotesmodel]: Calculated sha256 hash of quote request with id ebbd328d-32ad-4aff-870e-c886196db4ce as: a1e81388a4c1e7bb28032999a9cefbe6da5081b955bc877667fed3a9310e6c88\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: DB query for quote duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: New quote identified with quoteId ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiatorType [ 'CONSUMER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiator [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getScenario [ 'TRANSFER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getAmountType [ 'SEND' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.519Z, [quotesdatabase]: inserted new transactionReference in db: 9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'XOF' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp1' ]: 645\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYER_DFSP' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYEE' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp2' ]: 646\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYEE_DFSP' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.527Z, [quotesdatabase]: inserted new quoteParty in db: 12568\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.530Z, [quotesdatabase]: inserted new quoteParty in db: 12569\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.533Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6307 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp2', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://mowbkd-simulators:80/simdfsp2'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request to endpoint: http://mowbkd-simulators:80/simdfsp2/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPXOF\",\"FSPIOP-Destination\":\"simdfsp2\",\"FSPIOP-HTTP-Method\":\"POST\",\"FSPIOP-Signature\":\"{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://mowbkd-simulators:80/simdfsp2/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-HTTP-Method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-URI': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743486:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13893) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (84ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Received PUT quote request headers: { accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 406,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip,deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote id : ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Calculated sha256 hash of quote response with id ebbd328d-32ad-4aff-870e-c886196db4ce as: 892edfcbf04e070e104264e4b588f372450c75a2242ed3ea642f6156fec795da\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: DB query for quote response duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: Check duplicate for quoteId ebbd328d-32ad-4aff-870e-c886196db4ce update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.582Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.585Z, [quotesdatabase]: inserted new response duplicate check in db for quote ebbd328d-32ad-4aff-870e-c886196db4ce, quoteResponseId: 5276\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.588Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPXOF', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes/ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp2\",\"FSPIOP-Destination\":\"DFSPXOF\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743571:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13894) [response,api] http://0.0.0.0:3000: put /quotes/ebbd328d-32ad-4aff-870e-c886196db4ce {} 200 (45ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Received PUT quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'PUT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1277,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote id : d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Calculated sha256 hash of quote response with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: b95b3304d47e192475bb712d226a2f937cc0256c5ab9ff4d3f11ffbe42a3d39b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: DB query for quote response duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: Check duplicate for quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.641Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.643Z, [quotesdatabase]: inserted new response duplicate check in db for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb, quoteResponseId: 5277\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.646Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp1', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://mowbkd-simulators:80/simdfsp1'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response to endpoint: http://mowbkd-simulators:80/simdfsp1/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPEUR\",\"FSPIOP-Destination\":\"simdfsp1\",\"FSPIOP-HTTP-Method\":\"PUT\",\"FSPIOP-Signature\":\"{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743630:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13895) [response,api] http://0.0.0.0:3000: put /quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb {} 200 (40ms)"
									},
									"response": []
								},
								{
									"name": "Send Quote - Malformed DOB2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1ef6385f-0a98-4695-b345-e3b1cadeeeb7",
												"exec": [
													"var navigator = {}; //fake a navigator object for the lib",
													"var window = {}; //fake a window object for the lib",
													"eval(pm.environment.get('jrsassign'));",
													"",
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('quoteId', generatedUUID);",
													"generatedUUID = uuid.v4();",
													"pm.environment.set('transactionId', generatedUUID);",
													"",
													"pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"pm.variables.set('payerName', 'Testfsp3First Testfsp3Last');",
													"",
													"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"testfsp3\",\"FSPIOP-Destination\":\"testfsp4\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
													"var sHeader = JSON.stringify(oHeader);",
													"console.log(`sHeader: ${sHeader}`)",
													"",
													"var objPayload = {",
													"  \"quoteId\": pm.environment.get('quoteId'),",
													"  \"transactionId\": pm.environment.get('transactionId'),",
													"  \"payer\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp3MSISDN'),",
													"      \"fspId\": \"testfsp3\"",
													"    },",
													"    \"personalInfo\": {",
													"      \"complexName\": {",
													"        \"firstName\": \"Mats\",",
													"        \"lastName\": \"Hagman\"",
													"      },",
													"       \"dateOfBirth\": \"83-10-25\"",
													"    }",
													"  },",
													"  \"payee\": {",
													"    \"partyIdInfo\": {",
													"      \"partyIdType\": \"MSISDN\",",
													"      \"partyIdentifier\": pm.environment.get('testfsp4MSISDN'),",
													"      \"fspId\": \"testfsp4\"",
													"    }",
													"  },",
													"  \"amountType\": \"SEND\",",
													"  \"amount\": {",
													"    \"amount\": \"10\",",
													"    \"currency\": \"EUR\"",
													"  },",
													"  \"transactionType\": {",
													"    \"scenario\": \"TRANSFER\",",
													"    \"initiator\": \"PAYER\",",
													"    \"initiatorType\": \"CONSUMER\"",
													"  },",
													"  \"note\": \"hej\"",
													"}",
													"",
													"var sPayload = JSON.stringify(objPayload)",
													"pm.variables.set(\"quoteRequest\", sPayload);",
													"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('testfsp3JWSKey'));",
													"console.log(`token: ${token}`)",
													"",
													"// var encodedHeaders = btoa(sHeader)",
													"",
													"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
													"// var token = JSON.stringify(ofspiopSignature)",
													"",
													"const [ protectedHeaderBase64, , signature ] = token.split('.');",
													"",
													"const signatureObject = {",
													"    signature: signature.replace('\"', ''),",
													"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
													"};",
													"",
													"console.log(JSON.stringify(signatureObject))",
													"",
													"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "55d7bbdd-e696-44ae-a7f1-4b88a2d49a19",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"ERROR code is 3100\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql(\"3100\");",
													"});",
													"",
													"pm.test(\"ERROR msg is Malformed Payer DOB\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include(\"dateOfBirth\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{TESTFSP3_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "testfsp3"
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "testfsp4"
											},
											{
												"key": "FSPIOP-Signature",
												"type": "text",
												"value": "{{fspiopSignature}}"
											},
											{
												"key": "FSPIOP-HTTP-Method",
												"type": "text",
												"value": "POST"
											},
											{
												"key": "FSPIOP-URI",
												"type": "text",
												"value": "/quotes"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{quoteRequest}}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "Send POST /quotes from simdfsp1 (EUR) to simdfsp2 (XOF) with extensionlist.\n\nLOGS:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Received POST quote request headers: { host: 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-request-id': '80d08b5eecc42ee029a319f8993d8cb7',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-real-ip': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-for': '52.174.6.185',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-host': 'dev-casa-interop-switch.casahub.live',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-port': '80',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-forwarded-proto': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-scheme': 'https',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-original-forwarded-for': '52.174.6.185, 10.0.1.20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 2226,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-verify': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-sha1': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-before': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip, deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-dn': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:42 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] activityid: '833294909889594271858448',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-not-after': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl': '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-client-cert': '0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-ssl-issuer': '',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'Synapse-PT-HttpComponents-NIO',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: quote request body : {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.210Z, [quotesmodel]: Is request from FXP? : false\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payer currencies : [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.283Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.287Z, [quotesdatabase]: Cache miss for getForexProvider: [ 'EUR' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: This is a FOREX request will be forwarded to FXP : DFSPEUR\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.292Z, [quotesmodel]: Calculated sha256 hash of quote request with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: 5ed0d8f2f8eff39d06f6bda1856b8a00ad95cdd3df694a04a9ba478f526650b3\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: DB query for quote duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.297Z, [quotesmodel]: New quote identified with quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiatorType: [ 'CONSUMER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getInitiator: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getScenario: [ 'TRANSFER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.303Z, [quotesdatabase]: Cache miss for getAmountType: [ 'SEND' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Connection Error: Error: read ECONNRESET\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.311Z, [quotesdatabase]: inserted new transactionReference in db: d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'EUR' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYER' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp1' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYER_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.385Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyType: [ 'PAYEE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getPartyIdentifierType: [ 'MSISDN' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getParticipant: [ 'simdfsp2' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getTransferParticipantRoleType: [ 'PAYEE_DFSP' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.386Z, [quotesdatabase]: Cache miss for getLedgerEntryType: [ 'PRINCIPLE_VALUE' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.400Z, [quotesdatabase]: inserted new quoteParty in db: 12566\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.405Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6306 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.408Z, [quotesdatabase]: inserted new quoteParty in db: 12567\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.420Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPEUR', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp1\",\"FSPIOP-SourceCurrency\":\"EUR\",\"FSPIOP-Destination\":\"DFSPEUR\",\"FSPIOP-DestinationCurrency\":\"XOF\",\"FSPIOP-Signature\":\"{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.451Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"transactionId\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-SourceCurrency': 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-DestinationCurrency': 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"iU4GBXSfY8twZMj1zXX1CTe3LDO8Zvgui53icrriBxCUF_wltQmnjgWLWI4ZUEueVeOeTbDPBZazpBWYvBYpl5WJSUoXi14nVlangcsmu2vYkQUPmHtjOW-yb2ng6_aPfwd7oHLWrWzcsjTF-S4dW7GZRPHEbY_qCOhEwmmMOnE1FWF1OLvP0dM0r4y7FlnrZNhmuVIFhk_pMbEC44rtQmMFv4pm4EVGqmIm3eyXz0GkX8q_O1kGBoyIeV_P6RRcZ0nL6YUVMhPFSLJo6CIhL2zPm54Qdl2nVzDFWn_shVyV0Cl5vpcMJxJ--O_Zcbmpv6lxqDdygTC782Ob3CNMvg\\\",\\\"protectedHeader\\\":\\\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJwYXllcmZzcCIsIkZTUElPUC1EZXN0aW5hdGlvbiI6InBheWVlZnNwIiwiRGF0ZSI6IiJ9\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12566,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12567 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743208:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13892) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (264ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a POST /quotes request: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payee:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803915',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp2' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payer:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdInfo:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { partyIdType: 'MSISDN',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyIdentifier: '27713803905',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] fspId: 'simdfsp1' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] personalInfo: { complexName: [Object], dateOfBirth: '1983-10-25' } },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountType: 'SEND',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionType:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { scenario: 'TRANSFER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiator: 'PAYER',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] initiatorType: 'CONSUMER' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2017-11-15T22:17:28.985-01:00',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] extensionList:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { extension:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [ [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object],\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] [Object] ] } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: Received POST quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1423,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.487Z, [quotesmodel]: quote request body : {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: The regex to check forex dfsp is : /^DFSP([A-Z]{3})$/g\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.488Z, [quotesmodel]: Is request from FXP? : true\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payer currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.503Z, [quotesmodel]: Available payee currencies : [ 'XOF' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.507Z, [quotesmodel]: Calculated sha256 hash of quote request with id ebbd328d-32ad-4aff-870e-c886196db4ce as: a1e81388a4c1e7bb28032999a9cefbe6da5081b955bc877667fed3a9310e6c88\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: DB query for quote duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.510Z, [quotesmodel]: New quote identified with quoteId ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: inserted new duplicate check in db for quoteId: ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiatorType [ 'CONSUMER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getInitiator [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getScenario [ 'TRANSFER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.516Z, [quotesdatabase]: Cache hit for getAmountType [ 'SEND' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.519Z, [quotesdatabase]: inserted new transactionReference in db: 9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: inserted new quote in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionRequestId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] note: 'hej',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expirationDate: 2017-11-15T23:17:28.985Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] balanceOfPaymentsId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionSubScenarioId: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] currencyId: 'XOF' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYER' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.523Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp1' ]: 645\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYER_DFSP' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyType [ 'PAYEE' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getPartyIdentifierType [ 'MSISDN' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getParticipant [ 'simdfsp2' ]: 646\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getTransferParticipantRoleType [ 'PAYEE_DFSP' ]: 2\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.524Z, [quotesdatabase]: Cache hit for getLedgerEntryType [ 'PRINCIPLE_VALUE' ]: 1\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.527Z, [quotesdatabase]: inserted new quoteParty in db: 12568\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.530Z, [quotesdatabase]: inserted new quoteParty in db: 12569\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.533Z, [quotesdatabase]: inserted new party in db: { firstName: 'Mats',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] middleName: undefined,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] lastName: 'Hagman',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] dateOfBirth: '1983-10-25',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quotePartyId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] partyId: 6307 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesmodel]: create quote transaction committed to db: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.547Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp2', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Resolved PAYEE party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://mowbkd-simulators:80/simdfsp2'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request to endpoint: http://mowbkd-simulators:80/simdfsp2/quotes\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPXOF\",\"FSPIOP-Destination\":\"simdfsp2\",\"FSPIOP-HTTP-Method\":\"POST\",\"FSPIOP-Signature\":\"{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes\",\"Accept\":\"application/vnd.interoperability.quotes+json;version=1.0\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding quote request body: {\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.561Z, [quotesmodel]: Forwarding request : { method: 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] url: 'http://mowbkd-simulators:80/simdfsp2/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] data: '{\"quoteId\":\"ebbd328d-32ad-4aff-870e-c886196db4ce\",\"transactionId\":\"9678a1c6-9ef6-47dd-a2de-44c9b3920a7b\",\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803915\",\"fspId\":\"simdfsp2\"}},\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"27713803905\",\"fspId\":\"simdfsp1\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Mats\",\"lastName\":\"Hagman\"},\"dateOfBirth\":\"1983-10-25\"}},\"amountType\":\"SEND\",\"amount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"hej\",\"expiration\":\"2017-11-15T22:17:28.985-01:00\",\"extensionList\":{\"extension\":[{\"key\":\"KYCPayerTier\",\"value\":\"1\"},{\"key\":\"KYCNationality\",\"value\":\"CI\"},{\"key\":\"KYCOccupation\",\"value\":\"Engineer\"},{\"key\":\"KYCEmployerName\",\"value\":\"Example Corp\"},{\"key\":\"KYCContactPhone\",\"value\":\"1122334455\"},{\"key\":\"KYCEmailAddress\",\"value\":\"user@mail.com\"},{\"key\":\"KYCBirthCountry\",\"value\":\"CI\"},{\"key\":\"KYCPayerAddress1\",\"value\":\"Immeuble Le Quartz Boulevard Valéry Giscard d'Estaing Marcory\"},{\"key\":\"KYCPayerAddress2\",\"value\":\"11 BP 202 Abidjan 11\"},{\"key\":\"KYCPayerAddressCity\",\"value\":\"Abidjan\"},{\"key\":\"KYCPayerAddressCode\",\"value\":\"NE1 3TQ\"},{\"key\":\"KYCPayerIDType\",\"value\":\"PASSPORT\"},{\"key\":\"KYCPayerIDValue\",\"value\":\"770423742\"},{\"key\":\"KYCPayerTransferReason\",\"value\":\"Bill payment\"},{\"key\":\"parentTransferId\",\"value\":\"d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}]}}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] headers:\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] { 'Content-Type': 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Source': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Destination': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-HTTP-Method': 'POST',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-Signature': '{\"signature\":\"bX2yc_Ns4TlWBT6Y4fY0SWWiQH8sDqUqXEKUhRIWSIGZ_BuEVpZSRsZCJp-1GnxshWs6Uh9DZxR28_l1Jn-sgemFwYopnfmFYDBqz-J1unMKHEnZ7usfr2jf_d97t61VGyLgeClpFsTdufYrHSL18FUWxQhza27M_-SUMMxKhUgQfbZdO-pQ7vuTv3hnq6u6TE_2AWRvTBMkoIQPrX8QAZZTbxDtnpt3UEleEVZ0Xb9iwXMABAgbmy1kSuoxAvkzrsZ84MBi-jFwvVahciCe48Or6qgI_rmzNkgRfiirUh9kAWwbxAKI4Q8cKNI_arjnyoSqZhrnz1vJ8rU7klibWw\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzIiwiRlNQSU9QLUhUVFAtTWV0aG9kIjoiUE9TVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQWE9GIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDIiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'FSPIOP-URI': '/quotes',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] Accept: 'application/vnd.interoperability.quotes+json;version=1.0' } }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: POST quote request succeeded and returned: { transactionReferenceId: '9678a1c6-9ef6-47dd-a2de-44c9b3920a7b',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionInitiatorId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transactionScenarioId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] amountTypeId: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payerId: 12568,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeId: 12569 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743486:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13893) [response,api] http://0.0.0.0:3000: post /quotes {} 202 (84ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '13333', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Received PUT quote request headers: { accept: 'application/vnd.interoperability.quotes+json;version=1.0',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'simdfsp2',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'DFSPXOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 406,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'user-agent': 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'accept-encoding': 'gzip,deflate',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote id : ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.573Z, [quotesmodel]: Calculated sha256 hash of quote response with id ebbd328d-32ad-4aff-870e-c886196db4ce as: 892edfcbf04e070e104264e4b588f372450c75a2242ed3ea642f6156fec795da\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: DB query for quote response duplicate check with id ebbd328d-32ad-4aff-870e-c886196db4ce returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.576Z, [quotesmodel]: Check duplicate for quoteId ebbd328d-32ad-4aff-870e-c886196db4ce update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.582Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'ebbd328d-32ad-4aff-870e-c886196db4ce',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '13333',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.585Z, [quotesdatabase]: inserted new response duplicate check in db for quote ebbd328d-32ad-4aff-870e-c886196db4ce, quoteResponseId: 5276\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.588Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.595Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'DFSPXOF', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote ebbd328d-32ad-4aff-870e-c886196db4ce to: 'http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response to endpoint: http://fxp-mojaloop-fxp-adapter.fxp.svc.cluster.local:8000/quotes/ebbd328d-32ad-4aff-870e-c886196db4ce\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"simdfsp2\",\"FSPIOP-Destination\":\"DFSPXOF\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.599Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"13333\",\"currency\":\"XOF\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"eyJxdW90ZUlkIjoiZWJiZDMyOGQtMzJhZC00YWZmLTg3MGUtYzg4NjE5NmRiNGNlIiwidHJhbnNhY3Rpb25JZCI6Ijk2NzhhMWM2LTllZjYtNDdkZC1hMmRlLTQ0YzliMzkyMGE3YiJ9\",\"condition\":\"mVZ8slpkYoaulzBxHFZso6YGON-K4gGlhzIavldZ7D8\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5276 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743571:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13894) [response,api] http://0.0.0.0:3000: put /quotes/ebbd328d-32ad-4aff-870e-c886196db4ce {} 200 (45ms)\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: got a PUT /quotes/{id} request: { transferAmount: { amount: '20', currency: 'EUR' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFee: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommission: { amount: '1', currency: 'XOF' },\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] expiration: '2019-08-28T05:35:43.567Z',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpPacket: 'AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] condition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Received PUT quote request headers: { 'content-type': 'application/json',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] date: 'Wed, 28 Aug 2019 05:05:43 GMT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-source': 'DFSPEUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-destination': 'simdfsp1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-http-method': 'PUT',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-uri': '/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'fspiop-signature': '{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] host: 'mowbkd-quoting-service-api-adapter.casa-backend.svc.cluster.local',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'content-length': 1277,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] connection: 'close',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 'x-content-type': 'application/vnd.interoperability.quotes+json;version=1.0' }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote id : d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: quote request body : {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.631Z, [quotesmodel]: Calculated sha256 hash of quote response with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb as: b95b3304d47e192475bb712d226a2f937cc0256c5ab9ff4d3f11ffbe42a3d39b\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: DB query for quote response duplicate check with id d2b2d578-f3c5-4a26-bed7-c76eed79a5cb returned: null\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.635Z, [quotesmodel]: Check duplicate for quoteId d2b2d578-f3c5-4a26-bed7-c76eed79a5cb update returned: { isResend: false, isDuplicateId: false }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.641Z, [quotesdatabase]: inserted new quoteResponse in db: { quoteId: 'd2b2d578-f3c5-4a26-bed7-c76eed79a5cb',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmountCurrencyId: 'EUR',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] transferAmount: '20',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmountCurrencyId: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeReceiveAmount: null,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspFeeAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionCurrencyId: 'XOF',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] payeeFspCommissionAmount: '1',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] ilpCondition: 'aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg',\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] responseExpirationDate: 2019-08-28T05:35:43.567Z,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] isValid: 1,\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.643Z, [quotesdatabase]: inserted new response duplicate check in db for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb, quoteResponseId: 5277\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.646Z, [quotesdatabase]: inserted new quoteResponseIlpPacket in db: [ 0 ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesmodel]: create quote update transaction committed to db: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.654Z, [quotesdatabase]: Cache miss for getParticipantEndpoint: [ 'simdfsp1', 'FSPIOP_CALLBACK_URL' ]\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Resolved PAYER/FXP party FSPIOP_CALLBACK_URL endpoint for quote d2b2d578-f3c5-4a26-bed7-c76eed79a5cb to: 'http://mowbkd-simulators:80/simdfsp1'\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response to endpoint: http://mowbkd-simulators:80/simdfsp1/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response headers: {\"Content-Type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"Date\":\"Wed, 28 Aug 2019 05:05:43 GMT\",\"FSPIOP-Source\":\"DFSPEUR\",\"FSPIOP-Destination\":\"simdfsp1\",\"FSPIOP-HTTP-Method\":\"PUT\",\"FSPIOP-Signature\":\"{\"signature\":\"J1QoYaSEi2RrDB6CXwSOnWB_QOh3L9o1myVCl1VTv7AjGP4gTYASYn7QXeAN09bvV0bEIrZjSBygoVYE5tLJ1QlkUbeOqrAYYcnCOi76ZrRJjS3TuR0kQvMhXdHL1Cq8oFJQiqWjTrp57K_AQdKvbJytR6Ku1T52EnjiJMOqcTC3GK7P7yAwTqMxy6Goc_Vd84Y0FQir9tKivdA_cuKOhvBa0AU-6fCMxxzkpwrN4m0a2ORHHorxnHC1COPDgQ2cb7faOSwH98kjRNuXfwCuC6ZhnIJElriZdP_WiUVPlOnGKunKzkg4C1T8eaWu4JGOX8TbGiLhVJ3fmePV93uFLA\",\"protectedHeader\":\"eyJhbGciOiJSUzI1NiIsIkZTUElPUC1VUkkiOiIvcXVvdGVzL2QyYjJkNTc4LWYzYzUtNGEyNi1iZWQ3LWM3NmVlZDc5YTVjYiIsIkZTUElPUC1IVFRQLU1ldGhvZCI6IlBVVCIsIkZTUElPUC1Tb3VyY2UiOiJERlNQRVVSIiwiRlNQSU9QLURlc3RpbmF0aW9uIjoic2ltZGZzcDEiLCJEYXRlIjoiV2VkLCAyOCBBdWcgMjAxOSAwNTowNTo0MyBHTVQifQ\"}\",\"FSPIOP-URI\":\"/quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43.665Z, [quotesmodel]: Forwarding quote response body: {\"transferAmount\":{\"amount\":\"20\",\"currency\":\"EUR\"},\"payeeFspFee\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"payeeFspCommission\":{\"amount\":\"1\",\"currency\":\"XOF\"},\"expiration\":\"2019-08-28T05:35:43.567Z\",\"ilpPacket\":\"AYIC9AAAAAAAAAfQHWcuc2ltZGZzcDIubXNpc2RuLjI3NzEzODAzOTE1ggLKZXlKMGNtRnVjMkZqZEdsdmJrbGtJam9pT1RZM09HRXhZell0T1dWbU5pMDBOMlJrTFdFeVpHVXRORFJqT1dJek9USXdZVGRpSWl3aWNYVnZkR1ZKWkNJNkltVmlZbVF6TWpoa0xUTXlZV1F0TkdGbVppMDROekJsTFdNNE9EWXhPVFprWWpSalpTSXNJbkJoZVdWbElqcDdJbkJoY25SNVNXUkpibVp2SWpwN0luQmhjblI1U1dSVWVYQmxJam9pVFZOSlUwUk9JaXdpY0dGeWRIbEpaR1Z1ZEdsbWFXVnlJam9pTWpjM01UTTRNRE01TVRVaUxDSm1jM0JKWkNJNkluTnBiV1JtYzNBeUluMTlMQ0p3WVhsbGNpSTZleUp3WVhKMGVVbGtTVzVtYnlJNmV5SndZWEowZVVsa1ZIbHdaU0k2SWsxVFNWTkVUaUlzSW5CaGNuUjVTV1JsYm5ScFptbGxjaUk2SWpJM056RXpPREF6T1RBMUlpd2labk53U1dRaU9pSnphVzFrWm5Od01TSjlMQ0p3WlhKemIyNWhiRWx1Wm04aU9uc2lZMjl0Y0d4bGVFNWhiV1VpT25zaVptbHljM1JPWVcxbElqb2lUV0YwY3lJc0lteGhjM1JPWVcxbElqb2lTR0ZuYldGdUluMHNJbVJoZEdWUFprSnBjblJvSWpvaU1UazRNeTB4TUMweU5TSjlmU3dpWVcxdmRXNTBJanA3SW1GdGIzVnVkQ0k2SWpJd0lpd2lZM1Z5Y21WdVkza2lPaUpGVlZJaWZTd2lkSEpoYm5OaFkzUnBiMjVVZVhCbElqcDdJbk5qWlc1aGNtbHZJam9pVkZKQlRsTkdSVklpTENKcGJtbDBhV0YwYjNJaU9pSlFRVmxGVWlJc0ltbHVhWFJwWVhSdmNsUjVjR1VpT2lKRFQwNVRWVTFGVWlKOWZRAA\",\"condition\":\"aYpmN2ak61z4DLpS7Ps1BRhlFElyWY3WvDaCzQnpzlg\"}\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, [log,info] data: PUT quote request succeeded and returned: { quoteResponseId: 5277 }\n[mowbkd-quoting-service-api-adapter-66c8649988-dmkmr quoting-service-api-adapter] 2019-08-28T05:05:43Z, (1566968743630:mowbkd-quoting-service-api-adapter-66c8649988-dmkmr:1:jzuhhmwe:13895) [response,api] http://0.0.0.0:3000: put /quotes/d2b2d578-f3c5-4a26-bed7-c76eed79a5cb {} 200 (40ms)"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "SettlementWindows",
					"item": [
						{
							"name": "200 - ValidRequest - OpenWindowById",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a2f1dca5-e947-4482-868f-cd937d438a9f",
										"exec": [
											"//Input Variables",
											"pm.variables.set(\"iptSettlementWindowId\", \"2\");",
											"",
											"//Expected Ouput values",
											"pm.variables.set(\"optSettlementWindowId\", 2);",
											"pm.variables.set(\"optSettlementWindowState\", \"PENDING_SETTLEMENT\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4138a14e-7d8a-47cd-9725-ed1047706637",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Expected Settlement Window Id should be: \"+pm.variables.get(\"optSettlementWindowId\"), function () {",
											"    pm.expect(jsonData.settlementWindowId).to.eql(pm.variables.get(\"optSettlementWindowId\"));",
											"});",
											"",
											"pm.test(\"Expected Settlement State should be PENDING_SETTLEMENT\", function () {",
											"    pm.expect(jsonData.state).to.eql(pm.variables.get(\"optSettlementWindowState\"));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{hub_operator}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{optSettlementWindowId}}",
									"host": [
										"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
									],
									"path": [
										"settlementWindows",
										"{{optSettlementWindowId}}"
									]
								},
								"description": "Happy path test"
							},
							"response": []
						},
						{
							"name": "200 - Window- state (OPEN)-643a",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db2885ea-3f71-416e-a746-2686c0154990",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"for (var i in jsonData){",
											"    pm.test(\"Window State is OPEN\", function () {",
											"        pm.expect(jsonData[i].state).to.eql('OPEN');",
											"    });",
											"}",
											"pm.environment.set(\"openSettlementWindowId\",jsonData[0].settlementWindowId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{hub_operator}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
									"host": [
										"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
									],
									"path": [
										"settlementWindows"
									],
									"query": [
										{
											"key": "participantId",
											"value": "",
											"disabled": true
										},
										{
											"key": "state",
											"value": "OPEN",
											"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
										},
										{
											"key": "fromDateTime",
											"value": "",
											"disabled": true
										},
										{
											"key": "toDateTime",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Bad Request-CloseWindow",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e27d96d3-55b0-408b-b4c3-31922b670495",
										"exec": [
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "29287a45-9e25-4070-ab52-f79bdaf58ac7",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{hub_operator}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"state\": \"CLOSE\",\n  \"reason\": \"TESTING\"\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openSettlementWindowId}}",
									"host": [
										"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
									],
									"path": [
										"settlementWindows",
										"{{openSettlementWindowId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - param - state (SETTLED)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48f857b2-ee0b-4a53-a387-5a9549605fad",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"for (var i in jsonData){",
											"    pm.test(\"Window State is SETTLED\", function () {",
											"        pm.expect(jsonData[i].state).to.eql('SETTLED');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{hub_operator}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=SETTLED",
									"host": [
										"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
									],
									"path": [
										"settlementWindows"
									],
									"query": [
										{
											"key": "participantId",
											"value": "",
											"disabled": true
										},
										{
											"key": "state",
											"value": "SETTLED",
											"description": "Available values : OPEN, CLOSED, PENDING_SETTLEMENT, SETTLED, NOT_SETTLED"
										},
										{
											"key": "fromDateTime",
											"value": "",
											"disabled": true
										},
										{
											"key": "toDateTime",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Author: Sridevi Miriyala",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "tear_down_setup",
			"item": [
				{
					"name": "remove-un_necessary-environment-vars",
					"item": [
						{
							"name": "Sample request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2cf1f39-c14e-494c-b510-5c19c2f13e76",
										"exec": [
											"pm.environment.unset('jrsassign');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "google.com",
									"host": [
										"google",
										"com"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "5377d8d7-18f8-4809-ac1e-2666bb1dd579",
				"type": "text/javascript",
				"exec": [
					"if (pm.environment.get('WS02_OAUTH_ENABLED') === 'true') {",
					"",
					"    // Get Token for Hub Operator",
					"    let authHeader = btoa(`${pm.environment.get('HUB_OPERATOR_CONSUMER_KEY')}:${pm.environment.get('HUB_OPERATOR_CONSUMER_SECRET')}`);",
					"    let getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('HUB_OPERATOR_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"    // Get Token for Payerfsp",
					"    authHeader = btoa(`${pm.environment.get('PAYERFSP_CONSUMER_KEY')}:${pm.environment.get('PAYERFSP_CONSUMER_SECRET')}`);",
					"    getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('PAYERFSP_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"    // Get Token for Payeefsp",
					"    authHeader = btoa(`${pm.environment.get('PAYEEFSP_CONSUMER_KEY')}:${pm.environment.get('PAYEEFSP_CONSUMER_SECRET')}`);",
					"    getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('PAYEEFSP_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"    // Get Token for Testfsp1",
					"    authHeader = btoa(`${pm.environment.get('TESTFSP1_CONSUMER_KEY')}:${pm.environment.get('TESTFSP1_CONSUMER_SECRET')}`);",
					"    getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('TESTFSP1_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"    // Get Token for Testfsp2",
					"    authHeader = btoa(`${pm.environment.get('TESTFSP2_CONSUMER_KEY')}:${pm.environment.get('TESTFSP2_CONSUMER_SECRET')}`);",
					"    getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('TESTFSP2_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"    // Get Token for Testfsp3",
					"    authHeader = btoa(`${pm.environment.get('TESTFSP3_CONSUMER_KEY')}:${pm.environment.get('TESTFSP3_CONSUMER_SECRET')}`);",
					"    getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('TESTFSP3_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"    // Get Token for Testfsp4",
					"    authHeader = btoa(`${pm.environment.get('TESTFSP4_CONSUMER_KEY')}:${pm.environment.get('TESTFSP4_CONSUMER_SECRET')}`);",
					"    getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('TESTFSP4_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"    // Get Token for NoResponsePayeeFSP",
					"    authHeader = btoa(`${pm.environment.get('NORESPONSEPAYEEFSP_CONSUMER_KEY')}:${pm.environment.get('NORESPONSEPAYEEFSP_CONSUMER_SECRET')}`);",
					"    getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('NORESPONSEPAYEEFSP_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"}",
					"",
					"if(!pm.environment.get('jrsassign')) {",
					"    pm.sendRequest('http://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js', function (err, response) {",
					"        pm.environment.set('jrsassign', response.text());",
					"    });",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "8f9e6413-e0a2-491b-9d8d-c3bc08fb1a14",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}