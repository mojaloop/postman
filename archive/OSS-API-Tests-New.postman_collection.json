{
	"info": {
		"_postman_id": "c64ff7af-c8ae-4b79-8242-358d5306358d",
		"name": "OSS-API-Tests-New",
		"description": "##Author - Sridevi Miriyala\n\n##Description:\nThis section includes testing of the behavior of the API end points including Headers and body params testing for positive and negative paths.\n\nBased on API Definition.docx updated on 2018-03-13 Version 1.0. Note - The API supports a maximum size of 65536 bytes (64 Kilobytes) in the HTTP header.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Mojaloop-API",
			"item": [
				{
					"name": "participants",
					"item": [
						{
							"name": "/MSISDN/ID",
							"item": [
								{
									"name": "GET - ParticipantsByTypeAndID",
									"item": [
										{
											"name": "202",
											"item": [
												{
													"name": "202 - Accepted",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "df53ac68-44bc-4b61-9296-8857e0fe7c8d",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"",
																	"//Check data on payer side",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       ",
																	"      if(response.responseSize !== 0) { ",
																	"           ",
																	"      //Checking headers",
																	"        var headers = response.json().headers;",
																	"        pm.test(\"payerfsp fspiop-source is switch\", function () {",
																	"            pm.expect(headers['fspiop-source']).to.eql('switch');",
																	"        });",
																	"        ",
																	"        pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"            pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"        });",
																	"        ",
																	"        pm.test(\"payerfsp content-type should be application/vnd.interoperability.participants+json;version=1.0\", function () {",
																	"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.participants+json;version=1.0');",
																	"        });",
																	"        ",
																	"        pm.test(\"payerfsp accept is empty\", function () {",
																	"            pm.expect(headers['accept']).to.eql(undefined);",
																	"        });",
																	"       ",
																	"        pm.test(\"payerfsp fspiop-uri to be /participants/MSISDN/\"+pm.environment.get(\"pathfinderMSISDN\"), function () {",
																	"            pm.expect(headers['fspiop-uri']).to.eql('/participants/MSISDN/'+pm.environment.get(\"pathfinderMSISDN\"));",
																	"        });",
																	"        ",
																	"        pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"            pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"        });",
																	"        ",
																	"        //Checking data",
																	"        var jsonData = response.json().data;",
																	"      pm.test(\"Expected fspid is payeefsp \", function () {",
																	"          pm.expect(jsonData.fspId).to.eql(pm.variables.get(\"payeefsp\"));",
																	"        });",
																	"        ",
																	"        ",
																	"      } else {",
																	"          pm.test(\"Participants FAILED - payerFSP\", function () {",
																	"            throw new Error('Did not receive response');",
																	"          });",
																	"           ",
																	"      }",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "0cb60963-9178-4069-9360-82a0664a0db8",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "content-type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															},
															{
																"key": "date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "fspiop-source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "x-forwarded-for",
																"value": "",
																"type": "text",
																"disabled": true
															},
															{
																"key": "fspiop-destination",
																"value": "",
																"type": "text",
																"disabled": true
															},
															{
																"key": "fspiop-encryption",
																"value": "",
																"type": "text",
																"disabled": true
															},
															{
																"key": "fspiop-signature",
																"value": "{{fspiop-signature}}",
																"type": "text"
															},
															{
																"key": "fspiop-uri",
																"value": "/participants/MSISDN/{{pathfinderMSISDN}}",
																"type": "text"
															},
															{
																"key": "fspiop-http-method",
																"value": "GET",
																"type": "text"
															},
															{
																"key": "content-length",
																"value": "",
																"type": "text",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nURI param: MSISDN\n"
													},
													"response": []
												},
												{
													"name": "202 - Accepted - Ignore query Parameter",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "df53ac68-44bc-4b61-9296-8857e0fe7c8d",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "0cb60963-9178-4069-9360-82a0664a0db8",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "content-type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															},
															{
																"key": "date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "fspiop-source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "x-forwarded-for",
																"value": "",
																"type": "text",
																"disabled": true
															},
															{
																"key": "fspiop-destination",
																"value": "",
																"type": "text",
																"disabled": true
															},
															{
																"key": "fspiop-encryption",
																"value": "",
																"type": "text",
																"disabled": true
															},
															{
																"key": "fspiop-signature",
																"value": "{{fspiop-signature}}",
																"type": "text"
															},
															{
																"key": "fspiop-uri",
																"value": "/participants/MSISDN/{{pathfinderMSISDN}}",
																"type": "text"
															},
															{
																"key": "fspiop-http-method",
																"value": "GET",
																"type": "text"
															},
															{
																"key": "content-length",
																"value": "",
																"type": "text",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}?xyz&amount&123",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															],
															"query": [
																{
																	"key": "xyz",
																	"value": null
																},
																{
																	"key": "amount",
																	"value": null
																},
																{
																	"key": "123",
																	"value": null
																}
															]
														},
														"description": "Author: Sridevi Miriyala\n\nURI param: MSISDN\n"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "400",
											"item": [
												{
													"name": "400 - 3101 - Invalid Type - Path Parameter",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "9cf7d011-ba2b-48b2-abf4-a2ed7ae0a6e8",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "3472322e-3146-4049-a128-f281e0be340e",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Malformed syntax - 'Type' URI path parameter\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax - \\'Type\\' URI path parameter');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3101\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/XYZ/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"XYZ",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - 3101 - Malformed Header - Invalid content type",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "9cf7d011-ba2b-48b2-abf4-a2ed7ae0a6e8",
																"exec": [
																	"pm.environment.set('dateHeader', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "3b65ac8a-b8ef-4fef-b3bb-9640778e4aa4",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Malformed syntax - Invalid accept header\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax - Invalid accept header');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3101\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "xyz"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "404 - 3002 - Missing Mandatory ID",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "df53ac68-44bc-4b61-9296-8857e0fe7c8d",
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Missing mandatory ID - Unknown URI - Not Found\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unknown URI - Not Found');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3002\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3002');",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "0cb60963-9178-4069-9360-82a0664a0db8",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"pm.variables.set('participantDateHeader', (new Date()).toUTCString());",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																""
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - 3102 - Missing Mandatory Headers",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "df53ac68-44bc-4b61-9296-8857e0fe7c8d",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Missing mandatory element - date is required\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element - date is required');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3102\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "0cb60963-9178-4069-9360-82a0664a0db8",
																"exec": [
																	"pm.variables.set('expectedFspId', 'payeefsp');",
																	"pm.variables.set('participantDateHeader', (new Date()).toUTCString());",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "POST - ParticipantsByTypeAndID",
									"item": [
										{
											"name": "202",
											"item": [
												{
													"name": "202 - Created",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c11075ed-0aa5-4631-a8a4-5bbf1b7fbddb",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"{{payeefsp}}\",\n\t\"currency\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "400",
											"item": [
												{
													"name": "400 - Missing Date header Missing  - 3102",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c11075ed-0aa5-4631-a8a4-5bbf1b7fbddb",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Missing mandatory element - date is required\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element - date is required');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3102\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text",
																"disabled": true
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"{{payeefsp}}\",\n\t\"currency\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - Malformed Type - xyz - 3101",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c11075ed-0aa5-4631-a8a4-5bbf1b7fbddb",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Missing mandatory element - date is required\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax - \\'Type\\' URI path parameter');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3101\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"{{payeefsp}}\",\n\t\"currency\": \"{{currency}}\",\n\t\"currency1\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/xyz/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"xyz",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - fsiop header missing - 3102",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c11075ed-0aa5-4631-a8a4-5bbf1b7fbddb",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Missing mandatory element - fspiop-source is required\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element - fspiop-source is required');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3102\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text",
																"disabled": true
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"{{payeefsp}}\",\n\t\"currency\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - Missing content type - 3102",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c11075ed-0aa5-4631-a8a4-5bbf1b7fbddb",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Missing mandatory element - fspiop-source is required\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element - content-type is required');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3102\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"{{payeefsp}}\",\n\t\"currency\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - Malformed Syntax - accept header - 3101",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c11075ed-0aa5-4631-a8a4-5bbf1b7fbddb",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Malformed syntax - Invalid accept header\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax - Invalid accept header');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3101\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text",
																"disabled": true
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"{{payeefsp}}\",\n\t\"currency\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "406 - Invalid content type  - version -3001",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c11075ed-0aa5-4631-a8a4-5bbf1b7fbddb",
																"exec": [
																	"pm.test(\"Status code is 406\", function () {",
																	"    pm.response.to.have.status(406);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Unacceptable version requested\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unacceptable version requested');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3001\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3001');",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.1",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"{{payeefsp}}\",\n\t\"currency\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - Malformed - 3101 - Invalid Accept Header",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c11075ed-0aa5-4631-a8a4-5bbf1b7fbddb",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Malformed syntax - Invalid accept header\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax - Invalid accept header');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3101\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+xml;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"{{payeefsp}}\",\n\t\"currency\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - Invalid content type - xml",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c11075ed-0aa5-4631-a8a4-5bbf1b7fbddb",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Malformed syntax - Invalid content-type header\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax - Invalid content-type header');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3101\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+xml;version=1.0",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"{{payeefsp}}\",\n\t\"currency\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - Malformed - 3101 - Invalid FSPID > 32 char",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c11075ed-0aa5-4631-a8a4-5bbf1b7fbddb",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Malformed syntax - fspId length must be less than or equal to 32 characters long\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3101\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"123456789012345678901234567890123\",\n\t\"currency\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - Malformed Type - 3101 - Invalid FSPID - 0 in data",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c11075ed-0aa5-4631-a8a4-5bbf1b7fbddb",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Missing mandatory element  - fspId is not allowed to be empty\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3102\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.participants+json;version=1.0"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"\",\n\t\"currency\": \"{{currency}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "400 - Malformed Type - 3101/3 - extra elements in currency - BUG",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c11075ed-0aa5-4631-a8a4-5bbf1b7fbddb",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"            ",
																	"pm.test(\"Check Malformed syntax - CurrencyEnum\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
																	"});            ",
																	"            ",
																	"pm.test(\"Check Error code 3101\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.participants+json;version=1",
																"type": "text"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"type": "text"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.participants+json;version=1.0",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n\t\"fspId\": \"{{payeefsp}}\",\n\t\"currency\": \"{{currency}},GBP\"\n}"
														},
														"url": {
															"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/participants/MSISDN/{{pathfinderMSISDN}}",
															"host": [
																"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
															],
															"path": [
																"participants",
																"MSISDN",
																"{{pathfinderMSISDN}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Author: Sridevi Miriyala\n\nFolder for participants.\nParticipant is a FSP.\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5dfe9046-ff53-434f-aa92-89faa8d0fd87",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "462ee703-cad7-4da9-a007-284fcb5927f4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "quotes",
					"item": [
						{
							"name": "GET",
							"item": [
								{
									"name": "Send Quote",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													" ",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId2', generatedUUID);",
													"",
													"",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// pm.test(\"Check that Content-Type is present\", function () {",
													"//     pm.response.to.have.header(\"Content-Type\");",
													"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
													"// });",
													"",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
													"      if(response !== null) {",
													"          console.log(response.json());",
													"       pm.test(\"Response ilpPacket is not null\", function () {",
													"           pm.expect(response.json().ilpPacket).not.equal(null);",
													"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
													"       });",
													"       ",
													"       pm.test(\"Response condition is not null\", function () {",
													"           pm.expect(response.json().condition).not.equal(null);",
													"           pm.environment.set(\"condition2\", response.json().condition);",
													"       });",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('Did not receive response');",
													"           });",
													"           postman.setNextRequest(null);",
													"      }",
													"       ",
													"   });",
													"}, 3000);",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\" ,\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "QuotesByID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa07986c-5b41-42d6-9223-157fd4d99a67",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
													"     if(response.responseSize !== 0) {",
													"          console.log(response.json());",
													"       pm.test(\"Response transfer amount is valid\", function () {",
													"         //  pm.expect(response.json().ilpPacket).not.equal(null);",
													"             pm.expect(response.json().transferAmount.amount).to.eql('15');",
													"          // pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
													"       });",
													"       ",
													"       pm.test(\"Response condition is not null\", function () {",
													"           pm.expect(response.json().condition).not.equal(null);",
													"           //pm.environment.set(\"condition\", response.json().condition);",
													"       });",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('Did not receive response');",
													"           });",
													"           postman.setNextRequest(null);",
													"      }",
													"       ",
													"   });",
													"}, 3000);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}",
												"type": "text"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId2}}",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes",
												"{{quoteId2}}"
											]
										},
										"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
									},
									"response": []
								},
								{
									"name": "400-Missing Date header",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa07986c-5b41-42d6-9223-157fd4d99a67",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}"
											}
										],
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId2}}",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes",
												"{{quoteId2}}"
											]
										},
										"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
									},
									"response": []
								},
								{
									"name": "400-Missing FSPIOP-Source header",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa07986c-5b41-42d6-9223-157fd4d99a67",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"/*setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
													"      if(response !== null) {",
													"          console.log(response.json());",
													"       pm.test(\"Response transfer amount is valid\", function () {",
													"        ",
													"             pm.expect(response.json().transferAmount.amount).to.eql('15');",
													"          ",
													"       });",
													"       ",
													"       pm.test(\"Response condition is not null\", function () {",
													"           pm.expect(response.json().condition).not.equal(null);",
													"           ",
													"       });",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('Did not receive response');",
													"           });",
													"           postman.setNextRequest(null);",
													"      }",
													"       ",
													"   });",
													"}, 3000);*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}"
											}
										],
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId2}}",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes",
												"{{quoteId2}}"
											]
										},
										"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
									},
									"response": []
								},
								{
									"name": "400- Missing Accept header",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa07986c-5b41-42d6-9223-157fd4d99a67",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"/*setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
													"      if(response !== null) {",
													"          console.log(response.json());",
													"       pm.test(\"Response transfer amount is valid\", function () {",
													"        ",
													"             pm.expect(response.json().transferAmount.amount).to.eql('15');",
													"         ",
													"       });",
													"       ",
													"       pm.test(\"Response condition is not null\", function () {",
													"           pm.expect(response.json().condition).not.equal(null);",
													"          ",
													"       });",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('Did not receive response');",
													"           });",
													"           postman.setNextRequest(null);",
													"      }",
													"       ",
													"   });",
													"}, 3000);*/"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}"
											}
										],
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId2}}",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes",
												"{{quoteId2}}"
											]
										},
										"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
									},
									"response": []
								},
								{
									"name": "404-No ID in the URI",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa07986c-5b41-42d6-9223-157fd4d99a67",
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													" var jsonData = pm.response.json();",
													"",
													"pm.test(\"Error code is 3002\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3002');",
													"});",
													"",
													"pm.test(\"Error Description is Unknown URI - Not Found\", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include(\"Unknown URI - Not Found\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}"
											}
										],
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes/",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes",
												""
											]
										},
										"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
									},
									"response": []
								},
								{
									"name": "400- Malformed ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa07986c-5b41-42d6-9223-157fd4d99a67",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"            ",
													"pm.test(\"Check Malformed ID - 000000\", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
													"});            ",
													"            ",
													"pm.test(\"Check Error code 3101\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}"
											}
										],
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes/000000",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes",
												"000000"
											]
										},
										"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
									},
									"response": []
								},
								{
									"name": "400-Malformed ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa07986c-5b41-42d6-9223-157fd4d99a67",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"            ",
													"pm.test(\"Check Malformed ID - 482f5eb4-67b6-####-9737-c77b0@$4706c\", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
													"});            ",
													"            ",
													"pm.test(\"Check Error code 3101\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}"
											}
										],
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes/482f5eb4-67b6-####-9737-c77b0@$4706c",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes",
												"482f5eb4-67b6-"
											],
											"hash": "###-9737-c77b0@$4706c"
										},
										"description": "The HTTP request GET /quotes/<ID> is used to get information regarding an earlier created or requested quote. The <ID> in the URI should contain the quoteId that was used for the creation of the quote."
									},
									"response": []
								},
								{
									"name": "202- Non-existent ID-1178",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa07986c-5b41-42d6-9223-157fd4d99a67",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"",
													"// FROM API Spec: 3205 - Quote ID not found -\tProvided Quote ID was not found in the server.",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/482f5ea4-67b6-431a-9737-c77b0123706d\", function (err, response) {",
													"     if(response.responseSize === 0) {",
													"       ",
													"       pm.test(\"Response condition is null\", function () {",
													"           pm.expect(response.responseSize).equal(0);",
													"       });",
													"      ",
													"        ",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('received response');",
													"           });",
													"           postman.setNextRequest(null);",
													"      }",
													"       ",
													"   });",
													"}, 3000);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payeefsp}}"
											}
										],
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes/482f5ea4-67b6-431a-9737-c77b0123706d",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes",
												"482f5ea4-67b6-431a-9737-c77b0123706d"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "POST",
							"item": [
								{
									"name": "RC 400 - EC 3102 Missing mandatory element -  empty quote id",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													" ",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId2', generatedUUID);",
													"",
													"",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"            ",
													"pm.test(\"Check Missing mandatory element - QuoteId\", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element ');",
													"});            ",
													"            ",
													"pm.test(\"Check Error code 3102\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0",
												"type": "text"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\" ,\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "RC 406 - EC 3001 - Unacceptable version",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId2', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 406\", function () {",
													"    pm.response.to.have.status(406);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"            ",
													"pm.test(\"Check Unacceptable version requested\", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Unacceptable version requested');",
													"});            ",
													"            ",
													"pm.test(\"Check Error code 3001\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3001');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=5000"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=5000.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "Expected should be this:\r\n{\r\n    \"errorInformation\": {\r\n        \"errorCode\": \"3001\",\r\n        \"errorDescription\": \"The Client requested an unsupported version, see extension list for supported version(s).\",\r\n        \"extensionList\": [\r\n            { \"key\": \"1\", \"value\": \"0\" },\r\n            { \"key\": \"2\", \"value\": \"1\" },\r\n            { \"key\": \"4\", \"value\": \"2\" }\r\n        ]\r\n    }\r\n}"
									},
									"response": []
								},
								{
									"name": "RC 400 - EC 3101 Malformed QuoteId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId2', generatedUUID);",
													"",
													"",
													"",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"            ",
													"pm.test(\"Check Malformed syntax - Quote ID\", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
													"});            ",
													"            ",
													"pm.test(\"Check Error code 3101\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
													"});",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"@123#59\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"17\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										},
										"description": "This is the log at simulators: I see 2 error msgs in which one is appropriate \" invalid guid format quoteID\" but the other is abt transfer expirty date.. which I do not understand.\n\n[d1741-simulator-85448cd97d-jbc74] 2019-08-29T21:28:51.026Z - info: L1p-Trace-Id=undefined - Method: post Path: /payeefsp/quotes Query: {} \n[d1741-simulator-85448cd97d-jbc74] 2019-08-29T21:28:51.026Z - info: L1p-Trace-Id=undefined - Headers: {\"host\":\"dev1-simulator.mojaloop.live\",\"connection\":\"close\",\"x-request-id\":\"b3c628cbc0b801c12e0901d6a4db76b4\",\"x-real-ip\":\"10.1.2.185\",\"x-forwarded-for\":\"10.1.2.185\",\"x-forwarded-host\":\"dev1-simulator.mojaloop.live\",\"x-forwarded-port\":\"80\",\"x-forwarded-proto\":\"http\",\"x-original-uri\":\"/payeefsp/quotes\",\"x-scheme\":\"http\",\"content-length\":\"546\",\"content-type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"date\":\"Thu, 29 Aug 2019 21:28:51 GMT\",\"fspiop-source\":\"payerfsp\",\"fspiop-destination\":\"payeefsp\",\"accept\":\"application/vnd.interoperability.quotes+json;version=1\",\"user-agent\":\"node-fetch/1.0 (+https://github.com/bitinn/node-fetch)\",\"accept-encoding\":\"gzip,deflate\"} \n[d1741-simulator-85448cd97d-jbc74] 2019-08-29T21:28:51.029Z - info: L1p-Trace-Id=undefined - Response: ValidationError: child \"@ Quote Id must be in a valid GUID format. @\" fails because [\"@ Quote Id must be in a valid GUID format. @\" must be a valid GUID] \n[d1741-simulator-85448cd97d-jbc74] 2019-08-29T21:28:51.044Z - info: L1p-Trace-Id=undefined - Method: put Path: /payerfsp/quotes/@123 Query: {} \n[d1741-simulator-85448cd97d-jbc74] 2019-08-29T21:28:51.045Z - info: L1p-Trace-Id=undefined - Headers: {\"host\":\"dev1-simulator.mojaloop.live\",\"connection\":\"close\",\"x-request-id\":\"368abe999b812644e001df12752be5f8\",\"x-real-ip\":\"10.1.2.185\",\"x-forwarded-for\":\"10.1.2.185\",\"x-forwarded-host\":\"dev1-simulator.mojaloop.live\",\"x-forwarded-port\":\"80\",\"x-forwarded-proto\":\"http\",\"x-original-uri\":\"/payerfsp/quotes/@123\",\"x-scheme\":\"http\",\"content-length\":\"1727\",\"content-type\":\"application/vnd.interoperability.quotes+json;version=1.0\",\"date\":\"Thu, 29 Aug 2019 21:28:51 GMT\",\"fspiop-source\":\"switch\",\"fspiop-destination\":\"payerfsp\",\"fspiop-http-method\":\"PUT\",\"user-agent\":\"axios/0.19.0\"} \n[d1741-simulator-85448cd97d-jbc74] 2019-08-29T21:28:51.048Z - info: L1p-Trace-Id=undefined - Response: ValidationError: child \"@ A valid transfer expiry date must be supplied. @\" fails because [\"@ A valid transfer expiry date must be supplied. @\" is required]"
									},
									"response": []
								},
								{
									"name": "RC 400 - EC 3101 Malformed TransactionId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId2', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"            ",
													"pm.test(\"Check Malformed syntax - Transaction ID\", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Malformed syntax');",
													"});            ",
													"            ",
													"pm.test(\"Check Error code 3101\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"@123\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"17\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "RC 400 - Error 3101 Malformed Syntax - invalid payeePartyIdType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId2', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"var jsonData = pm.response.json();",
													"            ",
													"pm.test(\"Check Malformed syntax - PayeePartyIdTypeEnum\", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('PartyIdTypeEnum');",
													"});            ",
													"            ",
													"pm.test(\"Check Error code 3101\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"CELLNM\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"17\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "RC 400 - Error 3101 Malformed Syntax - invalid payerPartyIdType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId2', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"            ",
													"pm.test(\"Check Malformed syntax - PayerPartyIdTypeEnum\", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('PartyIdTypeEnum');",
													"});            ",
													"            ",
													"pm.test(\"Check Error code 3101\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3101');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"CELLSD\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"19\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "RC 400 - Error 3102 Missing mandatory element - QuoteId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId2', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"            ",
													"pm.test(\"Check Missing mandatory element - QuoteID\", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element');",
													"});            ",
													"            ",
													"pm.test(\"Check Error code 3102\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"17\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "RC 400 - Error 3102 Missing mandatory element - TransactionId",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId2', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"            ",
													"pm.test(\"Check Missing mandatory element - TransactionID\", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element');",
													"});            ",
													"            ",
													"pm.test(\"Check Error code 3102\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
													"});",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"17\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "RC 400 - Error 3102 Missing mandatory element - payeePartyIdType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId2', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"            ",
													"pm.test(\"Check Missing mandatory element - PartyIdTypeEnum\", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element');",
													"});            ",
													"            ",
													"pm.test(\"Check Error code 3102\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
													"});",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n     \n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"17\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "RC 400 - Error 3102 Missing mandatory element - payeePartyIdentifier",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId2', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"            ",
													"pm.test(\"Check Missing mandatory element - PartyIdTypeEnum\", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element');",
													"});            ",
													"            ",
													"pm.test(\"Check Error code 3102\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
													"});",
													"",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"18\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "RC 400 - Error 3102 Missing mandatory element - payerPartyIdType",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId2', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"            ",
													"pm.test(\"Check Missing mandatory element - PartyIdTypeEnum\", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element');",
													"});            ",
													"            ",
													"pm.test(\"Check Error code 3102\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n     \n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"19\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "RC 400 - Error 3102 Missing mandatory element - payerPartyIdentifier",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId2', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "095c973b-3b61-453c-992c-21a78b1066dc",
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"            ",
													"pm.test(\"Check Missing mandatory element - PartyIdTypeEnum\", function () {",
													"    pm.expect(jsonData.errorInformation.errorDescription).to.include('Missing mandatory element');",
													"});            ",
													"            ",
													"pm.test(\"Check Error code 3102\", function () {",
													"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3102');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId2}}\",\n  \"transactionId\": \"{{quoteId2}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n     \n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"19\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
											"host": [
												"{{HOST_QUOTING_SERVICE}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "Folder for quotes",
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala\n\nMojaloop API mainly consists of Participants, Parties, Quotes and Transfers endpoints.\nBulk transfers, transaction requests, transactions, Authorizations, Bulk quotes etc are yet to implement.\n\nThis collection includes the negative test cases of the the four endpoints that validates Headers and Input params.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "526011ca-4860-4a15-baf6-8698e6bbd3e8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "829c49e7-24b4-40e6-8f65-d11d1b6d47e3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "0471d644-a46d-4e9d-baeb-4f27fe6023c1",
				"type": "text/javascript",
				"exec": [
					"pm.environment.set('dateHeader', (new Date()).toUTCString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d652122a-fa96-4520-ae30-bb391e5d2c82",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}