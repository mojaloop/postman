{
	"info": {
		"_postman_id": "73980ef5-eacf-4e21-812d-a80cff15f396",
		"name": "mojaloop-simulator",
		"description": "##Author: Sridevi Miriyala##",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "goldenpayerfsp",
			"item": [
				{
					"name": "fsp_backend",
					"item": [
						{
							"name": "simulator_api",
							"item": [],
							"_postman_isSubFolder": true
						},
						{
							"name": "reporting_api",
							"item": [],
							"_postman_isSubFolder": true
						},
						{
							"name": "test_api",
							"item": [
								{
									"name": "/scenarios",
									"item": [
										{
											"name": "POST",
											"item": [
												{
													"name": "positive",
													"item": [
														{
															"name": "scenario - postTransfer_SEND",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c2c608b5-051f-42e8-959c-550701cbdb05",
																		"exec": [
																			"var uuid = require('uuid');",
																			"var generatedUUID = uuid.v4();",
																			"pm.environment.set('quoteId', generatedUUID);",
																			"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																			"",
																			"",
																			"pm.variables.set('transferDate', (new Date()).toUTCString());",
																			"",
																			"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
																			"",
																			"pm.variables.set('payerName', 'PayerFirst PayerLast');",
																			"pm.variables.set('payerMSISDN', '918381008987');",
																			"",
																			"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
																			"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
																			"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
																			"",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "5ec089f0-63bb-4200-807a-90ab47a1a7f2",
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(`Payer name is ${pm.variables.get('payerName')}`, function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.displayName).to.eql(pm.variables.get('payerName'));",
																			"});",
																			"pm.test(\"payer idType is MSISDN\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idType).to.eql(\"MSISDN\");",
																			"});",
																			"pm.test(\"payer idValue is 44123456789\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idValue).to.eql(pm.variables.get('payerMSISDN'));",
																			"});",
																			"",
																			"pm.test(\"Payee idType is MSISDN\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.to.idType).to.eql(\"MSISDN\");",
																			"});",
																			"",
																			"pm.test(`Payee idValue is ${pm.variables.get('goldenpayeefspReceiverMSISDN')}`, function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.idValue).to.eql(pm.variables.get('goldenpayeefspReceiverMSISDN'));",
																			"});",
																			"",
																			"pm.test(\"payee fspId is goldenpayeefsp\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.fspId).to.eql(\"goldenpayeefsp\");",
																			"});",
																			"",
																			"pm.test(\"payee First name is GoldenFirst\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.firstName).to.eql(\"GoldenFirst\");",
																			"});   ",
																			"",
																			"pm.test(\"payee Last name is GoldenLast\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.lastName).to.eql(\"GoldenLast\");",
																			"});",
																			"",
																			"pm.test(\"payee DOB is 2010-10-10\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
																			"});",
																			"",
																			"pm.test(\"amount type is SEND\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amountType).to.eql(\"SEND\");",
																			"});",
																			"",
																			"pm.test(`Currency is ${pm.environment.get('currency')}`, function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.currency).to.eql(pm.environment.get('currency'));",
																			"});",
																			"",
																			"pm.test(\"Transfer Amount is 10\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Transaction type is Transfer\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.transactionType).to.eql(\"TRANSFER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Initiator type is CONSUMER\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario1.result.initiatorType).to.eql(\"CONSUMER\");",
																			" });  ",
																			" ",
																			" pm.test(\"Note is TESTPAYMENT\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.note).to.eql(\"test payment\");",
																			"});",
																			"",
																			"// pm.test(`quote Id is ${pm.environment.get('quoteId')} `, function () {",
																			"//     var jsonData = pm.response.json();",
																			"    ",
																			"//     pm.expect(jsonData.scenario1.result.quoteResponse.quoteId).to.eql(pm.environment.get('quoteId'));",
																			"// });",
																			"",
																			"pm.test(\"transferId is ${pm.environment.get('transferId')\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.transferId).to.eql(jsonData.scenario2.result.transferId);",
																			"});",
																			"",
																			"pm.test(\"Home transaction Id is 123ABC\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.homeTransactionId).to.eql(\"123ABC\");",
																			"});",
																			"    ",
																			"pm.test(\"Current state on quote is WAITING FOR QUOTE ACCEPTANCE\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.currentState).to.eql(\"WAITING_FOR_QUOTE_ACCEPTANCE\");",
																			"});",
																			"",
																			"pm.test(\"Transfer amount is ${pm.environment.get('amount')\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Currency is ${pm.environment.get('currency')\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.currency).to.eql(pm.environment.get('currency'));",
																			"});",
																			"  ",
																			"pm.test(\"Quote response expiration is not null\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario1.result.quoteResponse.expiration).not.eql(null);",
																			"});",
																			"",
																			"pm.test(\"Qupte request ILP packet is not null\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario1.result.quoteResponse.ilpPacket).not.eql(null);",
																			"});",
																			"",
																			"pm.test(\"Quote response condition is not null\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario1.result.quoteResponse.condition).not.eql(null);",
																			"});",
																			"  ",
																			"pm.test(\"Payeefsp Fee amount is 0\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.amount).to.eql('0');",
																			"});",
																			"",
																			"pm.test(\"PayeeFSP fee currency is \", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.currency).to.eql(pm.environment.get('currency'));",
																			"});",
																			"",
																			"pm.test(\" Payeefsp Commission amount is 0\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
																			"});",
																			"",
																			"pm.test(`Currency is ${pm.environment.get('currency')}`, function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.currency).to.eql(pm.environment.get('currency'));",
																			"});",
																			"  ",
																			"// Scenario 2 tests",
																			"",
																			"pm.test(\"payer fsp nameis:${pm.environment.get('payerName')\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario2.result.from.displayName).to.eql(pm.variables.get('payerName'));",
																			"});",
																			" ",
																			"pm.test(\"IdType is MSISDN\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario2.result.from.idType).to.eql(\"MSISDN\");",
																			"});",
																			"   ",
																			"pm.test(`Payer MSISDN is ${pm.environment.get('payerMSISDN')} `, function () {",
																			"var jsonData = pm.response.json(); ",
																			"pm.expect(jsonData.scenario2.result.from.idValue).to.eql(pm.variables.get('payerMSISDN'));",
																			"});",
																			"",
																			"pm.test(\"IdType is MSISDN\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario2.result.to.idType).to.eql(\"MSISDN\");",
																			"});",
																			"",
																			"pm.test(`goldenpayeefspReceiverMSISDN Value is ${pm.environment.get('goldenpayeefspReceiverMSISDN')}`, function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario2.result.to.idValue).to.eql(pm.variables.get('goldenpayeefspReceiverMSISDN'));",
																			"});",
																			"",
																			"pm.test(\"fspId is goldenpayeefsp\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario2.result.to.fspId).to.eql(\"goldenpayeefsp\");",
																			"});",
																			"",
																			"pm.test(\"First name of the party is GoldenFirst\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario2.result.to.firstName).to.eql(\"GoldenFirst\");",
																			"});",
																			"",
																			"pm.test(\"First name of the party is GoldenLast \", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario2.result.to.lastName).to.eql(\"GoldenLast\");",
																			"});",
																			"",
																			"pm.test(\"Date of Birth of the MSISDN is 2010-10-10 \", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario2.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
																			"});",
																			"",
																			"pm.test(\"Amount-Type in Quote request is SEND\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario2.result.amountType).to.eql(\"SEND\");",
																			"})",
																			"",
																			"pm.test(` Currency in quotes is ${pm.environment.get('currency')}`, function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario2.result.currency).to.eql(pm.environment.get('currency'));",
																			"});",
																			"    ",
																			"pm.test(\" Transfer amount is 10\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario2.result.amount).to.eql(\"10\");",
																			"});",
																			"   ",
																			"pm.test(\" Transaction Type is TRANSFER\", function () {",
																			"var jsonData = pm.response.json(); ",
																			"pm.expect(jsonData.scenario2.result.transactionType).to.eql(\"TRANSFER\");",
																			"});",
																			"   ",
																			"pm.test(\"Initiator type is CONSUMER\", function () {",
																			"var jsonData = pm.response.json(); ",
																			"pm.expect(jsonData.scenario2.result.initiatorType).to.eql(\"CONSUMER\");",
																			"});",
																			"   ",
																			"pm.test(\"note is test payment\", function () {",
																			"var jsonData = pm.response.json(); ",
																			"pm.expect(jsonData.scenario2.result.note).to.eql(\"test payment\");",
																			"});",
																			"   ",
																			"pm.test(\"HomeTransactionId is 123ABC\", function () {",
																			"var jsonData = pm.response.json(); ",
																			"pm.expect(jsonData.scenario2.result.homeTransactionId).to.eql(\"123ABC\");",
																			"});",
																			"    ",
																			"pm.test(\"Current state of the transacfer is COMPLETED\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario2.result.currentState).to.eql(\"COMPLETED\");",
																			"});",
																			"  ",
																			"pm.test(\"Transfer Amount is 10\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario2.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario2.result.quoteResponse.transferAmount.currency).to.eql(pm.environment.get('currency'));",
																			"});",
																			"",
																			"pm.test(\"Quote Expiration is not Null\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario2.result.quoteResponse.expiration).not.eql(null);",
																			"});",
																			"",
																			"pm.test(\"Response ilpPacket is not null\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario2.result.quoteResponse.ilpPacket).not.eql(null);",
																			"});",
																			"",
																			"pm.test(\"Response condition is not null\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario2.result.quoteResponse.condition).not.eql(null);",
																			"});",
																			"",
																			"pm.test(\"PayeeFspFee is 0\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspFee.amount).to.eql(\"0\");",
																			"});",
																			"",
																			"pm.test(`Payeefsp fee currency is ${pm.environment.get('currency')}` , function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspFee.currency).to.eql(pm.environment.get('currency'));",
																			"});",
																			"",
																			"pm.test(\"Payeefsp commission is 0\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
																			"});",
																			"",
																			"pm.test(` Transfer currency is ${pm.environment.get('currency')}`, function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspCommission.currency).to.eql(pm.environment.get('currency'));",
																			"});",
																			"",
																			"pm.test(\"CompletedTimestamp is not empty\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario2.result.fulfil.completedTimestamp).not.eql(null);",
																			"});",
																			"",
																			"pm.test(\" transferState is COMMITTED\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario2.result.fulfil.transferState).to.eql(\"COMMITTED\");",
																			"});",
																			"",
																			"pm.test(\" Fulfilment is not empty\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario2.result.fulfil.fulfilment).not.eql(null);",
																			"",
																			"});",
																			"  ",
																			"  //Check Headers for parties endpoint on payee side",
																			"  setTimeout(function () {",
																			"  pm.sendRequest(pm.environment.get(\"GOLDENPAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"goldenpayeefspReceiverMSISDN\"), function (err, response) {",
																			"       ",
																			"      if(response.responseSize !== 0) { ",
																			"      //Checking headers",
																			"        var headers = response.json().headers;",
																			"        pm.test(\"On goldenpayeefsp fspiop-source is goldenpayerfsp\", function () {",
																			"            pm.expect(headers['fspiop-source']).to.eql('goldenpayerfsp');",
																			"        });",
																			"        ",
																			"        // pm.test(\"goldenpayeefsp fspiop-destination is goldenpayeefsp\", function () {",
																			"        //     pm.expect(headers['fspiop-destination']).to.eql('goldenpayeefsp');",
																			"        // });",
																			"        ",
																			"        pm.test(\"On goldenpayeefsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																			"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																			"        });",
																			"        ",
																			"        pm.test(\"On goldenpayeefsp accept should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																			"            pm.expect(headers['accept']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																			"        });",
																			"        ",
																			"        pm.test(\"On goldenpayeefsp date cannot be null\", function () {",
																			"            pm.expect(headers['date']).to.not.eql(undefined);",
																			"        });",
																			"        ",
																			"      } else {",
																			"          pm.test(\"Parties FAILED - payeeFSP\", function () {",
																			"            throw new Error('Did not receive response');",
																			"          });",
																			"           ",
																			"      }",
																			"      ",
																			"    });",
																			"}, 100)",
																			"",
																			"//Check Headers and data for parties endpoint on payer side",
																			"setTimeout(function () {",
																			"  pm.sendRequest(pm.environment.get(\"GOLDENPAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.variables.get(\"goldenpayeefspReceiverMSISDN\"), function (err, response) {",
																			"       ",
																			"      if(response.responseSize !== 0) { ",
																			"      //Checking headers",
																			"        var headers = response.json().headers;",
																			"        pm.test(\"On payerfsp fspiop-source is goldenpayeefsp\", function () {",
																			"            pm.expect(headers['fspiop-source']).to.eql('goldenpayeefsp');",
																			"        });",
																			"        ",
																			"        pm.test(\"On payerfsp fspiop-destination is goldenpayerfsp\", function () {",
																			"            pm.expect(headers['fspiop-destination']).to.eql('goldenpayerfsp');",
																			"        });",
																			"        ",
																			"        pm.test(\"On payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																			"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																			"        });",
																			"        ",
																			"        pm.test(\"payerfsp accept is empty\", function () {",
																			"            pm.expect(headers['accept']).to.eql(undefined);",
																			"        });",
																			"        ",
																			"        //Validate protected header inside Signature",
																			"        var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																			"        var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																			"        console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																			"        ",
																			"        // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																			"        //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
																			"        // });",
																			"        ",
																			"        pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																			"            pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																			"        });",
																			"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"goldenpayeefspReceiverMSISDN\"), function () {",
																			"            pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/'+pm.environment.get(\"goldenpayeefspReceiverMSISDN\"));",
																			"        });",
																			"        ",
																			"",
																			"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																			"            pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																			"        });",
																			"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
																			"            pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('goldenpayeefsp');",
																			"        });",
																			"        pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be goldenpayerfsp\", function () {",
																			"            pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('goldenpayerfsp');",
																			"        });",
																			"        pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																			"            pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																			"        });",
																			"       ",
																			"        pm.test(\"payerfsp FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"goldenpayeefspReceiverMSISDN\"), function () {",
																			"            pm.expect(headers['fspiop-uri']).to.eql('/parties/MSISDN/'+pm.environment.get(\"goldenpayeefspReceiverMSISDN\"));",
																			"        });",
																			"        ",
																			"        pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																			"            pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																			"        });",
																			"        ",
																			"      //Checking data",
																			"      var jsonData = response.json().data;",
																			"        pm.test(\"Expected partyIdType is MSISDN\", function () {",
																			"          pm.expect(jsonData.party.partyIdInfo.partyIdType).to.eql('MSISDN');",
																			"        });",
																			"        pm.test(\"Expected partyIdentifier is \"+pm.environment.get('goldenpayeefspReceiverMSISDN'), function () {",
																			"          pm.expect(jsonData.party.partyIdInfo.partyIdentifier).to.eql(pm.environment.get('goldenpayeefspReceiverMSISDN'));",
																			"        });",
																			"        pm.test(\"Expected fspId is goldenpayeefsp\", function () {",
																			"          pm.expect(jsonData.party.partyIdInfo.fspId).to.eql('goldenpayeefsp');",
																			"        });",
																			"        ",
																			"      pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedPayeeFirstName\"), function () {",
																			"          pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedPayeeFirstName\"));",
																			"        });",
																			"        pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedPayeeLastName\"), function () {",
																			"          pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedPayeeLastName\"));",
																			"        });",
																			"        pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedPayeeDOB\"), function () {",
																			"          pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedPayeeDOB\"));",
																			"        });  ",
																			"        ",
																			"      } else {",
																			"          pm.test(\"Parties FAILED - payerFSP\", function () {",
																			"            throw new Error('Did not receive response');",
																			"          });",
																			"        }",
																			"    });",
																			"}, 100)",
																			"",
																			"var transferID = pm.response.json().scenario1.result.transferId",
																			"//Check the request that Switch forwards to payeefsp",
																			"setTimeout(function () {",
																			"  pm.sendRequest(pm.environment.get(\"GOLDENPAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+transferID, function (err, response) {",
																			"          if(response.responseSize !== 0) {",
																			"              ",
																			"              //Check the Headers",
																			"              var headers = response.json().headers;",
																			"              ",
																			"                pm.test(\"On payeefsp fspiop-source is payerfsp\", function () {",
																			"                    pm.expect(headers['fspiop-source']).to.eql('goldenpayerfsp');",
																			"                });",
																			"                ",
																			"                pm.test(\"On payeefsp fspiop-destination is payeefsp\", function () {",
																			"                    pm.expect(headers['fspiop-destination']).to.eql('goldenpayeefsp');",
																			"                });",
																			"                ",
																			"                pm.test(\"On payeefsp content-typeis same as sent in the request\", function () {",
																			"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																			"                });",
																			"                ",
																			"                pm.test(\"On payeefsp accept is same as sent in the request\", function () {",
																			"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																			"                });",
																			"                ",
																			"                pm.test(\"On payeefsp fspiop-http-method is POST\", function () {",
																			"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
																			"                });",
																			"                ",
																			"                pm.test(\"On payeefsp fspiop-uri is /transfers\", function () {",
																			"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
																			"                });",
																			"                ",
																			"                ",
																			"                //Check the data",
																			"                var jsonData = response.json().data;",
																			"                pm.test(\"On payeefsp data should have the same transferId as request\", function () {",
																			"                  pm.expect(jsonData.transferId).to.eql(transferID);",
																			"                });",
																			"                pm.test(\"On payeefsp data should have the same payerfspId as request\", function () {",
																			"                  pm.expect(jsonData.payerFsp).to.eql('goldenpayerfsp');",
																			"                });",
																			"                pm.test(\"On payeefsp data should have the same payeefspId as request\", function () {",
																			"                  pm.expect(jsonData.payeeFsp).to.eql('goldenpayeefsp');",
																			"                });",
																			"                pm.test(\"On payeefsp data should have the same amount as request\", function () {",
																			"                  pm.expect(jsonData.amount.amount).to.eql('10');",
																			"                });",
																			"                pm.test(\"payeefsp data should have the same currency as request\", function () {",
																			"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
																			"                });",
																			"                // pm.test(\"payeefsp data should have the same expiration as request\", function () {",
																			"                //   pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
																			"                // });",
																			"                // pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
																			"                //   pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
																			"                // });",
																			"                // pm.test(\"payeefsp data should have the same condition as request\", function () {",
																			"                //   pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
																			"                // });",
																			"                ",
																			"          } else {",
																			"              pm.test(\"Transfer FAILED\", function () {",
																			"                throw new Error('Did not receive response');",
																			"              });",
																			"",
																			"          }",
																			"  });",
																			"}, 100)",
																			"",
																			"//Check the callback response that Switch forwards to payerfsp",
																			"setTimeout(function () {",
																			"  pm.sendRequest(pm.environment.get(\"GOLDENPAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+transferID, function (err, response) {",
																			"          if(response.responseSize !== 0) {",
																			"            //Checking headers",
																			"            var headers = response.json().headers;",
																			"            pm.test(\"On payerfsp fspiop-source is payeefsp\", function () {",
																			"                pm.expect(headers['fspiop-source']).to.eql('goldenpayeefsp');",
																			"            });",
																			"            ",
																			"            pm.test(\"On payerfsp fspiop-destination is payerfsp\", function () {",
																			"                pm.expect(headers['fspiop-destination']).to.eql('goldenpayerfsp');",
																			"            });",
																			"            ",
																			"            pm.test(\"On payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
																			"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																			"            });",
																			"            ",
																			"            pm.test(\"payerfsp accept is empty\", function () {",
																			"                pm.expect(headers['accept']).to.eql(undefined);",
																			"            });",
																			"            ",
																			"            // pm.test(\"fspiop-signature is returned\", function () {",
																			"            //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"payeefsp_fspiop_signature\"));",
																			"            // });",
																			"           ",
																			"            ",
																			"            pm.test(\"payerfsp fspiop-uri includes transfers\", function () {",
																			"                pm.expect(headers['fspiop-uri']).to.include('/transfers');",
																			"            });",
																			"            ",
																			"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																			"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																			"            });",
																			"            ",
																			"            var jsonData = response.json().data;",
																			"            pm.test(\"Response data does not have transferId\", function () {",
																			"              pm.expect(jsonData.transferId).to.eql(undefined);",
																			"            });",
																			"            pm.test(\"Response status is COMMITTED\", function () {",
																			"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
																			"            });",
																			"          } else {",
																			"              pm.test(\"Transfer FAILED\", function () {",
																			"                throw new Error('Did not receive response');",
																			"              });",
																			"",
																			"          }",
																			"  });",
																			"}, 100)",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/vnd.interoperability.transfers+json;version=1",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/vnd.interoperability.transfers+json;version=1.0",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Date",
																		"value": "{{transferDate}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Source",
																		"value": "{{payerfsp}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Destination",
																		"value": "{{payeefsp}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"{{payerName}}\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{payerMSISDN}}\"\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{goldenpayeefspReceiverMSISDN}}\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"10\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
																},
																"url": {
																	"raw": "{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}/scenarios",
																	"host": [
																		"{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"scenarios"
																	]
																}
															},
															"response": []
														},
														{
															"name": "scenario - postTransfer _RECEIVE (BUG)",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c2c608b5-051f-42e8-959c-550701cbdb05",
																		"exec": [
																			"var uuid = require('uuid');",
																			"var generatedUUID = uuid.v4();",
																			"pm.environment.set('quoteId', generatedUUID);",
																			"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																			"",
																			"",
																			"pm.variables.set('transferDate', (new Date()).toUTCString());",
																			"",
																			"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "5ec089f0-63bb-4200-807a-90ab47a1a7f2",
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.displayName).to.eql(\"James Bush\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idType).to.eql(\"MSISDN\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idValue).to.eql(\"44123456789\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.to.idType).to.eql(\"MSISDN\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.idValue).to.eql(\"919951935306\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.fspId).to.eql(\"goldenpayeefsp\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.firstName).to.eql(\"GoldenFirst\");",
																			"});   ",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.lastName).to.eql(\"GoldenLast\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amountType).to.eql(\"RECEIVE\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.currency).to.eql(\"XOF\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.transactionType).to.eql(\"TRANSFER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario1.result.initiatorType).to.eql(\"CONSUMER\");",
																			" });  ",
																			" ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.note).to.eql(\"test payment\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    ",
																			"    pm.expect(jsonData.scenario1.result.quoteResponse.quoteId).to.eql(jsonData.scenario2.result.quoteResponse.quoteId);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.transferId).to.eql(jsonData.scenario2.result.transferId);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.homeTransactionId).to.eql(\"123ABC\");",
																			"});",
																			"    ",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.currentState).to.eql(\"WAITING_FOR_QUOTE_ACCEPTANCE\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.currency).to.eql(\"XOF\");",
																			"});",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.expiration).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.ilpPacket).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"   pm.expect(jsonData.scenario1.result.quoteResponse.condition).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Currency is XOF\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  // Scenario 2 tests",
																			"  ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.from.displayName).to.eql(\"James Bush\");",
																			" });",
																			" ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.from.idType).to.eql(\"MSISDN\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.from.idValue).to.eql(\"44123456789\");",
																			"   });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.idType).to.eql(\"MSISDN\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.idValue).to.eql(\"919951935306\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.fspId).to.eql(\"goldenpayeefsp\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.firstName).to.eql(\"GoldenFirst\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.lastName).to.eql(\"GoldenLast\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
																			"    });",
																			"    ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.amountType).to.eql(\"RECEIVE\");",
																			"   })",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.currency).to.eql(\"XOF\");",
																			"  });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.amount).to.eql(\"10\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.transactionType).to.eql(\"TRANSFER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.initiatorType).to.eql(\"CONSUMER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.note).to.eql(\"test payment\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.homeTransactionId).to.eql(\"123ABC\");",
																			"});",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.currentState).to.eql(\"COMPLETED\");",
																			"});",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.transferAmount.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.expiration).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.ilpPacket).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.condition).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspFee.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspFee.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspCommission.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.completedTimestamp).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.transferState).to.eql(\"COMMITTED\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.fulfilment).not.eql(null);",
																			"  ",
																			"  });",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"type": "text",
																		"value": "application/vnd.interoperability.transfers+json;version=1",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"type": "text",
																		"value": "application/vnd.interoperability.transfers+json;version=1.0",
																		"disabled": true
																	},
																	{
																		"key": "Date",
																		"type": "text",
																		"value": "{{transferDate}}",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Source",
																		"type": "text",
																		"value": "{{payerfsp}}",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Destination",
																		"type": "text",
																		"value": "{{payeefsp}}",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"type": "text",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"{{payerName}}\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{payerMSISDN}}\"\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"{{goldenpayeefspReceiverMSISDN}}\"\n            },\n            \"amountType\": \"RECEIVE\",\n            \"currency\": \"{{currency}}\",\n            \"amount\": \"10\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
																},
																"url": {
																	"raw": "{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}/scenarios",
																	"host": [
																		"{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"scenarios"
																	]
																}
															},
															"response": []
														}
													],
													"_postman_isSubFolder": true
												},
												{
													"name": "negative",
													"item": [
														{
															"name": "scenario - postTransfer -missing content-type header",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c2c608b5-051f-42e8-959c-550701cbdb05",
																		"exec": [
																			"var uuid = require('uuid');",
																			"var generatedUUID = uuid.v4();",
																			"pm.environment.set('quoteId', generatedUUID);",
																			"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																			"",
																			"",
																			"pm.variables.set('transferDate', (new Date()).toUTCString());",
																			"",
																			"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "5ec089f0-63bb-4200-807a-90ab47a1a7f2",
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.message).to.include (\"Request failed validation\");",
																			"});",
																			"",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.statusCode).to.eql(\"400\");",
																			"});",
																			"",
																			" "
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"type": "text",
																		"value": "application/vnd.interoperability.transfers+json;version=1",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"type": "text",
																		"value": "application/vnd.interoperability.transfers+json;version=1.0",
																		"disabled": true
																	},
																	{
																		"key": "Date",
																		"type": "text",
																		"value": "{{transferDate}}",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Source",
																		"type": "text",
																		"value": "{{payerfsp}}",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Destination",
																		"type": "text",
																		"value": "{{payeefsp}}",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"type": "text",
																		"value": "application/json",
																		"disabled": true
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"James Bush\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"44123456789\"\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"17039811907\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"XOF\",\n            \"amount\": \"10\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
																},
																"url": {
																	"raw": "{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}/scenarios",
																	"host": [
																		"{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"scenarios"
																	]
																}
															},
															"response": []
														},
														{
															"name": "scenario - postTransfer -displaynameNOT REQUIRED",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c2c608b5-051f-42e8-959c-550701cbdb05",
																		"exec": [
																			"var uuid = require('uuid');",
																			"var generatedUUID = uuid.v4();",
																			"pm.environment.set('quoteId', generatedUUID);",
																			"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																			"",
																			"",
																			"pm.variables.set('transferDate', (new Date()).toUTCString());",
																			"",
																			"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "5ec089f0-63bb-4200-807a-90ab47a1a7f2",
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.displayName).to.eql(\"James Bush\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idType).to.eql(\"MSISDN\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idValue).to.eql(\"44123456789\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.to.idType).to.eql(\"MSISDN\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.idValue).to.eql(\"17039811907\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.fspId).to.eql(\"mojaloop-sdk\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.firstName).to.eql(\"Sridevi\");",
																			"});   ",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.lastName).to.eql(\"Miriyala\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amountType).to.eql(\"SEND\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.currency).to.eql(\"XOF\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.transactionType).to.eql(\"TRANSFER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario1.result.initiatorType).to.eql(\"CONSUMER\");",
																			" });  ",
																			" ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.note).to.eql(\"test payment\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    ",
																			"    pm.expect(jsonData.scenario1.result.quoteResponse.quoteId).to.eql(jsonData.scenario2.result.quoteResponse.quoteId);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.transferId).to.eql(jsonData.scenario2.result.transferId);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.homeTransactionId).to.eql(\"123ABC\");",
																			"});",
																			"    ",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.currentState).to.eql(\"WAITING_FOR_QUOTE_ACCEPTANCE\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.currency).to.eql(\"XOF\");",
																			"});",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.expiration).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.ilpPacket).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"   pm.expect(jsonData.scenario1.result.quoteResponse.condition).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  // Scenario 2 tests",
																			"  ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.from.displayName).to.eql(\"James Bush\");",
																			" });",
																			" ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.from.idType).to.eql(\"MSISDN\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.from.idValue).to.eql(\"44123456789\");",
																			"   });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.idType).to.eql(\"MSISDN\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.idValue).to.eql(\"17039811907\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.fspId).to.eql(\"mojaloop-sdk\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.firstName).to.eql(\"Sridevi\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.lastName).to.eql(\"Miriyala\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
																			"    });",
																			"    ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.amountType).to.eql(\"SEND\");",
																			"   })",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.currency).to.eql(\"XOF\");",
																			"  });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.amount).to.eql(\"10\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.transactionType).to.eql(\"TRANSFER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.initiatorType).to.eql(\"CONSUMER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.note).to.eql(\"test payment\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.homeTransactionId).to.eql(\"123ABC\");",
																			"});",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.currentState).to.eql(\"COMPLETED\");",
																			"});",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.transferAmount.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.expiration).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.ilpPacket).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.condition).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspFee.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspFee.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspCommission.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.completedTimestamp).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.transferState).to.eql(\"COMMITTED\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.fulfilment).not.eql(null);",
																			"  ",
																			"  });",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"type": "text",
																		"value": "application/vnd.interoperability.transfers+json;version=1",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"type": "text",
																		"value": "application/vnd.interoperability.transfers+json;version=1.0",
																		"disabled": true
																	},
																	{
																		"key": "Date",
																		"type": "text",
																		"value": "{{transferDate}}",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Source",
																		"type": "text",
																		"value": "{{payerfsp}}",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Destination",
																		"type": "text",
																		"value": "{{payeefsp}}",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"type": "text",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"44123456789\"\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"17039811907\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\":\"XOF\",\n            \"amount\": \"10\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
																},
																"url": {
																	"raw": "{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}/scenarios",
																	"host": [
																		"{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"scenarios"
																	]
																}
															},
															"response": []
														},
														{
															"name": "scenario - postTransfer -AcceptQuoteTRUE",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c2c608b5-051f-42e8-959c-550701cbdb05",
																		"exec": [
																			"var uuid = require('uuid');",
																			"var generatedUUID = uuid.v4();",
																			"pm.environment.set('quoteId', generatedUUID);",
																			"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																			"",
																			"",
																			"pm.variables.set('transferDate', (new Date()).toUTCString());",
																			"",
																			"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "5ec089f0-63bb-4200-807a-90ab47a1a7f2",
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.displayName).to.eql(\"James Bush\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idType).to.eql(\"MSISDN\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idValue).to.eql(\"44123456789\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.to.idType).to.eql(\"MSISDN\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.idValue).to.eql(\"17039811907\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.fspId).to.eql(\"mojaloop-sdk\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.firstName).to.eql(\"Sridevi\");",
																			"});   ",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.lastName).to.eql(\"Miriyala\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amountType).to.eql(\"SEND\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.currency).to.eql(\"XOF\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.transactionType).to.eql(\"TRANSFER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario1.result.initiatorType).to.eql(\"CONSUMER\");",
																			" });  ",
																			" ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.note).to.eql(\"test payment\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    ",
																			"    pm.expect(jsonData.scenario1.result.quoteResponse.quoteId).to.eql(jsonData.scenario2.result.quoteResponse.quoteId);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.transferId).to.eql(jsonData.scenario2.result.transferId);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.homeTransactionId).to.eql(\"123ABC\");",
																			"});",
																			"    ",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.currentState).to.eql(\"WAITING_FOR_QUOTE_ACCEPTANCE\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.currency).to.eql(\"XOF\");",
																			"});",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.expiration).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.ilpPacket).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"   pm.expect(jsonData.scenario1.result.quoteResponse.condition).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  // Scenario 2 tests",
																			"  ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.from.displayName).to.eql(\"James Bush\");",
																			" });",
																			" ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.from.idType).to.eql(\"MSISDN\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.from.idValue).to.eql(\"44123456789\");",
																			"   });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.idType).to.eql(\"MSISDN\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.idValue).to.eql(\"17039811907\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.fspId).to.eql(\"mojaloop-sdk\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.firstName).to.eql(\"Sridevi\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.lastName).to.eql(\"Miriyala\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
																			"    });",
																			"    ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.amountType).to.eql(\"SEND\");",
																			"   })",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.currency).to.eql(\"XOF\");",
																			"  });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.amount).to.eql(\"10\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.transactionType).to.eql(\"TRANSFER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.initiatorType).to.eql(\"CONSUMER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.note).to.eql(\"test payment\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.homeTransactionId).to.eql(\"123ABC\");",
																			"});",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.currentState).to.eql(\"COMPLETED\");",
																			"});",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.transferAmount.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.expiration).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.ilpPacket).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.condition).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspFee.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspFee.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspCommission.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.completedTimestamp).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.transferState).to.eql(\"COMMITTED\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.fulfilment).not.eql(null);",
																			"  ",
																			"  });",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"type": "text",
																		"value": "application/vnd.interoperability.transfers+json;version=1",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"type": "text",
																		"value": "application/vnd.interoperability.transfers+json;version=1.0",
																		"disabled": true
																	},
																	{
																		"key": "Date",
																		"type": "text",
																		"value": "{{transferDate}}",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Source",
																		"type": "text",
																		"value": "{{payerfsp}}",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Destination",
																		"type": "text",
																		"value": "{{payeefsp}}",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"type": "text",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"James Bush\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"44123456789\"\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"17039811907\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\":\"XOF\",\n            \"amount\": \"10\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
																},
																"url": {
																	"raw": "{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}/scenarios",
																	"host": [
																		"{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"scenarios"
																	]
																}
															},
															"response": []
														},
														{
															"name": "scenario - postTransfer -AcceptQuoteFALSE",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c2c608b5-051f-42e8-959c-550701cbdb05",
																		"exec": [
																			"var uuid = require('uuid');",
																			"var generatedUUID = uuid.v4();",
																			"pm.environment.set('quoteId', generatedUUID);",
																			"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																			"",
																			"",
																			"pm.variables.set('transferDate', (new Date()).toUTCString());",
																			"",
																			"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "5ec089f0-63bb-4200-807a-90ab47a1a7f2",
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.displayName).to.eql(\"James Bush\");",
																			"});",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"type": "text",
																		"value": "application/vnd.interoperability.transfers+json;version=1",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"type": "text",
																		"value": "application/vnd.interoperability.transfers+json;version=1.0",
																		"disabled": true
																	},
																	{
																		"key": "Date",
																		"type": "text",
																		"value": "{{transferDate}}",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Source",
																		"type": "text",
																		"value": "{{payerfsp}}",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Destination",
																		"type": "text",
																		"value": "{{payeefsp}}",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"type": "text",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"James Bush\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"44123456789\"\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"17039811907\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\":\"XOF\",\n            \"amount\": \"10\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": false\n        }\n    }\n]"
																},
																"url": {
																	"raw": "{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}/scenarios",
																	"host": [
																		"{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"scenarios"
																	]
																}
															},
															"response": []
														},
														{
															"name": "scenario - postTransfer -note (>128 LENGTH)",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c2c608b5-051f-42e8-959c-550701cbdb05",
																		"exec": [
																			"var uuid = require('uuid');",
																			"var generatedUUID = uuid.v4();",
																			"pm.environment.set('quoteId', generatedUUID);",
																			"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																			"",
																			"",
																			"pm.variables.set('transferDate', (new Date()).toUTCString());",
																			"",
																			"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "5ec089f0-63bb-4200-807a-90ab47a1a7f2",
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.displayName).to.eql(\"James Bush\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idType).to.eql(\"MSISDN\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idValue).to.eql(\"44123456789\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.to.idType).to.eql(\"MSISDN\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.idValue).to.eql(\"17039811907\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.fspId).to.eql(\"mojaloop-sdk\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.firstName).to.eql(\"Sridevi\");",
																			"});   ",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.lastName).to.eql(\"Miriyala\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amountType).to.eql(\"SEND\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.currency).to.eql(\"XOF\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.transactionType).to.eql(\"TRANSFER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario1.result.initiatorType).to.eql(\"CONSUMER\");",
																			" });  ",
																			" ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.note).to.eql(\"test payment\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    ",
																			"    pm.expect(jsonData.scenario1.result.quoteResponse.quoteId).to.eql(jsonData.scenario2.result.quoteResponse.quoteId);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.transferId).to.eql(jsonData.scenario2.result.transferId);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.homeTransactionId).to.eql(\"123ABC\");",
																			"});",
																			"    ",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.currentState).to.eql(\"WAITING_FOR_QUOTE_ACCEPTANCE\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.currency).to.eql(\"XOF\");",
																			"});",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.expiration).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.ilpPacket).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"   pm.expect(jsonData.scenario1.result.quoteResponse.condition).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  // Scenario 2 tests",
																			"  ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.from.displayName).to.eql(\"James Bush\");",
																			" });",
																			" ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.from.idType).to.eql(\"MSISDN\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.from.idValue).to.eql(\"44123456789\");",
																			"   });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.idType).to.eql(\"MSISDN\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.idValue).to.eql(\"17039811907\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.fspId).to.eql(\"mojaloop-sdk\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.firstName).to.eql(\"Sridevi\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.lastName).to.eql(\"Miriyala\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
																			"    });",
																			"    ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.amountType).to.eql(\"SEND\");",
																			"   })",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.currency).to.eql(\"XOF\");",
																			"  });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.amount).to.eql(\"10\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.transactionType).to.eql(\"TRANSFER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.initiatorType).to.eql(\"CONSUMER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.note).to.eql(\"test payment\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.homeTransactionId).to.eql(\"123ABC\");",
																			"});",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.currentState).to.eql(\"COMPLETED\");",
																			"});",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.transferAmount.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.expiration).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.ilpPacket).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.condition).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspFee.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspFee.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspCommission.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.completedTimestamp).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.transferState).to.eql(\"COMMITTED\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.fulfilment).not.eql(null);",
																			"  ",
																			"  });",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"type": "text",
																		"value": "application/vnd.interoperability.transfers+json;version=1",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"type": "text",
																		"value": "application/vnd.interoperability.transfers+json;version=1.0",
																		"disabled": true
																	},
																	{
																		"key": "Date",
																		"type": "text",
																		"value": "{{transferDate}}",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Source",
																		"type": "text",
																		"value": "{{payerfsp}}",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Destination",
																		"type": "text",
																		"value": "{{payeefsp}}",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"type": "text",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"James Bush\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"44123456789\"\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"17039811907\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\":\"XOF\",\n            \"amount\": \"10\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment FOR THE POST /SCENARIOS. IF THIS FAILS, YOUR TRANSACTION IS A FAIL, OR ITS A SUCCESS. TRANSFER FROM JAMES TO GOLDEN PAYEE.1234567890-QWERTYUIOPASDFGHJKL;ZXCVBNM,.\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
																},
																"url": {
																	"raw": "{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}/scenarios",
																	"host": [
																		"{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"scenarios"
																	]
																}
															},
															"response": []
														},
														{
															"name": "scenario - postTransfer-malformed-transferId-scenario2",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c2c608b5-051f-42e8-959c-550701cbdb05",
																		"exec": [
																			"var uuid = require('uuid');",
																			"var generatedUUID = uuid.v4();",
																			"pm.environment.set('quoteId', generatedUUID);",
																			"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																			"",
																			"",
																			"pm.variables.set('transferDate', (new Date()).toUTCString());",
																			"",
																			"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "5ec089f0-63bb-4200-807a-90ab47a1a7f2",
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.displayName).to.eql(\"James Bush\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idType).to.eql(\"MSISDN\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idValue).to.eql(\"44123456789\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.to.idType).to.eql(\"MSISDN\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.idValue).to.eql(\"17039811907\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.fspId).to.eql(\"mojaloop-sdk\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.firstName).to.eql(\"Sridevi\");",
																			"});   ",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.lastName).to.eql(\"Miriyala\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amountType).to.eql(\"SEND\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.currency).to.eql(\"XOF\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.transactionType).to.eql(\"TRANSFER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario1.result.initiatorType).to.eql(\"CONSUMER\");",
																			" });  ",
																			" ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.note).to.eql(\"test payment\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    ",
																			"    pm.expect(jsonData.scenario1.result.quoteResponse.quoteId).to.eql(jsonData.scenario2.result.quoteResponse.quoteId);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.transferId).to.eql(jsonData.scenario2.result.transferId);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.homeTransactionId).to.eql(\"123ABC\");",
																			"});",
																			"    ",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.currentState).to.eql(\"WAITING_FOR_QUOTE_ACCEPTANCE\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.currency).to.eql(\"XOF\");",
																			"});",
																			"  ",
																			"pm.test(\"Response validation\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario1.result.quoteResponse.expiration).not.eql(null);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario1.result.quoteResponse.ilpPacket).not.eql(null);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario1.result.quoteResponse.condition).not.eql(null);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.amount).to.eql(0);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.currency).to.eql(\"XOF\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"var jsonData = pm.response.json();",
																			"pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.currency).to.eql(\"XOF\");",
																			"});",
																			"  ",
																			"  // Scenario 2 tests",
																			"  ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.message).to.eql(\"should match pattern ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\");",
																			" });",
																			" ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.statusCode).to.eql(\"400\");",
																			"});",
																			"   ",
																			"",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/vnd.interoperability.transfers+json;version=1",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/vnd.interoperability.transfers+json;version=1.0",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Date",
																		"value": "{{transferDate}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Source",
																		"value": "{{payerfsp}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Destination",
																		"value": "{{payeefsp}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"James Bush\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"44123456789\"\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"17039811907\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"XOF\",\n            \"amount\": \"10\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"d89b0b64-4fdc-4241-b6f7-5103255dd55\"\n        },\n        \"body\": {\n            \"acceptQuote\": \"false\"\n        }\n    }\n]"
																},
																"url": {
																	"raw": "{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}/scenarios",
																	"host": [
																		"{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"scenarios"
																	]
																}
															},
															"response": []
														},
														{
															"name": "scenario - postTransfer -malformed amount",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c2c608b5-051f-42e8-959c-550701cbdb05",
																		"exec": [
																			"var uuid = require('uuid');",
																			"var generatedUUID = uuid.v4();",
																			"pm.environment.set('quoteId', generatedUUID);",
																			"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																			"",
																			"",
																			"pm.variables.set('transferDate', (new Date()).toUTCString());",
																			"",
																			"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "5ec089f0-63bb-4200-807a-90ab47a1a7f2",
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.displayName).to.eql(\"James Bush\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idType).to.eql(\"MSISDN\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idValue).to.eql(\"44123456789\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.to.idType).to.eql(\"MSISDN\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.idValue).to.eql(\"17039811907\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.fspId).to.eql(\"mojaloop-sdk\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.firstName).to.eql(\"Sridevi\");",
																			"});   ",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.lastName).to.eql(\"Miriyala\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amountType).to.eql(\"SEND\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.currency).to.eql(\"XOF\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.transactionType).to.eql(\"TRANSFER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario1.result.initiatorType).to.eql(\"CONSUMER\");",
																			" });  ",
																			" ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.note).to.eql(\"test payment\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    ",
																			"    pm.expect(jsonData.scenario1.result.quoteResponse.quoteId).to.eql(jsonData.scenario2.result.quoteResponse.quoteId);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.transferId).to.eql(jsonData.scenario2.result.transferId);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.homeTransactionId).to.eql(\"123ABC\");",
																			"});",
																			"    ",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.currentState).to.eql(\"WAITING_FOR_QUOTE_ACCEPTANCE\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.currency).to.eql(\"XOF\");",
																			"});",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.expiration).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.ilpPacket).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"   pm.expect(jsonData.scenario1.result.quoteResponse.condition).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  // Scenario 2 tests",
																			"  ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.from.displayName).to.eql(\"James Bush\");",
																			" });",
																			" ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.from.idType).to.eql(\"MSISDN\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.from.idValue).to.eql(\"44123456789\");",
																			"   });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.idType).to.eql(\"MSISDN\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.idValue).to.eql(\"17039811907\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.fspId).to.eql(\"mojaloop-sdk\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.firstName).to.eql(\"Sridevi\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.lastName).to.eql(\"Miriyala\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
																			"    });",
																			"    ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.amountType).to.eql(\"SEND\");",
																			"   })",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.currency).to.eql(\"XOF\");",
																			"  });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.amount).to.eql(\"10\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.transactionType).to.eql(\"TRANSFER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.initiatorType).to.eql(\"CONSUMER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.note).to.eql(\"test payment\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.homeTransactionId).to.eql(\"123ABC\");",
																			"});",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.currentState).to.eql(\"COMPLETED\");",
																			"});",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.transferAmount.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.expiration).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.ilpPacket).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.condition).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspFee.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspFee.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspCommission.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.completedTimestamp).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.transferState).to.eql(\"COMMITTED\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.fulfilment).not.eql(null);",
																			"  ",
																			"  });",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/vnd.interoperability.transfers+json;version=1",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/vnd.interoperability.transfers+json;version=1.0",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Date",
																		"value": "{{transferDate}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Source",
																		"value": "{{payerfsp}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Destination",
																		"value": "{{payeefsp}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"James Bush\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"44123456789\"\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"17039811907\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"XOF\",\n            \"amount\": \"-10.\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
																},
																"url": {
																	"raw": "{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}/scenarios",
																	"host": [
																		"{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"scenarios"
																	]
																}
															},
															"response": []
														},
														{
															"name": "scenario - postTransfer-missing transaction type",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c2c608b5-051f-42e8-959c-550701cbdb05",
																		"exec": [
																			"var uuid = require('uuid');",
																			"var generatedUUID = uuid.v4();",
																			"pm.environment.set('quoteId', generatedUUID);",
																			"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																			"",
																			"",
																			"pm.variables.set('transferDate', (new Date()).toUTCString());",
																			"",
																			"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "5ec089f0-63bb-4200-807a-90ab47a1a7f2",
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.message).to.eql(\"should be equal to one of the allowed values\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.message).to.eql(\"should be equal to one of the allowed values\");",
																			"});",
																			"",
																			"",
																			"",
																			"",
																			"   ",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/vnd.interoperability.transfers+json;version=1",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/vnd.interoperability.transfers+json;version=1.0",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Date",
																		"value": "{{transferDate}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Source",
																		"value": "{{payerfsp}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Destination",
																		"value": "{{payeefsp}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"James Bush\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"44123456789\"\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"17039811907\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"XOF\",\n            \"amount\": \"10\",\n            \"transactionType\": \"\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
																},
																"url": {
																	"raw": "{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}/scenarios",
																	"host": [
																		"{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"scenarios"
																	]
																}
															},
															"response": []
														},
														{
															"name": "scenario - postTransfer - BlockTransfer",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c2c608b5-051f-42e8-959c-550701cbdb05",
																		"exec": [
																			"var uuid = require('uuid');",
																			"var generatedUUID = uuid.v4();",
																			"pm.environment.set('quoteId', generatedUUID);",
																			"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																			"",
																			"",
																			"pm.variables.set('transferDate', (new Date()).toUTCString());",
																			"",
																			"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "5ec089f0-63bb-4200-807a-90ab47a1a7f2",
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.displayName).to.eql(\"James Bush\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idType).to.eql(\"MSISDN\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idValue).to.eql(\"44123456789\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.to.idType).to.eql(\"MSISDN\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.idValue).to.eql(\"17039811907\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.fspId).to.eql(\"mojaloop-sdk\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.firstName).to.eql(\"Sridevi\");",
																			"});   ",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.lastName).to.eql(\"Miriyala\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amountType).to.eql(\"SEND\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.currency).to.eql(\"XOF\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amount).to.eql(\"100\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.transactionType).to.eql(\"TRANSFER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario1.result.initiatorType).to.eql(\"CONSUMER\");",
																			" });  ",
																			" ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.note).to.eql(\"test payment\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    ",
																			"    pm.expect(jsonData.scenario1.result.quoteResponse.quoteId).to.eql(jsonData.scenario2.result.quoteResponse.quoteId);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.transferId).to.eql(jsonData.scenario2.result.transferId);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.homeTransactionId).to.eql(\"123ABC\");",
																			"});",
																			"    ",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.currentState).to.eql(\"WAITING_FOR_QUOTE_ACCEPTANCE\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.amount).to.eql(\"100\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.currency).to.eql(\"XOF\");",
																			"});",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.expiration).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.ilpPacket).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"   pm.expect(jsonData.scenario1.result.quoteResponse.condition).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  // Scenario 2 tests",
																			"  ",
																			"",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.transferState.lastError).to.eql(\"Got an error response preparing transfer: { type: 'transferError',\\n  data: \\n   { errorInformation: \\n      { errorCode: '4001',\\n        errorDescription: 'Payer FSP insufficient liquidity' } } }\");",
																			"  });",
																			"  ",
																			"  ",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/vnd.interoperability.transfers+json;version=1",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/vnd.interoperability.transfers+json;version=1.0",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Date",
																		"value": "{{transferDate}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Source",
																		"value": "{{payerfsp}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Destination",
																		"value": "{{payeefsp}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"James Bush\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"44123456789\"\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"17039811907\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"XOF\",\n            \"amount\": \"100\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
																},
																"url": {
																	"raw": "{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}/scenarios",
																	"host": [
																		"{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"scenarios"
																	]
																},
																"description": "As per rules engine... if we choose the transfers amount between 100-150, it gives payerfsp has insufficient liquidity, which is block transfer case."
															},
															"response": []
														},
														{
															"name": "scenario - postTransfer-unsupported operation.scenario2",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c2c608b5-051f-42e8-959c-550701cbdb05",
																		"exec": [
																			"var uuid = require('uuid');",
																			"var generatedUUID = uuid.v4();",
																			"pm.environment.set('quoteId', generatedUUID);",
																			"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																			"",
																			"",
																			"pm.variables.set('transferDate', (new Date()).toUTCString());",
																			"",
																			"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "5ec089f0-63bb-4200-807a-90ab47a1a7f2",
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.displayName).to.eql(\"James Bush\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idType).to.eql(\"MSISDN\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idValue).to.eql(\"44123456789\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.to.idType).to.eql(\"MSISDN\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.idValue).to.eql(\"17039811907\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.fspId).to.eql(\"mojaloop-sdk\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.firstName).to.eql(\"Sridevi\");",
																			"});   ",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.lastName).to.eql(\"Miriyala\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amountType).to.eql(\"SEND\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.currency).to.eql(\"XOF\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.transactionType).to.eql(\"TRANSFER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario1.result.initiatorType).to.eql(\"CONSUMER\");",
																			" });  ",
																			" ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.note).to.eql(\"test payment\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    ",
																			"    pm.expect(jsonData.scenario1.result.quoteResponse.quoteId).to.eql(jsonData.scenario2.result.quoteResponse.quoteId);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.transferId).to.eql(jsonData.scenario2.result.transferId);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.homeTransactionId).to.eql(\"123ABC\");",
																			"});",
																			"    ",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.currentState).to.eql(\"WAITING_FOR_QUOTE_ACCEPTANCE\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.currency).to.eql(\"XOF\");",
																			"});",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.expiration).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.ilpPacket).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"   pm.expect(jsonData.scenario1.result.quoteResponse.condition).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  // Scenario 2 tests",
																			"  ",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.error).to.eql(\"unsupported operation\");",
																			" });",
																			" ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.statusCode).to.eql(\"400\");",
																			"});",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/vnd.interoperability.transfers+json;version=1",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/vnd.interoperability.transfers+json;version=1.0",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Date",
																		"value": "{{transferDate}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Source",
																		"value": "{{payerfsp}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Destination",
																		"value": "{{payeefsp}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"James Bush\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"44123456789\"\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"17039811907\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"XOF\",\n            \"amount\": \"10\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"DELETE\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
																},
																"url": {
																	"raw": "{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}/scenarios",
																	"host": [
																		"{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"scenarios"
																	]
																}
															},
															"response": []
														},
														{
															"name": "scenario - postTransfer- Missing MSISDN",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c2c608b5-051f-42e8-959c-550701cbdb05",
																		"exec": [
																			"var uuid = require('uuid');",
																			"var generatedUUID = uuid.v4();",
																			"pm.environment.set('quoteId', generatedUUID);",
																			"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																			"",
																			"",
																			"pm.variables.set('transferDate', (new Date()).toUTCString());",
																			"",
																			"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "5ec089f0-63bb-4200-807a-90ab47a1a7f2",
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.displayName).to.eql(\"James Bush\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idType).to.eql(\"MSISDN\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idValue).to.eql(\"44123456789\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.to.idType).to.eql(\"MSISDN\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.idValue).to.eql(\"17039811907\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.fspId).to.eql(\"mojaloop-sdk\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.firstName).to.eql(\"Sridevi\");",
																			"});   ",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.lastName).to.eql(\"Miriyala\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amountType).to.eql(\"SEND\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.currency).to.eql(\"XOF\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.transactionType).to.eql(\"TRANSFER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario1.result.initiatorType).to.eql(\"CONSUMER\");",
																			" });  ",
																			" ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.note).to.eql(\"test payment\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    ",
																			"    pm.expect(jsonData.scenario1.result.quoteResponse.quoteId).to.eql(jsonData.scenario2.result.quoteResponse.quoteId);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.transferId).to.eql(jsonData.scenario2.result.transferId);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.homeTransactionId).to.eql(\"123ABC\");",
																			"});",
																			"    ",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.currentState).to.eql(\"WAITING_FOR_QUOTE_ACCEPTANCE\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.currency).to.eql(\"XOF\");",
																			"});",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.expiration).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.ilpPacket).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"   pm.expect(jsonData.scenario1.result.quoteResponse.condition).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  // Scenario 2 tests",
																			"  ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.from.displayName).to.eql(\"James Bush\");",
																			" });",
																			" ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.from.idType).to.eql(\"MSISDN\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.from.idValue).to.eql(\"44123456789\");",
																			"   });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.idType).to.eql(\"MSISDN\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.idValue).to.eql(\"17039811907\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.fspId).to.eql(\"mojaloop-sdk\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.firstName).to.eql(\"Sridevi\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.lastName).to.eql(\"Miriyala\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
																			"    });",
																			"    ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.amountType).to.eql(\"SEND\");",
																			"   })",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.currency).to.eql(\"XOF\");",
																			"  });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.amount).to.eql(\"10\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.transactionType).to.eql(\"TRANSFER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.initiatorType).to.eql(\"CONSUMER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.note).to.eql(\"test payment\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.homeTransactionId).to.eql(\"123ABC\");",
																			"});",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.currentState).to.eql(\"COMPLETED\");",
																			"});",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.transferAmount.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.expiration).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.ilpPacket).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.condition).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspFee.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspFee.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspCommission.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.completedTimestamp).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.transferState).to.eql(\"COMMITTED\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.fulfilment).not.eql(null);",
																			"  ",
																			"  });",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"type": "text",
																		"value": "application/vnd.interoperability.transfers+json;version=1",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"type": "text",
																		"value": "application/vnd.interoperability.transfers+json;version=1.0",
																		"disabled": true
																	},
																	{
																		"key": "Date",
																		"type": "text",
																		"value": "{{transferDate}}",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Source",
																		"type": "text",
																		"value": "{{payerfsp}}",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Destination",
																		"type": "text",
																		"value": "{{payeefsp}}",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"type": "text",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"James Bush\",\n                \"idType\": \"\",\n                \"idValue\": \"44123456789\"\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"17039811907\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"XOF\",\n            \"amount\": \"10\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
																},
																"url": {
																	"raw": "{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}/scenarios",
																	"host": [
																		"{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"scenarios"
																	]
																}
															},
															"response": []
														},
														{
															"name": "scenario - postTransfer-from idValue missing",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c2c608b5-051f-42e8-959c-550701cbdb05",
																		"exec": [
																			"var uuid = require('uuid');",
																			"var generatedUUID = uuid.v4();",
																			"pm.environment.set('quoteId', generatedUUID);",
																			"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																			"",
																			"",
																			"pm.variables.set('transferDate', (new Date()).toUTCString());",
																			"",
																			"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "5ec089f0-63bb-4200-807a-90ab47a1a7f2",
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.displayName).to.eql(\"James Bush\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idType).to.eql(\"MSISDN\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idValue).to.eql(\"44123456789\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.to.idType).to.eql(\"MSISDN\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.idValue).to.eql(\"17039811907\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.fspId).to.eql(\"mojaloop-sdk\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.firstName).to.eql(\"Sridevi\");",
																			"});   ",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.lastName).to.eql(\"Miriyala\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amountType).to.eql(\"SEND\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.currency).to.eql(\"XOF\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.transactionType).to.eql(\"TRANSFER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario1.result.initiatorType).to.eql(\"CONSUMER\");",
																			" });  ",
																			" ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.note).to.eql(\"test payment\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    ",
																			"    pm.expect(jsonData.scenario1.result.quoteResponse.quoteId).to.eql(jsonData.scenario2.result.quoteResponse.quoteId);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.transferId).to.eql(jsonData.scenario2.result.transferId);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.homeTransactionId).to.eql(\"123ABC\");",
																			"});",
																			"    ",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.currentState).to.eql(\"WAITING_FOR_QUOTE_ACCEPTANCE\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.currency).to.eql(\"XOF\");",
																			"});",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.expiration).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.ilpPacket).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"   pm.expect(jsonData.scenario1.result.quoteResponse.condition).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  // Scenario 2 tests",
																			"  ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.from.displayName).to.eql(\"James Bush\");",
																			" });",
																			" ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.from.idType).to.eql(\"MSISDN\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.from.idValue).to.eql(\"44123456789\");",
																			"   });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.idType).to.eql(\"MSISDN\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.idValue).to.eql(\"17039811907\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.fspId).to.eql(\"mojaloop-sdk\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.firstName).to.eql(\"Sridevi\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.lastName).to.eql(\"Miriyala\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
																			"    });",
																			"    ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.amountType).to.eql(\"SEND\");",
																			"   })",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.currency).to.eql(\"XOF\");",
																			"  });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.amount).to.eql(\"10\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.transactionType).to.eql(\"TRANSFER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.initiatorType).to.eql(\"CONSUMER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.note).to.eql(\"test payment\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.homeTransactionId).to.eql(\"123ABC\");",
																			"});",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.currentState).to.eql(\"COMPLETED\");",
																			"});",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.transferAmount.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.expiration).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.ilpPacket).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.condition).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspFee.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspFee.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspCommission.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.completedTimestamp).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.transferState).to.eql(\"COMMITTED\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.fulfilment).not.eql(null);",
																			"  ",
																			"  });",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/vnd.interoperability.transfers+json;version=1",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/vnd.interoperability.transfers+json;version=1.0",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Date",
																		"value": "{{transferDate}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Source",
																		"value": "{{payerfsp}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Destination",
																		"value": "{{payeefsp}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\":\"\" ,\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"\"\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"17039811907\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"XOF\",\n            \"amount\": \"10\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
																},
																"url": {
																	"raw": "{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}/scenarios",
																	"host": [
																		"{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"scenarios"
																	]
																}
															},
															"response": []
														},
														{
															"name": "scenario - postTransfer -ID not found",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c2c608b5-051f-42e8-959c-550701cbdb05",
																		"exec": [
																			"var uuid = require('uuid');",
																			"var generatedUUID = uuid.v4();",
																			"pm.environment.set('quoteId', generatedUUID);",
																			"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																			"",
																			"",
																			"pm.variables.set('transferDate', (new Date()).toUTCString());",
																			"",
																			"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "5ec089f0-63bb-4200-807a-90ab47a1a7f2",
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"error message is Provided ID is not found\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.message).to.include(\"ID not found\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/vnd.interoperability.transfers+json;version=1",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/vnd.interoperability.transfers+json;version=1.0",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Date",
																		"value": "{{transferDate}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Source",
																		"value": "{{payerfsp}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Destination",
																		"value": "{{payeefsp}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"James Bush\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"44123456789\"\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"170398119073\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"XOF\",\n            \"amount\": \"10\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": false\n        }\n    }\n]"
																},
																"url": {
																	"raw": "{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}/scenarios",
																	"host": [
																		"{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"scenarios"
																	]
																}
															},
															"response": []
														},
														{
															"name": "scenario - postTransfer -FSP not found",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c2c608b5-051f-42e8-959c-550701cbdb05",
																		"exec": [
																			"var uuid = require('uuid');",
																			"var generatedUUID = uuid.v4();",
																			"pm.environment.set('quoteId', generatedUUID);",
																			"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																			"",
																			"",
																			"pm.variables.set('transferDate', (new Date()).toUTCString());",
																			"",
																			"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "5ec089f0-63bb-4200-807a-90ab47a1a7f2",
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"error message is Provided FSP is not found\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.message).to.include(\"FSP not found\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"type": "text",
																		"value": "application/vnd.interoperability.transfers+json;version=1",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"type": "text",
																		"value": "application/vnd.interoperability.transfers+json;version=1.0",
																		"disabled": true
																	},
																	{
																		"key": "Date",
																		"type": "text",
																		"value": "{{transferDate}}",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Source",
																		"type": "text",
																		"value": "{{payerfsp}}",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Destination",
																		"type": "text",
																		"value": "{{payeefsp}}",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"type": "text",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"James Bush\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"44123456789\"\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"170398119073\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"XOF\",\n            \"amount\": \"10\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": false\n        }\n    }\n]"
																},
																"url": {
																	"raw": "{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}/scenarios",
																	"host": [
																		"{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"scenarios"
																	]
																},
																"description": "In local,It requires a totally different set up, which is changing the peer endpoint to a different FSP that doesnot exist. This can not be run as part of scenarios file in automation."
															},
															"response": []
														},
														{
															"name": "scenario - postTransfer - amountType-RECEIVE",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c2c608b5-051f-42e8-959c-550701cbdb05",
																		"exec": [
																			"var uuid = require('uuid');",
																			"var generatedUUID = uuid.v4();",
																			"pm.environment.set('quoteId', generatedUUID);",
																			"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																			"",
																			"",
																			"pm.variables.set('transferDate', (new Date()).toUTCString());",
																			"",
																			"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "5ec089f0-63bb-4200-807a-90ab47a1a7f2",
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.displayName).to.eql(\"James Bush\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idType).to.eql(\"MSISDN\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idValue).to.eql(\"44123456789\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.to.idType).to.eql(\"MSISDN\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.idValue).to.eql(\"17039811907\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.fspId).to.eql(\"mojaloop-sdk\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.firstName).to.eql(\"Sridevi\");",
																			"});   ",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.lastName).to.eql(\"Miriyala\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amountType).to.eql(\"RECEIVE\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.currency).to.eql(\"XOF\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.transactionType).to.eql(\"TRANSFER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario1.result.initiatorType).to.eql(\"CONSUMER\");",
																			" });  ",
																			" ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.note).to.eql(\"test payment\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    ",
																			"    pm.expect(jsonData.scenario1.result.quoteResponse.quoteId).to.eql(jsonData.scenario2.result.quoteResponse.quoteId);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.transferId).to.eql(jsonData.scenario2.result.transferId);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.homeTransactionId).to.eql(\"123ABC\");",
																			"});",
																			"    ",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.currentState).to.eql(\"WAITING_FOR_QUOTE_ACCEPTANCE\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.currency).to.eql(\"XOF\");",
																			"});",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.expiration).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.ilpPacket).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"   pm.expect(jsonData.scenario1.result.quoteResponse.condition).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  // Scenario 2 tests",
																			"  ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.from.displayName).to.eql(\"James Bush\");",
																			" });",
																			" ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.from.idType).to.eql(\"MSISDN\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.from.idValue).to.eql(\"44123456789\");",
																			"   });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.idType).to.eql(\"MSISDN\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.idValue).to.eql(\"17039811907\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.fspId).to.eql(\"mojaloop-sdk\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.firstName).to.eql(\"Sridevi\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.lastName).to.eql(\"Miriyala\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
																			"    });",
																			"    ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.amountType).to.eql(\"RECEIVE\");",
																			"   })",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.currency).to.eql(\"XOF\");",
																			"  });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.amount).to.eql(\"10\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.transactionType).to.eql(\"TRANSFER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.initiatorType).to.eql(\"CONSUMER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.note).to.eql(\"test payment\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.homeTransactionId).to.eql(\"123ABC\");",
																			"});",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.currentState).to.eql(\"COMPLETED\");",
																			"});",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.transferAmount.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.expiration).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.ilpPacket).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.condition).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspFee.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspFee.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspCommission.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.completedTimestamp).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.transferState).to.eql(\"COMMITTED\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.fulfilment).not.eql(null);",
																			"  ",
																			"  });",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/vnd.interoperability.transfers+json;version=1",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/vnd.interoperability.transfers+json;version=1.0",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Date",
																		"value": "{{transferDate}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Source",
																		"value": "{{payerfsp}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Destination",
																		"value": "{{payeefsp}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"James Bush\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"44123456789\"\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"17039811907\"\n            },\n            \"amountType\": \"RECEIVE\",\n            \"currency\": \"XOF\",\n            \"amount\": \"10\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
																},
																"url": {
																	"raw": "{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}/scenarios",
																	"host": [
																		"{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"scenarios"
																	]
																}
															},
															"response": []
														},
														{
															"name": "scenario - postTransfer -malformed currency",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c2c608b5-051f-42e8-959c-550701cbdb05",
																		"exec": [
																			"var uuid = require('uuid');",
																			"var generatedUUID = uuid.v4();",
																			"pm.environment.set('quoteId', generatedUUID);",
																			"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
																			"",
																			"",
																			"pm.variables.set('transferDate', (new Date()).toUTCString());",
																			"",
																			"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "test",
																	"script": {
																		"id": "5ec089f0-63bb-4200-807a-90ab47a1a7f2",
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {",
																			"    pm.response.to.have.status(200);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.displayName).to.eql(\"James Bush\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idType).to.eql(\"MSISDN\");",
																			"});",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.from.idValue).to.eql(\"44123456789\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.to.idType).to.eql(\"MSISDN\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.idValue).to.eql(\"17039811907\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.fspId).to.eql(\"mojaloop-sdk\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.firstName).to.eql(\"Sridevi\");",
																			"});   ",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.lastName).to.eql(\"Miriyala\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amountType).to.eql(\"SEND\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.currency).to.eql(\"XOF\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.transactionType).to.eql(\"TRANSFER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario1.result.initiatorType).to.eql(\"CONSUMER\");",
																			" });  ",
																			" ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.note).to.eql(\"test payment\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    ",
																			"    pm.expect(jsonData.scenario1.result.quoteResponse.quoteId).to.eql(jsonData.scenario2.result.quoteResponse.quoteId);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"     pm.expect(jsonData.scenario1.result.transferId).to.eql(jsonData.scenario2.result.transferId);",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario1.result.homeTransactionId).to.eql(\"123ABC\");",
																			"});",
																			"    ",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.currentState).to.eql(\"WAITING_FOR_QUOTE_ACCEPTANCE\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
																			"});",
																			"",
																			"pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();  ",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.transferAmount.currency).to.eql(\"XOF\");",
																			"});",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.expiration).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.ilpPacket).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"   pm.expect(jsonData.scenario1.result.quoteResponse.condition).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspFee.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario1.result.quoteResponse.payeeFspCommission.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  // Scenario 2 tests",
																			"  ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.from.displayName).to.eql(\"James Bush\");",
																			" });",
																			" ",
																			" pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.from.idType).to.eql(\"MSISDN\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.from.idValue).to.eql(\"44123456789\");",
																			"   });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.idType).to.eql(\"MSISDN\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.idValue).to.eql(\"17039811907\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.fspId).to.eql(\"mojaloop-sdk\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.firstName).to.eql(\"Sridevi\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.lastName).to.eql(\"Miriyala\");",
																			"    });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.to.dateOfBirth).to.eql(\"2010-10-10\");",
																			"    });",
																			"    ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.amountType).to.eql(\"SEND\");",
																			"   })",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.currency).to.eql(\"XOF\");",
																			"  });",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.scenario2.result.amount).to.eql(\"10\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.transactionType).to.eql(\"TRANSFER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.initiatorType).to.eql(\"CONSUMER\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.note).to.eql(\"test payment\");",
																			"});",
																			"   ",
																			"   pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json(); ",
																			"    pm.expect(jsonData.scenario2.result.homeTransactionId).to.eql(\"123ABC\");",
																			"});",
																			"    ",
																			"    pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.currentState).to.eql(\"COMPLETED\");",
																			"});",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.transferAmount.amount).to.eql(\"10\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.transferAmount.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.expiration).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.ilpPacket).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.condition).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspFee.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspFee.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspCommission.amount).to.eql(\"0\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.quoteResponse.payeeFspCommission.currency).to.eql(\"XOF\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.completedTimestamp).not.eql(null);",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.transferState).to.eql(\"COMMITTED\");",
																			"  });",
																			"  ",
																			"  pm.test(\"Response validation\", function () {",
																			"    var jsonData = pm.response.json();",
																			"  pm.expect(jsonData.scenario2.result.fulfil.fulfilment).not.eql(null);",
																			"  ",
																			"  });",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/vnd.interoperability.transfers+json;version=1",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/vnd.interoperability.transfers+json;version=1.0",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Date",
																		"value": "{{transferDate}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Source",
																		"value": "{{payerfsp}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "FSPIOP-Destination",
																		"value": "{{payeefsp}}",
																		"type": "text",
																		"disabled": true
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json",
																		"type": "text"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n    {\n        \"name\": \"scenario1\",\n        \"operation\": \"postTransfers\",\n        \"body\": {\n            \"from\": {\n                \"displayName\": \"James Bush\",\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"44123456789\"\n            },\n            \"to\": {\n                \"idType\": \"MSISDN\",\n                \"idValue\": \"17039811907\"\n            },\n            \"amountType\": \"SEND\",\n            \"currency\": \"XOF1\",\n            \"amount\": \"10\",\n            \"transactionType\": \"TRANSFER\",\n            \"initiatorType\":\"CONSUMER\",\n            \"note\": \"test payment\",\n            \"homeTransactionId\": \"123ABC\"\n        }\n    },\n    {\n        \"name\": \"scenario2\",\n        \"operation\": \"putTransfers\",\n        \n        \"params\": {\n            \"transferId\": \"{{scenario1.result.transferId}}\"\n        },\n        \"body\": {\n            \"acceptQuote\": true\n        }\n    }\n]"
																},
																"url": {
																	"raw": "{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}/scenarios",
																	"host": [
																		"{{GOLDENPAYERFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"scenarios"
																	]
																}
															},
															"response": []
														}
													],
													"_postman_isSubFolder": true
												},
												{
													"name": "edge-cases",
													"item": [],
													"_postman_isSubFolder": true
												}
											],
											"_postman_isSubFolder": true
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "sdk",
					"item": [
						{
							"name": "parties",
							"item": [
								{
									"name": "positive",
									"item": [
										{
											"name": "PUT - valid",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b24820d2-12f4-4089-973d-b0ddc50af937",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"    ",
															"});    ",
															"",
															"pm.test(\"Response body is empty\", function () {",
															"    var textData = pm.response.text();",
															"    pm.expect(textData).to.eql('');",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.parties+json;version=1",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.parties+json;version=1.0",
														"type": "text"
													},
													{
														"key": "FSPIOP-Source",
														"value": "mojaloop-sdk",
														"type": "text"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}",
														"type": "text"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "mojaloop-sdk",
														"type": "text"
													},
													{
														"key": "FSPIOP-Signature",
														"value": "{{fspiop-signature}}",
														"type": "text"
													},
													{
														"key": "FSPIOP-HTTP-Method",
														"value": "PUT",
														"type": "text",
														"disabled": true
													},
													{
														"key": "FSPIOP-URI",
														"value": "/parties/MSISDN/{{pathfinderMSISDN}}",
														"type": "text",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"party\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17039811907\",\"fspId\":\"payeefsp\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Sridevi\",\"lastName\":\"Miriyala\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Sridevi Miriyala\"}}"
												},
												"url": {
													"raw": "{{HOST_PAYER_SDK_SIMULATOR}}/parties/MSISDN/17039911999",
													"host": [
														"{{HOST_PAYER_SDK_SIMULATOR}}"
													],
													"path": [
														"parties",
														"MSISDN",
														"17039911999"
													]
												}
											},
											"response": []
										},
										{
											"name": "PUT - valid error message",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.parties+json;version=1"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.parties+json;version=1.0"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{payeefsp}}"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "mojaloop-sdk"
													},
													{
														"key": "FSPIOP-Signature",
														"type": "text",
														"value": "{{fspiop-signature}}"
													},
													{
														"key": "FSPIOP-HTTP-Method",
														"type": "text",
														"value": "PUT"
													},
													{
														"key": "FSPIOP-URI",
														"type": "text",
														"value": "/parties/MSISDN/{{pathfinderMSISDN}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"errorInformation\": {\"errorCode\":\"3100\", \"errorDescription\":\"ID Not found\"}}"
												},
												"url": {
													"raw": "{{HOST_PAYER_SDK_SIMULATOR}}/parties/MSISDN/17039811907/error",
													"host": [
														"{{HOST_PAYER_SDK_SIMULATOR}}"
													],
													"path": [
														"parties",
														"MSISDN",
														"17039811907",
														"error"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "negative",
									"item": [],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "quotes",
							"item": [
								{
									"name": "positive",
									"item": [
										{
											"name": "PUT - valid error message",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{payeefsp}}"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "mojaloop-sdk"
													},
													{
														"key": "FSPIOP-Signature",
														"type": "text",
														"value": "{{fspiop-signature}}"
													},
													{
														"key": "FSPIOP-HTTP-Method",
														"type": "text",
														"value": "PUT"
													},
													{
														"key": "FSPIOP-URI",
														"type": "text",
														"value": "/quotes/{{quoteId}}/error"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"errorInformation\": {\n\t\t\"errorCode\": \"5101\",\n\t\t\"errorDescription\": \"Payee transaction limit reached\",\n\t\t\"extensionList\": {\n\t\t\t\"extension\": [{\n\t\t\t\t\"key\": \"errorDetail\",\n\t\t\t\t\"value\": \"This is an abort extension\"\n\t\t\t}]\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{HOST_PAYER_SDK_SIMULATOR}}/quotes/{{quoteId}}/error",
													"host": [
														"{{HOST_PAYER_SDK_SIMULATOR}}"
													],
													"path": [
														"quotes",
														"{{quoteId}}",
														"error"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "negative",
									"item": [],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "transfers",
							"item": [
								{
									"name": "positive",
									"item": [
										{
											"name": "PUT - valid error message Copy",
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"type": "text",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "FSPIOP-Source",
														"type": "text",
														"value": "{{payeefsp}}"
													},
													{
														"key": "Date",
														"type": "text",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "mojaloop-sdk"
													},
													{
														"key": "FSPIOP-Signature",
														"type": "text",
														"value": "{{fspiop-signature}}"
													},
													{
														"key": "FSPIOP-HTTP-Method",
														"type": "text",
														"value": "PUT"
													},
													{
														"key": "FSPIOP-URI",
														"type": "text",
														"value": "/transfers/{{transfer_ID}}/error"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"errorInformation\": {\n\t\t\"errorCode\": \"5101\",\n\t\t\"errorDescription\": \"Payee transaction limit reached\",\n\t\t\"extensionList\": {\n\t\t\t\"extension\": [{\n\t\t\t\t\"key\": \"errorDetail\",\n\t\t\t\t\"value\": \"This is an abort extension\"\n\t\t\t}]\n\t\t}\n\t}\n}"
												},
												"url": {
													"raw": "{{HOST_PAYER_SDK_SIMULATOR}}/transfers/{{transfer_ID}}/error",
													"host": [
														"{{HOST_PAYER_SDK_SIMULATOR}}"
													],
													"path": [
														"transfers",
														"{{transfer_ID}}",
														"error"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "negative",
									"item": [],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"description": "Author: Sridevi Miriyala",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4147110c-c14f-4f04-9c62-5f6e13e816c5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4829f8a2-696d-48af-9ed8-23d6db22e56b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "502a3974-0b8f-4f0c-996f-0e78c302cdb5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a0056f77-0b07-4020-8915-5643b356ee24",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "goldenpayeefsp",
			"item": [
				{
					"name": "fsp_backend",
					"item": [
						{
							"name": "simulator_api",
							"item": [
								{
									"name": "GET /participants",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_DFSP_BACKEND_SIM}}/participants/MSISDN/{{pathfinderMSISDN}}",
											"host": [
												"{{HOST_DFSP_BACKEND_SIM}}"
											],
											"path": [
												"participants",
												"MSISDN",
												"{{pathfinderMSISDN}}"
											]
										}
									},
									"response": [
										{
											"name": "An error occured processing the request",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/participants/<string>/<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"participants",
														"<string>",
														"<string>"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": \"<string>\",\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "Malformed or missing required headers or parameters",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/participants/<string>/<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"participants",
														"<string>",
														"<string>"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": \"<string>\",\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "Response containing details of the requested party",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/participants/<string>/<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"participants",
														"<string>",
														"<string>"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"fspId\": \"<string>\"\n}"
										},
										{
											"name": "The party specified by the provided identifier type and value is not known to the server",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/participants/<string>/<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"participants",
														"<string>",
														"<string>"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "GET /parties",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_PAYEE_DFSP_BACKEND}}/parties/MSISDN/{{pathfinderMSISDN}}",
											"host": [
												"{{HOST_PAYEE_DFSP_BACKEND}}"
											],
											"path": [
												"parties",
												"MSISDN",
												"{{pathfinderMSISDN}}"
											]
										}
									},
									"response": [
										{
											"name": "Response containing details of the requested party",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/parties/<string>/<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"parties",
														"<string>",
														"<string>"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"idType\": \"<string>\",\n \"idValue\": \"<string>\",\n \"type\": \"<string>\",\n \"displayName\": \"<string>\",\n \"firstName\": \"<string>\",\n \"middleName\": \"<string>\",\n \"lastName\": \"<string>\",\n \"dateOfBirth\": \"<string>\",\n \"merchantClassificationCode\": \"<string>\"\n}"
										},
										{
											"name": "An error occured processing the request",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/parties/<string>/<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"parties",
														"<string>",
														"<string>"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": \"<string>\",\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "The party specified by the provided identifier type and value is not known to the server",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/parties/<string>/<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"parties",
														"<string>",
														"<string>"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Malformed or missing required headers or parameters",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/parties/<string>/<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"parties",
														"<string>",
														"<string>"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": \"<string>\",\n \"message\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "POST /quoterequests",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "dd57dfb6-15bc-4514-88e9-3153a646f773",
												"exec": [
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.environment.set('quoteId', generatedUUID);",
													"   generatedUUID = uuid.v4();",
													"   pm.environment.set('transactionId', generatedUUID);",
													"",
													"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"quoteId\": \"3e411f28-d9f9-4594-9407-2d7897d80eba\",\n    \"transactionId\": \"3e411f28-d9f9-4594-9407-2d7897d80eba\",\n    \"to\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"17039811907\",\n        \"displayName\": \"Sridevi Miriyala\",\n        \"dateOfBirth\": \"2010-10-10\",\n        \"firstName\": \"Sridevi\",\n        \"lastName\": \"Miriyala\"\n    },\n    \"from\": {\n        \"idType\": \"MSISDN\",\n        \"idValue\": \"17855501914\",\n        \"displayName\": \"Murthy Kakarlamudi\",\n        \"dateOfBirth\": \"2010-10-10\",\n        \"firstName\": \"Murthy\",\n        \"lastName\": \"Kakarlamudi\"\n    },\n    \"amountType\": \"SEND\",\n    \"amount\": \"100\",\n    \"currency\": \"XOF\",\n    \"transactionType\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\",\n    \"node\": \"testing\",\n    \"expiration\": \"2019-06-04T04:02:10.378Z\"\n}"
										},
										"url": {
											"raw": "{{HOST_PAYEE_DFSP_BACKEND_SIM}}/quoterequests",
											"host": [
												"{{HOST_PAYEE_DFSP_BACKEND_SIM}}"
											],
											"path": [
												"quoterequests"
											]
										}
									},
									"response": [
										{
											"name": "Malformed or missing required headers or parameters",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"quoteId\": \"<string>\",\n    \"transactionId\": \"<string>\",\n    \"to\": {\n        \"idType\": \"<string>\",\n        \"idValue\": \"<string>\",\n        \"type\": \"<string>\",\n        \"displayName\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"middleName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"dateOfBirth\": \"<string>\",\n        \"merchantClassificationCode\": \"<string>\"\n    },\n    \"from\": {\n        \"idType\": \"<string>\",\n        \"idValue\": \"<string>\",\n        \"type\": \"<string>\",\n        \"displayName\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"middleName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"dateOfBirth\": \"<string>\",\n        \"merchantClassificationCode\": \"<string>\"\n    },\n    \"amountType\": \"<string>\",\n    \"amount\": \"<string>\",\n    \"currency\": \"<string>\",\n    \"transactionType\": \"<string>\",\n    \"initiator\": \"<string>\",\n    \"initiatorType\": \"<string>\",\n    \"feesAmount\": \"<string>\",\n    \"feesCurrency\": \"<string>\",\n    \"geoCode\": {\n        \"latitude\": \"<string>\",\n        \"longitude\": \"<string>\"\n    },\n    \"note\": \"<string>\",\n    \"expiration\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/quoterequests",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"quoterequests"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": \"<string>\",\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "An error occured processing the request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"quoteId\": \"<string>\",\n    \"transactionId\": \"<string>\",\n    \"to\": {\n        \"idType\": \"<string>\",\n        \"idValue\": \"<string>\",\n        \"type\": \"<string>\",\n        \"displayName\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"middleName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"dateOfBirth\": \"<string>\",\n        \"merchantClassificationCode\": \"<string>\"\n    },\n    \"from\": {\n        \"idType\": \"<string>\",\n        \"idValue\": \"<string>\",\n        \"type\": \"<string>\",\n        \"displayName\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"middleName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"dateOfBirth\": \"<string>\",\n        \"merchantClassificationCode\": \"<string>\"\n    },\n    \"amountType\": \"<string>\",\n    \"amount\": \"<string>\",\n    \"currency\": \"<string>\",\n    \"transactionType\": \"<string>\",\n    \"initiator\": \"<string>\",\n    \"initiatorType\": \"<string>\",\n    \"feesAmount\": \"<string>\",\n    \"feesCurrency\": \"<string>\",\n    \"geoCode\": {\n        \"latitude\": \"<string>\",\n        \"longitude\": \"<string>\"\n    },\n    \"note\": \"<string>\",\n    \"expiration\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/quoterequests",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"quoterequests"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": \"<string>\",\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "A response to the transfer quotation request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"quoteId\": \"<string>\",\n    \"transactionId\": \"<string>\",\n    \"to\": {\n        \"idType\": \"<string>\",\n        \"idValue\": \"<string>\",\n        \"type\": \"<string>\",\n        \"displayName\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"middleName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"dateOfBirth\": \"<string>\",\n        \"merchantClassificationCode\": \"<string>\"\n    },\n    \"from\": {\n        \"idType\": \"<string>\",\n        \"idValue\": \"<string>\",\n        \"type\": \"<string>\",\n        \"displayName\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"middleName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"dateOfBirth\": \"<string>\",\n        \"merchantClassificationCode\": \"<string>\"\n    },\n    \"amountType\": \"<string>\",\n    \"amount\": \"<string>\",\n    \"currency\": \"<string>\",\n    \"transactionType\": \"<string>\",\n    \"initiator\": \"<string>\",\n    \"initiatorType\": \"<string>\",\n    \"feesAmount\": \"<string>\",\n    \"feesCurrency\": \"<string>\",\n    \"geoCode\": {\n        \"latitude\": \"<string>\",\n        \"longitude\": \"<string>\"\n    },\n    \"note\": \"<string>\",\n    \"expiration\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/quoterequests",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"quoterequests"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"quoteId\": \"<string>\",\n \"transactionId\": \"<string>\",\n \"transferAmount\": \"<string>\",\n \"transferAmountCurrency\": \"<string>\",\n \"payeeReceiveAmount\": \"<string>\",\n \"payeeReceiveAmountCurrency\": \"<string>\",\n \"payeeFspFeeAmount\": \"<string>\",\n \"payeeFspFeeAmountCurrency\": \"<string>\",\n \"payeeFspCommissionAmount\": \"<string>\",\n \"payeeFspCommissionAmountCurrency\": \"<string>\",\n \"expiration\": \"<string>\",\n \"geoCode\": {\n  \"latitude\": \"<string>\",\n  \"longitude\": \"<string>\"\n }\n}"
										}
									]
								},
								{
									"name": "POST /transfers",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"transferId\": \"<string>\",\n    \"quote\": {\n        \"quoteId\": \"<string>\",\n        \"transactionId\": \"<string>\",\n        \"transferAmount\": \"<string>\",\n        \"transferAmountCurrency\": \"<string>\",\n        \"payeeReceiveAmount\": \"<string>\",\n        \"payeeReceiveAmountCurrency\": \"<string>\",\n        \"payeeFspFeeAmount\": \"<string>\",\n        \"payeeFspFeeAmountCurrency\": \"<string>\",\n        \"payeeFspCommissionAmount\": \"<string>\",\n        \"payeeFspCommissionAmountCurrency\": \"<string>\",\n        \"expiration\": \"<string>\",\n        \"geoCode\": {\n            \"latitude\": \"<string>\",\n            \"longitude\": \"<string>\"\n        }\n    },\n    \"from\": {\n        \"idType\": \"<string>\",\n        \"idValue\": \"<string>\",\n        \"type\": \"<string>\",\n        \"displayName\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"middleName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"dateOfBirth\": \"<string>\",\n        \"merchantClassificationCode\": \"<string>\"\n    },\n    \"to\": {\n        \"idType\": \"<string>\",\n        \"idValue\": \"<string>\",\n        \"type\": \"<string>\",\n        \"displayName\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"middleName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"dateOfBirth\": \"<string>\",\n        \"merchantClassificationCode\": \"<string>\"\n    },\n    \"amountType\": \"<string>\",\n    \"currency\": \"<string>\",\n    \"amount\": \"<string>\",\n    \"transactionType\": \"<string>\",\n    \"note\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{HOST_DFSP_BACKEND_SIM}}/transfers",
											"host": [
												"{{HOST_DFSP_BACKEND_SIM}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": [
										{
											"name": "Malformed or missing required headers or parameters",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transferId\": \"<string>\",\n    \"quote\": {\n        \"quoteId\": \"<string>\",\n        \"transactionId\": \"<string>\",\n        \"transferAmount\": \"<string>\",\n        \"transferAmountCurrency\": \"<string>\",\n        \"payeeReceiveAmount\": \"<string>\",\n        \"payeeReceiveAmountCurrency\": \"<string>\",\n        \"payeeFspFeeAmount\": \"<string>\",\n        \"payeeFspFeeAmountCurrency\": \"<string>\",\n        \"payeeFspCommissionAmount\": \"<string>\",\n        \"payeeFspCommissionAmountCurrency\": \"<string>\",\n        \"expiration\": \"<string>\",\n        \"geoCode\": {\n            \"latitude\": \"<string>\",\n            \"longitude\": \"<string>\"\n        }\n    },\n    \"from\": {\n        \"idType\": \"<string>\",\n        \"idValue\": \"<string>\",\n        \"type\": \"<string>\",\n        \"displayName\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"middleName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"dateOfBirth\": \"<string>\",\n        \"merchantClassificationCode\": \"<string>\"\n    },\n    \"to\": {\n        \"idType\": \"<string>\",\n        \"idValue\": \"<string>\",\n        \"type\": \"<string>\",\n        \"displayName\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"middleName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"dateOfBirth\": \"<string>\",\n        \"merchantClassificationCode\": \"<string>\"\n    },\n    \"amountType\": \"<string>\",\n    \"currency\": \"<string>\",\n    \"amount\": \"<string>\",\n    \"transactionType\": \"<string>\",\n    \"note\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/transfers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": \"<string>\",\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "The transfer was accepted",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transferId\": \"<string>\",\n    \"quote\": {\n        \"quoteId\": \"<string>\",\n        \"transactionId\": \"<string>\",\n        \"transferAmount\": \"<string>\",\n        \"transferAmountCurrency\": \"<string>\",\n        \"payeeReceiveAmount\": \"<string>\",\n        \"payeeReceiveAmountCurrency\": \"<string>\",\n        \"payeeFspFeeAmount\": \"<string>\",\n        \"payeeFspFeeAmountCurrency\": \"<string>\",\n        \"payeeFspCommissionAmount\": \"<string>\",\n        \"payeeFspCommissionAmountCurrency\": \"<string>\",\n        \"expiration\": \"<string>\",\n        \"geoCode\": {\n            \"latitude\": \"<string>\",\n            \"longitude\": \"<string>\"\n        }\n    },\n    \"from\": {\n        \"idType\": \"<string>\",\n        \"idValue\": \"<string>\",\n        \"type\": \"<string>\",\n        \"displayName\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"middleName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"dateOfBirth\": \"<string>\",\n        \"merchantClassificationCode\": \"<string>\"\n    },\n    \"to\": {\n        \"idType\": \"<string>\",\n        \"idValue\": \"<string>\",\n        \"type\": \"<string>\",\n        \"displayName\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"middleName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"dateOfBirth\": \"<string>\",\n        \"merchantClassificationCode\": \"<string>\"\n    },\n    \"amountType\": \"<string>\",\n    \"currency\": \"<string>\",\n    \"amount\": \"<string>\",\n    \"transactionType\": \"<string>\",\n    \"note\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/transfers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"homeTransactionId\": \"<string>\"\n}"
										},
										{
											"name": "An error occured processing the request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"transferId\": \"<string>\",\n    \"quote\": {\n        \"quoteId\": \"<string>\",\n        \"transactionId\": \"<string>\",\n        \"transferAmount\": \"<string>\",\n        \"transferAmountCurrency\": \"<string>\",\n        \"payeeReceiveAmount\": \"<string>\",\n        \"payeeReceiveAmountCurrency\": \"<string>\",\n        \"payeeFspFeeAmount\": \"<string>\",\n        \"payeeFspFeeAmountCurrency\": \"<string>\",\n        \"payeeFspCommissionAmount\": \"<string>\",\n        \"payeeFspCommissionAmountCurrency\": \"<string>\",\n        \"expiration\": \"<string>\",\n        \"geoCode\": {\n            \"latitude\": \"<string>\",\n            \"longitude\": \"<string>\"\n        }\n    },\n    \"from\": {\n        \"idType\": \"<string>\",\n        \"idValue\": \"<string>\",\n        \"type\": \"<string>\",\n        \"displayName\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"middleName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"dateOfBirth\": \"<string>\",\n        \"merchantClassificationCode\": \"<string>\"\n    },\n    \"to\": {\n        \"idType\": \"<string>\",\n        \"idValue\": \"<string>\",\n        \"type\": \"<string>\",\n        \"displayName\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"middleName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"dateOfBirth\": \"<string>\",\n        \"merchantClassificationCode\": \"<string>\"\n    },\n    \"amountType\": \"<string>\",\n    \"currency\": \"<string>\",\n    \"amount\": \"<string>\",\n    \"transactionType\": \"<string>\",\n    \"note\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/transfers",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "Text",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"statusCode\": \"<string>\",\n \"message\": \"<string>\"\n}"
										}
									]
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "reporting_api",
							"item": [
								{
									"name": "Daily Transaction Reports for the Hub",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{GOLDENPAYEEFSP_REPORTINGAPI}}/reports?START_DATE_TIME=2019-07-20&END_DATE_TIME=2019-08-10",
											"host": [
												"{{GOLDENPAYEEFSP_REPORTINGAPI}}"
											],
											"path": [
												"reports"
											],
											"query": [
												{
													"key": "START_DATE_TIME",
													"value": "2019-07-20",
													"description": "DataTime from which the transactions are needed"
												},
												{
													"key": "END_DATE_TIME",
													"value": "2019-08-10",
													"description": "DataTime to which the transactions are needed"
												}
											]
										},
										"description": "Daily Transaction Reports for the Hub"
									},
									"response": [
										{
											"name": "No Content",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/reports?START_DATE_TIME=<string>&END_DATE_TIME=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports"
													],
													"query": [
														{
															"key": "START_DATE_TIME",
															"value": "<string>"
														},
														{
															"key": "END_DATE_TIME",
															"value": "<string>"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/reports?START_DATE_TIME=<string>&END_DATE_TIME=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports"
													],
													"query": [
														{
															"key": "START_DATE_TIME",
															"value": "<string>"
														},
														{
															"key": "END_DATE_TIME",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"senderDFSPId\": \"<string>\",\n  \"senderDFSPName\": \"<string>\",\n  \"receiverDFSPId\": \"<string>\",\n  \"receiverDFSPName\": \"<string>\",\n  \"hubTxnID\": \"<string>\",\n  \"transactionType\": \"<string>\",\n  \"natureOfTxnType\": \"<string>\",\n  \"requestDate\": \"<string>\",\n  \"createDate\": \"<string>\",\n  \"modificationDate\": \"<string>\",\n  \"settlementDate\": \"<string>\",\n  \"senderCountryCurrencyCode\": \"<string>\",\n  \"receiverCountryCurrencyCode\": \"<string>\",\n  \"senderID\": \"<string>\",\n  \"receiverID\": \"<string>\",\n  \"reconciliationAmount\": \"<string>\",\n  \"receiverNameStatus\": \"<string>\",\n  \"pricingOption\": \"<string>\",\n  \"receiverKYCLevelStatus\": \"<string>\",\n  \"status\": \"<string>\",\n  \"errorCode\": \"<string>\",\n  \"senderDFSPTxnID\": \"<string>\",\n  \"receiverDFSPTxnID\": \"<string>\"\n },\n {\n  \"senderDFSPId\": \"<string>\",\n  \"senderDFSPName\": \"<string>\",\n  \"receiverDFSPId\": \"<string>\",\n  \"receiverDFSPName\": \"<string>\",\n  \"hubTxnID\": \"<string>\",\n  \"transactionType\": \"<string>\",\n  \"natureOfTxnType\": \"<string>\",\n  \"requestDate\": \"<string>\",\n  \"createDate\": \"<string>\",\n  \"modificationDate\": \"<string>\",\n  \"settlementDate\": \"<string>\",\n  \"senderCountryCurrencyCode\": \"<string>\",\n  \"receiverCountryCurrencyCode\": \"<string>\",\n  \"senderID\": \"<string>\",\n  \"receiverID\": \"<string>\",\n  \"reconciliationAmount\": \"<string>\",\n  \"receiverNameStatus\": \"<string>\",\n  \"pricingOption\": \"<string>\",\n  \"receiverKYCLevelStatus\": \"<string>\",\n  \"status\": \"<string>\",\n  \"errorCode\": \"<string>\",\n  \"senderDFSPTxnID\": \"<string>\",\n  \"receiverDFSPTxnID\": \"<string>\"\n }\n]"
										},
										{
											"name": "Bad Request",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/reports?START_DATE_TIME=<string>&END_DATE_TIME=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports"
													],
													"query": [
														{
															"key": "START_DATE_TIME",
															"value": "<string>"
														},
														{
															"key": "END_DATE_TIME",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Report is not found on the server",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/reports?START_DATE_TIME=<string>&END_DATE_TIME=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"reports"
													],
													"query": [
														{
															"key": "START_DATE_TIME",
															"value": "<string>"
														},
														{
															"key": "END_DATE_TIME",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "test_api",
							"item": [
								{
									"name": "/repository/parties",
									"item": [
										{
											"name": "POST",
											"item": [
												{
													"name": "positive",
													"item": [
														{
															"name": "Add party to payeefsp - MSISDN",
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"displayName\": \"GoldenFirst GoldenLast\",\n    \"firstName\": \"GoldenFirst\",\n    \"middleName\": \"GoldenMiddle\",\n    \"lastName\": \"GoldenLast\",\n    \"dateOfBirth\": \"2010-10-10\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"{{goldenpayeefspReceiverMSISDN}}\"\n}"
																},
																"url": {
																	"raw": "{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}/repository/parties",
																	"host": [
																		"{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"repository",
																		"parties"
																	]
																},
																"description": "Create a party"
															},
															"response": [
																{
																	"name": "The party was created",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "No Content",
																	"code": 204,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																},
																{
																	"name": "An error occured processing the request",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														}
													],
													"_postman_isSubFolder": true
												},
												{
													"name": "negative",
													"item": [
														{
															"name": "Add party _duplicate",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "dbdf01bc-c327-40ce-b1fe-c869ade51177",
																		"exec": [
																			"pm.test(\"Status code is 500\", function () {",
																			"    pm.response.to.have.status(500);",
																			"});",
																			"",
																			"pm.test(\"Status code is 2000\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.statusCode).to.eql('2000');",
																			"});",
																			"",
																			"pm.test(\"Response message is ID is already registered\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.message).to.eql(\"ID is already registered\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"displayName\": \"GoldenFirst GoldenLast\",\n    \"firstName\": \"GoldenFirst\",\n    \"middleName\": \"\",\n    \"lastName\": \"GoldenLast\",\n    \"dateOfBirth\": \"2010-10-10\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"919951935306\"\n}"
																},
																"url": {
																	"raw": "{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}/repository/parties",
																	"host": [
																		"{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"repository",
																		"parties"
																	]
																},
																"description": "Create a party"
															},
															"response": [
																{
																	"name": "The party was created",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "No Content",
																	"code": 204,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																},
																{
																	"name": "An error occured processing the request",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														},
														{
															"name": "Add party - Id with special char (BUG)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "c24b190a-b829-433d-8543-402e64d341a7",
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"displayName\": \"GoldenFirst GoldenLast\",\n    \"firstName\": \"GoldenFirst\",\n    \"middleName\": \"\",\n    \"lastName\": \"GoldenLast\",\n    \"dateOfBirth\": \"2010-10-10\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"9199@#%35306\"\n}"
																},
																"url": {
																	"raw": "{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}/repository/parties",
																	"host": [
																		"{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"repository",
																		"parties"
																	]
																},
																"description": "Create a party"
															},
															"response": [
																{
																	"name": "The party was created",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "No Content",
																	"code": 204,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																},
																{
																	"name": "An error occured processing the request",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														},
														{
															"name": "Add party -ID value empty string",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "dbdf01bc-c327-40ce-b1fe-c869ade51177",
																		"exec": [
																			"",
																			"",
																			"pm.test(\"Status code is 400\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.statusCode).to.eql(400);",
																			"});",
																			"",
																			"pm.test(\"Response message is request failed validation, min 1 char\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.message).to.include(\"should NOT be shorter than 1 characters\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"displayName\": \"GoldenFirst GoldenLast\",\n    \"firstName\": \"GoldenFirst\",\n    \"middleName\": \"\",\n    \"lastName\": \"GoldenLast\",\n    \"dateOfBirth\": \"2010-10-10\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"\"\n}"
																},
																"url": {
																	"raw": "{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}/repository/parties",
																	"host": [
																		"{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"repository",
																		"parties"
																	]
																},
																"description": "Create a party"
															},
															"response": [
																{
																	"name": "An error occured processing the request",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																},
																{
																	"name": "The party was created",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "No Content",
																	"code": 204,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														},
														{
															"name": "Add party -ID value 00000 (BUG)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "dbdf01bc-c327-40ce-b1fe-c869ade51177",
																		"exec": [
																			"",
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"displayName\": \"GoldenFirst GoldenLast\",\n    \"firstName\": \"GoldenFirst\",\n    \"middleName\": \"\",\n    \"lastName\": \"GoldenLast\",\n    \"dateOfBirth\": \"2010-10-10\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"00000\"\n}"
																},
																"url": {
																	"raw": "{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}/repository/parties",
																	"host": [
																		"{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"repository",
																		"parties"
																	]
																},
																"description": "Create a party"
															},
															"response": [
																{
																	"name": "The party was created",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "No Content",
																	"code": 204,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																},
																{
																	"name": "An error occured processing the request",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														},
														{
															"name": "Add party - ID longer than 128 char",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "663b0701-c1c0-405c-8441-e5905d73c3db",
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});",
																			"",
																			"pm.test(\"Status code is 400\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.statusCode).to.eql(400);",
																			"});",
																			"",
																			"pm.test(\"Response message is ID should not be longer than 128 characters\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.message).to.include(\"should NOT be longer than 128 characters\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"displayName\": \"GoldenFirst GoldenLast\",\n    \"firstName\": \"GoldenFirst\",\n    \"middleName\": \"\",\n    \"lastName\": \"GoldenLast\",\n    \"dateOfBirth\": \"2010-10-10\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"919951935306123456789012345678900987654321234567890987654321234567890987654321234567890987654321234567890987654321234567890987654321234567890987654321234567890\"\n}"
																},
																"url": {
																	"raw": "{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}/repository/parties",
																	"host": [
																		"{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"repository",
																		"parties"
																	]
																},
																"description": "Create a party"
															},
															"response": [
																{
																	"name": "An error occured processing the request",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																},
																{
																	"name": "The party was created",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "No Content",
																	"code": 204,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														},
														{
															"name": "Add party - missing ID value",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "dbdf01bc-c327-40ce-b1fe-c869ade51177",
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});",
																			"",
																			"pm.test(\"Status code is 3102\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.statusCode).to.eql('3102');",
																			"});",
																			"",
																			"pm.test(\"Response message is ID not supplied\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.message).to.eql(\"ID not supplied\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"displayName\": \"GoldenFirst GoldenLast\",\n    \"firstName\": \"GoldenFirst\",\n    \"middleName\": \"\",\n    \"lastName\": \"GoldenLast\",\n    \"dateOfBirth\": \"2010-10-10\",\n    \"idType\": \"MSISDN\"\n   \n}"
																},
																"url": {
																	"raw": "{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}/repository/parties",
																	"host": [
																		"{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"repository",
																		"parties"
																	]
																},
																"description": "Create a party"
															},
															"response": [
																{
																	"name": "An error occured processing the request",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																},
																{
																	"name": "The party was created",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "No Content",
																	"code": 204,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														},
														{
															"name": "Add party - invalid IdType - empty string",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "dbdf01bc-c327-40ce-b1fe-c869ade51177",
																		"exec": [
																			"",
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});",
																			"pm.test(\"Status code is 400\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.statusCode).to.eql(400);",
																			"});",
																			"",
																			"pm.test(\"Response message should be equal to one of the allowed values\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.message).to.include(\"should be equal to one of the allowed values\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"displayName\": \"GoldenFirst GoldenLast\",\n    \"firstName\": \"GoldenFirst\",\n    \"middleName\": \"\",\n    \"lastName\": \"GoldenLast\",\n    \"dateOfBirth\": \"2010-10-10\",\n    \"idType\": \"\",\n    \"idValue\": \"919951935306\"\n}"
																},
																"url": {
																	"raw": "{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}/repository/parties",
																	"host": [
																		"{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"repository",
																		"parties"
																	]
																},
																"description": "Create a party"
															},
															"response": [
																{
																	"name": "An error occured processing the request",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																},
																{
																	"name": "The party was created",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "No Content",
																	"code": 204,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														},
														{
															"name": "Add party - IdType empty string",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "dbdf01bc-c327-40ce-b1fe-c869ade51177",
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});",
																			"",
																			"pm.test(\"Status code is 400\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.statusCode).to.eql(400);",
																			"});",
																			"",
																			"pm.test(\"Response message is should be equal to one of the allowed values\", function () {",
																			"    var jsonData = pm.response.json();",
																			"    pm.expect(jsonData.message).to.include(\"should be equal to one of the allowed values\");",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"displayName\": \"GoldenFirst GoldenLast\",\n    \"firstName\": \"GoldenFirst\",\n    \"middleName\": \"\",\n    \"lastName\": \"GoldenLast\",\n    \"dateOfBirth\": \"2010-10-10\",\n    \"idType\": \"\",\n    \"idValue\": \"919951935306\"\n}"
																},
																"url": {
																	"raw": "{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}/repository/parties",
																	"host": [
																		"{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"repository",
																		"parties"
																	]
																},
																"description": "Create a party"
															},
															"response": [
																{
																	"name": "The party was created",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "No Content",
																	"code": 204,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																},
																{
																	"name": "An error occured processing the request",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														},
														{
															"name": "Add party - missing idType (BUG)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "dbdf01bc-c327-40ce-b1fe-c869ade51177",
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"displayName\": \"GoldenFirst GoldenLast\",\n    \"firstName\": \"GoldenFirst\",\n    \"middleName\": \"\",\n    \"lastName\": \"GoldenLast\",\n    \"dateOfBirth\": \"2010-10-10\",\n    \n    \"idValue\": \"919951935306\"\n}"
																},
																"url": {
																	"raw": "{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}/repository/parties",
																	"host": [
																		"{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"repository",
																		"parties"
																	]
																},
																"description": "Create a party"
															},
															"response": [
																{
																	"name": "An error occured processing the request",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																},
																{
																	"name": "The party was created",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "No Content",
																	"code": 204,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														},
														{
															"name": "Add party - missing DOB (BUG)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "dbdf01bc-c327-40ce-b1fe-c869ade51177",
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"displayName\": \"GoldenFirst GoldenLast\",\n    \"firstName\": \"GoldenFirst\",\n    \"middleName\": \"\",\n    \"lastName\": \"GoldenLast\",\n    \n    \"idType\": \"MSISDN\",\n    \"idValue\": \"919951935306\"\n}"
																},
																"url": {
																	"raw": "{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}/repository/parties",
																	"host": [
																		"{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"repository",
																		"parties"
																	]
																},
																"description": "Create a party"
															},
															"response": [
																{
																	"name": "An error occured processing the request",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																},
																{
																	"name": "The party was created",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "No Content",
																	"code": 204,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														},
														{
															"name": "Add party - invalid DOB (BUG)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "dbdf01bc-c327-40ce-b1fe-c869ade51177",
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"displayName\": \"GoldenFirst GoldenLast\",\n    \"firstName\": \"GoldenFirst\",\n    \"middleName\": \"\",\n    \"lastName\": \"GoldenLast\",\n    \"dateOfBirth\": \"1000-1000-1000\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"919951935306\"\n}"
																},
																"url": {
																	"raw": "{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}/repository/parties",
																	"host": [
																		"{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"repository",
																		"parties"
																	]
																},
																"description": "Create a party"
															},
															"response": [
																{
																	"name": "An error occured processing the request",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																},
																{
																	"name": "The party was created",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "No Content",
																	"code": 204,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														},
														{
															"name": "Add party - null DOB (BUG)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "dbdf01bc-c327-40ce-b1fe-c869ade51177",
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"displayName\": \"GoldenFirst GoldenLast\",\n    \"firstName\": \"GoldenFirst\",\n    \"middleName\": \"\",\n    \"lastName\": \"GoldenLast\",\n    \"dateOfBirth\": \"000000\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"919951935306\"\n}"
																},
																"url": {
																	"raw": "{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}/repository/parties",
																	"host": [
																		"{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"repository",
																		"parties"
																	]
																},
																"description": "Create a party"
															},
															"response": [
																{
																	"name": "The party was created",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "No Content",
																	"code": 204,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																},
																{
																	"name": "An error occured processing the request",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														},
														{
															"name": "Add party - FN with @#$ (BUG)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "dbdf01bc-c327-40ce-b1fe-c869ade51177",
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});",
																			"",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"displayName\": \"GoldenFirst GoldenLast\",\n    \"firstName\": \"@#$\",\n    \"middleName\": \"\",\n    \"lastName\": \"GoldenLast\",\n    \"dateOfBirth\": \"2010-10-10\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"919951935306\"\n}"
																},
																"url": {
																	"raw": "{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}/repository/parties",
																	"host": [
																		"{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"repository",
																		"parties"
																	]
																},
																"description": "Create a party"
															},
															"response": [
																{
																	"name": "An error occured processing the request",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																},
																{
																	"name": "The party was created",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "No Content",
																	"code": 204,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														},
														{
															"name": "Add party _missing displayname (BUG)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "2932ce25-1c52-4753-8b99-9e2aeba2d53e",
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n   \n    \"firstName\": \"GoldenFirst\",\n    \"middleName\": \"\",\n    \"lastName\": \"GoldenLast\",\n    \"dateOfBirth\": \"2010-10-10\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"+919951935306\"\n}"
																},
																"url": {
																	"raw": "{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}/repository/parties",
																	"host": [
																		"{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"repository",
																		"parties"
																	]
																},
																"description": "Create a party"
															},
															"response": [
																{
																	"name": "An error occured processing the request",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																},
																{
																	"name": "The party was created",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "No Content",
																	"code": 204,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														},
														{
															"name": "Add party -missing FN (BUG)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "9d7e26b8-f814-492c-a1a8-7c04cfe4ddfe",
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"displayName\": \"GoldenFirst GoldenLast\",\n    \n    \"middleName\": \"\",\n    \"lastName\": \"GoldenLast\",\n    \"dateOfBirth\": \"2010-10-10\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"919951935306\"\n}"
																},
																"url": {
																	"raw": "{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}/repository/parties",
																	"host": [
																		"{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"repository",
																		"parties"
																	]
																},
																"description": "Create a party"
															},
															"response": [
																{
																	"name": "An error occured processing the request",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																},
																{
																	"name": "The party was created",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "No Content",
																	"code": 204,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														},
														{
															"name": "Add party - missing LN (BUG)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "bd310488-9b91-4d82-b29d-97d0f1a33309",
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"displayName\": \"GoldenFirst GoldenLast\",\n    \"firstName\": \"GoldenFirst\",\n    \"middleName\": \"\",\n    \n    \"dateOfBirth\": \"2010-10-10\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"919951935306\"\n}"
																},
																"url": {
																	"raw": "{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}/repository/parties",
																	"host": [
																		"{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"repository",
																		"parties"
																	]
																},
																"description": "Create a party"
															},
															"response": [
																{
																	"name": "The party was created",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "No Content",
																	"code": 204,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																},
																{
																	"name": "An error occured processing the request",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														},
														{
															"name": "Add party - empty string MN",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "be4503ba-4868-4d37-853d-ce28d58f055b",
																		"exec": [
																			"pm.test(\"Status code is 400\", function () {",
																			"    pm.response.to.have.status(400);",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "noauth"
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"displayName\": \"GoldenFirst GoldenLast\",\n    \"firstName\": \"GoldenFirst\",\n    \"middleName\": \"\",\n    \"lastName\": \"GoldenLast\",\n    \"dateOfBirth\": \"2010-10-10\",\n    \"idType\": \"MSISDN\",\n    \"idValue\": \"919951935306\"\n}"
																},
																"url": {
																	"raw": "{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}/repository/parties",
																	"host": [
																		"{{GOLDENPAYEEFSP_BACKEND_TESTAPI_URL}}"
																	],
																	"path": [
																		"repository",
																		"parties"
																	]
																},
																"description": "Create a party"
															},
															"response": [
																{
																	"name": "An error occured processing the request",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																},
																{
																	"name": "The party was created",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n    \"displayName\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"middleName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"dateOfBirth\": \"<string>\",\n    \"merchantClassificationCode\": \"<string>\"\n}"
																		},
																		"url": {
																			"raw": "{{baseUrl}}/repository/parties",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"repository",
																				"parties"
																			]
																		}
																	},
																	"status": "No Content",
																	"code": 204,
																	"_postman_previewlanguage": "Text",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "text/plain"
																		}
																	],
																	"cookie": [],
																	"body": ""
																}
															]
														}
													],
													"_postman_isSubFolder": true
												}
											],
											"_postman_isSubFolder": true
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "sdk",
					"item": [
						{
							"name": "parties",
							"item": [
								{
									"name": "positive",
									"item": [
										{
											"name": "Get Party Receiver",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "decab794-66d7-4b03-b6da-4191441206a8",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"//Check data on payee side",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"GOLDENPAYEEFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"goldenpayeefspReceiverMSISDN\"), function (err, response) {",
															"       ",
															"       if(response.responseSize !== 0) { ",
															"       //Checking headers",
															"        var headers = response.json().headers;",
															"        pm.test(\"payeefsp fspiop-source is goldenpayerfsp\", function () {",
															"            pm.expect(headers['fspiop-source']).to.eql('goldenpayerfsp');",
															"        });",
															"        ",
															"        pm.test(\"payeefsp fspiop-destination is payeefsp\", function () {",
															"            pm.expect(headers['fspiop-destination']).to.eql('goldenpayeefsp');",
															"        });",
															"        ",
															"        pm.test(\"payeefsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
															"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
															"        });",
															"        ",
															"        pm.test(\"payeefsp accept should be application/vnd.interoperability.parties+json;version=1\", function () {",
															"            pm.expect(headers['accept']).to.eql('application/vnd.interoperability.parties+json;version=1');",
															"        });",
															"        ",
															"        ",
															"        ",
															"        // //Validate protected header inside Signature",
															"        // var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
															"        // var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
															"        // console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
															"        ",
															"        // // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
															"        // //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
															"        // // });",
															"        ",
															"        // pm.test(\"payeefsp FSPIOP-Signature Protected Header alg to be RS256\", function () {",
															"        //     pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
															"        // });",
															"        // pm.test(\"payeefsp FSPIOP-Signature Protected Header FSPIOP-URI to be /parties\", function () {",
															"        //     pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties');",
															"        // });",
															"        ",
															"",
															"        // pm.test(\"payeefsp FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be GET\", function () {",
															"        //     pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('GET');",
															"        // });",
															"        // pm.test(\"payeefsp FSPIOP-Signature Protected Header FSPIOP-Source to be Payerfsp\", function () {",
															"        //     pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payerfsp');",
															"        // });",
															"        // pm.test(\"payeefsp FSPIOP-Signature Protected Header FSPIOP-Destination to be payeefsp\", function () {",
															"        //     pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payeefsp');",
															"        // });",
															"        // pm.test(\"payeefsp FSPIOP-Signature Protected Header Date is present\", function () {",
															"        //     pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
															"        // });",
															"       ",
															"        pm.test(\"payeefsp FSPIOP-URI to be /parties\", function () {",
															"            pm.expect(headers['fspiop-uri']).to.eql('/parties');",
															"        });",
															"        ",
															"        pm.test(\"payeefsp fspiop-http-method is GET\", function () {",
															"            pm.expect(headers['fspiop-http-method']).to.eql('GET');",
															"        });",
															"        ",
															"        ",
															"        ",
															"       } else {",
															"           pm.test(\"Parties FAILED - payeeFSP\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           ",
															"       }",
															"      ",
															"    });",
															"}, 100)",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"GOLDENPAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.variables.get(\"goldenpayeefspReceiverMSISDN\"), function (err, response) {",
															"       ",
															"       if(response.responseSize !== 0) { ",
															"       //Checking headers",
															"        var headers = response.json().headers;",
															"        pm.test(\"On payerfsp fspiop-source is goldenpayeefsp\", function () {",
															"            pm.expect(headers['fspiop-source']).to.eql('goldenpayeefsp');",
															"        });",
															"        ",
															"        pm.test(\"On payerfsp fspiop-destination is goldenpayerfsp\", function () {",
															"            pm.expect(headers['fspiop-destination']).to.eql('goldenpayerfsp');",
															"        });",
															"        ",
															"        pm.test(\"On payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
															"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
															"        });",
															"        ",
															"        pm.test(\"payerfsp accept is empty\", function () {",
															"            pm.expect(headers['accept']).to.eql(undefined);",
															"        });",
															"        ",
															"        //Validate protected header inside Signature",
															"        var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
															"        var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
															"        console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
															"        ",
															"        // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
															"        //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
															"        // });",
															"        ",
															"        pm.test(\"payerfsp FSPIOP-Signature Protected Header alg to be RS256\", function () {",
															"            pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
															"        });",
															"        pm.test(\"payerfsp FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"goldenpayeefspReceiverMSISDN\"), function () {",
															"            pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/'+pm.environment.get(\"goldenpayeefspReceiverMSISDN\"));",
															"        });",
															"        ",
															"",
															"        pm.test(\"payerfsp FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
															"            pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
															"        });",
															"        pm.test(\"payerfsp FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
															"            pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('goldenpayeefsp');",
															"        });",
															"        pm.test(\"payerfsp FSPIOP-Signature Protected Header FSPIOP-Destination to be goldenpayerfsp\", function () {",
															"            pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('goldenpayerfsp');",
															"        });",
															"        pm.test(\"payerfsp FSPIOP-Signature Protected Header Date is present\", function () {",
															"            pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
															"        });",
															"       ",
															"        pm.test(\"payerfsp FSPIOP-URI to be /parties/MSISDN/\"+pm.environment.get(\"goldenpayeefspReceiverMSISDN\"), function () {",
															"            pm.expect(headers['fspiop-uri']).to.eql('/parties/MSISDN/'+pm.environment.get(\"goldenpayeefspReceiverMSISDN\"));",
															"        });",
															"        ",
															"        pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
															"            pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
															"        });",
															"        ",
															"       //Checking data",
															"       var jsonData = response.json().data;",
															"        pm.test(\"Expected partyIdType is MSISDN\", function () {",
															"           pm.expect(jsonData.party.partyIdInfo.partyIdType).to.eql('MSISDN');",
															"        });",
															"        pm.test(\"Expected partyIdentifier is \"+pm.environment.get('goldenpayeefspReceiverMSISDN'), function () {",
															"           pm.expect(jsonData.party.partyIdInfo.partyIdentifier).to.eql(pm.environment.get('goldenpayeefspReceiverMSISDN'));",
															"        });",
															"        pm.test(\"Expected fspId is goldenpayeefsp\", function () {",
															"           pm.expect(jsonData.party.partyIdInfo.fspId).to.eql('goldenpayeefsp');",
															"        });",
															"        ",
															"       pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedPayeeFirstName\"), function () {",
															"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedPayeeFirstName\"));",
															"        });",
															"        pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedPayeeLastName\"), function () {",
															"          pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedPayeeLastName\"));",
															"        });",
															"        pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedPayeeDOB\"), function () {",
															"          pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedPayeeDOB\"));",
															"        });  ",
															"        ",
															"       } else {",
															"           pm.test(\"Parties FAILED - payerFSP\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"        }",
															"    });",
															"}, 200)",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
														"exec": [
															"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
															"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
															"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.parties+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.parties+json;version=1.0"
													},
													{
														"key": "FSPIOP-Source",
														"value": "goldenpayerfsp"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "mojaloop-sdk",
														"type": "text",
														"disabled": true
													},
													{
														"key": "FSPIOP-Signature",
														"value": "{{fspiop-signature}}",
														"type": "text",
														"disabled": true
													},
													{
														"key": "FSPIOP-HTTP-Method",
														"value": "GET",
														"type": "text",
														"disabled": true
													},
													{
														"key": "FSPIOP-URI",
														"value": "/parties/MSISDN/{{pathfinderMSISDN}}",
														"type": "text",
														"disabled": true
													}
												],
												"url": {
													"raw": "{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}/parties/MSISDN/{{goldenpayeefspReceiverMSISDN}}",
													"host": [
														"{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}"
													],
													"path": [
														"parties",
														"MSISDN",
														"{{goldenpayeefspReceiverMSISDN}}"
													]
												},
												"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "negative",
									"item": [
										{
											"name": "Missing Headers&URI params",
											"item": [
												{
													"name": "Missing Accept (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"pm.test(\"Error Code is 3100\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3100');",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '10/10/2010');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json;version=1",
																"disabled": true
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "GET"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "parties/MSISDN/{{pathfinderMSISDN}}"
															}
														],
														"url": {
															"raw": "{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}/parties/MSISDN/{{goldenpayeefspReceiverMSISDN}}",
															"host": [
																"{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"{{goldenpayeefspReceiverMSISDN}}"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Missing Content-Type",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"                pm.expect(signature).to.not.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '10/10/2010');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0",
																"disabled": true
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "GET"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/parties/MSISDN/{{pathfinderMSISDN}}"
															}
														],
														"url": {
															"raw": "{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}/quotesparties/MSISDN/{{goldenpayeefspReceiverMSISDN}}",
															"host": [
																"{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}"
															],
															"path": [
																"quotesparties",
																"MSISDN",
																"{{goldenpayeefspReceiverMSISDN}}"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Missing FSPIOP-Source",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"                pm.expect(signature).to.not.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '10/10/2010');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"disabled": true
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "GET"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/parties/MSISDN/{{pathfinderMSISDN}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}/parties/MSISDN/{{goldenpayeefspReceiverMSISDN}}",
															"host": [
																"{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"{{goldenpayeefspReceiverMSISDN}}"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Missing Date",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"pm.test(\"Error Code is 3100\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3100');",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '10/10/2010');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}",
																"disabled": true
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "GET"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/parties/MSISDN/{{pathfinderMSISDN}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}/parties/MSISDN/{{goldenpayeefspReceiverMSISDN}}",
															"host": [
																"{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"{{goldenpayeefspReceiverMSISDN}}"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Missing FSPIOP-Destination",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"                pm.expect(signature).to.not.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '10/10/2010');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk",
																"disabled": true
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "GET"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/parties/MSISDN/{{pathfinderMSISDN}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}/parties/MSISDN/{{goldenpayeefspReceiverMSISDN}}",
															"host": [
																"{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"{{goldenpayeefspReceiverMSISDN}}"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB.\n\nFSPIOP-Destination is not needed for a GET /parties call as the payer doesn't know the destination."
													},
													"response": []
												},
												{
													"name": "Missing FSPIOP-Signature JWS",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"                pm.expect(signature).to.not.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '10/10/2010');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiop-signature}}",
																"disabled": true
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "GET"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/parties/MSISDN/{{pathfinderMSISDN}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"quoteId\":\"{{quoteId}}\",\"transactionId\":\"{{transactionId}}\",\"amountType\":\"SEND\",\"amount\":{\"currency\":\"XOF\",\"amount\":\"10\"},\"expiration\":\"2019-06-04T04:02:10.378Z\",\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17855501914\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Murthy\",\"lastName\":\"Kakarlamudi\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Murthy Kakarlamudi\",\"merchantClassificationCode\":\"123\"},\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17039811907\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Sridevi\",\"lastName\":\"Miriyala\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Sridevi Miriyala\",\"merchantClassificationCode\":\"456\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"testing\"}"
														},
														"url": {
															"raw": "{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}/parties/MSISDN/{{goldenpayeefspReceiverMSISDN}}",
															"host": [
																"{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"{{goldenpayeefspReceiverMSISDN}}"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Missing FSPIOP-HTTP-MethodJWS",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"                pm.expect(signature).to.not.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '10/10/2010');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "GET",
																"disabled": true
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/parties/MSISDN/{{pathfinderMSISDN}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}/parties/MSISDN/{{goldenpayeefspReceiverMSISDN}}",
															"host": [
																"{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"{{goldenpayeefspReceiverMSISDN}}"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Missing FSPIOP-URI JWS",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"                pm.expect(signature).to.not.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '10/10/2010');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "GET"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/parties/MSISDN/{{pathfinderMSISDN}}",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}/parties/MSISDN/{{goldenpayeefspReceiverMSISDN}}",
															"host": [
																"{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"{{goldenpayeefspReceiverMSISDN}}"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Missing FSPIOP-URI param",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"                pm.expect(signature).to.not.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '10/10/2010');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "GET"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/parties/MSISDN/{{pathfinderMSISDN}}",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}/MSISDN/{{goldenpayeefspReceiverMSISDN}}",
															"host": [
																"{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}"
															],
															"path": [
																"MSISDN",
																"{{goldenpayeefspReceiverMSISDN}}"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Missing ID (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '10/10/2010');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "GET"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/parties/MSISDN/{{pathfinderMSISDN}}",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}/parties/MSISDN",
															"host": [
																"{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}"
															],
															"path": [
																"parties",
																"MSISDN"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Missing Type (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"                pm.expect(signature).to.not.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '10/10/2010');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "GET"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/parties/MSISDN/{{pathfinderMSISDN}}",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}/parties/{{goldenpayeefspReceiverMSISDN}}",
															"host": [
																"{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}"
															],
															"path": [
																"parties",
																"{{goldenpayeefspReceiverMSISDN}}"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												}
											],
											"_postman_isSubFolder": true
										},
										{
											"name": "Invalid Headers & URI params",
											"item": [
												{
													"name": "Invalid FSPIOP-URI (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"fspiop-signature is returned\", function () {",
																	"                pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"payeefsp_fspiop_signature\"));",
																	"            });",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '2010-10-10');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "mojaloop-sdk",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiop-signature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "GET",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/parties/{{pathfinderMSISDN}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/parties/MSISDN/17039911999",
															"host": [
																"{{HOST_PAYEE_SDK_SIMULATOR}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"17039911999"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Invalid FSPIOP-HTTP-Method (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"fspiop-signature is returned\", function () {",
																	"                pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"payeefsp_fspiop_signature\"));",
																	"            });",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '2010-10-10');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "mojaloop-sdk",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiop-signature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "GETT",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/parties/MSISDN/{{pathfinderMSISDN}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/parties/MSISDN/17039911999",
															"host": [
																"{{HOST_PAYEE_SDK_SIMULATOR}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"17039911999"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Invalid Accept Header (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"fspiop-signature is returned\", function () {",
																	"                pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"payeefsp_fspiop_signature\"));",
																	"            });",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '2010-10-10');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "mojaloop-sdk",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiop-signature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "GET",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/parties/MSISDN/{{pathfinderMSISDN}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/parties/MSISDN/17039911999",
															"host": [
																"{{HOST_PAYEE_SDK_SIMULATOR}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"17039911999"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Invalid Content-Type (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"fspiop-signature is returned\", function () {",
																	"                pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"payeefsp_fspiop_signature\"));",
																	"            });",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '2010-10-10');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=100.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "GETT"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/parties/MSISDN/{{pathfinderMSISDN}}"
															}
														],
														"url": {
															"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/parties/MSISDN/17039811907",
															"host": [
																"{{HOST_PAYEE_SDK_SIMULATOR}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"17039811907"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Invalid FSPIOP-Destination",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"fspiop-signature is returned\", function () {",
																	"                pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"payeefsp_fspiop_signature\"));",
																	"            });",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '2010-10-10');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "mojaloop",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiop-signature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "GET",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/parties/MSISDN/{{pathfinderMSISDN}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/parties/MSISDN/17039811907",
															"host": [
																"{{HOST_PAYEE_SDK_SIMULATOR}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"17039811907"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Invalid Date (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"fspiop-signature is returned\", function () {",
																	"                pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"payeefsp_fspiop_signature\"));",
																	"            });",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '2010-10-10');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "2019-04T02:01:23.526Z"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "mojaloop-sdk",
																"type": "text"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiop-signature}}",
																"type": "text"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"value": "GET",
																"type": "text"
															},
															{
																"key": "FSPIOP-URI",
																"value": "/parties/MSISDN/{{pathfinderMSISDN}}",
																"type": "text"
															}
														],
														"url": {
															"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/parties/MSISDN/17039811907",
															"host": [
																"{{HOST_PAYEE_SDK_SIMULATOR}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"17039811907"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Invalid Signature-3105",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"fspiop-signature is returned\", function () {",
																	"                pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"payeefsp_fspiop_signature\"));",
																	"            });",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '2010-10-10');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "dummy"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "GET"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/parties/MSISDN/{{pathfinderMSISDN}}",
																"disabled": true
															}
														],
														"url": {
															"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/parties/MSISDN/17039811907",
															"host": [
																"{{HOST_PAYEE_SDK_SIMULATOR}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"17039811907"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Invalid Type URI Param (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"fspiop-signature is returned\", function () {",
																	"                pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"payeefsp_fspiop_signature\"));",
																	"            });",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '2010-10-10');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "GET"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/parties/MSISDN/{{pathfinderMSISDN}}"
															}
														],
														"url": {
															"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/parties/MSISDNABC/17039811907",
															"host": [
																"{{HOST_PAYEE_SDK_SIMULATOR}}"
															],
															"path": [
																"parties",
																"MSISDNABC",
																"17039811907"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Invalid ID (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"fspiop-signature is returned\", function () {",
																	"                pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"payeefsp_fspiop_signature\"));",
																	"            });",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '2010-10-10');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "GET"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/parties/MSISDN/{{pathfinderMSISDN}}"
															}
														],
														"url": {
															"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/parties/MSISDN/10000abcd",
															"host": [
																"{{HOST_PAYEE_SDK_SIMULATOR}}"
															],
															"path": [
																"parties",
																"MSISDN",
																"10000abcd"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Invalid URI param (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 404\", function () {",
																	"    pm.response.to.have.status(404);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"fspiop-signature is returned\", function () {",
																	"                pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"payeefsp_fspiop_signature\"));",
																	"            });",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '2010-10-10');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.parties+json"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.parties+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "GET"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/parties/MSISDN/{{pathfinderMSISDN}}"
															}
														],
														"url": {
															"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/MSISDN/17039811907",
															"host": [
																"{{HOST_PAYEE_SDK_SIMULATOR}}"
															],
															"path": [
																"MSISDN",
																"17039811907"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												}
											],
											"_postman_isSubFolder": true
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "edge_test_cases",
									"item": [
										{
											"name": "Non-Existing Receiver - 3200",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "decab794-66d7-4b03-b6da-4191441206a8",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/17039911999\", function (err, response) {",
															"       if(response.responseSize !== 0) {",
															"            //Checking headers",
															"            var headers = response.json().headers;",
															"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
															"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
															"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
															"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp accept is empty\", function () {",
															"                pm.expect(headers['accept']).to.eql(undefined);",
															"            });",
															"            ",
															"            pm.test(\"fspiop-signature is returned\", function () {",
															"                pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"payeefsp_fspiop_signature\"));",
															"            });",
															"            ",
															"            //Validate protected header inside Signature",
															"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
															"            console.log('signature:',signature)",
															"            console.log('protectedHeader:',protectedHeader)",
															"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
															"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
															"            ",
															"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
															"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
															"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
															"            });",
															"           ",
															"            ",
															"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
															"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
															"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
															"            });",
															"            ",
															"            var jsonData = response.json().data;",
															"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
															"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
															"            });",
															"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
															"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
															"            });",
															"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
															"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
															"            });  ",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"        ",
															"      ",
															"    });",
															"}, 4000)",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
														"exec": [
															"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
															"pm.variables.set('expectedFirstName', 'Sridevi');",
															"pm.variables.set('expectedLastName', 'Miriyala');",
															"pm.variables.set('expectedDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.parties+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.parties+json;version=1.0"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "mojaloop-sdk",
														"type": "text"
													},
													{
														"key": "FSPIOP-Signature",
														"value": "{{fspiop-signature}}",
														"type": "text"
													},
													{
														"key": "FSPIOP-HTTP-Method",
														"value": "GET",
														"type": "text"
													},
													{
														"key": "FSPIOP-URI",
														"value": "/parties/MSISDN/{{pathfinderMSISDN}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/parties/MSISDN/17039911999",
													"host": [
														"{{HOST_PAYEE_SDK_SIMULATOR}}"
													],
													"path": [
														"parties",
														"MSISDN",
														"17039911999"
													]
												},
												"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
											},
											"response": []
										},
										{
											"name": "Non-Existing Receiver - 3200 Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "decab794-66d7-4b03-b6da-4191441206a8",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/17039911999\", function (err, response) {",
															"       if(response.responseSize !== 0) {",
															"            //Checking headers",
															"            var headers = response.json().headers;",
															"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
															"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
															"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
															"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp accept is empty\", function () {",
															"                pm.expect(headers['accept']).to.eql(undefined);",
															"            });",
															"            ",
															"            pm.test(\"fspiop-signature is returned\", function () {",
															"                pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"payeefsp_fspiop_signature\"));",
															"            });",
															"            ",
															"            //Validate protected header inside Signature",
															"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
															"            console.log('signature:',signature)",
															"            console.log('protectedHeader:',protectedHeader)",
															"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
															"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
															"            ",
															"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
															"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
															"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
															"            });",
															"           ",
															"            ",
															"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
															"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
															"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
															"            });",
															"            ",
															"            var jsonData = response.json().data;",
															"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
															"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
															"            });",
															"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
															"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
															"            });",
															"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
															"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
															"            });  ",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"        ",
															"      ",
															"    });",
															"}, 4000)",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
														"exec": [
															"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
															"pm.variables.set('expectedFirstName', 'Sridevi');",
															"pm.variables.set('expectedLastName', 'Miriyala');",
															"pm.variables.set('expectedDOB', '2010-10-10');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.parties+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.parties+json;version=1.0"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "mojaloop-sdk",
														"type": "text"
													},
													{
														"key": "FSPIOP-Signature",
														"value": "{{fspiop-signature}}",
														"type": "text"
													},
													{
														"key": "FSPIOP-HTTP-Method",
														"value": "GET",
														"type": "text"
													},
													{
														"key": "FSPIOP-URI",
														"value": "/parties/MSISDN/{{pathfinderMSISDN}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/parties/MSISDN/17039911999",
													"host": [
														"{{HOST_PAYEE_SDK_SIMULATOR}}"
													],
													"path": [
														"parties",
														"MSISDN",
														"17039911999"
													]
												},
												"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "quotes",
							"item": [
								{
									"name": "positive",
									"item": [
										{
											"name": "Send Quote",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"var navigator = {}; //fake a navigator object for the lib",
															"var window = {}; //fake a window object for the lib",
															"eval(pm.environment.get('jrsassign'));",
															"",
															"",
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('quoteId', generatedUUID);",
															"generatedUUID = uuid.v4();",
															"pm.environment.set('transactionId', generatedUUID);",
															"",
															"pm.variables.set('quoteDate', (new Date()).toUTCString());",
															"pm.variables.set('payerName', 'PayerFirst PayerLast');",
															"pm.variables.set('payerMSISDN', '918381008987');",
															"",
															"pm.variables.set('expectedPayeeFirstName', 'GoldenFirst');",
															"pm.variables.set('expectedPayeeLastName', 'GoldenLast');",
															"pm.variables.set('expectedPayeeDOB', '2010-10-10');",
															"",
															"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"goldenpayerfsp\",\"FSPIOP-Destination\":\"goldenpayeefsp\", \"FSPIOP-URI\":\"/quotes\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('quoteDate')};",
															"var sHeader = JSON.stringify(oHeader);",
															"console.log(`sHeader: ${sHeader}`)",
															"",
															"var objPayload = {",
															"  \"quoteId\": pm.environment.get('quoteId'),",
															"  \"transactionId\": pm.environment.get('transactionId'),",
															"  \"payer\": {",
															"    \"partyIdInfo\": {",
															"      \"partyIdType\": \"MSISDN\",",
															"      \"partyIdentifier\": pm.variables.get('payerMSISDN'),",
															"      \"fspId\": \"goldenpayerfsp\"",
															"    },",
															"    \"personalInfo\": {",
															"      \"complexName\": {",
															"        \"firstName\": \"Mats\",",
															"        \"lastName\": \"Hagman\"",
															"      },",
															"      \"dateOfBirth\": \"1983-10-25\"",
															"    }",
															"  },",
															"  \"payee\": {",
															"    \"partyIdInfo\": {",
															"      \"partyIdType\": \"MSISDN\",",
															"      \"partyIdentifier\": pm.environment.get('goldenpayeefspReceiverMSISDN'),",
															"      \"fspId\": \"goldenpayeefsp\"",
															"    }",
															"  },",
															"  \"amountType\": \"SEND\",",
															"  \"amount\": {",
															"    \"amount\": \"60\",",
															"    \"currency\": pm.environment.get('currency')",
															"  },",
															"  \"transactionType\": {",
															"    \"scenario\": \"TRANSFER\",",
															"    \"initiator\": \"PAYER\",",
															"    \"initiatorType\": \"CONSUMER\"",
															"  },",
															"  \"note\": \"hej\"",
															"}",
															"",
															"var sPayload = JSON.stringify(objPayload)",
															"console.log(`sPayload: ${sPayload}`)",
															"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('goldenpayerfspJWSKey'));",
															"console.log(`token: ${token}`)",
															"",
															"// var encodedHeaders = btoa(sHeader)",
															"",
															"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
															"// var token = JSON.stringify(ofspiopSignature)",
															"",
															"const [ protectedHeaderBase64, , signature ] = token.split('.');",
															"",
															"const signatureObject = {",
															"    signature: signature.replace('\"', ''),",
															"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
															"};",
															"",
															"console.log(JSON.stringify(signatureObject))",
															"",
															"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"GOLDENPAYERFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              ",
															"              //Check the Headers",
															"              var headers = response.json().headers;",
															"              ",
															"                pm.test(\"payeefsp fspiop-source is goldenpayerfsp\", function () {",
															"                    pm.expect(headers['fspiop-source']).to.eql('goldenpayerfsp');",
															"                });",
															"                ",
															"                pm.test(\"payeefsp fspiop-destination is goldenpayerfsp\", function () {",
															"                    pm.expect(headers['fspiop-destination']).to.eql('goldenpayeefsp');",
															"                });",
															"                ",
															"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
															"                });",
															"                ",
															"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
															"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
															"                });",
															"                ",
															"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
															"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
															"                });",
															"                ",
															"          } else {",
															"              pm.test(\"Quote FAILED\", function () {",
															"                throw new Error('Did not receive request on payee side');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 1100)",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"GOLDENPAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          //Checking headers",
															"            var headers = response.json().headers;",
															"            pm.test(\"payerfsp fspiop-source is goldenpayeefsp\", function () {",
															"                pm.expect(headers['fspiop-source']).to.eql('goldenpayeefsp');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {",
															"                pm.expect(headers['fspiop-destination']).to.eql('goldenpayerfsp');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
															"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp accept is empty\", function () {",
															"                pm.expect(headers['accept']).to.eql(undefined);",
															"            });",
															"            ",
															"            ",
															"            ",
															"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
															"            // var strData = JSON.stringify(response.json().data)",
															"            // const token = `${protectedHeader}.${btoa(strData)}.${signature}`",
															"            // console.log(`token: ${token}`)",
															"            // var isValid = KJUR.jws.JWS.verify(token, pm.environment.get('goldenpayeefspJWSPubKey'), {alg: ['RS256']})",
															"            // console.log(`isValid: ${isValid}`)",
															"            // pm.test(\"Check if the response is JWS valid\", function () {",
															"            //     pm.expect(isValid).to.eql(true);",
															"            // });",
															"            ",
															"            //Validate protected header inside Signature",
															"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
															"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
															"            ",
															"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
															"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
															"            });",
															"            ",
															"",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be goldenpayeefsp\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('goldenpayeefsp');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be goldenpayerfsp\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('goldenpayerfsp');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
															"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
															"            });",
															"           ",
															"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
															"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
															"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
															"            });",
															"            ",
															"            var jsonData = response.json().data;",
															"          ",
															"            pm.test(\"Response ilpPacket is not null\", function () {",
															"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
															"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
															"            });",
															"       ",
															"           pm.test(\"Response condition is not null\", function () {",
															"               pm.expect(jsonData.condition).not.equal(undefined);",
															"               pm.environment.set(\"condition\", jsonData.condition);",
															"           });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 1000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "goldenpayerfsp"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "goldenpayeefsp"
													},
													{
														"key": "FSPIOP-Signature",
														"value": "{{fspiopSignature}}",
														"type": "text"
													},
													{
														"key": "FSPIOP-HTTP-Method",
														"value": "POST",
														"type": "text"
													},
													{
														"key": "FSPIOP-URI",
														"value": "/quotes",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{payerMSISDN}}\",\n      \"fspId\": \"goldenpayerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{goldenpayeefspReceiverMSISDN}}\",\n      \"fspId\": \"goldenpayeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}/quotes",
													"host": [
														"{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "negative_test_cases",
									"item": [
										{
											"name": "Missing Headers&URI params",
											"item": [
												{
													"name": "Missing Accept (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"pm.test(\"Error Code is 3100\", function () {",
																	"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3100');",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '10/10/2010');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1",
																"disabled": true
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "Tue, 04 Jun 2019 04:01:10 GMT"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{quote-fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/quotes"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"quoteId\":\"{{quoteId}}\",\"transactionId\":\"{{transactionId}}\",\"amountType\":\"SEND\",\"amount\":{\"currency\":\"XOF\",\"amount\":\"10\"},\"expiration\":\"2019-06-04T04:02:10.378Z\",\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17855501914\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Murthy\",\"lastName\":\"Kakarlamudi\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Murthy Kakarlamudi\",\"merchantClassificationCode\":\"123\"},\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17039811907\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Sridevi\",\"lastName\":\"Miriyala\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Sridevi Miriyala\",\"merchantClassificationCode\":\"456\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"testing\"}"
														},
														"url": {
															"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/quotes",
															"host": [
																"{{HOST_PAYEE_SDK_SIMULATOR}}"
															],
															"path": [
																"quotes"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Missing FSPIOP-URI (BUG)",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.environment.set('quoteId', generatedUUID);",
																	"   generatedUUID = uuid.v4();",
																	"   pm.environment.set('transactionId', generatedUUID);",
																	"",
																	"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
																	"// });",
																	"",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
																	"      if(response.responseSize !== 0) {",
																	"          //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"                pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
																	"            });",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"          ",
																	"            pm.test(\"Response ilpPacket is not null\", function () {",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
																	"            });",
																	"       ",
																	"           pm.test(\"Response condition is not null\", function () {",
																	"               pm.expect(jsonData.condition).not.equal(undefined);",
																	"               pm.environment.set(\"condition\", jsonData.condition);",
																	"           });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 1000)",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "Tue, 04 Jun 2019 04:01:10 GMT"
															},
															{
																"key": "FSPIOP-Source",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{quote-fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/quotes",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"quoteId\":\"{{quoteId}}\",\"transactionId\":\"{{transactionId}}\",\"amountType\":\"SEND\",\"amount\":{\"currency\":\"XOF\",\"amount\":\"10\"},\"expiration\":\"2019-06-04T04:02:10.378Z\",\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17855501914\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Murthy\",\"lastName\":\"Kakarlamudi\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Murthy Kakarlamudi\",\"merchantClassificationCode\":\"123\"},\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17039811907\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Sridevi\",\"lastName\":\"Miriyala\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Sridevi Miriyala\",\"merchantClassificationCode\":\"456\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"testing\"}"
														},
														"url": {
															"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/quotes",
															"host": [
																"{{HOST_PAYEE_SDK_SIMULATOR}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Missing Date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.environment.set('quoteId', generatedUUID);",
																	"   generatedUUID = uuid.v4();",
																	"   pm.environment.set('transactionId', generatedUUID);",
																	"",
																	"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
																	"// });",
																	"",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
																	"      if(response.responseSize !== 0) {",
																	"          //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"                pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
																	"            });",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"          ",
																	"            pm.test(\"Response ilpPacket is not null\", function () {",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
																	"            });",
																	"       ",
																	"           pm.test(\"Response condition is not null\", function () {",
																	"               pm.expect(jsonData.condition).not.equal(undefined);",
																	"               pm.environment.set(\"condition\", jsonData.condition);",
																	"           });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 1000)",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "Tue, 04 Jun 2019 04:01:10 GMT",
																"disabled": true
															},
															{
																"key": "FSPIOP-Source",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{quote-fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/quotes"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"quoteId\":\"{{quoteId}}\",\"transactionId\":\"{{transactionId}}\",\"amountType\":\"SEND\",\"amount\":{\"currency\":\"XOF\",\"amount\":\"10\"},\"expiration\":\"2019-06-04T04:02:10.378Z\",\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17855501914\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Murthy\",\"lastName\":\"Kakarlamudi\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Murthy Kakarlamudi\",\"merchantClassificationCode\":\"123\"},\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17039811907\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Sridevi\",\"lastName\":\"Miriyala\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Sridevi Miriyala\",\"merchantClassificationCode\":\"456\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"testing\"}"
														},
														"url": {
															"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/quotes",
															"host": [
																"{{HOST_PAYEE_SDK_SIMULATOR}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Missing Content-Type (BUG - error msg)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"                pm.expect(signature).to.not.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '10/10/2010');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0",
																"disabled": true
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/quotes"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"quoteId\":\"{{quoteId}}\",\"transactionId\":\"{{transactionId}}\",\"amountType\":\"SEND\",\"amount\":{\"currency\":\"XOF\",\"amount\":\"10\"},\"expiration\":\"2019-06-04T04:02:10.378Z\",\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17855501914\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Murthy\",\"lastName\":\"Kakarlamudi\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Murthy Kakarlamudi\",\"merchantClassificationCode\":\"123\"},\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17039811907\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Sridevi\",\"lastName\":\"Miriyala\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Sridevi Miriyala\",\"merchantClassificationCode\":\"456\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"testing\"}"
														},
														"url": {
															"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/quotes",
															"host": [
																"{{HOST_PAYEE_SDK_SIMULATOR}}"
															],
															"path": [
																"quotes"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Missing body",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"                pm.expect(signature).to.not.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '10/10/2010');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/quotes"
															}
														],
														"url": {
															"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/quotes",
															"host": [
																"{{HOST_PAYEE_SDK_SIMULATOR}}"
															],
															"path": [
																"quotes"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Missing FSPIOP-Source",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"                pm.expect(signature).to.not.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '10/10/2010');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}",
																"disabled": true
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/quotes"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"quoteId\":\"{{quoteId}}\",\"transactionId\":\"{{transactionId}}\",\"amountType\":\"SEND\",\"amount\":{\"currency\":\"XOF\",\"amount\":\"10\"},\"expiration\":\"2019-06-04T04:02:10.378Z\",\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17855501914\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Murthy\",\"lastName\":\"Kakarlamudi\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Murthy Kakarlamudi\",\"merchantClassificationCode\":\"123\"},\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17039811907\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Sridevi\",\"lastName\":\"Miriyala\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Sridevi Miriyala\",\"merchantClassificationCode\":\"456\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"testing\"}"
														},
														"url": {
															"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/quotes",
															"host": [
																"{{HOST_PAYEE_SDK_SIMULATOR}}"
															],
															"path": [
																"quotes"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Missing FSPIOP-Destination (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"                pm.expect(signature).to.not.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '10/10/2010');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk",
																"disabled": true
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/quotes"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"quoteId\":\"{{quoteId}}\",\"transactionId\":\"{{transactionId}}\",\"amountType\":\"SEND\",\"amount\":{\"currency\":\"XOF\",\"amount\":\"10\"},\"expiration\":\"2019-06-04T04:02:10.378Z\",\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17855501914\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Murthy\",\"lastName\":\"Kakarlamudi\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Murthy Kakarlamudi\",\"merchantClassificationCode\":\"123\"},\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17039811907\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Sridevi\",\"lastName\":\"Miriyala\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Sridevi Miriyala\",\"merchantClassificationCode\":\"456\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"testing\"}"
														},
														"url": {
															"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/quotes",
															"host": [
																"{{HOST_PAYEE_SDK_SIMULATOR}}"
															],
															"path": [
																"quotes"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Missing FSPIOP-Signature",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"                pm.expect(signature).to.not.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '10/10/2010');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiop-signature}}",
																"disabled": true
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/quotes"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"quoteId\":\"{{quoteId}}\",\"transactionId\":\"{{transactionId}}\",\"amountType\":\"SEND\",\"amount\":{\"currency\":\"XOF\",\"amount\":\"10\"},\"expiration\":\"2019-06-04T04:02:10.378Z\",\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17855501914\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Murthy\",\"lastName\":\"Kakarlamudi\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Murthy Kakarlamudi\",\"merchantClassificationCode\":\"123\"},\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17039811907\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Sridevi\",\"lastName\":\"Miriyala\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Sridevi Miriyala\",\"merchantClassificationCode\":\"456\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"testing\"}"
														},
														"url": {
															"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/quotes",
															"host": [
																"{{HOST_PAYEE_SDK_SIMULATOR}}"
															],
															"path": [
																"quotes"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Missing FSPIOP-HTTP-Method",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"                pm.expect(signature).to.not.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '10/10/2010');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST",
																"disabled": true
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/quotes"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"quoteId\":\"{{quoteId}}\",\"transactionId\":\"{{transactionId}}\",\"amountType\":\"SEND\",\"amount\":{\"currency\":\"XOF\",\"amount\":\"10\"},\"expiration\":\"2019-06-04T04:02:10.378Z\",\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17855501914\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Murthy\",\"lastName\":\"Kakarlamudi\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Murthy Kakarlamudi\",\"merchantClassificationCode\":\"123\"},\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17039811907\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Sridevi\",\"lastName\":\"Miriyala\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Sridevi Miriyala\",\"merchantClassificationCode\":\"456\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"testing\"}"
														},
														"url": {
															"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/quotes",
															"host": [
																"{{HOST_PAYEE_SDK_SIMULATOR}}"
															],
															"path": [
																"quotes"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Missing FSPIOP-URI param",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"                pm.expect(signature).to.not.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '10/10/2010');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/quotes",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"quoteId\":\"{{quoteId}}\",\"transactionId\":\"{{transactionId}}\",\"amountType\":\"SEND\",\"amount\":{\"currency\":\"XOF\",\"amount\":\"10\"},\"expiration\":\"2019-06-04T04:02:10.378Z\",\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17855501914\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Murthy\",\"lastName\":\"Kakarlamudi\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Murthy Kakarlamudi\",\"merchantClassificationCode\":\"123\"},\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17039811907\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Sridevi\",\"lastName\":\"Miriyala\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Sridevi Miriyala\",\"merchantClassificationCode\":\"456\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"testing\"}"
														},
														"url": {
															"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/quotes",
															"host": [
																"{{HOST_PAYEE_SDK_SIMULATOR}}"
															],
															"path": [
																"quotes"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												},
												{
													"name": "Unsupported Method - 405 (BUG)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "decab794-66d7-4b03-b6da-4191441206a8",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
																	"// });",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
																	"       if(response.responseSize !== 0) {",
																	"            //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
																	"            console.log('signature:',signature)",
																	"            console.log('protectedHeader:',protectedHeader)",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"                pm.expect(signature).to.not.eql(undefined);",
																	"            });",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
																	"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
																	"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
																	"            });",
																	"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
																	"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
																	"            });  ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"        ",
																	"      ",
																	"    });",
																	"}, 4000)",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
																"exec": [
																	"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
																	"pm.variables.set('expectedFirstName', 'Sridevi');",
																	"pm.variables.set('expectedLastName', 'Miriyala');",
																	"pm.variables.set('expectedDOB', '10/10/2010');",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/quotes",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"quoteId\":\"{{quoteId}}\",\"transactionId\":\"{{transactionId}}\",\"amountType\":\"SEND\",\"amount\":{\"currency\":\"XOF\",\"amount\":\"10\"},\"expiration\":\"2019-06-04T04:02:10.378Z\",\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17855501914\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Murthy\",\"lastName\":\"Kakarlamudi\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Murthy Kakarlamudi\",\"merchantClassificationCode\":\"123\"},\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17039811907\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Sridevi\",\"lastName\":\"Miriyala\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Sridevi Miriyala\",\"merchantClassificationCode\":\"456\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"testing\"}"
														},
														"url": {
															"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/quotes",
															"host": [
																"{{HOST_PAYEE_SDK_SIMULATOR}}"
															],
															"path": [
																"quotes"
															]
														},
														"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
													},
													"response": []
												}
											],
											"_postman_isSubFolder": true
										},
										{
											"name": "Invalid Body",
											"item": [
												{
													"name": "Missing Quote ID",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.environment.set('quoteId', generatedUUID);",
																	"   generatedUUID = uuid.v4();",
																	"   pm.environment.set('transactionId', generatedUUID);",
																	"",
																	"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
																	"// });",
																	"",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
																	"      if(response.responseSize !== 0) {",
																	"          //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"                pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
																	"            });",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"          ",
																	"            pm.test(\"Response ilpPacket is not null\", function () {",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
																	"            });",
																	"       ",
																	"           pm.test(\"Response condition is not null\", function () {",
																	"               pm.expect(jsonData.condition).not.equal(undefined);",
																	"               pm.environment.set(\"condition\", jsonData.condition);",
																	"           });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 1000)",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "Tue, 04 Jun 2019 04:01:10 GMT"
															},
															{
																"key": "FSPIOP-Source",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{quote-fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/quotes"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"transactionId\":\"{{transactionId}}\",\"amountType\":\"SEND\",\"amount\":{\"currency\":\"XOF\",\"amount\":\"100\"},\"expiration\":\"2019-06-04T04:02:10.378Z\",\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17855501914\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Murthy\",\"lastName\":\"Kakarlamudi\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Murthy Kakarlamudi\",\"merchantClassificationCode\":\"123\"},\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17039811907\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Sridevi\",\"lastName\":\"Miriyala\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Sridevi Miriyala\",\"merchantClassificationCode\":\"456\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"testing\"}"
														},
														"url": {
															"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/quotes",
															"host": [
																"{{HOST_PAYEE_SDK_SIMULATOR}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Invalid currency param",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.environment.set('quoteId', generatedUUID);",
																	"   generatedUUID = uuid.v4();",
																	"   pm.environment.set('transactionId', generatedUUID);",
																	"",
																	"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
																"exec": [
																	"pm.test(\"Status code is 400\", function () {",
																	"    pm.response.to.have.status(400);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
																	"// });",
																	"",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
																	"      if(response.responseSize !== 0) {",
																	"          //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"                pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
																	"            });",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"          ",
																	"            pm.test(\"Response ilpPacket is not null\", function () {",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
																	"            });",
																	"       ",
																	"           pm.test(\"Response condition is not null\", function () {",
																	"               pm.expect(jsonData.condition).not.equal(undefined);",
																	"               pm.environment.set(\"condition\", jsonData.condition);",
																	"           });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 1000)",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "Tue, 04 Jun 2019 04:01:10 GMT"
															},
															{
																"key": "FSPIOP-Source",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{quote-fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/quotes"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"quoteId\":\"{{quoteId}}\",\"transactionId\":\"{{transactionId}}\",\"amountType\":\"SEND\",\"amount\":{\"currency\":\"abcd\",\"amount\":\"100\"},\"expiration\":\"2019-06-04T04:02:10.378Z\",\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17855501914\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Murthy\",\"lastName\":\"Kakarlamudi\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Murthy Kakarlamudi\",\"merchantClassificationCode\":\"123\"},\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17039811907\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Sridevi\",\"lastName\":\"Miriyala\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Sridevi Miriyala\",\"merchantClassificationCode\":\"456\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"testing\"}"
														},
														"url": {
															"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/quotes",
															"host": [
																"{{HOST_PAYEE_SDK_SIMULATOR}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Empty expiration",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.environment.set('quoteId', generatedUUID);",
																	"   generatedUUID = uuid.v4();",
																	"   pm.environment.set('transactionId', generatedUUID);",
																	"",
																	"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
																	"// });",
																	"",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
																	"      if(response.responseSize !== 0) {",
																	"          //Checking headers",
																	"            var headers = response.json().headers;",
																	"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
																	"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
																	"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
																	"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp accept is empty\", function () {",
																	"                pm.expect(headers['accept']).to.eql(undefined);",
																	"            });",
																	"            ",
																	"            ",
																	"            ",
																	"            //Validate protected header inside Signature",
																	"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
																	"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
																	"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
																	"                pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
																	"            });",
																	"            ",
																	"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
																	"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
																	"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
																	"            });",
																	"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
																	"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
																	"            });",
																	"           ",
																	"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
																	"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
																	"            });",
																	"            ",
																	"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
																	"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
																	"            });",
																	"            ",
																	"            var jsonData = response.json().data;",
																	"          ",
																	"            pm.test(\"Response ilpPacket is not null\", function () {",
																	"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
																	"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
																	"            });",
																	"       ",
																	"           pm.test(\"Response condition is not null\", function () {",
																	"               pm.expect(jsonData.condition).not.equal(undefined);",
																	"               pm.environment.set(\"condition\", jsonData.condition);",
																	"           });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 1000)",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "Tue, 04 Jun 2019 04:01:10 GMT"
															},
															{
																"key": "FSPIOP-Source",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "mojaloop-sdk"
															},
															{
																"key": "FSPIOP-Signature",
																"type": "text",
																"value": "{{quote-fspiop-signature}}"
															},
															{
																"key": "FSPIOP-HTTP-Method",
																"type": "text",
																"value": "POST"
															},
															{
																"key": "FSPIOP-URI",
																"type": "text",
																"value": "/quotes"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\"quoteId\":\"{{quoteId}}\",\"transactionId\":\"{{transactionId}}\",\"amountType\":\"SEND\",\"amount\":{\"currency\":\"XOF\",\"amount\":\"100\"},\"expiration\":\"\",\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17855501914\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Murthy\",\"lastName\":\"Kakarlamudi\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Murthy Kakarlamudi\",\"merchantClassificationCode\":\"123\"},\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17039811907\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Sridevi\",\"lastName\":\"Miriyala\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Sridevi Miriyala\",\"merchantClassificationCode\":\"456\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"testing\"}"
														},
														"url": {
															"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/quotes",
															"host": [
																"{{HOST_PAYEE_SDK_SIMULATOR}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												}
											],
											"_postman_isSubFolder": true
										},
										{
											"name": "Invalid Headers & URI params",
											"item": [],
											"_postman_isSubFolder": true
										},
										{
											"name": "Invalid FSPIOP-URI Header (BUG)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          //Checking headers",
															"            var headers = response.json().headers;",
															"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
															"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
															"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
															"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp accept is empty\", function () {",
															"                pm.expect(headers['accept']).to.eql(undefined);",
															"            });",
															"            ",
															"            ",
															"            ",
															"            //Validate protected header inside Signature",
															"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
															"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
															"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
															"            ",
															"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
															"                pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
															"            });",
															"            ",
															"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
															"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
															"            });",
															"            ",
															"",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
															"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
															"            });",
															"           ",
															"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
															"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
															"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
															"            });",
															"            ",
															"            var jsonData = response.json().data;",
															"          ",
															"            pm.test(\"Response ilpPacket is not null\", function () {",
															"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
															"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
															"            });",
															"       ",
															"           pm.test(\"Response condition is not null\", function () {",
															"               pm.expect(jsonData.condition).not.equal(undefined);",
															"               pm.environment.set(\"condition\", jsonData.condition);",
															"           });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 1000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "Tue, 04 Jun 2019 04:01:10 GMT"
													},
													{
														"key": "FSPIOP-Source",
														"value": "mojaloop-sdk"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "mojaloop-sdk"
													},
													{
														"key": "FSPIOP-Signature",
														"type": "text",
														"value": "{{quote-fspiop-signature}}"
													},
													{
														"key": "FSPIOP-HTTP-Method",
														"type": "text",
														"value": "POST"
													},
													{
														"key": "FSPIOP-URI",
														"type": "text",
														"value": "/xxx"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"quoteId\":\"{{quoteId}}\",\"transactionId\":\"{{transactionId}}\",\"amountType\":\"SEND\",\"amount\":{\"currency\":\"XOF\",\"amount\":\"10\"},\"expiration\":\"2019-06-04T04:02:10.378Z\",\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17855501914\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Murthy\",\"lastName\":\"Kakarlamudi\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Murthy Kakarlamudi\",\"merchantClassificationCode\":\"123\"},\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17039811907\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Sridevi\",\"lastName\":\"Miriyala\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Sridevi Miriyala\",\"merchantClassificationCode\":\"456\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"testing\"}"
												},
												"url": {
													"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/quotes",
													"host": [
														"{{HOST_PAYEE_SDK_SIMULATOR}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid FSPIOP-Source (BUG)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "decab794-66d7-4b03-b6da-4191441206a8",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
															"       if(response.responseSize !== 0) {",
															"            //Checking headers",
															"            var headers = response.json().headers;",
															"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
															"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
															"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
															"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp accept is empty\", function () {",
															"                pm.expect(headers['accept']).to.eql(undefined);",
															"            });",
															"            ",
															"            ",
															"            ",
															"            //Validate protected header inside Signature",
															"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
															"            console.log('signature:',signature)",
															"            console.log('protectedHeader:',protectedHeader)",
															"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
															"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
															"            ",
															"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
															"                pm.expect(signature).to.not.eql(undefined);",
															"            });",
															"            ",
															"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
															"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
															"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
															"            });",
															"           ",
															"            ",
															"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
															"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
															"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
															"            });",
															"            ",
															"            var jsonData = response.json().data;",
															"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
															"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
															"            });",
															"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
															"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
															"            });",
															"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
															"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
															"            });  ",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"        ",
															"      ",
															"    });",
															"}, 4000)",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
														"exec": [
															"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
															"pm.variables.set('expectedFirstName', 'Sridevi');",
															"pm.variables.set('expectedLastName', 'Miriyala');",
															"pm.variables.set('expectedDOB', '10/10/2010');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "FSPIOP-Source",
														"value": "abc"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "mojaloop-sdk"
													},
													{
														"key": "FSPIOP-Signature",
														"type": "text",
														"value": "{{fspiop-signature}}"
													},
													{
														"key": "FSPIOP-HTTP-Method",
														"type": "text",
														"value": "POST"
													},
													{
														"key": "FSPIOP-URI",
														"type": "text",
														"value": "/quotes"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"quoteId\":\"{{quoteId}}\",\"transactionId\":\"{{transactionId}}\",\"amountType\":\"SEND\",\"amount\":{\"currency\":\"XOF\",\"amount\":\"10\"},\"expiration\":\"2019-06-04T04:02:10.378Z\",\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17855501914\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Murthy\",\"lastName\":\"Kakarlamudi\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Murthy Kakarlamudi\",\"merchantClassificationCode\":\"123\"},\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17039811907\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Sridevi\",\"lastName\":\"Miriyala\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Sridevi Miriyala\",\"merchantClassificationCode\":\"456\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"testing\"}"
												},
												"url": {
													"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/quotes",
													"host": [
														"{{HOST_PAYEE_SDK_SIMULATOR}}"
													],
													"path": [
														"quotes"
													]
												},
												"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
											},
											"response": []
										},
										{
											"name": "Invalid FSPIOP-Destination (BUG)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "decab794-66d7-4b03-b6da-4191441206a8",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
															"       if(response.responseSize !== 0) {",
															"            //Checking headers",
															"            var headers = response.json().headers;",
															"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
															"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
															"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
															"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp accept is empty\", function () {",
															"                pm.expect(headers['accept']).to.eql(undefined);",
															"            });",
															"            ",
															"            ",
															"            ",
															"            //Validate protected header inside Signature",
															"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
															"            console.log('signature:',signature)",
															"            console.log('protectedHeader:',protectedHeader)",
															"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
															"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
															"            ",
															"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
															"                pm.expect(signature).to.not.eql(undefined);",
															"            });",
															"            ",
															"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
															"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
															"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
															"            });",
															"           ",
															"            ",
															"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
															"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
															"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
															"            });",
															"            ",
															"            var jsonData = response.json().data;",
															"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
															"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
															"            });",
															"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
															"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
															"            });",
															"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
															"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
															"            });  ",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"        ",
															"      ",
															"    });",
															"}, 4000)",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
														"exec": [
															"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
															"pm.variables.set('expectedFirstName', 'Sridevi');",
															"pm.variables.set('expectedLastName', 'Miriyala');",
															"pm.variables.set('expectedDOB', '10/10/2010');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "mojaloop"
													},
													{
														"key": "FSPIOP-Signature",
														"type": "text",
														"value": "{{fspiop-signature}}"
													},
													{
														"key": "FSPIOP-HTTP-Method",
														"type": "text",
														"value": "POST"
													},
													{
														"key": "FSPIOP-URI",
														"type": "text",
														"value": "/quotes"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"quoteId\":\"{{quoteId}}\",\"transactionId\":\"{{transactionId}}\",\"amountType\":\"SEND\",\"amount\":{\"currency\":\"XOF\",\"amount\":\"10\"},\"expiration\":\"2019-06-04T04:02:10.378Z\",\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17855501914\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Murthy\",\"lastName\":\"Kakarlamudi\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Murthy Kakarlamudi\",\"merchantClassificationCode\":\"123\"},\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17039811907\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Sridevi\",\"lastName\":\"Miriyala\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Sridevi Miriyala\",\"merchantClassificationCode\":\"456\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"testing\"}"
												},
												"url": {
													"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/quotes",
													"host": [
														"{{HOST_PAYEE_SDK_SIMULATOR}}"
													],
													"path": [
														"quotes"
													]
												},
												"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
											},
											"response": []
										},
										{
											"name": "Invalid Date Header (BUG)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          //Checking headers",
															"            var headers = response.json().headers;",
															"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
															"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
															"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
															"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp accept is empty\", function () {",
															"                pm.expect(headers['accept']).to.eql(undefined);",
															"            });",
															"            ",
															"            ",
															"            ",
															"            //Validate protected header inside Signature",
															"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
															"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
															"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
															"            ",
															"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
															"                pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
															"            });",
															"            ",
															"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
															"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
															"            });",
															"            ",
															"",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
															"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
															"            });",
															"           ",
															"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
															"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
															"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
															"            });",
															"            ",
															"            var jsonData = response.json().data;",
															"          ",
															"            pm.test(\"Response ilpPacket is not null\", function () {",
															"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
															"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
															"            });",
															"       ",
															"           pm.test(\"Response condition is not null\", function () {",
															"               pm.expect(jsonData.condition).not.equal(undefined);",
															"               pm.environment.set(\"condition\", jsonData.condition);",
															"           });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 1000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "2019-06-04"
													},
													{
														"key": "FSPIOP-Source",
														"value": "mojaloop-sdk"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "mojaloop-sdk"
													},
													{
														"key": "FSPIOP-Signature",
														"type": "text",
														"value": "{{quote-fspiop-signature}}"
													},
													{
														"key": "FSPIOP-HTTP-Method",
														"type": "text",
														"value": "POST"
													},
													{
														"key": "FSPIOP-URI",
														"type": "text",
														"value": "/quotes"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"quoteId\":\"{{quoteId}}\",\"transactionId\":\"{{transactionId}}\",\"amountType\":\"SEND\",\"amount\":{\"currency\":\"XOF\",\"amount\":\"10\"},\"expiration\":\"2019-06-04T04:02:10.378Z\",\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17855501914\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Murthy\",\"lastName\":\"Kakarlamudi\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Murthy Kakarlamudi\",\"merchantClassificationCode\":\"123\"},\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17039811907\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Sridevi\",\"lastName\":\"Miriyala\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Sridevi Miriyala\",\"merchantClassificationCode\":\"456\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"testing\"}"
												},
												"url": {
													"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/quotes",
													"host": [
														"{{HOST_PAYEE_SDK_SIMULATOR}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid Content-Type (BUG - error msg)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "decab794-66d7-4b03-b6da-4191441206a8",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
															"       if(response.responseSize !== 0) {",
															"            //Checking headers",
															"            var headers = response.json().headers;",
															"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
															"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
															"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
															"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp accept is empty\", function () {",
															"                pm.expect(headers['accept']).to.eql(undefined);",
															"            });",
															"            ",
															"            ",
															"            ",
															"            //Validate protected header inside Signature",
															"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
															"            console.log('signature:',signature)",
															"            console.log('protectedHeader:',protectedHeader)",
															"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
															"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
															"            ",
															"            pm.test(\"FSPIOP-Signature signature is returned\", function () {",
															"                pm.expect(signature).to.not.eql(undefined);",
															"            });",
															"            ",
															"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
															"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
															"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
															"            });",
															"           ",
															"            ",
															"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
															"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
															"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
															"            });",
															"            ",
															"            var jsonData = response.json().data;",
															"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
															"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
															"            });",
															"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
															"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
															"            });",
															"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
															"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
															"            });  ",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"        ",
															"      ",
															"    });",
															"}, 4000)",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
														"exec": [
															"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
															"pm.variables.set('expectedFirstName', 'Sridevi');",
															"pm.variables.set('expectedLastName', 'Miriyala');",
															"pm.variables.set('expectedDOB', '10/10/2010');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;v"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "mojaloop-sdk"
													},
													{
														"key": "FSPIOP-Signature",
														"type": "text",
														"value": "{{fspiop-signature}}"
													},
													{
														"key": "FSPIOP-HTTP-Method",
														"type": "text",
														"value": "POST"
													},
													{
														"key": "FSPIOP-URI",
														"type": "text",
														"value": "/quotes"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"quoteId\":\"{{quoteId}}\",\"transactionId\":\"{{transactionId}}\",\"amountType\":\"SEND\",\"amount\":{\"currency\":\"XOF\",\"amount\":\"10\"},\"expiration\":\"2019-06-04T04:02:10.378Z\",\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17855501914\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Murthy\",\"lastName\":\"Kakarlamudi\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Murthy Kakarlamudi\",\"merchantClassificationCode\":\"123\"},\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17039811907\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Sridevi\",\"lastName\":\"Miriyala\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Sridevi Miriyala\",\"merchantClassificationCode\":\"456\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"testing\"}"
												},
												"url": {
													"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/quotes",
													"host": [
														"{{HOST_PAYEE_SDK_SIMULATOR}}"
													],
													"path": [
														"quotes"
													]
												},
												"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
											},
											"response": []
										},
										{
											"name": "Invalid Accept Header(BUG)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "decab794-66d7-4b03-b6da-4191441206a8",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Error Code is 3100\", function () {",
															"    pm.expect(jsonData.errorInformation.errorCode).to.eql('3100');",
															"});",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
														"exec": [
															"pm.variables.set('expectedFullName', 'Sridevi Miriyala');",
															"pm.variables.set('expectedFirstName', 'Sridevi');",
															"pm.variables.set('expectedLastName', 'Miriyala');",
															"pm.variables.set('expectedDOB', '10/10/2010');",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/interoperability.parties+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "Date",
														"value": "Tue, 04 Jun 2019 04:01:10 GMT"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "mojaloop-sdk"
													},
													{
														"key": "FSPIOP-Signature",
														"type": "text",
														"value": "{{quote-fspiop-signature}}"
													},
													{
														"key": "FSPIOP-HTTP-Method",
														"type": "text",
														"value": "POST"
													},
													{
														"key": "FSPIOP-URI",
														"type": "text",
														"value": "/quotes"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\"quoteId\":\"{{quoteId}}\",\"transactionId\":\"{{transactionId}}\",\"amountType\":\"SEND\",\"amount\":{\"currency\":\"XOF\",\"amount\":\"10\"},\"expiration\":\"2019-06-04T04:02:10.378Z\",\"payer\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17855501914\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Murthy\",\"lastName\":\"Kakarlamudi\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Murthy Kakarlamudi\",\"merchantClassificationCode\":\"123\"},\"payee\":{\"partyIdInfo\":{\"partyIdType\":\"MSISDN\",\"partyIdentifier\":\"17039811907\",\"fspId\":\"mojaloop-sdk\"},\"personalInfo\":{\"complexName\":{\"firstName\":\"Sridevi\",\"lastName\":\"Miriyala\"},\"dateOfBirth\":\"2010-10-10\"},\"name\":\"Sridevi Miriyala\",\"merchantClassificationCode\":\"456\"},\"transactionType\":{\"scenario\":\"TRANSFER\",\"initiator\":\"PAYER\",\"initiatorType\":\"CONSUMER\"},\"note\":\"testing\"}"
												},
												"url": {
													"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/quotes",
													"host": [
														"{{HOST_PAYEE_SDK_SIMULATOR}}"
													],
													"path": [
														"quotes"
													]
												},
												"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
											},
											"response": []
										},
										{
											"name": "Invalid Signature",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
															"// });",
															"",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          //Checking headers",
															"            var headers = response.json().headers;",
															"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
															"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
															"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
															"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp accept is empty\", function () {",
															"                pm.expect(headers['accept']).to.eql(undefined);",
															"            });",
															"            ",
															"            pm.test(\"fspiop-signature is returned\", function () {",
															"                pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"payeefsp_fspiop_signature\"));",
															"            });",
															"            ",
															"            //Validate protected header inside Signature",
															"            var signature = JSON.parse(headers['fspiop-signature'])",
															"            console.log('signature:',signature)",
															"            var protectedHeader = signature.protectedHeader",
															"            console.log('protectedHeader:',protectedHeader)",
															"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
															"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
															"            ",
															"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
															"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes'+pm.environment.get(\"quoteId\"));",
															"            });",
															"            ",
															"",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
															"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
															"            });",
															"           ",
															"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
															"                pm.expect(headers['FSPIOP-URI']).to.eql('/quotes'+pm.environment.get(\"quoteId\"));",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
															"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
															"            });",
															"            ",
															"            var jsonData = response.json().data;",
															"          ",
															"            pm.test(\"Response ilpPacket is not null\", function () {",
															"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
															"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
															"            });",
															"       ",
															"           pm.test(\"Response condition is not null\", function () {",
															"               pm.expect(jsonData.condition).not.equal(undefined);",
															"               pm.environment.set(\"condition\", jsonData.condition);",
															"           });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 1000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{quoteDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "{{payeefsp}}"
													},
													{
														"key": "FSPIOP-Signature",
														"type": "text",
														"value": "dummy"
													},
													{
														"key": "FSPIOP-HTTP-Method",
														"type": "text",
														"value": "POST"
													},
													{
														"key": "FSPIOP-URI",
														"type": "text",
														"value": "/quotes"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      }\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"1\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/quotes",
													"host": [
														"{{HOST_PAYEE_SDK_SIMULATOR}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Invalid Headers",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "decab794-66d7-4b03-b6da-4191441206a8",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.parties+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"pathfinderMSISDN\"), function (err, response) {",
															"       if(response.responseSize !== 0) {",
															"            //Checking headers",
															"            var headers = response.json().headers;",
															"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
															"                pm.expect(headers['fspiop-source']).to.eql('mojaloop-sdk');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
															"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
															"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp accept is empty\", function () {",
															"                pm.expect(headers['accept']).to.eql(undefined);",
															"            });",
															"            ",
															"            pm.test(\"fspiop-signature is returned\", function () {",
															"                pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"payeefsp_fspiop_signature\"));",
															"            });",
															"            ",
															"            //Validate protected header inside Signature",
															"            const {protectedHeader, signature} = JSON.parse(headers['fspiop-signature'])",
															"            console.log('signature:',signature)",
															"            console.log('protectedHeader:',protectedHeader)",
															"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
															"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
															"            ",
															"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
															"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /parties/MSISDN/17039811907\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/parties/MSISDN/17039811907');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('mojaloop-sdk');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
															"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
															"            });",
															"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
															"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
															"            });",
															"           ",
															"            ",
															"            pm.test(\"payerfsp fspiop-uri includes parties\", function () {",
															"                pm.expect(headers['fspiop-uri']).to.include('/parties');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
															"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
															"            });",
															"            ",
															"            var jsonData = response.json().data;",
															"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
															"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
															"            });",
															"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
															"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
															"            });",
															"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
															"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
															"            });  ",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"        ",
															"      ",
															"    });",
															"}, 4000)",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.parties+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.parties+json;version=1.0",
														"disabled": true
													},
													{
														"key": "FSPIOP-Source",
														"value": "{{payerfsp}}"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Destination",
														"type": "text",
														"value": "mojaloop-sdk"
													},
													{
														"key": "FSPIOP-Signature",
														"type": "text",
														"value": "{{fspiop-signature}}"
													},
													{
														"key": "FSPIOP-HTTP-Method",
														"type": "text",
														"value": "POST"
													},
													{
														"key": "FSPIOP-URI",
														"type": "text",
														"value": "/parties/MSISDN/{{pathfinderMSISDN}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      }\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"1\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_PAYEE_SDK_SIMULATOR}}/quotes",
													"host": [
														"{{HOST_PAYEE_SDK_SIMULATOR}}"
													],
													"path": [
														"quotes"
													]
												},
												"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "transfers",
							"item": [
								{
									"name": "positive",
									"item": [
										{
											"name": "Send Transfer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "900142b0-e4d7-43a4-a751-38202b600661",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// //Check the request that Switch forwards to payeefsp",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"GOLDENPAYERFSP_SDK_INBOUND_URL\")+\"/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              ",
															"              //Check the Headers",
															"              var headers = response.json().headers;",
															"              ",
															"                pm.test(\"payeefsp fspiop-source is goldenpayerfsp\", function () {",
															"                    pm.expect(headers['fspiop-source']).to.eql('goldenpayerfsp');",
															"                });",
															"                ",
															"                pm.test(\"payeefsp fspiop-destination is goldenpayeefsp\", function () {",
															"                    pm.expect(headers['fspiop-destination']).to.eql('goldenpayeefsp');",
															"                });",
															"                ",
															"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
															"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"                });",
															"                ",
															"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
															"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');",
															"                });",
															"                ",
															"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
															"                    pm.expect(headers['fspiop-signature']).to.eql(pm.variables.get(\"fspiopSignature\"));",
															"                });",
															"                ",
															"                pm.test(\"payeefsp fspiop-http-method is POST\", function () {",
															"                    pm.expect(headers['fspiop-http-method']).to.eql('POST');",
															"                });",
															"                ",
															"                pm.test(\"payeefsp fspiop-uri is /transfers\", function () {",
															"                    pm.expect(headers['fspiop-uri']).to.eql('/transfers');",
															"                });",
															"                ",
															"                ",
															"                //Check the data",
															"                var jsonData = response.json().data;",
															"                pm.test(\"payeefsp data should have the same transferId as request\", function () {",
															"                  pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));",
															"                });",
															"                pm.test(\"payeefsp data should have the same payerfspId as request\", function () {",
															"                  pm.expect(jsonData.payerFsp).to.eql('goldenpayerfsp');",
															"                });",
															"                pm.test(\"payeefsp data should have the same payeefspId as request\", function () {",
															"                  pm.expect('goldenpayeefsp');",
															"                });",
															"                pm.test(\"payeefsp data should have the same amount as request\", function () {",
															"                  pm.expect(jsonData.amount.amount).to.eql('10');",
															"                });",
															"                pm.test(\"payeefsp data should have the same currency as request\", function () {",
															"                  pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
															"                });",
															"                pm.test(\"payeefsp data should have the same expiration as request\", function () {",
															"                  pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
															"                });",
															"                pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
															"                  pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
															"                });",
															"                pm.test(\"payeefsp data should have the same condition as request\", function () {",
															"                  pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
															"                });",
															"                ",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"  });",
															"}, 1100)",
															"",
															"//Check the callback response that Switch forwards to payerfsp",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"GOLDENPAYERFSP_SDK_INBOUND_URL\")+\"/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"            //Checking headers",
															"            var headers = response.json().headers;",
															"            pm.test(\"payerfsp fspiop-source is goldenpayeefsp \", function () {",
															"                pm.expect(headers['fspiop-source']).to.eql('goldenpayeefsp');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-destination is goldenpayerfsp\", function () {",
															"                pm.expect(headers['fspiop-destination']).to.eql('goldenpayerfsp');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
															"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
															"            });",
															"            ",
															"            pm.test(\"payerfsp accept is empty\", function () {",
															"                pm.expect(headers['accept']).to.eql(undefined);",
															"            });",
															"            ",
															"            ",
															"            pm.test(\"payerfsp fspiop-uri includes /transfers/{{transfer_ID}}\", function () {",
															"                pm.expect(headers['fspiop-uri']).to.eql('/transfers/'+ pm.environment.get(\"transfer_ID\"));",
															"            });",
															"            ",
															"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
															"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
															"            });",
															"            ",
															"            var jsonData = response.json().data;",
															"            pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"            });",
															"            pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"            });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 1300)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "20820c95-0a24-4906-a6ba-708d6ecf4a61",
														"exec": [
															"var navigator = {}; //fake a navigator object for the lib",
															"var window = {}; //fake a window object for the lib",
															"eval(pm.environment.get('jrsassign'));",
															"",
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"",
															"",
															"pm.variables.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))",
															"",
															"var oHeader = {alg: \"RS256\", \"FSPIOP-Source\":\"goldenpayerfsp\",\"FSPIOP-Destination\":\"goldenpayeefsp\", \"FSPIOP-URI\":\"/transfers\", \"FSPIOP-HTTP-Method\":\"POST\", \"Date\":pm.variables.get('transferDate')};",
															"var sHeader = JSON.stringify(oHeader);",
															"console.log(`sHeader: ${sHeader}`)",
															"",
															"var objPayload = {",
															"  \"transferId\": pm.environment.get('transfer_ID'),",
															"  \"payerFsp\": \"goldenpayerfsp\",",
															"  \"payeeFsp\": \"goldenpayeefsp\",",
															"  \"amount\": {",
															"    \"amount\": \"10\",",
															"    \"currency\": pm.environment.get('currency')",
															"  },",
															"  \"expiration\": pm.environment.get('transferExpiration'),",
															"  \"ilpPacket\": pm.environment.get('ilpPacket'),",
															"  \"condition\": pm.environment.get('condition')",
															"}",
															"var sPayload = JSON.stringify(objPayload)",
															"console.log(`sPayload: ${sPayload}`)",
															"",
															"var token = KJUR.jws.JWS.sign(\"RS256\", sHeader, sPayload, pm.environment.get('goldenpayerfspJWSKey'));",
															"//console.log(`token: ${token}`)",
															"",
															"// var encodedHeaders = btoa(sHeader)",
															"",
															"// var ofspiopSignature = {signature: vSignature, protectedHeader: encodedHeaders}",
															"// var token = JSON.stringify(ofspiopSignature)",
															"",
															"const [ protectedHeaderBase64, , signature ] = token.split('.');",
															"",
															"const signatureObject = {",
															"    signature: signature.replace('\"', ''),",
															"    protectedHeader: protectedHeaderBase64.replace('\"', '')",
															"};",
															"",
															"console.log(JSON.stringify(signatureObject))",
															"",
															"pm.variables.set('fspiopSignature',JSON.stringify(signatureObject))"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "goldenpayerfsp"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "goldenpayeefsp"
													},
													{
														"key": "FSPIOP-Signature",
														"value": "{{fspiopSignature}}",
														"type": "text"
													},
													{
														"key": "FSPIOP-URI",
														"value": "/transfers",
														"type": "text"
													},
													{
														"key": "FSPIOP-HTTP-Method",
														"value": "POST",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"goldenpayerfsp\",\n  \"payeeFsp\": \"goldenpayeefsp\",\n  \"amount\": {\n    \"amount\": \"10\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}/transfers",
													"host": [
														"{{GOLDENPAYEEFSP_SDK_INBOUND_URL}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "negative",
									"item": [],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"description": "Author: Sridevi Miriyala",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c782060-ecf1-4270-bf3b-ef8c75a5c922",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bb7ef33e-7338-4750-9499-f8bdec151171",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d1efbe8e-801b-4c02-a9a9-a07c6540338a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "83481eb4-fd0b-4f46-9bf2-43a260b02ff1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "jrsassign",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3ac59223-2083-4df4-bb55-7f47c4ed94b1",
						"exec": [
							"pm.environment.set(\"jrsassign\", pm.response.text());"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js",
					"protocol": "http",
					"host": [
						"kjur",
						"github",
						"io"
					],
					"path": [
						"jsrsasign",
						"jsrsasign-latest-all-min.js"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "301c3184-61b6-4073-a6da-972dd59198c4",
				"type": "text/javascript",
				"exec": [
					"// pm.sendRequest(\"http://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js\", function (err, response) {",
					"//     console.log(response.text());",
					"    ",
					"//     pm.environment.set(\"jrsassign\", response.text());",
					"// });"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "65995635-3b61-4ab5-96a7-88400afc9226",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}