{
	"info": {
		"_postman_id": "4d02f8bd-92c0-4e1e-bea4-27cc6ae86ea4",
		"name": "OSS-Feature-Tests",
		"description": "##Author - Sridevi Miriyala\n##Description:",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "p2p_money_transfer",
			"item": [
				{
					"name": "p2p_happy_path",
					"item": [
						{
							"name": "Add User - 27713803912 to payeefsp",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e3f505ea-4c76-4c5c-944c-c9188b39b699",
										"exec": [
											"pm.environment.set('fullName', 'Siabelo Maroka');",
											"pm.environment.set('firstName', 'Siabelo');",
											"pm.environment.set('lastName', 'Maroka');",
											"pm.environment.set('dob', '3/3/1973');",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a34ed0a6-ec7f-4147-8103-ec17cefcb9e7",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"party\": {\n        \"partyIdInfo\": {\n            \"partyIdType\": \"MSISDN\",\n            \"partyIdentifier\": \"27713803912\",\n            \"fspId\": \"{{payeefsp}}\"\n        },\n        \"name\": \"{{fullName}}\",\n        \"personalInfo\": {\n            \"complexName\": {\n                \"firstName\": \"{{firstName}}\",\n                \"lastName\": \"{{lastName}}\"\n            },\n            \"dateOfBirth\": \"{{dob}}\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{HOST_SIMULATOR}}/payeefsp/parties/MSISDN/27713803912",
									"host": [
										"{{HOST_SIMULATOR}}"
									],
									"path": [
										"payeefsp",
										"parties",
										"MSISDN",
										"27713803912"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Party Receiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "decab794-66d7-4b03-b6da-4191441206a8",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check the request that Switch forwards to payeefsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.environment.get(\"pathfinderMSISDN\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              ",
											"              //Check the Headers",
											"              var headers = response.json().headers;",
											"              ",
											"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-destination is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
											"                    pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
											"                });",
											"                ",
											"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
											"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.parties+json;version=1');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
											"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
											"                });",
											"                ",
											"                ",
											"                ",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive request on payee side');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 1100)",
											"",
											"//Check the callback response that Switch forwards to payeefsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"pathfinderMSISDN\"), function (err, response) {",
											"          if(response !== null) {",
											"            //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            //Uncomment this once Simulators are able to forward Signature",
											"            // pm.test(\"fspiop-signature is empty\", function () {",
											"            //     pm.expect(pm.response.json().headers['fspiop-signature']).to.eql(undefined);",
											"            // });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.parties+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.parties+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-uri is empty\", function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql('/parties/MSISDN'+pm.environment.get(\"pathfinderMSISDN\"));",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-http-method is empty\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql('GET');",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            pm.test(\"Expected receiver first name is: \"+pm.variables.get(\"expectedFirstName\"), function () {",
											"           pm.expect(jsonData.party.personalInfo.complexName.firstName).to.eql(pm.variables.get(\"expectedFirstName\"));",
											"            });",
											"            pm.test(\"Expected receiver last name is: \"+pm.variables.get(\"expectedLastName\"), function () {",
											"              pm.expect(jsonData.party.personalInfo.complexName.lastName).to.eql(pm.variables.get(\"expectedLastName\"));",
											"            });",
											"            pm.test(\"Expected receiver DOB: \"+pm.variables.get(\"expectedDOB\"), function () {",
											"              pm.expect(jsonData.party.personalInfo.dateOfBirth).to.eql(pm.variables.get(\"expectedDOB\"));",
											"            });   ",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 1100)",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c0e9b1b6-9f17-42f4-b7aa-9317535a62b7",
										"exec": [
											"pm.variables.set('expectedFullName', 'Siabelo Maroka');",
											"pm.variables.set('expectedFirstName', 'Siabelo');",
											"pm.variables.set('expectedLastName', 'Maroka');",
											"pm.variables.set('expectedDOB', '3/3/1973');",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.parties+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.parties+json;version=1.0"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-URI",
										"value": "/parties/MSISDN/{{pathfinderMSISDN}}",
										"type": "text"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "GET",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_ACCOUNT_LOOKUP_SERVICE}}/parties/MSISDN/{{pathfinderMSISDN}}",
									"host": [
										"{{HOST_ACCOUNT_LOOKUP_SERVICE}}"
									],
									"path": [
										"parties",
										"MSISDN",
										"{{pathfinderMSISDN}}"
									]
								},
								"description": "Author: Sridevi Miriyala\n\nThe payer is requesting the information of the payee. The response shd include payee's firstname, lastname, DOB."
							},
							"response": []
						},
						{
							"name": "Send Quote",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
										"exec": [
											"",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.variables.set('quoteId', generatedUUID);",
											"",
											"",
											"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check the request that Switch forwards to payeefsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              ",
											"              //Check the Headers",
											"              var headers = response.json().headers;",
											"              ",
											"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-destination is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
											"                    pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
											"                });",
											"                ",
											"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
											"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
											"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"                });",
											"                ",
											"          } else {",
											"              pm.test(\"Quote FAILED\", function () {",
											"                throw new Error('Did not receive request on payee side');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 1100)",
											"",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"          ",
											"       //Checking headers",
											"        var headers = response.json().headers;",
											"        pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"            pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"        });",
											"        ",
											"        pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"            pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"        });",
											"        ",
											"        //Uncomment this once Simulators are able to forward Signature",
											"        // pm.test(\"fspiop-signature is empty\", function () {",
											"        //     pm.expect(pm.response.json().headers['fspiop-signature']).to.eql(undefined);",
											"        // });",
											"        ",
											"        pm.test(\"payerfsp accept is empty\", function () {",
											"            pm.expect(headers['accept']).to.eql(undefined);",
											"        });",
											"        ",
											"        pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
											"            pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
											"        });",
											"        ",
											"        pm.test(\"payerfsp fspiop-uri is empty\", function () {",
											"            pm.expect(headers['fspiop-uri']).to.eql('/parties/MSISDN'+pm.variables.get(\"quoteId\"));",
											"        });",
											"        ",
											"        pm.test(\"payerfsp fspiop-http-method is empty\", function () {",
											"            pm.expect(headers['fspiop-http-method']).to.eql('GET');",
											"        });",
											"        ",
											"       pm.test(\"Response ilpPacket is not null\", function () {",
											"           console.log('ilpPacket: ',response.json().ilpPacket)",
											"           pm.expect(response.json().ilpPacket).not.eql(null);",
											"          pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
											"           ",
											"       });",
											"       ",
											"       pm.test(\"Response condition is not null\", function () {",
											"           pm.expect(response.json().condition).not.eql(null);",
											"           pm.environment.set(\"condition\", response.json().condition);",
											"       });",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"           postman.setNextRequest(null);",
											"      }",
											"       ",
											"   });",
											"}, 1000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "POST",
										"type": "text"
									},
									{
										"key": "FSPIOP-URI",
										"value": "/quotes",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"100\",\n    \"currency\": \"USD\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
									"host": [
										"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "900142b0-e4d7-43a4-a751-38202b600661",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"//Check the request that Switch forwards to payeefsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response.responseSize !== 0) {",
											"              ",
											"              //Check the Headers",
											"              var headers = response.json().headers;",
											"              ",
											"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-destination is payerfsp\", function () {",
											"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
											"                    pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
											"                });",
											"                ",
											"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
											"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.transfers+json;version=1');",
											"                });",
											"                ",
											"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
											"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"                });",
											"                ",
											"                //Check the data",
											"                var jsonData = response.json().data;",
											"                pm.test(\"payeefsp data should have the same transferId as request\", function () {",
											"                   pm.expect(jsonData.transferId).to.eql(pm.environment.get(\"transfer_ID\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same payerfspId as request\", function () {",
											"                   pm.expect(jsonData.payerFsp).to.eql(pm.environment.get(\"payerfsp\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same payeefspId as request\", function () {",
											"                   pm.expect(jsonData.payeeFsp).to.eql(pm.environment.get(\"payeefsp\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same amount as request\", function () {",
											"                   pm.expect(jsonData.amount.amount).to.eql('1');",
											"                });",
											"                pm.test(\"payeefsp data should have the same currency as request\", function () {",
											"                   pm.expect(jsonData.amount.currency).to.eql(pm.environment.get(\"currency\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same expiration as request\", function () {",
											"                   pm.expect(jsonData.expiration).to.eql(pm.environment.get(\"transferExpiration\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same ilpPacket as request\", function () {",
											"                   pm.expect(jsonData.ilpPacket).to.eql(pm.environment.get(\"ilpPacket\"));",
											"                });",
											"                pm.test(\"payeefsp data should have the same condition as request\", function () {",
											"                   pm.expect(jsonData.condition).to.eql(pm.environment.get(\"condition\"));",
											"                });",
											"                ",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 1100)",
											"",
											"//Check the callback response that Switch forwards to payeefsp",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response !== null) {",
											"            //Checking headers",
											"            var headers = response.json().headers;",
											"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
											"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
											"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
											"            });",
											"            ",
											"            //Uncomment this once Simulators are able to forward Signature",
											"            // pm.test(\"fspiop-signature is empty\", function () {",
											"            //     pm.expect(pm.response.json().headers['fspiop-signature']).to.eql(undefined);",
											"            // });",
											"            ",
											"            pm.test(\"payerfsp accept is empty\", function () {",
											"                pm.expect(headers['accept']).to.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.transfers+json;version=1.0\", function () {",
											"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-uri is empty\", function () {",
											"                pm.expect(headers['fspiop-uri']).to.eql(undefined);",
											"            });",
											"            ",
											"            pm.test(\"payerfsp fspiop-http-method is empty\", function () {",
											"                pm.expect(headers['fspiop-http-method']).to.eql(undefined);",
											"            });",
											"            ",
											"            var jsonData = response.json().data;",
											"            pm.test(\"Response data does not have transferId\", function () {",
											"               pm.expect(jsonData.transferId).to.eql(undefined);",
											"            });",
											"            pm.test(\"Response status is COMMITTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
											"            });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 1100)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "20820c95-0a24-4906-a6ba-708d6ecf4a61",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('transfer_ID', generatedUUID);",
											"",
											"pm.variables.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"1\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bd53c7ee-b55d-4d1a-a178-3c09e68e8901",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c2b5e1bd-f23e-4874-98a7-fc62bcd9d331",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "block_transfer ( p>ndc )",
			"item": [
				{
					"name": "GET limits-payerfsp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a75db36e-2d2f-432c-81a6-77f912c41aa9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var payerNDC = jsonData[0].limit.value",
									"pm.environment.set(\"payerNDC\",payerNDC)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/payerfsp/limits",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"payerfsp",
								"limits"
							]
						},
						"description": "review the payerfsp limits/NDC"
					},
					"response": []
				},
				{
					"name": "GET limits -payeefsp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84ca3f51-0bdb-4905-86d9-a6179a084f88",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var payeeNDC = jsonData[0].limit.value",
									"pm.environment.set('payeeNDC',payeeNDC)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payeefsp}}/limits",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payeefsp}}",
								"limits"
							]
						},
						"description": "review payeefsp limits/NDC"
					},
					"response": []
				},
				{
					"name": "Get payerfsp position before TheTransfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2c9a7dc-8b97-4b80-ad48-3b0e722f87d6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Atleast one account position should be returned\", function () {",
									"    pm.environment.set(\"payerfspPositionBeforeTransfer\", jsonData[0].value);",
									"    pm.expect(jsonData).to.be.not.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/positions",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}",
								"positions"
							]
						},
						"description": "view payerfsp current position before sending the transfer"
					},
					"response": []
				},
				{
					"name": "Get payeefsp position before TheTransfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a9997f5-7f71-400c-8e4b-2234ad1aba3e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Atleast one account position should be returned\", function () {",
									"    pm.environment.set(\"payeefspPositionBeforeTransfer\", jsonData[0].value);",
									"    pm.expect(jsonData).to.be.not.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payeefsp}}/positions",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payeefsp}}",
								"positions"
							]
						},
						"description": "Get payeefsp current position before sending the transfer"
					},
					"response": []
				},
				{
					"name": "Send Quote",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "87b53856-d305-4f6e-8fd5-3a5243ae8e4a",
								"exec": [
									"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
									"   var uuid = require('uuid');",
									"   var generatedUUID = uuid.v4();",
									"   pm.variables.set('quoteId', generatedUUID);",
									"}",
									"",
									"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
									"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
									"}",
									"",
									"var amount = Number(pm.variables.get(\"payerNDC\"))-Number( pm.variables.get(\"payerfspPositionBeforeTransfer\"))+100",
									"pm.variables.set('transferAmount',amount)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"// pm.test(\"Check that Content-Type is present\", function () {",
									"//     pm.response.to.have.header(\"Content-Type\");",
									"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
									"// });",
									"",
									"",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"      if(response !== null) {",
									"          console.log(response.json());",
									"       pm.test(\"Response ilpPacket is not null\", function () {",
									"           pm.expect(response.json().ilpPacket).not.equal(null);",
									"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
									"       });",
									"       ",
									"       pm.test(\"Response condition is not null\", function () {",
									"           pm.expect(response.json().condition).not.equal(null);",
									"           pm.environment.set(\"condition\", response.json().condition);",
									"       });",
									"      } else {",
									"          pm.test(\"Quote FAILED\", function () {",
									"            throw new Error('Did not receive response');",
									"           });",
									"           postman.setNextRequest(null);",
									"      }",
									"       ",
									"   });",
									"}, 10000)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{quoteDate}}"
							},
							{
								"key": "FSPIOP-SOurce",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"USD\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
							"host": [
								"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
							],
							"path": [
								"quotes"
							]
						},
						"description": "send a quote request for a specified amount. The ilp packet and condition that generates in quotes response body is used to send transfers request."
					},
					"response": []
				},
				{
					"name": "Send Block Transfer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "373ce4bd-e96f-49df-a8e4-e2bd6e8490ab",
								"exec": [
									"",
									"var uuid = require('uuid');",
									"var generatedUUID = uuid.v4();",
									"pm.environment.set('transfer_ID', generatedUUID);",
									"pm.environment.set('transferDate', (new Date()).toUTCString());",
									"",
									"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))",
									"",
									"var amount = Number(pm.environment.get(\"payerNDC\"))-Number( pm.variables.get(\"payerfspPositionBeforeTransfer\"))+100",
									"pm.environment.set('transferAmount',amount)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ec961c23-5b9f-4509-9b30-4ea1de9a7b43",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"// pm.test(\"Check that Content-Type is present\", function () {",
									"//     pm.response.to.have.header(\"Content-Type\");",
									"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
									"// });",
									"",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
									"          if(response !== null) {",
									"              var jsonData = response.json();",
									"              pm.test(\"Error Code should be returned\", function () {",
									"                pm.expect(jsonData.errorInformation.errorCode).to.eql(4001);",
									"              });",
									"              pm.test(\"Error Description should be returned\", function () {",
									"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Payer FSP has insufficient liquidity to perform the transfer');",
									"              });",
									"          } else {",
									"              pm.test(\"Transfer FAILED\", function () {",
									"                throw new Error('Did not receive response');",
									"              });",
									"              postman.setNextRequest(null)",
									"          }",
									"   });",
									"}, 5000)",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.transfers+json;version=1"
							},
							{
								"key": "Date",
								"value": "{{transferDate}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{payerfsp}}"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "{{payeefsp}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
							"host": [
								"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
							],
							"path": [
								"transfers"
							]
						},
						"description": "send a tranfer request with ilp packet and condition that are generated in quotes response along with expiry, fspiop source,fspiop destination, amount and currency."
					},
					"response": []
				},
				{
					"name": "Get payerfsp position after the transfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7174c4f7-799f-4c4a-ad66-ab598ed32477",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Position before and after the transfer should be the same\", function () {",
									"    pm.expect(jsonData[0].value).to.eql(pm.environment.get(\"payerfspPositionBeforeTransfer\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payerfsp}}/positions",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payerfsp}}",
								"positions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get payeefsp position after the transfer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "864dee38-3b5b-4709-9637-92931170b286",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Position before and after the transfer should be the same\", function () {",
									"    pm.expect(Number(jsonData[0].value)).to.eql(Number(pm.environment.get(\"payeefspPositionBeforeTransfer\")));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/participants/{{payeefsp}}/positions",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"participants",
								"{{payeefsp}}",
								"positions"
							]
						}
					},
					"response": []
				}
			],
			"description": "Author: Sridevi Miriyala\n\nThis features testes, if a transfer is blocked when position of a participant exceeds the Net Debit Cap for the transfer amount.\n\nSTEPS:\n\nGET Limits\nGET Positions for payer and payee\nset amount=(NDC-P) + 10\nPOST Quotes - send to payee that responds COMMITTED\nPOST Transfers-Prepare\n      -Payerfsp should get error msg \"insufficient liquidity in payerfsp to perform transfer \" \nGET positions - \n  current payer position = prev position \n  current payee position = prev position \n(Failure of the transfer due to insufficient liquidity from payerfsp, results no change in positions)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2f9024db-2f95-4bf6-9022-f7bd5d50afd3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "eefb3ca4-f973-4059-95cc-c681c9e55121",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "position_management",
			"item": [
				{
					"name": "pm_happy_path",
					"item": [
						{
							"name": "GET limits-payerfsp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a75db36e-2d2f-432c-81a6-77f912c41aa9",
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var payerNDC = jsonData[0].limit.value",
											"pm.variables.set('payerNDC',payerNDC)"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/payerfsp/limits",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"payerfsp",
										"limits"
									]
								},
								"description": "review the payerfsp limits/NDC"
							},
							"response": []
						},
						{
							"name": "GET limits -payeefsp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84ca3f51-0bdb-4905-86d9-a6179a084f88",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var payeeNDC = jsonData[0].limit.value",
											"pm.variables.set('payeeNDC',payeeNDC)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/limits",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payeefsp}}",
										"limits"
									]
								},
								"description": "review payeefsp limits/NDC"
							},
							"response": []
						},
						{
							"name": "Get payerfsp position before TheTransfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2c9a7dc-8b97-4b80-ad48-3b0e722f87d6",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"console.log('payerfspPositionBeforeTransfer',jsonData[0].value)",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.variables.set(\"payerfspPositionBeforeTransfer\", jsonData[0].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								},
								"description": "view payerfsp current position before sending the transfer"
							},
							"response": []
						},
						{
							"name": "Get payeefsp position before TheTransfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a9997f5-7f71-400c-8e4b-2234ad1aba3e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.environment.set(\"payeefspPositionBeforeTransfer\", jsonData[0].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payeefsp}}",
										"positions"
									]
								},
								"description": "Get payeefsp current position before sending the transfer"
							},
							"response": []
						},
						{
							"name": "Send Quote",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "87b53856-d305-4f6e-8fd5-3a5243ae8e4a",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.variables.set('quoteId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
											"}",
											"",
											"var amount = Number(pm.variables.get(\"payerNDC\"))-Number( pm.variables.get(\"payerfspPositionBeforeTransfer\"))+100",
											"pm.variables.set('transferAmount',amount)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
											"// });",
											"",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"      if(response !== null) {",
											"          console.log(response.json());",
											"       pm.test(\"Response ilpPacket is not null\", function () {",
											"           pm.expect(response.json().ilpPacket).not.equal(null);",
											"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
											"       });",
											"       ",
											"       pm.test(\"Response condition is not null\", function () {",
											"           pm.expect(response.json().condition).not.equal(null);",
											"           pm.environment.set(\"condition\", response.json().condition);",
											"       });",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"           postman.setNextRequest(null);",
											"      }",
											"       ",
											"   });",
											"}, 10000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-SOurce",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"USD\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
									"host": [
										"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
									],
									"path": [
										"quotes"
									]
								},
								"description": "send a quote request for a specified amount. The ilp packet and condition that generates in quotes response body is used to send transfers request."
							},
							"response": []
						},
						{
							"name": "Send Transfer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "373ce4bd-e96f-49df-a8e4-e2bd6e8490ab",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.variables.set('transferId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.variables.set('transferDate', (new Date()).toUTCString());",
											"}",
											"",
											"var amount = Number(pm.variables.get(\"payerNDC\"))-Number( pm.variables.get(\"payerfspPositionBeforeTransfer\"))-100",
											"pm.variables.set('happyTransferAmount',amount)",
											"console.log('Happy Transfer Amount: ',amount)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ec961c23-5b9f-4509-9b30-4ea1de9a7b43",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
											"// });",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transferId\"), function (err, response) {",
											"          if(response !== null) {",
											"              var jsonData = response.json();",
											"              pm.test(\"Response transferId is same as the request transferId\", function () {",
											"                pm.expect(jsonData.transferId).to.eql(pm.variables.get('transferId'));",
											"              });",
											"              pm.test(\"Response status is COMMITTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
											"              });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 10000)",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"5\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								},
								"description": "send a tranfer request with ilp packet and condition that are generated in quotes response along with expiry, fspiop source,fspiop destination, amount and currency."
							},
							"response": []
						},
						{
							"name": "Get payerfsp position after the transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7174c4f7-799f-4c4a-ad66-ab598ed32477",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"console.log(\"Payerfsp position before transfer:\",(pm.environment.get(\"payerfspPositionBeforeTransfer\")))",
											"console.log('condition: ',Number(pm.environment.get(\"payerfspPositionBeforeTransfer\")) + 5)",
											"pm.test(\"Payer position after the transfer is \", function () {",
											"    pm.expect(jsonData[0].value).to.eql(Number(pm.environment.get(\"payerfspPositionBeforeTransfer\")) + 5);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get payeefsp position after the transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "864dee38-3b5b-4709-9637-92931170b286",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"console.log(\"Payeefsp position before transfer:\",(pm.environment.get(\"payeefspPositionBeforeTransfer\")))",
											"console.log('condition: ',Number(pm.environment.get(\"payeefspPositionBeforeTransfer\")) - 5)",
											"pm.test(\"Payee position after the trasnfer is \", function () {",
											"    pm.expect(jsonData[0].value).to.eql(Number(pm.environment.get(\"payeefspPositionBeforeTransfer\")) - 5);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payeefsp}}",
										"positions"
									]
								}
							},
							"response": []
						}
					],
					"description": "Author: Sridevi Miriyala\n\nThis is to test how the position of payerfsp and payeefsp change when a transfer happens. Here I'm capturing positions of both FSP's before and after transfer and comparing the difference in position is equal to the transfer amount.\n\nGET Limits\nGET Positions for payer and payee\nset amount=(NDC-P)-10\nPOST Quotes - send to payee that responds COMMITTED\nPOST Transfers-Prepare\nPOST Transfers-Fulfil - Payerfsp and payeefsp shd get Transfer COMMITTED status msgs\nGET positions - \n  payer position = prev position + amount\n  payee position = prev position - amount\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2f9024db-2f95-4bf6-9022-f7bd5d50afd3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eefb3ca4-f973-4059-95cc-c681c9e55121",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "pm_negative_path - part of transfer_negative_scenarios",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "payee_abort - 2073",
					"item": [
						{
							"name": "Get payerfsp position before the Transfer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Atleast one account position should be returned\", function () {",
											"    pm.environment.set(\"payerfspPositionBeforeTransfer\", jsonData[0].value);",
											"    pm.expect(jsonData).to.be.not.empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Transfer Prepare",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "373ce4bd-e96f-49df-a8e4-e2bd6e8490ab",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('transferId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.variables.set('transferDate', (new Date()).toUTCString());",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ec961c23-5b9f-4509-9b30-4ea1de9a7b43",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "noresponsepayeefsp"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transferId}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								},
								"description": "send a tranfer request with ilp packet and condition that are generated in quotes response along with expiry, fspiop source,fspiop destination, amount and currency."
							},
							"response": []
						},
						{
							"name": "Get payerfsp position after Transfer and before Payee Abort",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Payerfsp position after transfer and before Payee ABORT should be equal to the sum of position before transfer and trnasfer amount\", function () {",
											"    ",
											"    pm.expect(jsonData[0].value).to.equal(Number(pm.environment.get('payerfspPositionBeforeTransfer'))+Number(pm.environment.get('transferAmount')));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "52a7b3f2-656d-45a5-b1f9-69414966f11b",
										"exec": [
											"setTimeout(function () {",
											"  pm.sendRequest('www.google.com', function (err, response) {}",
											"    );",
											"}, 3000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Payee ABORT",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2e244cfd-ff69-448a-8b62-176d4dd0b28d",
										"exec": [
											"pm.variables.set(\"completedTimestamp\",new Date().toISOString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "358f8ed8-6882-4c54-8dfd-177607c9e07b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fulfilment\": \"{{fulfilment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"ABORTED\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transferId}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transferId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get payerfsp position after Transfer and after Payee Abort",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Payerfsp position after transfer and after Payee ABORT should be same as position before transfer.\", function () {",
											"    ",
											"    pm.expect(jsonData[0].value).to.equal(Number(pm.environment.get('payerfspPositionBeforeTransfer')));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53c7e6de-d4c1-428e-a1c7-70fad0f3bed1",
										"exec": [
											"setTimeout(function () {",
											"  pm.sendRequest('www.google.com', function (err, response) {}",
											"    );",
											"}, 10000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						}
					],
					"description": "GET Limits\nGET Positions for payer and payee\nset amount=(NDC-P) - 10\nPOST Quotes - send to payee that responds ABORTED\nPOST Transfers-Prepare\nGET position of payerfsp - make sure current position = prev position + amount\nPOST Transfers-fulfil with ABORT \n   Both FSP's should be notified of the ABORT status of the transfer.\nGET positions - \n  current payer position = prev position \n  current payee position = prev position \n(Failure of the transfer due to transfer ABORT by payeefsp, results no change in final positions, although there is an increase in payerfsp position when transfer at reserved state)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2f9024db-2f95-4bf6-9022-f7bd5d50afd3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "eefb3ca4-f973-4059-95cc-c681c9e55121",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala\n\nThis feature shows the movement of the funds per transfer of a DFSP.\nInitial positions are always set to \"0\"\nThe increase in the position shows the available funds are less to transact.\nThe decrease in the position shows the there are more funds available to transact.\nAlways need to check with Net Debit Cap.\nposition never be greater than NDC.\nBefore processing the transfer, this is the basic check that the switch performs on the transfer amount to the current position\n\ncurrent position + transfer amount <= NDC.\nif it is exceeding, transfer should be blocked.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "39a20dbb-b794-46ad-aaaf-a088a32dc908",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4071cf71-f099-4dff-8298-9626666ad69e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "settlement_management",
			"item": [
				{
					"name": "SETTLE  settlement",
					"item": [
						{
							"name": "Setup Settlement",
							"item": [
								{
									"name": "Store Settlement&Position Account Balances Before Transfers",
									"item": [
										{
											"name": "testfsp1 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "22c316ff-8ffd-4e54-b450-d12deb6e40b0",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp3 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp3",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp4 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp4",
														"accounts"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Run Quote & Transfers",
									"item": [
										{
											"name": "Get Existing Open Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "06ca836d-99c7-49c7-844e-fe68090e14a4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"State should be OPEN\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].state).to.eql('OPEN');",
															"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
															"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows"
													],
													"query": [
														{
															"key": "state",
															"value": "OPEN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close Existing Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5b16f7ed-2212-419d-a43b-e2b38cf2b718",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"New window State should be OPEN\", function () {",
															"    console.log(pm.response.json());",
															"    pm.expect(pm.response.json().state).to.eql('OPEN');",
															"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
															"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
															"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
															"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows",
														"{{openWindowID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 1 (testfsp1 to testfsp2)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp1\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp2\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 1 ( testfsp1 to testfsp2 )",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"              });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp1\",\n  \"payeeFsp\": \"testfsp2\",\n  \"amount\": {\n    \"amount\": \"60\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 2 (testfsp1 to testfsp4)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp4"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp1\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp4\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"55\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
													"host": [
														"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 2 (testfsp1 to testfsp4)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','true')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 2000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp4"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp1\",\n  \"payeeFsp\": \"testfsp4\",\n  \"amount\": {\n    \"amount\": \"55\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 3 (testfsp3 to testfsp1)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp3/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP3_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp3"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp3\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp1\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"35\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
													"host": [
														"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 3 (testfsp3 to testfsp1)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp3/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP3_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp3"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp3\",\n  \"payeeFsp\": \"testfsp1\",\n  \"amount\": {\n    \"amount\": \"35\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 4 (testfsp2 to testfsp3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp2/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP2_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp2"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp2\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp3\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"20\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
													"host": [
														"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 4 (testfsp2 to testfsp3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp2/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP2_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp2"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp2\",\n  \"payeeFsp\": \"testfsp3\",\n  \"amount\": {\n    \"amount\": \"20\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 5 (testfsp4 to testfsp2)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp4\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp2\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"35\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
													"host": [
														"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 5 (testfsp4 to testfsp2)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp4\",\n  \"payeeFsp\": \"testfsp2\",\n  \"amount\": {\n    \"amount\": \"35\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 6 (testfsp4 to testfsp3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp4\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp3\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"25\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
													"host": [
														"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 6 (testfsp4 to testfsp3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp4\",\n  \"payeeFsp\": \"testfsp3\",\n  \"amount\": {\n    \"amount\": \"25\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Create Settlement",
									"item": [
										{
											"name": "Get Existing Open Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "06ca836d-99c7-49c7-844e-fe68090e14a4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"State should be OPEN\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].state).to.eql('OPEN');",
															"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
															"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows"
													],
													"query": [
														{
															"key": "state",
															"value": "OPEN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close Existing Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5b16f7ed-2212-419d-a43b-e2b38cf2b718",
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"New window State should be OPEN\", function () {",
															"    console.log(pm.response.json());",
															"    pm.expect(pm.response.json().state).to.eql('OPEN');",
															"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
															"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
															"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
															"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows",
														"{{openWindowID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Settlement for Closed Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2fd9c949-c268-4b8a-b924-724a54c9295d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.environment.set(\"settlementId\", pm.response.json().id);",
															"var jsonData = pm.response.json();",
															"    ",
															"pm.test(\"Settlement State should be PENDING_SETTLEMENT\", function () {",
															"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
															"});",
															"",
															"pm.test(\"Number of associated windows should be 1\", function () {",
															"    pm.expect(jsonData.settlementWindows.length).to.eql(1);",
															"});",
															"",
															"pm.test(\"Associated Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
															"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
															"});",
															"",
															"pm.test(\"Associated Settlement Window state should be PENDING_SETTLEMENT \", function () {",
															"    pm.expect(jsonData.settlementWindows[0].state).to.eql('PENDING_SETTLEMENT');",
															"});",
															"",
															"pm.test(\"Associated number of participants should be 4 \", function () {",
															"    pm.expect(jsonData.participants.length).to.eql(4);",
															"});",
															"",
															"for(var j in jsonData.participants) {",
															"    for(var k in jsonData.participants[j].accounts) {",
															"        console.log(jsonData.participants[j].accounts[k].id)",
															"        if(jsonData.participants[j].accounts[k].id === Number(pm.environment.get(\"payerFspAccountId\"))) {",
															"            console.log('payerfspNetSettlementAmount:',jsonData.participants[j].accounts[k].netSettlementAmount.amount)",
															"            pm.environment.set(\"payerfspNetSettlementAmount\",jsonData.participants[j].accounts[k].netSettlementAmount.amount);",
															"        } else if(jsonData.participants[j].accounts[k].id === Number(pm.environment.get(\"payeeFspAccountId\"))) {",
															"            console.log('payeefspNetSettlementAmount:',jsonData.participants[j].accounts[k].netSettlementAmount.amount)",
															"            pm.environment.set(\"payeefspNetSettlementAmount\",jsonData.participants[j].accounts[k].netSettlementAmount.amount);",
															"        }",
															"        ",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"reason\": \"TESTING\",\n  \"settlementWindows\": [\n    {\n      \"id\": {{closedWindowID}}\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Store Settlement&Position Account Balances After Transfers",
									"item": [
										{
											"name": "testfsp1 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "22c316ff-8ffd-4e54-b450-d12deb6e40b0",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp3 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp3",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp4 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp4",
														"accounts"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Prepare Settlement",
							"item": [
								{
									"name": "Prepare Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers recorded for payer\",",
													"                          \"state\": \"PS_TRANSFERS_RECORDED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d0f3b99-4ab4-4e9a-8655-30297675b802",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PS_TRANSFERS_RECORDED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_RECORDED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_RECORDED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_RECORDED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterPrepare;",
													"var testfsp1PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"",
													"pm.test(\"Testfsp1 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterPrepare;",
													"var testfsp2PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterPrepare;",
													"var testfsp3PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp3SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp3 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterPrepare;",
													"var testfsp4PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Reserve Settlement",
							"item": [
								{
									"name": "Reserve Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers reserved\",",
													"                          \"state\": \"PS_TRANSFERS_RESERVED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "payerfsp"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d0f3b99-4ab4-4e9a-8655-30297675b802",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PS_TRANSFERS_RESERVED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_RESERVED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_RESERVED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_RESERVED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterReserve;",
													"var testfsp1PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp1 position account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterReserve;",
													"var testfsp2PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance after reserve gets increased by its net settlement  amount.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterReserve;",
													"var testfsp3PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp3SettleAccountBalance\"));",
													"});",
													"",
													"",
													"pm.test(\"Testfsp3 position account balance after reserve gets increased by its net settlement  amount.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterReserve;",
													"var testfsp4PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Commit Settlement",
							"item": [
								{
									"name": "Commit Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers committed\",",
													"                          \"state\": \"PS_TRANSFERS_COMMITTED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "payerfsp"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d0f3b99-4ab4-4e9a-8655-30297675b802",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PS_TRANSFERS_COMMITTED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_COMMITTED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_COMMITTED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_COMMITTED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterCommit;",
													"var testfsp1PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp1 position account balance after commit should be reduced by its net settlement amount.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterCommit;",
													"var testfsp2PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance after reserve gets increased by its net settlement  amount.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterCommit;",
													"var testfsp3PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp3 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterCommit;",
													"var testfsp4PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Settle Settlement",
							"item": [
								{
									"name": "Settle Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers settled for payer\",",
													"                          \"state\": \"SETTLED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "payerfsp"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d0f3b99-4ab4-4e9a-8655-30297675b802",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be SETTLED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"SETTLED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be SETTLED\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"SETTLED\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is SETTLED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"SETTLED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterSettle;",
													"var testfsp1PositionAccountBalanceAfterSettle;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterSettle = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterSettle = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after settle should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterSettle).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp1 position account balance before and  after settle should be the same.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterSettle).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterCommit;",
													"var testfsp2PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterCommit;",
													"var testfsp3PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp3 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterCommit;",
													"var testfsp4PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "hub account balance check",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/hub/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"hub",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "SETTLE  settlement with NO transfers (bug #936)",
					"item": [
						{
							"name": "Setup Settlement",
							"item": [
								{
									"name": "Store Settlement&Position Account Balances Before Transfers",
									"item": [
										{
											"name": "testfsp1 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "22c316ff-8ffd-4e54-b450-d12deb6e40b0",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp3 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp3",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp4 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp4",
														"accounts"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Run Quote & Transfers",
									"item": [
										{
											"name": "Get Existing Open Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "06ca836d-99c7-49c7-844e-fe68090e14a4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"State should be OPEN\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].state).to.eql('OPEN');",
															"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
															"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows"
													],
													"query": [
														{
															"key": "state",
															"value": "OPEN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close Existing Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5b16f7ed-2212-419d-a43b-e2b38cf2b718",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"New window State should be OPEN\", function () {",
															"    console.log(pm.response.json());",
															"    pm.expect(pm.response.json().state).to.eql('OPEN');",
															"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
															"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
															"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
															"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows",
														"{{openWindowID}}"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Create Settlement",
									"item": [
										{
											"name": "Get Existing Open Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "06ca836d-99c7-49c7-844e-fe68090e14a4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"State should be OPEN\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].state).to.eql('OPEN');",
															"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
															"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows"
													],
													"query": [
														{
															"key": "state",
															"value": "OPEN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close Existing Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5b16f7ed-2212-419d-a43b-e2b38cf2b718",
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"New window State should be OPEN\", function () {",
															"    console.log(pm.response.json());",
															"    pm.expect(pm.response.json().state).to.eql('OPEN');",
															"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
															"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
															"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
															"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows",
														"{{openWindowID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Settlement for Closed Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2fd9c949-c268-4b8a-b924-724a54c9295d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.environment.set(\"settlementId\", pm.response.json().id);",
															"var jsonData = pm.response.json();",
															"    ",
															"pm.test(\"Settlement State should be PENDING_SETTLEMENT\", function () {",
															"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
															"});",
															"",
															"pm.test(\"Number of associated windows should be 1\", function () {",
															"    pm.expect(jsonData.settlementWindows.length).to.eql(1);",
															"});",
															"",
															"pm.test(\"Associated Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
															"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
															"});",
															"",
															"pm.test(\"Associated Settlement Window state should be PENDING_SETTLEMENT \", function () {",
															"    pm.expect(jsonData.settlementWindows[0].state).to.eql('PENDING_SETTLEMENT');",
															"});",
															"",
															"pm.test(\"Associated number of participants should be 4 \", function () {",
															"    pm.expect(jsonData.participants.length).to.eql(4);",
															"});",
															"",
															"for(var j in jsonData.participants) {",
															"    for(var k in jsonData.participants[j].accounts) {",
															"        console.log(jsonData.participants[j].accounts[k].id)",
															"        if(jsonData.participants[j].accounts[k].id === Number(pm.environment.get(\"payerFspAccountId\"))) {",
															"            console.log('payerfspNetSettlementAmount:',jsonData.participants[j].accounts[k].netSettlementAmount.amount)",
															"            pm.environment.set(\"payerfspNetSettlementAmount\",jsonData.participants[j].accounts[k].netSettlementAmount.amount);",
															"        } else if(jsonData.participants[j].accounts[k].id === Number(pm.environment.get(\"payeeFspAccountId\"))) {",
															"            console.log('payeefspNetSettlementAmount:',jsonData.participants[j].accounts[k].netSettlementAmount.amount)",
															"            pm.environment.set(\"payeefspNetSettlementAmount\",jsonData.participants[j].accounts[k].netSettlementAmount.amount);",
															"        }",
															"        ",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"reason\": \"TESTING\",\n  \"settlementWindows\": [\n    {\n      \"id\": {{closedWindowID}}\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Store Settlement&Position Account Balances After Transfers",
									"item": [
										{
											"name": "testfsp1 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "22c316ff-8ffd-4e54-b450-d12deb6e40b0",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp3 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp3",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp4 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp4",
														"accounts"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Prepare Settlement",
							"item": [
								{
									"name": "Prepare Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers recorded for payer\",",
													"                          \"state\": \"PS_TRANSFERS_RECORDED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d0f3b99-4ab4-4e9a-8655-30297675b802",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PS_TRANSFERS_RECORDED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_RECORDED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_RECORDED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_RECORDED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterPrepare;",
													"var testfsp1PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"",
													"pm.test(\"Testfsp1 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterPrepare;",
													"var testfsp2PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterPrepare;",
													"var testfsp3PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp3SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp3 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterPrepare;",
													"var testfsp4PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Reserve Settlement",
							"item": [
								{
									"name": "Reserve Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers reserved\",",
													"                          \"state\": \"PS_TRANSFERS_RESERVED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "payerfsp"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d0f3b99-4ab4-4e9a-8655-30297675b802",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PS_TRANSFERS_RESERVED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_RESERVED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_RESERVED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_RESERVED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterReserve;",
													"var testfsp1PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp1 position account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterReserve;",
													"var testfsp2PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance after reserve gets increased by its net settlement  amount.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterReserve;",
													"var testfsp3PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp3SettleAccountBalance\"));",
													"});",
													"",
													"",
													"pm.test(\"Testfsp3 position account balance after reserve gets increased by its net settlement  amount.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterReserve;",
													"var testfsp4PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Commit Settlement",
							"item": [
								{
									"name": "Commit Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers committed\",",
													"                          \"state\": \"PS_TRANSFERS_COMMITTED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "payerfsp"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d0f3b99-4ab4-4e9a-8655-30297675b802",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PS_TRANSFERS_COMMITTED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_COMMITTED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_COMMITTED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_COMMITTED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterCommit;",
													"var testfsp1PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp1 position account balance after commit should be reduced by its net settlement amount.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterCommit;",
													"var testfsp2PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance after reserve gets increased by its net settlement  amount.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterCommit;",
													"var testfsp3PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp3 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterCommit;",
													"var testfsp4PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Settle Settlement",
							"item": [
								{
									"name": "Settle Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers settled for payer\",",
													"                          \"state\": \"SETTLED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "payerfsp"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d0f3b99-4ab4-4e9a-8655-30297675b802",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be SETTLED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"SETTLED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be SETTLED\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"SETTLED\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is SETTLED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"SETTLED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterSettle;",
													"var testfsp1PositionAccountBalanceAfterSettle;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterSettle = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterSettle = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after settle should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterSettle).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp1 position account balance before and  after settle should be the same.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterSettle).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterCommit;",
													"var testfsp2PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterCommit;",
													"var testfsp3PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp3 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterCommit;",
													"var testfsp4PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "hub account balance check",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/hub/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"hub",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"description": "##Author: Sridevi Miriyala##\n\nThis is to check the bug : https://github.com/mojaloop/project/issues/936",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2f9959ba-229e-4a32-840c-a537d4136e21",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5ec77385-ba17-4d17-bc56-91a52dfeee56",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "SETTLE  settlement _multicurrency",
					"item": [
						{
							"name": "Setup Settlement",
							"item": [
								{
									"name": "Store Settlement&Position Account Balances Before Transfers",
									"item": [
										{
											"name": "testfsp1 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "22c316ff-8ffd-4e54-b450-d12deb6e40b0",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp3 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp3",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp4 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp4",
														"accounts"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Run Quote & Transfers",
									"item": [
										{
											"name": "Get Existing Open Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "06ca836d-99c7-49c7-844e-fe68090e14a4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"State should be OPEN\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].state).to.eql('OPEN');",
															"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
															"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows"
													],
													"query": [
														{
															"key": "state",
															"value": "OPEN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close Existing Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5b16f7ed-2212-419d-a43b-e2b38cf2b718",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"New window State should be OPEN\", function () {",
															"    console.log(pm.response.json());",
															"    pm.expect(pm.response.json().state).to.eql('OPEN');",
															"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
															"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
															"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
															"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows",
														"{{openWindowID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 1 (testfsp1 to testfsp2)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp1\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp2\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 1 ( testfsp1 to testfsp2 )",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"              });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp1\",\n  \"payeeFsp\": \"testfsp2\",\n  \"amount\": {\n    \"amount\": \"60\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 1 (testfsp1 to testfsp2) XOF",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp1\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp2\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60\",\n    \"currency\": \"{{currency1}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 1 ( testfsp1 to testfsp2 ) XOF",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"              });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp1\",\n  \"payeeFsp\": \"testfsp2\",\n  \"amount\": {\n    \"amount\": \"60\",\n    \"currency\": \"{{currency1}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 2 (testfsp1 to testfsp4)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp4"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp1\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp4\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"55\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 2 (testfsp1 to testfsp4)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','true')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 2000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp4"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp1\",\n  \"payeeFsp\": \"testfsp4\",\n  \"amount\": {\n    \"amount\": \"55\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 2 (testfsp1 to testfsp4) XOF",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp4"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp1\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp4\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"55\",\n    \"currency\": \"{{currency1}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 2 (testfsp1 to testfsp4) XOF",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','true')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 2000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp4"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp1\",\n  \"payeeFsp\": \"testfsp4\",\n  \"amount\": {\n    \"amount\": \"55\",\n    \"currency\": \"{{currency1}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 3 (testfsp3 to testfsp1)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp3/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP3_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp3"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp3\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp1\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"35\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 3 (testfsp3 to testfsp1)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp3/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP3_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp3"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp3\",\n  \"payeeFsp\": \"testfsp1\",\n  \"amount\": {\n    \"amount\": \"35\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 3 (testfsp3 to testfsp1) XOF",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp3/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP3_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp3"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp3\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp1\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"35\",\n    \"currency\": \"{{currency1}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 3 (testfsp3 to testfsp1) XOF",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp3/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP3_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp3"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp3\",\n  \"payeeFsp\": \"testfsp1\",\n  \"amount\": {\n    \"amount\": \"35\",\n    \"currency\": \"{{currency1}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 4 (testfsp2 to testfsp3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp2/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP2_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp2"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp2\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp3\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"20\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 4 (testfsp2 to testfsp3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp2/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP2_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp2"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp2\",\n  \"payeeFsp\": \"testfsp3\",\n  \"amount\": {\n    \"amount\": \"20\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 4 (testfsp2 to testfsp3) XOF",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp2/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP2_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp2"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp2\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp3\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"20\",\n    \"currency\": \"{{currency1}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 4 (testfsp2 to testfsp3) XOF",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp2/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP2_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp2"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp2\",\n  \"payeeFsp\": \"testfsp3\",\n  \"amount\": {\n    \"amount\": \"20\",\n    \"currency\": \"{{currency1}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 5 (testfsp4 to testfsp2)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp4\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp2\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"35\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 5 (testfsp4 to testfsp2)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp4\",\n  \"payeeFsp\": \"testfsp2\",\n  \"amount\": {\n    \"amount\": \"35\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 5 (testfsp4 to testfsp2) XOF",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp4\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp2\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"35\",\n    \"currency\": \"{{currency1}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 5 (testfsp4 to testfsp2) XOF",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp4\",\n  \"payeeFsp\": \"testfsp2\",\n  \"amount\": {\n    \"amount\": \"35\",\n    \"currency\": \"{{currency1}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 6 (testfsp4 to testfsp3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp4\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp3\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"25\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 6 (testfsp4 to testfsp3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp4\",\n  \"payeeFsp\": \"testfsp3\",\n  \"amount\": {\n    \"amount\": \"25\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 6 (testfsp4 to testfsp3) XOF",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp4\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp3\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"25\",\n    \"currency\": \"{{currency1}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
													"host": [
														"{{HOST_QUOTING_SERVICE}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 6 (testfsp4 to testfsp3) XOF",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp4\",\n  \"payeeFsp\": \"testfsp3\",\n  \"amount\": {\n    \"amount\": \"25\",\n    \"currency\": \"{{currency1}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Create Settlement",
									"item": [
										{
											"name": "Get Existing Open Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "06ca836d-99c7-49c7-844e-fe68090e14a4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"State should be OPEN\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].state).to.eql('OPEN');",
															"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
															"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows"
													],
													"query": [
														{
															"key": "state",
															"value": "OPEN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close Existing Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5b16f7ed-2212-419d-a43b-e2b38cf2b718",
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"New window State should be OPEN\", function () {",
															"    console.log(pm.response.json());",
															"    pm.expect(pm.response.json().state).to.eql('OPEN');",
															"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
															"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
															"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
															"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows",
														"{{openWindowID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Settlement for Closed Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2fd9c949-c268-4b8a-b924-724a54c9295d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.environment.set(\"settlementId\", pm.response.json().id);",
															"var jsonData = pm.response.json();",
															"    ",
															"pm.test(\"Settlement State should be PENDING_SETTLEMENT\", function () {",
															"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
															"});",
															"",
															"pm.test(\"Number of associated windows should be 1\", function () {",
															"    pm.expect(jsonData.settlementWindows.length).to.eql(1);",
															"});",
															"",
															"pm.test(\"Associated Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
															"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
															"});",
															"",
															"pm.test(\"Associated Settlement Window state should be PENDING_SETTLEMENT \", function () {",
															"    pm.expect(jsonData.settlementWindows[0].state).to.eql('PENDING_SETTLEMENT');",
															"});",
															"",
															"pm.test(\"Associated number of participants should be 4 \", function () {",
															"    pm.expect(jsonData.participants.length).to.eql(4);",
															"});",
															"",
															"for(var j in jsonData.participants) {",
															"    for(var k in jsonData.participants[j].accounts) {",
															"        console.log(jsonData.participants[j].accounts[k].id)",
															"        if(jsonData.participants[j].accounts[k].id === Number(pm.environment.get(\"payerFspAccountId\"))) {",
															"            console.log('payerfspNetSettlementAmount:',jsonData.participants[j].accounts[k].netSettlementAmount.amount)",
															"            pm.environment.set(\"payerfspNetSettlementAmount\",jsonData.participants[j].accounts[k].netSettlementAmount.amount);",
															"        } else if(jsonData.participants[j].accounts[k].id === Number(pm.environment.get(\"payeeFspAccountId\"))) {",
															"            console.log('payeefspNetSettlementAmount:',jsonData.participants[j].accounts[k].netSettlementAmount.amount)",
															"            pm.environment.set(\"payeefspNetSettlementAmount\",jsonData.participants[j].accounts[k].netSettlementAmount.amount);",
															"        }",
															"        ",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"reason\": \"TESTING\",\n  \"settlementWindows\": [\n    {\n      \"id\": {{closedWindowID}}\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Store Settlement&Position Account Balances After Transfers",
									"item": [
										{
											"name": "testfsp1 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "22c316ff-8ffd-4e54-b450-d12deb6e40b0",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp3 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp3",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp4 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp4",
														"accounts"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Prepare Settlement",
							"item": [
								{
									"name": "Prepare Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers recorded for payer\",",
													"                          \"state\": \"PS_TRANSFERS_RECORDED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d0f3b99-4ab4-4e9a-8655-30297675b802",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PS_TRANSFERS_RECORDED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_RECORDED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_RECORDED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_RECORDED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterPrepare;",
													"var testfsp1PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"",
													"pm.test(\"Testfsp1 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterPrepare;",
													"var testfsp2PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterPrepare;",
													"var testfsp3PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp3SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp3 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterPrepare;",
													"var testfsp4PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Reserve Settlement",
							"item": [
								{
									"name": "Reserve Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers reserved\",",
													"                          \"state\": \"PS_TRANSFERS_RESERVED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "payerfsp"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d0f3b99-4ab4-4e9a-8655-30297675b802",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PS_TRANSFERS_RESERVED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_RESERVED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_RESERVED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_RESERVED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterReserve;",
													"var testfsp1PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp1 position account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterReserve;",
													"var testfsp2PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance after reserve gets increased by its net settlement  amount.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterReserve;",
													"var testfsp3PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp3SettleAccountBalance\"));",
													"});",
													"",
													"",
													"pm.test(\"Testfsp3 position account balance after reserve gets increased by its net settlement  amount.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterReserve;",
													"var testfsp4PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Commit Settlement",
							"item": [
								{
									"name": "Commit Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers committed\",",
													"                          \"state\": \"PS_TRANSFERS_COMMITTED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "payerfsp"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d0f3b99-4ab4-4e9a-8655-30297675b802",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PS_TRANSFERS_COMMITTED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_COMMITTED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_COMMITTED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_COMMITTED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterCommit;",
													"var testfsp1PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp1 position account balance after commit should be reduced by its net settlement amount.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterCommit;",
													"var testfsp2PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance after reserve gets increased by its net settlement  amount.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterCommit;",
													"var testfsp3PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp3 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterCommit;",
													"var testfsp4PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Settle Settlement",
							"item": [
								{
									"name": "Settle Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers settled for payer\",",
													"                          \"state\": \"SETTLED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "payerfsp"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d0f3b99-4ab4-4e9a-8655-30297675b802",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be SETTLED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"SETTLED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be SETTLED\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"SETTLED\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is SETTLED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"SETTLED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterSettle;",
													"var testfsp1PositionAccountBalanceAfterSettle;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterSettle = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterSettle = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after settle should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterSettle).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp1 position account balance before and  after settle should be the same.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterSettle).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterCommit;",
													"var testfsp2PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterCommit;",
													"var testfsp3PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp3 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterCommit;",
													"var testfsp4PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "hub account balance check",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/hub/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"hub",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"description": "##Author: Sridevi Miriyala##\n\nThis is to check the behavior of the settlements process when there are multiple currency tranfers in a settlement window.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f1e93c4d-52a5-43b7-a096-47f5d844161a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "df20d203-30f6-449b-8017-42b725a473ff",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "ABORT  settlement (YET TO IMPLEMENT)",
					"item": [
						{
							"name": "Setup Settlement",
							"item": [
								{
									"name": "Store Settlement&Position Account Balances Before Transfers",
									"item": [
										{
											"name": "testfsp1 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "22c316ff-8ffd-4e54-b450-d12deb6e40b0",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp3 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp3",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp4 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4SettleAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4PositionAccountBalanceBeforeTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp4",
														"accounts"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Run Quote & Transfers",
									"item": [
										{
											"name": "Get Existing Open Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "06ca836d-99c7-49c7-844e-fe68090e14a4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"State should be OPEN\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].state).to.eql('OPEN');",
															"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
															"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													},
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows"
													],
													"query": [
														{
															"key": "state",
															"value": "OPEN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close Existing Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5b16f7ed-2212-419d-a43b-e2b38cf2b718",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"New window State should be OPEN\", function () {",
															"    console.log(pm.response.json());",
															"    pm.expect(pm.response.json().state).to.eql('OPEN');",
															"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
															"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
															"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
															"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows",
														"{{openWindowID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 1 (testfsp1 to testfsp2)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp1\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp2\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
													"host": [
														"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 1 ( testfsp1 to testfsp2 )",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"              });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp1\",\n  \"payeeFsp\": \"testfsp2\",\n  \"amount\": {\n    \"amount\": \"60\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 2 (testfsp1 to testfsp4)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp4"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp1\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp4\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"55\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
													"host": [
														"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 2 (testfsp1 to testfsp4)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"var uuid = require('uuid');",
															"var generatedUUID = uuid.v4();",
															"pm.environment.set('transfer_ID', generatedUUID);",
															"",
															"pm.environment.set('transferDate', (new Date()).toUTCString());",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','true')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp1/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 2000)"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP1_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp1"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp4"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp1\",\n  \"payeeFsp\": \"testfsp4\",\n  \"amount\": {\n    \"amount\": \"55\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 3 (testfsp3 to testfsp1)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp3/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP3_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp3"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp3\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp1\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"35\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
													"host": [
														"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 3 (testfsp3 to testfsp1)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp3/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP3_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp3"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp3\",\n  \"payeeFsp\": \"testfsp1\",\n  \"amount\": {\n    \"amount\": \"35\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 4 (testfsp2 to testfsp3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp2/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP2_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp2"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp2\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp3\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"20\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
													"host": [
														"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 4 (testfsp2 to testfsp3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp2/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP2_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp2"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp2\",\n  \"payeeFsp\": \"testfsp3\",\n  \"amount\": {\n    \"amount\": \"20\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 5 (testfsp4 to testfsp2)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp4\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp2\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"35\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
													"host": [
														"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 5 (testfsp4 to testfsp2)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp2"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp4\",\n  \"payeeFsp\": \"testfsp2\",\n  \"amount\": {\n    \"amount\": \"35\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Quote 6 (testfsp4 to testfsp3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
														"exec": [
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.variables.set('quoteId', generatedUUID);",
															"   generatedUUID = uuid.v4();",
															"   pm.environment.set('transactionId', generatedUUID);",
															"",
															"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
															"      if(response.responseSize !== 0) {",
															"          console.log(response.json());",
															"       pm.test(\"Response ilpPacket is not null\", function () {",
															"           pm.expect(response.json().ilpPacket).not.equal(null);",
															"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
															"       });",
															"       ",
															"       pm.test(\"Response condition is not null\", function () {",
															"           pm.expect(response.json().condition).not.equal(null);",
															"           pm.environment.set(\"condition\", response.json().condition);",
															"       });",
															"      } else {",
															"          pm.test(\"Quote FAILED\", function () {",
															"            throw new Error('Did not receive response');",
															"           });",
															"           postman.setNextRequest(null);",
															"      }",
															"       ",
															"   });",
															"}, 2000)",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.quotes+json"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.quotes+json;version=1.0"
													},
													{
														"key": "Date",
														"value": "{{dateHeader}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"testfsp4\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"testfsp3\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"25\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
													"host": [
														"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
													],
													"path": [
														"quotes"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send Transfer 6 (testfsp4 to testfsp3)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
														"exec": [
															"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
															"   var uuid = require('uuid');",
															"   var generatedUUID = uuid.v4();",
															"   pm.environment.set('transfer_ID', generatedUUID);",
															"} else {",
															"    pm.environment.set('transfer_ID', pm.environment.get('transactionId'));",
															"}",
															"",
															"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
															"   pm.environment.set('transferDate', (new Date()).toUTCString());",
															"}",
															"",
															"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
														"exec": [
															"pm.test(\"Status code is 202\", function () {",
															"    pm.response.to.have.status(202);",
															"});",
															"",
															"// pm.test(\"Check that Content-Type is present\", function () {",
															"//     pm.response.to.have.header(\"Content-Type\");",
															"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
															"// });",
															"",
															"setTimeout(function () {",
															"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/testfsp4/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
															"          if(response.responseSize !== 0) {",
															"              var jsonData = response.json();",
															"              pm.test(\"Response data does not have transferId\", function () {",
															"               pm.expect(jsonData.transferId).to.eql(undefined);",
															"             });",
															"              pm.test(\"Response status is COMMITTED\", function () {",
															"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
															"              });",
															"          } else {",
															"              pm.test(\"Transfer FAILED\", function () {",
															"                throw new Error('Did not receive response');",
															"              });",
															"              postman.setNextRequest(null)",
															"          }",
															"   });",
															"}, 2000)",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{TESTFSP4_BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Content-Type",
														"value": "application/vnd.interoperability.transfers+json;version=1"
													},
													{
														"key": "Date",
														"value": "{{transferDate}}"
													},
													{
														"key": "FSPIOP-Source",
														"value": "testfsp4"
													},
													{
														"key": "FSPIOP-Destination",
														"value": "testfsp3"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"testfsp4\",\n  \"payeeFsp\": \"testfsp3\",\n  \"amount\": {\n    \"amount\": \"25\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
												},
												"url": {
													"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
													"host": [
														"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
													],
													"path": [
														"transfers"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Create Settlement",
									"item": [
										{
											"name": "Get Existing Open Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "06ca836d-99c7-49c7-844e-fe68090e14a4",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"State should be OPEN\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData[0].state).to.eql('OPEN');",
															"    pm.environment.set(\"openWindowID\", jsonData[0].settlementWindowId);",
															"    console.log('openWindowID',pm.environment.get(\"openWindowID\"));",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows?state=OPEN",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows"
													],
													"query": [
														{
															"key": "state",
															"value": "OPEN"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Close Existing Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5b16f7ed-2212-419d-a43b-e2b38cf2b718",
														"type": "text/javascript",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"New window State should be OPEN\", function () {",
															"    console.log(pm.response.json());",
															"    pm.expect(pm.response.json().state).to.eql('OPEN');",
															"    pm.environment.set(\"newOpenWindowID\", pm.response.json().settlementWindowId);",
															"    pm.environment.set(\"closedWindowID\",  pm.environment.get(\"openWindowID\"));",
															"    console.log('newOpenWindowID',pm.environment.get(\"newOpenWindowID\"));",
															"    console.log('closedWindowID',pm.environment.get(\"closedWindowID\"));",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"CLOSED\",\n  \"reason\": \"string\"\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlementWindows/{{openWindowID}}",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlementWindows",
														"{{openWindowID}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Settlement for Closed Window",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2fd9c949-c268-4b8a-b924-724a54c9295d",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.environment.set(\"settlementId\", pm.response.json().id);",
															"var jsonData = pm.response.json();",
															"    ",
															"pm.test(\"Settlement State should be PENDING_SETTLEMENT\", function () {",
															"    pm.expect(jsonData.state).to.eql('PENDING_SETTLEMENT');",
															"});",
															"",
															"pm.test(\"Number of associated windows should be 1\", function () {",
															"    pm.expect(jsonData.settlementWindows.length).to.eql(1);",
															"});",
															"",
															"pm.test(\"Associated Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
															"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
															"});",
															"",
															"pm.test(\"Associated Settlement Window state should be PENDING_SETTLEMENT \", function () {",
															"    pm.expect(jsonData.settlementWindows[0].state).to.eql('PENDING_SETTLEMENT');",
															"});",
															"",
															"pm.test(\"Associated number of participants should be 4 \", function () {",
															"    pm.expect(jsonData.participants.length).to.eql(4);",
															"});",
															"",
															"for(var j in jsonData.participants) {",
															"    for(var k in jsonData.participants[j].accounts) {",
															"        console.log(jsonData.participants[j].accounts[k].id)",
															"        if(jsonData.participants[j].accounts[k].id === Number(pm.environment.get(\"payerFspAccountId\"))) {",
															"            console.log('payerfspNetSettlementAmount:',jsonData.participants[j].accounts[k].netSettlementAmount.amount)",
															"            pm.environment.set(\"payerfspNetSettlementAmount\",jsonData.participants[j].accounts[k].netSettlementAmount.amount);",
															"        } else if(jsonData.participants[j].accounts[k].id === Number(pm.environment.get(\"payeeFspAccountId\"))) {",
															"            console.log('payeefspNetSettlementAmount:',jsonData.participants[j].accounts[k].netSettlementAmount.amount)",
															"            pm.environment.set(\"payeefspNetSettlementAmount\",jsonData.participants[j].accounts[k].netSettlementAmount.amount);",
															"        }",
															"        ",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"reason\": \"TESTING\",\n  \"settlementWindows\": [\n    {\n      \"id\": {{closedWindowID}}\n    }\n  ]\n}"
												},
												"url": {
													"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements",
													"host": [
														"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
													],
													"path": [
														"settlements"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Store Settlement&Position Account Balances After Transfers",
									"item": [
										{
											"name": "testfsp1 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "22c316ff-8ffd-4e54-b450-d12deb6e40b0",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp1PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp1",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp2 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp2PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp2",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp3 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp3PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp3",
														"accounts"
													]
												}
											},
											"response": []
										},
										{
											"name": "testfsp4 balances",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "226979b9-928d-4e9d-85a8-4cf993dd471a",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"for (var i in jsonData){",
															"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4SettleAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
															"        console.log(jsonData[i].value)",
															"        pm.environment.set(\"testfsp4PositionAccountBalanceAfterTransfer\", jsonData[i].value);",
															"    }",
															"}",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{BEARER_TOKEN}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "FSPIOP-Source",
														"value": "payerfsp",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
													"host": [
														"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
													],
													"path": [
														"participants",
														"testfsp4",
														"accounts"
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Prepare Settlement",
							"item": [
								{
									"name": "Prepare Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers recorded for payer\",",
													"                          \"state\": \"PS_TRANSFERS_RECORDED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d0f3b99-4ab4-4e9a-8655-30297675b802",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PS_TRANSFERS_RECORDED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_RECORDED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_RECORDED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_RECORDED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterPrepare;",
													"var testfsp1PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"",
													"pm.test(\"Testfsp1 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterPrepare;",
													"var testfsp2PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterPrepare;",
													"var testfsp3PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp3SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp3 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after prepare",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterPrepare;",
													"var testfsp4PositionAccountBalanceAfterPrepare;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterPrepare = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after prepare should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterPrepare).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Reserve Settlement",
							"item": [
								{
									"name": "Reserve Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers reserved\",",
													"                          \"state\": \"PS_TRANSFERS_RESERVED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "payerfsp"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d0f3b99-4ab4-4e9a-8655-30297675b802",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PS_TRANSFERS_RESERVED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_RESERVED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_RESERVED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_RESERVED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterReserve;",
													"var testfsp1PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp1 position account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterReserve;",
													"var testfsp2PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance after reserve gets increased by its net settlement  amount.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterReserve;",
													"var testfsp3PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp3SettleAccountBalance\"));",
													"});",
													"",
													"",
													"pm.test(\"Testfsp3 position account balance after reserve gets increased by its net settlement  amount.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after reserve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterReserve;",
													"var testfsp4PositionAccountBalanceAfterReserve;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterReserve = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after reserve should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterReserve).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceAfterTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Commit Settlement",
							"item": [
								{
									"name": "Commit Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers committed\",",
													"                          \"state\": \"PS_TRANSFERS_COMMITTED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "payerfsp"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d0f3b99-4ab4-4e9a-8655-30297675b802",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be PS_TRANSFERS_COMMITTED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"PS_TRANSFERS_COMMITTED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be PENDING_SETTLEMENT\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"PENDING_SETTLEMENT\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is PS_TRANSFERS_COMMITTED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"PS_TRANSFERS_COMMITTED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterCommit;",
													"var testfsp1PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp1SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp1 position account balance after commit should be reduced by its net settlement amount.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp1PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterCommit;",
													"var testfsp2PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance after reserve gets increased by its net settlement  amount.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp2PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterCommit;",
													"var testfsp3PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp3 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp3PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after commit",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterCommit;",
													"var testfsp4PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4SettleAccountBalanceAfterTransfer\"));",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after commit should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterCommit).to.eql(pm.environment.get(\"testfsp4PositionAccountBalanceBeforeTransfer\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Abort Settlement",
							"item": [
								{
									"name": "Abort Settlement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84a1662c-7bc3-4d02-a4c7-ad43d4f4b514",
												"exec": [
													"",
													"var jsonData = pm.response.json();",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        console.log(jsonData.participants[j].accounts[k].id)",
													"        const participantPutRequest = {",
													"          url: pm.environment.get(\"HOST_CENTRAL_SETTLEMENT\")+pm.environment.get(\"BASE_CENTRAL_SETTLEMENT\")+'/settlements/'+pm.environment.get(\"settlementId\"),",
													"          method: 'PUT',",
													"          header: {",
													"              \"Authorization\":\"Bearer \"+pm.environment.get(\"HUBOPERATOR_BEARER_TOKEN\"),",
													"              \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
													"              \"Content-Type\": \"application/json\"",
													"          },",
													"          body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(",
													"                {",
													"                  \"participants\": [",
													"                    {",
													"                      \"id\": jsonData.participants[j].id,",
													"                      \"accounts\": [",
													"                        {",
													"                          \"id\": jsonData.participants[j].accounts[k].id,",
													"                          \"reason\": \"Transfers aborted for payer\",",
													"                          \"state\": \"ABORTED\"",
													"                        }",
													"                      ]",
													"                    }",
													"                  ]",
													"                }",
													"            )",
													"          }",
													"        };",
													"        pm.sendRequest(participantPutRequest, function (err, response) {",
													"            console.log(response.json());",
													"        });",
													"        ",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "payerfsp"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"state\": \"ABORTED\",\n  \"reason\": \"Aborted 1\",\n  \"externalReference\": \"1\"\n}"
										},
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "check state for participants after settle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d0f3b99-4ab4-4e9a-8655-30297675b802",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"    ",
													"pm.test(\"Settlement Id should be: \"+pm.environment.get(\"settlementId\"), function () {",
													"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"settlementId\"));",
													"});",
													"",
													"pm.test(\"Settlement state should be ABORTED\", function () {",
													"    pm.expect(jsonData.state).to.eql(\"ABORTED\");",
													"});",
													"",
													"pm.test(\"Settlement Window ID should be: \"+pm.environment.get(\"closedWindowID\"), function () {",
													"    pm.expect(jsonData.settlementWindows[0].id).to.eql(pm.environment.get(\"closedWindowID\"));",
													"});",
													"",
													"pm.test(\"Settlement Window State should be ABORTED\", function () {",
													"    pm.expect(jsonData.settlementWindows[0].state).to.eql(\"ABORTED\");",
													"});",
													"",
													"for(var j in jsonData.participants) {",
													"    for(var k in jsonData.participants[j].accounts) {",
													"        pm.test(`Participant Account ${jsonData.participants[j].accounts[k].id} state is ABORTED`, function () {",
													"            pm.expect(jsonData.participants[j].accounts[k].state).to.eql(\"ABORTED\");",
													"        });",
													"    }",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "FSPIOP-Source",
												"value": "payerfsp",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}/settlements/{{settlementId}}",
											"host": [
												"{{HOST_CENTRAL_SETTLEMENT}}{{BASE_CENTRAL_SETTLEMENT}}"
											],
											"path": [
												"settlements",
												"{{settlementId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp1 settlement&position accont balance after abort",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp1SettleAccountBalanceAfterSettle;",
													"var testfsp1PositionAccountBalanceAfterSettle;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp1SettleAccountBalanceAfterSettle = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp1PositionAccountBalanceAfterSettle = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp1 settlement account balance before and  after abort should be the same.\", function () {",
													"    pm.expect(testfsp1SettleAccountBalanceAfterSettle).to.eql(testfsp1SettleAccountBalance);",
													"});",
													"",
													"pm.test(\"Testfsp1 position account balance before and  after abort should be the same.\", function () {",
													"    pm.expect(testfsp1PositionAccountBalanceAfterSettle).to.eql(testfsp1PositionAccountBalance);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp1/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp1",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp2 settlement&position accont balance after abort",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp2SettleAccountBalanceAfterCommit;",
													"var testfsp2PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp2SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp2PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp2 settlement account balance before and  after abort should be the same.\", function () {",
													"    pm.expect(testfsp2SettleAccountBalanceAfterCommit).to.eql(testfsp2SettleAccountBalance);",
													"});",
													"",
													"pm.test(\"Testfsp2 position account balance before and  after abort should be the same.\", function () {",
													"    pm.expect(testfsp2PositionAccountBalanceAfterCommit).to.eql(testfsp2PositionAccountBalance);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp2/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp2",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp3 settlement&position accont balance after abort",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp3SettleAccountBalanceAfterCommit;",
													"var testfsp3PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp3SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp3PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp3 settlement account balance before and  after abort should be the same.\", function () {",
													"    pm.expect(testfsp3SettleAccountBalanceAfterCommit).to.eql(testfsp3SettleAccountBalance);",
													"});",
													"",
													"pm.test(\"Testfsp3 position account balance before and  after abort should be the same.\", function () {",
													"    pm.expect(testfsp3PositionAccountBalanceAfterCommit).to.eql(testfsp3PositionAccountBalance);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp3/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp3",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "testfsp4 settlement&position accont balance after abort",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55a678e6-1992-4024-82cc-046646d63bf7",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"var testfsp4SettleAccountBalanceAfterCommit;",
													"var testfsp4PositionAccountBalanceAfterCommit;",
													"for (var i in jsonData){",
													"    if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
													"        testfsp4SettleAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"    if(jsonData[i].ledgerAccountType === \"POSITION\") {",
													"        testfsp4PositionAccountBalanceAfterCommit = jsonData[i].value",
													"    }",
													"}",
													"",
													"pm.test(\"Testfsp4 settlement account balance before and  after abort should be the same.\", function () {",
													"    pm.expect(testfsp4SettleAccountBalanceAfterCommit).to.eql(testfsp4SettleAccountBalance);",
													"});",
													"",
													"pm.test(\"Testfsp4 position account balance before and  after abort should be the same.\", function () {",
													"    pm.expect(testfsp4PositionAccountBalanceAfterCommit).to.eql(testfsp4PositionAccountBalance);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/testfsp4/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"testfsp4",
												"accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "hub account balance check",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/hub/accounts",
											"host": [
												"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
											],
											"path": [
												"participants",
												"hub",
												"accounts"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "308e0d73-5af8-4f1a-ae74-8547c7909504",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4d93e7eb-ca04-48aa-8be1-0c9617bfe1b2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "transfer_negative_scenarios",
			"item": [
				{
					"name": "setup noresponsepayeefsp",
					"item": [
						{
							"name": "Add no_response_payeefsp",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e301b75-8068-47e9-8248-d99fe928474c",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"name\": \"noresponsepayeefsp\",\"currency\": \"{{currency}}\"}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add initial position and limits",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d767079d-a9dd-401a-8d6a-5f94654c4259",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{hub_operator}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"currency\": \"{{currency}}\",\n\t\"limit\": {\n\t  \"type\": \"NET_DEBIT_CAP\",\n\t  \"value\": 10000\n\t},\n\t\"initialPosition\": 0\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/noresponsepayeefsp/initialPositionAndLimits",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"noresponsepayeefsp",
										"initialPositionAndLimits"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "payee_abort",
					"item": [
						{
							"name": "Store Payerfsp position before prepare",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"payerfspPositionBeforePrepare\", jsonData[0].value);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "52a7b3f2-656d-45a5-b1f9-69414966f11b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Store Payeefsp position before prepare",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"payeefspPositionBeforePrepare\", jsonData[0].value);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "52a7b3f2-656d-45a5-b1f9-69414966f11b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payeefsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Prepare",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
										"exec": [
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('transfer_ID', generatedUUID);",
											"pm.environment.set('transferDate', (new Date()).toUTCString());",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "noresponsepayeefsp"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"vz4f-w8iIgSLHC0xwKXeO14uy2r6QmSPv5QNtycgs6E\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Store Payerfsp position after Prepare",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"payerfspPositionAfterPrepare\", jsonData[0].value);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "52a7b3f2-656d-45a5-b1f9-69414966f11b",
										"exec": [
											"setTimeout(function () {",
											"  pm.sendRequest('www.google.com', function (err, response) {}",
											"    );",
											"}, 3000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Payee Abort",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2e244cfd-ff69-448a-8b62-176d4dd0b28d",
										"exec": [
											"pm.variables.set(\"completedTimestamp\",new Date().toISOString());"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "358f8ed8-6882-4c54-8dfd-177607c9e07b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
											"          if(response !== null) {",
											"              var jsonData = response.json();",
											"              pm.test(\"Response code should be ABORTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
											"              });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 5000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{PAYEEFSP_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payeefsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fulfilment\": \"Z4OXLoReF4RA8LtBrMTrFJWo5SSx5dgW6xymreuEOXc\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"ABORTED\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payerfsp Notification",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.variables.set('transferId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.variables.set('transferDate', (new Date()).toUTCString());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6c54bbb2-0b33-4301-86ae-751142923a4c",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
											"// });",
											"",
											"pm.test(\"Response status is ABORTED\", function () {",
											"    pm.expect(jsonData.transferState).to.eql('ABORTED');",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{HOST_SIMULATOR}}/{{payerfsp}}/correlationid/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SIMULATOR}}"
									],
									"path": [
										"{{payerfsp}}",
										"correlationid",
										"transfers",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Transfer status - ABORTED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.variables.set('transferId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.variables.set('transferDate', (new Date()).toUTCString());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6c54bbb2-0b33-4301-86ae-751142923a4c",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
											"// });",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
											"          if(response !== null) {",
											"              var jsonData = response.json();",
											"              ",
											"              pm.test(\"Response status is ABORTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
											"              });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 3000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payerfsp position after Abort",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Payerfsp position after Payee ABORT should be same as position before prepare.\", function () {",
											"    ",
											"    pm.expect(jsonData[0].value).to.equal(Number(pm.environment.get('payerfspPositionBeforePrepare')));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53c7e6de-d4c1-428e-a1c7-70fad0f3bed1",
										"exec": [
											"setTimeout(function () {",
											"  pm.sendRequest('www.google.com', function (err, response) {}",
											"    );",
											"}, 10000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payeefsp position after Abort",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Payeefsp position after Payee ABORT should be same as position before prepare.\", function () {",
											"    ",
											"    pm.expect(jsonData[0].value).to.equal(Number(pm.environment.get('payeefspPositionBeforePrepare')));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53c7e6de-d4c1-428e-a1c7-70fad0f3bed1",
										"exec": [
											"setTimeout(function () {",
											"  pm.sendRequest('www.google.com', function (err, response) {}",
											"    );",
											"}, 10000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payeefsp}}",
										"positions"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "payee_invalid_fulfillment",
					"item": [
						{
							"name": "Send Quote",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
										"exec": [
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.variables.set('quoteId', generatedUUID);",
											"   generatedUUID = uuid.v4();",
											"   pm.environment.set('transactionId', generatedUUID);",
											"",
											"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.environment.set('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE','false')",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
											"      if(response.responseSize !== 0) {",
											"          console.log(response.json());",
											"       pm.test(\"Response ilpPacket is not null\", function () {",
											"           pm.expect(response.json().ilpPacket).not.equal(null);",
											"           pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
											"       });",
											"       ",
											"       pm.test(\"Response condition is not null\", function () {",
											"           pm.expect(response.json().condition).not.equal(null);",
											"           pm.environment.set(\"condition\", response.json().condition);",
											"       });",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"           postman.setNextRequest(null);",
											"      }",
											"       ",
											"   });",
											"}, 1000)",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"100\",\n    \"currency\": \"XOF\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
									"host": [
										"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Transfer Prepare",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "373ce4bd-e96f-49df-a8e4-e2bd6e8490ab",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('transfer_ID', generatedUUID);",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.variables.set('transferDate', (new Date()).toUTCString());",
											"}",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 1200000))",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ec961c23-5b9f-4509-9b30-4ea1de9a7b43",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "noresponsepayeefsp"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"10\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{validCondition}}\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								},
								"description": "send a tranfer request with ilp packet and condition that are generated in quotes response along with expiry, fspiop source,fspiop destination, amount and currency."
							},
							"response": []
						},
						{
							"name": "Store Payerfsp position",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"payerfspPositionBeforeTransfer\", jsonData[0].value);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "52a7b3f2-656d-45a5-b1f9-69414966f11b",
										"exec": [
											"setTimeout(function () {",
											"  pm.sendRequest('www.google.com', function (err, response) {}",
											"    );",
											"}, 3000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Store Payeefsp position",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"payeefspPositionBeforeTransfer\", jsonData[0].value);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "52a7b3f2-656d-45a5-b1f9-69414966f11b",
										"exec": [
											"setTimeout(function () {",
											"  pm.sendRequest('www.google.com', function (err, response) {}",
											"    );",
											"}, 3000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payeefsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payeefsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Payee Invalid Fulfillment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2e244cfd-ff69-448a-8b62-176d4dd0b28d",
										"exec": [
											"pm.environment.set(\"completedTimestamp\",new Date().toISOString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "358f8ed8-6882-4c54-8dfd-177607c9e07b",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Date",
										"type": "text",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"type": "text",
										"value": "{{payeefsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"fulfilment\": \"{{invalidFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"COMMITTED\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Transfer status - RESERVED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.variables.set('transferId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.variables.set('transferDate', (new Date()).toUTCString());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6c54bbb2-0b33-4301-86ae-751142923a4c",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
											"// });",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
											"          if(response !== null) {",
											"              var jsonData = response.json();",
											"              ",
											"              pm.test(\"Response status is RESERVED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('RESERVED');",
											"              });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 3000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payerfsp&Payeefsp position",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Payerfsp position after transfer and after Payee ABORT should be same as position before transfer.\", function () {",
											"    ",
											"    pm.expect(jsonData[0].value).to.equal(Number(pm.environment.get('payerfspPositionBeforeTransfer')));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53c7e6de-d4c1-428e-a1c7-70fad0f3bed1",
										"exec": [
											"setTimeout(function () {",
											"  pm.sendRequest('www.google.com', function (err, response) {}",
											"    );",
											"}, 10000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "transfer_timeout",
					"item": [
						{
							"name": "Store Payerfsp position before prepare",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"payerfspPositionBeforePrepare\", jsonData[0].value);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "52a7b3f2-656d-45a5-b1f9-69414966f11b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Prepare",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
										"exec": [
											"",
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('transfer_ID', generatedUUID);",
											"pm.environment.set('transferDate', (new Date()).toUTCString());",
											"pm.environment.set('transferAmount', 100);",
											"",
											"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Date",
										"value": "{{dateHeader}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "noresponsepayeefsp"
									},
									{
										"key": "FSPIOP-Signature",
										"value": "{{fspiop-signature}}",
										"type": "text"
									},
									{
										"key": "FSPIOP-URI",
										"value": "/transfers",
										"type": "text"
									},
									{
										"key": "FSPIOP-HTTP-Method",
										"value": "POST",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"nMel-FDPpp3T77jfC11fUXdcy935hy089AJ9v2OTXBI\"\n}"
								},
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payerfsp position before timeout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Payerfsp position after Prepare should be same as position before prepare+transfer amout\", function () {",
											"    ",
											"    var expectedValue = Number(pm.environment.get('payerfspPositionBeforePrepare'))+Number(pm.environment.get('transferAmount'))",
											"    ",
											"    pm.expect(jsonData[0].value).to.equal(expectedValue);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "52a7b3f2-656d-45a5-b1f9-69414966f11b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payerfsp position after timeout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974f5e96-3667-491c-a5f7-940bf92bc755",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Payerfsp position after timeout should be same as position before prepare.\", function () {",
											"    ",
											"    pm.expect(jsonData[0].value).to.equal(Number(pm.environment.get('payerfspPositionBeforePrepare')));",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "52a7b3f2-656d-45a5-b1f9-69414966f11b",
										"exec": [
											"setTimeout(function () {",
											"  pm.sendRequest('www.google.com', function (err, response) {}",
											"    );",
											"}, 100000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{payerfsp}}"
									}
								],
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/positions",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"positions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Transfer status - ABORTED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.variables.set('transferId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.variables.set('transferDate', (new Date()).toUTCString());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6c54bbb2-0b33-4301-86ae-751142923a4c",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
											"// });",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
											"          if(response !== null) {",
											"              var jsonData = response.json();",
											"              ",
											"              pm.test(\"Response status is ABORTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
											"              });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 3000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Payerfsp Notification",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.variables.set('transferId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.variables.set('transferDate', (new Date()).toUTCString());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6c54bbb2-0b33-4301-86ae-751142923a4c",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
											"// });",
											"",
											"pm.test(\"Response status is ABORTED\", function () {",
											"    pm.expect(jsonData.transferState).to.eql('ABORTED');",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{HOST_SIMULATOR}}/{{payerfsp}}/correlationid/{{transfer_ID}}",
									"host": [
										"{{HOST_SIMULATOR}}"
									],
									"path": [
										"{{payerfsp}}",
										"correlationid",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Headers",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
										"exec": [
											"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.variables.set('transferId', generatedUUID);",
											"}",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.variables.set('transferDate', (new Date()).toUTCString());",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6c54bbb2-0b33-4301-86ae-751142923a4c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
											"// });",
											"",
											"pm.test(\"fspiop-source is switch\", function () {",
											"    pm.expect(pm.response.json().headers['fspiop-source']).to.eql('switch');",
											"});",
											"",
											"pm.test(\"fspiop-destination is payerfsp\", function () {",
											"    pm.expect(pm.response.json().headers['fspiop-destination']).to.eql('payerfsp');",
											"});",
											"",
											"pm.test(\"fspiop-signature is empty\", function () {",
											"    pm.expect(pm.response.json().headers['fspiop-signature']).to.eql(undefined);",
											"});",
											"",
											"pm.test(\"accept is empty\", function () {",
											"    pm.expect(pm.response.json().headers['accept']).to.eql(undefined);",
											"});",
											"",
											"pm.test(\"content-type should be application/vnd.interoperability.transfers+json;version=1\", function () {",
											"    pm.expect(pm.response.json().headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1');",
											"});",
											"",
											"pm.test(\"fspiop-uri is empty\", function () {",
											"    pm.expect(pm.response.json().headers['fspiop-uri']).to.eql(undefined);",
											"});",
											"",
											"pm.test(\"fspiop-http-method is empty\", function () {",
											"    pm.expect(pm.response.json().headers['fspiop-http-method']).to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{HOST_SIMULATOR}}/{{payerfsp}}/callbacks/{{transfer_ID}}",
									"host": [
										"{{HOST_SIMULATOR}}"
									],
									"path": [
										"{{payerfsp}}",
										"callbacks",
										"{{transfer_ID}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Response body:\n: Received error in Transfers: {\"errorInformation\":{\"errorCode\":3100,\"errorDescription\":\"Generic validation error: Expiration date 2018-10-01T20:31:00.534Z is already in the past\"}}\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b3fe964b-e855-4f23-a870-b7d5bc0b8adf",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "caee960c-6526-42d1-9ecb-000f436e9bce",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "cf834ce7-c6bf-476a-a78b-1955d247aac8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "50c31700-180b-4494-9eef-3a538ad7c5e6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "duplicate_handling",
			"item": [
				{
					"name": "transfers",
					"item": [
						{
							"name": "original_transfer_timedout",
							"item": [
								{
									"name": "Send Quote Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
												"exec": [
													"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
													"   var uuid = require('uuid');",
													"   var generatedUUID = uuid.v4();",
													"   pm.variables.set('quoteId', generatedUUID);",
													"}",
													"",
													"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
													"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// pm.test(\"Check that Content-Type is present\", function () {",
													"//     pm.response.to.have.header(\"Content-Type\");",
													"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
													"// });",
													"",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
													"      if(response !== null) {",
													"          console.log('response: ',response.json());",
													"       pm.test(\"Response ilpPacket is not null\", function () {",
													"           console.log('ilpPacket: ',response.json().ilpPacket)",
													"           pm.expect(response.json().ilpPacket).not.eql(null);",
													"          pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
													"           ",
													"       });",
													"       ",
													"       pm.test(\"Response condition is not null\", function () {",
													"           pm.expect(response.json().condition).not.eql(null);",
													"           pm.environment.set(\"condition\", response.json().condition);",
													"       });",
													"      } else {",
													"          pm.test(\"Quote FAILED\", function () {",
													"            throw new Error('Did not receive response');",
													"           });",
													"           postman.setNextRequest(null);",
													"      }",
													"       ",
													"   });",
													"}, 1000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.quotes+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.quotes+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{quoteDate}}"
											},
											{
												"key": "FSPIOP-SOurce",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"100\",\n    \"currency\": \"USD\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
											"host": [
												"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
											],
											"path": [
												"quotes"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Transfer-Prepare",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('transfer_ID', generatedUUID);",
													"pm.environment.set('transferDate', (new Date()).toUTCString());",
													"pm.environment.set('transferAmount', 100);",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{dateHeader}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "noresponsepayeefsp"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"nMel-FDPpp3T77jfC11fUXdcy935hy089AJ9v2OTXBI\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Duplicate Transfer-prepare",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('transfer_ID', generatedUUID);",
													"pm.environment.set('transferDate', (new Date()).toUTCString());",
													"pm.environment.set('transferAmount', 100);",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{dateHeader}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "noresponsepayeefsp"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"nMel-FDPpp3T77jfC11fUXdcy935hy089AJ9v2OTXBI\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"description": "Send a transfer-prepare from payerfsp to payeefsp\nDo not send transfer-fulfil from payeefsp.\n\nSend a duplicate transfer-prepare with same params.\ncheck the simulator logs to make sure that there should not be any response for the duplicate transfer when the actual transfer is not at terminal state which means neither committed nor aborted but in process.\n\nThis is same as sending duplicate transfer when actual transfer is at ABORTED state.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb820baa-0cb0-4c41-9955-8f96395d68a6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "61fcc61f-21fc-4b4f-b320-c64702d73893",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "original_transfer_at_committed",
							"item": [
								{
									"name": "Send Transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "900142b0-e4d7-43a4-a751-38202b600661",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// pm.test(\"Check that Content-Type is present\", function () {",
													"//     pm.response.to.have.header(\"Content-Type\");",
													"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
													"// });",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
													"          if(response !== null) {",
													"              var jsonData = response.json();",
													"              pm.test(\"Response data does not have transferId\", function () {",
													"               pm.expect(jsonData.transferId).to.eql(undefined);",
													"             });",
													"              pm.test(\"Response status is COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"              });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 2000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "20820c95-0a24-4906-a6ba-708d6ecf4a61",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('transfer_ID', generatedUUID);",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"1\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Duplicate Transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "900142b0-e4d7-43a4-a751-38202b600661",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// pm.test(\"Check that Content-Type is present\", function () {",
													"//     pm.response.to.have.header(\"Content-Type\");",
													"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
													"// });",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
													"          if(response !== null) {",
													"              var jsonData = response.json().data;",
													"              var headers = response.json().headers",
													"              pm.test(\"Response data does not have transferId\", function () {",
													"               pm.expect(jsonData.transferId).to.eql(undefined);",
													"             });",
													"              pm.test(\"Response status is COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"              });",
													"              pm.test(\"fspiop-source is switch\", function () {",
													"                pm.expect(headers['fspiop-source']).to.eql('switch');",
													"              });",
													"              pm.test(\"fspiop-destination is payerfsp\", function () {",
													"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
													"              });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 2000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "20820c95-0a24-4906-a6ba-708d6ecf4a61",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"1\",\n    \"currency\": \"USD\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"description": "Send a transfer-prepare from payerfsp to payeefsp\nSend tranfer-fulfil with \"COMMITTED\" from payeefsp to payerfsp\nTransfer Must be successful - Both FSP's shd be notified.\nSend a duplicate transfer-prepare with same params.\ncheck the simulator logs to make sure the response for the duplicate transfer must be the same response from the actual transfer which is already committed.\n\nresponse:\n2018-10-12 06:11:19.266  INFO 7240 --- [io-8444-exec-10] com.mojaloop.fsp.PayerFsp                : In Payerfsp. TransferId: 3f5ffe54-583c-4d43-ba9e-824615f84e1c Body: {\"transferId\":\"3f5ffe54-583c-4d43-ba9e-824615f84e1c\",\"amount\":{\"currency\":\"USD\",\"amount\":\"99.00\"},\"transferState\":\"COMMITTED\",\"completedTimestamp\":\"2018-10-12T06:10:41.000Z\",\"ilpPacket\":\"AQAAAAAAAABkEHByaXZhdGUucGF5ZWVmc3CCAlV7InRyYW5zYWN0aW9uSWQiOiI0OWI0YWNkYS1hMThiLTQyNzAtYmM2OC1lMTBhY2ZlMzQ4ZGEiLCJxdW90ZUlkIjoiNDliNGFjZGEtYTE4Yi00MjcwLWJjNjgtZTEwYWNmZTM0OGRhIiwicGF5ZWUiOnsicGFydHlJZEluZm8iOnsicGFydHlJZFR5cGUiOiJNU0lTRE4iLCJwYXJ0eUlkZW50aWZpZXIiOiIyNzcxMzgwMzkwNiIsImZzcElkIjoicGF5ZWVmc3AifSwicGVyc29uYWxJbmZvIjp7ImNvbXBsZXhOYW1lIjp7fX19LCJwYXllciI6eyJwYXJ0eUlkSW5mbyI6eyJwYXJ0eUlkVHlwZSI6Ik1TSVNETiIsInBhcnR5SWRlbnRpZmllciI6IjI3NzEzODAzOTA1IiwiZnNwSWQiOiJwYXllcmZzcCJ9LCJwZXJzb25hbEluZm8iOnsiY29tcGxleE5hbWUiOnsiZmlyc3ROYW1lIjoiTWF0cyIsImxhc3ROYW1lIjoiSGFnbWFuIn19fSwiYW1vdW50Ijp7ImN1cnJlbmN5IjoiVVNEIiwiYW1vdW50IjoiMTAwIn0sInRyYW5zYWN0aW9uVHlwZSI6eyJzY2VuYXJpbyI6IlRSQU5TRkVSIiwic3ViU2NlbmFyaW8iOiJUUkFOU0ZFUiIsImluaXRpYXRvciI6IlBBWUVSIiwiaW5pdGlhdG9yVHlwZSI6IkNPTlNVTUVSIiwicmVmdW5kSW5mbyI6e319LCJub3RlIjoiaGVqIn0=\",\"fulfilment\":\"Pum19KP9S4tuLsR4Hlrcx8ThydepCIApVpG9A7IWcU0\",\"condition\":\"qpx2bqg7LdpQK_-XxRfYv6bAuc-NeeVyWiFr2MkFX7M\",\"expiration\":\"2018-10-20T04:24:01.000Z\",\"extensionList\":{\"extension\":[]}}\n2018-10-12 06:11:20.703  INFO 7240 --- [nio-8444-exec-7] com.mojaloop.fsp.PayerFsp                : correlationId in getCorrelationId: 11c0eed8-d5a6-402d-ac55-e8fb9aa7e4a9\n",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9ead388a-48c9-4438-8ff5-56a957f3adc6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1565d275-fe14-4078-9775-9a4612b7940d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "original_transfer_aborted",
							"item": [
								{
									"name": "Send Prepare",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('transfer_ID', generatedUUID);",
													"pm.environment.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{dateHeader}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "noresponsepayeefsp"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"vz4f-w8iIgSLHC0xwKXeO14uy2r6QmSPv5QNtycgs6E\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Payee Abort",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2e244cfd-ff69-448a-8b62-176d4dd0b28d",
												"exec": [
													"pm.variables.set(\"completedTimestamp\",new Date().toISOString());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "358f8ed8-6882-4c54-8dfd-177607c9e07b",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
													"          if(response !== null) {",
													"              var jsonData = response.json();",
													"              pm.test(\"Response code should be ABORTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
													"              });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 5000)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{PAYEEFSP_BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"type": "text",
												"value": "{{dateHeader}}"
											},
											{
												"key": "FSPIOP-Source",
												"type": "text",
												"value": "{{payeefsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"type": "text",
												"value": "{{payerfsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"fulfilment\": \"Z4OXLoReF4RA8LtBrMTrFJWo5SSx5dgW6xymreuEOXc\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"ABORTED\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers",
												"{{transfer_ID}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Duplicate Prepare",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{dateHeader}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "noresponsepayeefsp"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"vz4f-w8iIgSLHC0xwKXeO14uy2r6QmSPv5QNtycgs6E\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ae104003-e6a2-4f04-a3b4-7c4f73016359",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6c0ec624-b121-405b-8f5e-a780120440dc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "original_transfer_not_in_terminal_state",
							"item": [
								{
									"name": "Send Quote",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": ""
										}
									},
									"response": []
								},
								{
									"name": "Send Transfer-prepare",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": ""
										}
									},
									"response": []
								},
								{
									"name": "Send Duplicate Transfer-prepare",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": ""
										},
										"description": "With same ID and same other params.\nThis duplicate request must be ignored.\nNo response shd be noticed in payerfsp."
									},
									"response": []
								}
							],
							"description": "Send a transfer-prepare from payerfsp to payeefsp\nDo not send transfer-fulfil from payeefsp.\n\nSend a duplicate transfer-prepare with same params.\ncheck the simulator logs to make sure that there should not be any response for the duplicate transfer when the actual transfer is not at terminal state which means neither committed nor aborted but in process.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb820baa-0cb0-4c41-9955-8f96395d68a6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "61fcc61f-21fc-4b4f-b320-c64702d73893",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "original_transfer_not_in_terminal_state_and_payee_sending_invalid_fulfilments_before_timeout_period",
							"item": [
								{
									"name": "Send Quote",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": ""
										}
									},
									"response": []
								},
								{
									"name": "Send Transfer-prepare",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": ""
										}
									},
									"response": []
								},
								{
									"name": "Send Transfers-Fulfil (INVALID)",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": ""
										},
										"description": "with invalid fulfilment within expiry time.\nGet the error msg from payeefsp simulator log and compare it with the expected error msg."
									},
									"response": []
								},
								{
									"name": "Send Duplicate Transfer-prepare",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": ""
										},
										"description": "With same ID and same other params.\nThis duplicate request must be ignored.\nNo response shd be noticed in payerfsp."
									},
									"response": []
								}
							],
							"description": "Send a transfer-prepare from payerfsp to payeefsp \nsend transfer-fulfil from payeefsp with invalid fulfilments within expiry time.\n - check payeefsp simulator logs for an error msg.\nSend a duplicate transfer-prepare with same params.\nThis duplicate transfer request should be ignored. check the simulator logs to make sure that there should not be any response for the duplicate transfer when the actual transfer is not at terminal state which means neither committed nor aborted but in process.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb820baa-0cb0-4c41-9955-8f96395d68a6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "61fcc61f-21fc-4b4f-b320-c64702d73893",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "original_in_reserved_state",
							"item": [
								{
									"name": "Send Prepare",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													"",
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('transfer_ID', generatedUUID);",
													"pm.environment.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 600000))"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{dateHeader}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "noresponsepayeefsp"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"vz4f-w8iIgSLHC0xwKXeO14uy2r6QmSPv5QNtycgs6E\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Duplicate Prepare",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{BEARER_TOKEN}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Date",
												"value": "{{dateHeader}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "noresponsepayeefsp"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"99\",\n    \"currency\": \"XOF\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"vz4f-w8iIgSLHC0xwKXeO14uy2r6QmSPv5QNtycgs6E\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "original_before_timeout",
							"item": [],
							"_postman_isSubFolder": true
						},
						{
							"name": "fulfill_abort",
							"item": [
								{
									"name": "with_fulfillment",
									"item": [
										{
											"name": "positive",
											"item": [
												{
													"name": "Send Quote",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.variables.set('quoteId', generatedUUID);",
																	"}",
																	"",
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
																	"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
																	"// });",
																	"",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
																	"      if(response !== null) {",
																	"          console.log('response: ',response.json());",
																	"       pm.test(\"Response ilpPacket is not null\", function () {",
																	"           console.log('ilpPacket: ',response.json().ilpPacket)",
																	"           pm.expect(response.json().ilpPacket).not.eql(null);",
																	"          pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
																	"           ",
																	"       });",
																	"       ",
																	"       pm.test(\"Response condition is not null\", function () {",
																	"           pm.expect(response.json().condition).not.eql(null);",
																	"           pm.environment.set(\"condition\", response.json().condition);",
																	"       });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 1000)",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-SOurce",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payeefsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"100\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Transfer-Prepare",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
																"exec": [
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('transfer_ID', generatedUUID);",
																	"pm.environment.set('transferDate', (new Date()).toUTCString());",
																	"pm.environment.set('transferAmount', 100);",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "noresponsepayeefsp"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiop-signature}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{validCondition}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Fulfill",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2e244cfd-ff69-448a-8b62-176d4dd0b28d",
																"exec": [
																	"pm.environment.set(\"completedTimestamp\",new Date().toISOString());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "358f8ed8-6882-4c54-8dfd-177607c9e07b",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                //Uncomment after JWS is implemented",
																	"                // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
																	"                //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
																	"                // });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"              //Check data",
																	"              var jsonData = response.json().data;",
																	"              pm.test(\"Response transferState should be ABORTED\", function () {",
																	"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
																	"              });",
																	"              ",
																	"              pm.test(\"Response fulfilment should be same as in request\", function () {",
																	"                pm.expect(jsonData.fulfilment).to.eql(pm.environment.get(\"validFulfillment\"));",
																	"              });",
																	"              ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 5000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.transfers+json;version=1.0"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "noresponsepayeefsp"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"ABORTED\"\n}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Duplicate Fulfill",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2e244cfd-ff69-448a-8b62-176d4dd0b28d",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "358f8ed8-6882-4c54-8dfd-177607c9e07b",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is switch\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('switch');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is noresponsepayeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('noresponsepayeefsp');",
																	"                });",
																	"                ",
																	"                //Uncomment after JWS is implemented",
																	"                // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
																	"                //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
																	"                // });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"              //Check data",
																	"              var jsonData = response.json().data;",
																	"              pm.test(\"Response code should be ABORTED\", function () {",
																	"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
																	"              });",
																	"              ",
																	"              pm.test(\"Response fulfilment should be same as in request\", function () {",
																	"                pm.expect(jsonData.fulfilment).to.eql(pm.environment.get(\"validFulfillment\"));",
																	"              });",
																	"              ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 5000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.transfers+json;version=1.0"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "noresponsepayeefsp"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"ABORTED\"\n}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}"
															]
														}
													},
													"response": []
												}
											],
											"_postman_isSubFolder": true
										},
										{
											"name": "negative",
											"item": [
												{
													"name": "Send Quote",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.variables.set('quoteId', generatedUUID);",
																	"}",
																	"",
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
																	"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
																	"// });",
																	"",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
																	"      if(response !== null) {",
																	"          console.log('response: ',response.json());",
																	"       pm.test(\"Response ilpPacket is not null\", function () {",
																	"           console.log('ilpPacket: ',response.json().ilpPacket)",
																	"           pm.expect(response.json().ilpPacket).not.eql(null);",
																	"          pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
																	"           ",
																	"       });",
																	"       ",
																	"       pm.test(\"Response condition is not null\", function () {",
																	"           pm.expect(response.json().condition).not.eql(null);",
																	"           pm.environment.set(\"condition\", response.json().condition);",
																	"       });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 1000)",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-SOurce",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payeefsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"100\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Transfer-Prepare",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
																"exec": [
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('transfer_ID', generatedUUID);",
																	"pm.environment.set('transferDate', (new Date()).toUTCString());",
																	"pm.environment.set('transferAmount', 100);",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "noresponsepayeefsp"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiop-signature}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{validCondition}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Fulfill",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2e244cfd-ff69-448a-8b62-176d4dd0b28d",
																"exec": [
																	"pm.environment.set(\"completedTimestamp\",new Date().toISOString());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "358f8ed8-6882-4c54-8dfd-177607c9e07b",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                //Uncomment after JWS is implemented",
																	"                // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
																	"                //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
																	"                // });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"              //Check data",
																	"              var jsonData = response.json().data;",
																	"              pm.test(\"Response code should be ABORTED\", function () {",
																	"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
																	"              });",
																	"              ",
																	"              pm.test(\"Response fulfilment should be same as in request\", function () {",
																	"                pm.expect(jsonData.fulfilment).to.eql(pm.environment.get(\"validFulfillment\"));",
																	"              });",
																	"              ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 5000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.transfers+json;version=1.0"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "noresponsepayeefsp"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"ABORTED\"\n}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Invalid Duplicate Fulfill",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2e244cfd-ff69-448a-8b62-176d4dd0b28d",
																"exec": [
																	"pm.environment.set(\"completedTimestamp\",new Date().toISOString());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "358f8ed8-6882-4c54-8dfd-177607c9e07b",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is switch\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('switch');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is noresponsepayeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('noresponsepayeefsp');",
																	"                });",
																	"                ",
																	"                //Uncomment after JWS is implemented",
																	"                // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
																	"                //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
																	"                // });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"              //Check data",
																	"              var jsonData = response.json().data;",
																	"              pm.test(\"Response Error Code is 3106\", function () {",
																	"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3106');",
																	"              });",
																	"              ",
																	"              pm.test(\"Response Error Desription is 'Modified request'\", function () {",
																	"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Modified request');",
																	"              });",
																	"              ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 5000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.transfers+json;version=1.0"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "noresponsepayeefsp"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"fulfilment\": \"{{validFulfillment}}\",\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"ABORTED\"\n}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}"
															]
														}
													},
													"response": []
												}
											],
											"_postman_isSubFolder": true
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "without_fulfillment",
									"item": [
										{
											"name": "positive",
											"item": [
												{
													"name": "Send Quote",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.variables.set('quoteId', generatedUUID);",
																	"}",
																	"",
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
																	"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
																	"// });",
																	"",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
																	"      if(response !== null) {",
																	"          console.log('response: ',response.json());",
																	"       pm.test(\"Response ilpPacket is not null\", function () {",
																	"           console.log('ilpPacket: ',response.json().ilpPacket)",
																	"           pm.expect(response.json().ilpPacket).not.eql(null);",
																	"          pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
																	"           ",
																	"       });",
																	"       ",
																	"       pm.test(\"Response condition is not null\", function () {",
																	"           pm.expect(response.json().condition).not.eql(null);",
																	"           pm.environment.set(\"condition\", response.json().condition);",
																	"       });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 1000)",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-SOurce",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payeefsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"100\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Transfer-Prepare",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
																"exec": [
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('transfer_ID', generatedUUID);",
																	"pm.environment.set('transferDate', (new Date()).toUTCString());",
																	"pm.environment.set('transferAmount', 100);",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "noresponsepayeefsp"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiop-signature}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{validCondition}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Fulfill",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2e244cfd-ff69-448a-8b62-176d4dd0b28d",
																"exec": [
																	"pm.environment.set(\"completedTimestamp\",new Date().toISOString());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "358f8ed8-6882-4c54-8dfd-177607c9e07b",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                //Uncomment after JWS is implemented",
																	"                // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
																	"                //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
																	"                // });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"              //Check data",
																	"              var jsonData = response.json().data;",
																	"              pm.test(\"Response code should be ABORTED\", function () {",
																	"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
																	"              });",
																	"              ",
																	"              pm.test(\"Response fulfilment should be empty\", function () {",
																	"                pm.expect(jsonData.fulfilment).to.eql(undefined);",
																	"              });",
																	"              ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 5000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.transfers+json;version=1.0"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "noresponsepayeefsp"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"ABORTED\"\n}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Duplicate Fulfill",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2e244cfd-ff69-448a-8b62-176d4dd0b28d",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "358f8ed8-6882-4c54-8dfd-177607c9e07b",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is switch\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('switch');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is noresponsepayeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('noresponsepayeefsp');",
																	"                });",
																	"                ",
																	"                //Uncomment after JWS is implemented",
																	"                // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
																	"                //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
																	"                // });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"              //Check data",
																	"              var jsonData = response.json().data;",
																	"              pm.test(\"Response code should be ABORTED\", function () {",
																	"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
																	"              });",
																	"              ",
																	"              pm.test(\"Response fulfilment should be empty\", function () {",
																	"                pm.expect(jsonData.fulfilment).to.eql(undefined);",
																	"              });",
																	"              ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 5000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.transfers+json;version=1.0"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "noresponsepayeefsp"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"ABORTED\"\n}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}"
															]
														}
													},
													"response": []
												}
											],
											"_postman_isSubFolder": true
										},
										{
											"name": "negative",
											"item": [
												{
													"name": "Send Quote",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
																"exec": [
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_TRANSFER_UUID_ON_PREPARE') === 'true') {",
																	"   var uuid = require('uuid');",
																	"   var generatedUUID = uuid.v4();",
																	"   pm.variables.set('quoteId', generatedUUID);",
																	"}",
																	"",
																	"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
																	"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b7ca6bc0-b58a-46d8-8881-2db1aa0703ef",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"// pm.test(\"Check that Content-Type is present\", function () {",
																	"//     pm.response.to.have.header(\"Content-Type\");",
																	"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
																	"// });",
																	"",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
																	"      if(response !== null) {",
																	"          console.log('response: ',response.json());",
																	"       pm.test(\"Response ilpPacket is not null\", function () {",
																	"           console.log('ilpPacket: ',response.json().ilpPacket)",
																	"           pm.expect(response.json().ilpPacket).not.eql(null);",
																	"          pm.environment.set(\"ilpPacket\", response.json().ilpPacket);",
																	"           ",
																	"       });",
																	"       ",
																	"       pm.test(\"Response condition is not null\", function () {",
																	"           pm.expect(response.json().condition).not.eql(null);",
																	"           pm.environment.set(\"condition\", response.json().condition);",
																	"       });",
																	"      } else {",
																	"          pm.test(\"Quote FAILED\", function () {",
																	"            throw new Error('Did not receive response');",
																	"           });",
																	"           postman.setNextRequest(null);",
																	"      }",
																	"       ",
																	"   });",
																	"}, 1000)",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.quotes+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.quotes+json;version=1.0"
															},
															{
																"key": "Date",
																"value": "{{quoteDate}}"
															},
															{
																"key": "FSPIOP-SOurce",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "{{payeefsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"{{payeefsp}}\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"100\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
														},
														"url": {
															"raw": "{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}/quotes",
															"host": [
																"{{HOST_SWITCH}}{{BASE_PATH_SWITCH}}"
															],
															"path": [
																"quotes"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Transfer-Prepare",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
																"exec": [
																	"",
																	"var uuid = require('uuid');",
																	"var generatedUUID = uuid.v4();",
																	"pm.environment.set('transfer_ID', generatedUUID);",
																	"pm.environment.set('transferDate', (new Date()).toUTCString());",
																	"pm.environment.set('transferAmount', 100);",
																	"",
																	"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 120000))"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "e47ebaa4-926e-4007-821a-e68cd385e18c",
																"exec": [
																	"pm.test(\"Status code is 202\", function () {",
																	"    pm.response.to.have.status(202);",
																	"});",
																	"",
																	"",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/vnd.interoperability.transfers+json;version=1"
															},
															{
																"key": "Content-Type",
																"value": "application/vnd.interoperability.transfers+json;version=1"
															},
															{
																"key": "Date",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"value": "{{payerfsp}}"
															},
															{
																"key": "FSPIOP-Destination",
																"value": "noresponsepayeefsp"
															},
															{
																"key": "FSPIOP-Signature",
																"value": "{{fspiop-signature}}",
																"type": "text"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"noresponsepayeefsp\",\n  \"amount\": {\n    \"amount\": \"{{transferAmount}}\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{validCondition}}\"\n}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Fulfill",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2e244cfd-ff69-448a-8b62-176d4dd0b28d",
																"exec": [
																	"pm.environment.set(\"completedTimestamp\",new Date().toISOString());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "358f8ed8-6882-4c54-8dfd-177607c9e07b",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is noresponsepayeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('noresponsepayeefsp');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is payerfsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
																	"                });",
																	"                ",
																	"                //Uncomment after JWS is implemented",
																	"                // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
																	"                //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
																	"                // });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"              //Check data",
																	"              var jsonData = response.json().data;",
																	"              pm.test(\"Response code should be ABORTED\", function () {",
																	"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
																	"              });",
																	"              ",
																	"              pm.test(\"Response fulfilment should be empty\", function () {",
																	"                pm.expect(jsonData.fulfilment).to.eql(undefined);",
																	"              });",
																	"              ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 5000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.transfers+json;version=1.0"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "noresponsepayeefsp"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"ABORTED\"\n}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Send Invalid Duplicate Fulfill",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2e244cfd-ff69-448a-8b62-176d4dd0b28d",
																"exec": [
																	"pm.environment.set(\"completedTimestamp\",new Date().toISOString());"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "358f8ed8-6882-4c54-8dfd-177607c9e07b",
																"exec": [
																	"pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);",
																	"});",
																	"",
																	"setTimeout(function () {",
																	"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/callbacks/\"+pm.environment.get(\"transfer_ID\"), function (err, response) {",
																	"          if(response.responseSize !== 0) {",
																	"              //Check headers",
																	"              var headers = response.json().headers;",
																	"              ",
																	"                pm.test(\"fspiop-source is switch\", function () {",
																	"                    pm.expect(headers['fspiop-source']).to.eql('switch');",
																	"                });",
																	"                ",
																	"                pm.test(\"fspiop-destination is noresponsepayeefsp\", function () {",
																	"                    pm.expect(headers['fspiop-destination']).to.eql('noresponsepayeefsp');",
																	"                });",
																	"                ",
																	"                //Uncomment after JWS is implemented",
																	"                // pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
																	"                //     pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
																	"                // });",
																	"                ",
																	"                pm.test(\"date header should not be empty\", function () {",
																	"                    pm.expect(headers['date']).to.be.not.empty;",
																	"                });",
																	"                ",
																	"                pm.test(\"accept header should not be sent in the response\", function () {",
																	"                    pm.expect(headers['accept']).to.eql(undefined);",
																	"                });",
																	"                ",
																	"                pm.test(\"payeefsp content-type is same as sent in the request\", function () {",
																	"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.transfers+json;version=1.0');",
																	"                });",
																	"                ",
																	"              //Check data",
																	"              var jsonData = response.json().data;",
																	"              pm.test(\"Response Error Code is 3106\", function () {",
																	"                pm.expect(jsonData.errorInformation.errorCode).to.eql('3106');",
																	"              });",
																	"              ",
																	"              pm.test(\"Response Error Desription is 'Modified request'\", function () {",
																	"                pm.expect(jsonData.errorInformation.errorDescription).to.eql('Modified request');",
																	"              });",
																	"              ",
																	"          } else {",
																	"              pm.test(\"Transfer FAILED\", function () {",
																	"                throw new Error('Did not receive response');",
																	"              });",
																	"              postman.setNextRequest(null)",
																	"          }",
																	"   });",
																	"}, 5000)"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{PAYEEFSP_BEARER_TOKEN}}",
																	"type": "string"
																}
															]
														},
														"method": "PUT",
														"header": [
															{
																"key": "Content-Type",
																"name": "Content-Type",
																"type": "text",
																"value": "application/vnd.interoperability.transfers+json;version=1.0"
															},
															{
																"key": "Date",
																"type": "text",
																"value": "{{dateHeader}}"
															},
															{
																"key": "FSPIOP-Source",
																"type": "text",
																"value": "noresponsepayeefsp"
															},
															{
																"key": "FSPIOP-Destination",
																"type": "text",
																"value": "{{payerfsp}}"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"completedTimestamp\": \"{{completedTimestamp}}\",\n  \"transferState\": \"ABORTED\"\n}"
														},
														"url": {
															"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{transfer_ID}}",
															"host": [
																"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
															],
															"path": [
																"transfers",
																"{{transfer_ID}}"
															]
														}
													},
													"response": []
												}
											],
											"_postman_isSubFolder": true
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"description": "Send a transfer-prepare from payerfsp to payeefsp\nDo not send transfer-fulfil from payeefsp.\n\nSend a duplicate transfer-prepare with same params.\ncheck the simulator logs to make sure that there should not be any response for the duplicate transfer when the actual transfer is not at terminal state which means neither committed nor aborted but in process.\n\nThis is same as sending duplicate transfer when actual transfer is at ABORTED state.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eb820baa-0cb0-4c41-9955-8f96395d68a6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "61fcc61f-21fc-4b4f-b320-c64702d73893",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "modified_request",
							"item": [
								{
									"name": "Send Transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "900142b0-e4d7-43a4-a751-38202b600661",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// pm.test(\"Check that Content-Type is present\", function () {",
													"//     pm.response.to.have.header(\"Content-Type\");",
													"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
													"// });",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
													"          if(response !== null) {",
													"              var jsonData = response.json();",
													"              pm.test(\"Response data does not have transferId\", function () {",
													"               pm.expect(jsonData.transferId).to.eql(undefined);",
													"             });",
													"              pm.test(\"Response status is COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"              });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 2000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "20820c95-0a24-4906-a6ba-708d6ecf4a61",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('transfer_ID', generatedUUID);",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"1\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Send Modified Transfer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "900142b0-e4d7-43a4-a751-38202b600661",
												"exec": [
													"pm.test(\"Status code is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"// pm.test(\"Check that Content-Type is present\", function () {",
													"//     pm.response.to.have.header(\"Content-Type\");",
													"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
													"// });",
													"",
													"setTimeout(function () {",
													"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"transfer_ID\"), function (err, response) {",
													"          if(response !== null) {",
													"              var jsonData = response.json();",
													"              pm.test(\"Response data does not have transferId\", function () {",
													"               pm.expect(jsonData.transferId).to.eql(undefined);",
													"             });",
													"              pm.test(\"Response status is COMMITTED\", function () {",
													"                pm.expect(jsonData.transferState).to.eql('COMMITTED');",
													"              });",
													"          } else {",
													"              pm.test(\"Transfer FAILED\", function () {",
													"                throw new Error('Did not receive response');",
													"              });",
													"              postman.setNextRequest(null)",
													"          }",
													"   });",
													"}, 2000)",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "20820c95-0a24-4906-a6ba-708d6ecf4a61",
												"exec": [
													"var uuid = require('uuid');",
													"var generatedUUID = uuid.v4();",
													"pm.environment.set('transfer_ID', generatedUUID);",
													"",
													"pm.variables.set('transferDate', (new Date()).toUTCString());",
													"",
													"pm.environment.set(\"transferExpiration\",new Date(new Date().getTime() + 60000))"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/vnd.interoperability.transfers+json;version=1"
											},
											{
												"key": "Content-Type",
												"value": "application/vnd.interoperability.transfers+json;version=1.0"
											},
											{
												"key": "Date",
												"value": "{{transferDate}}"
											},
											{
												"key": "FSPIOP-Source",
												"value": "{{payerfsp}}"
											},
											{
												"key": "FSPIOP-Destination",
												"value": "{{payeefsp}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"transferId\": \"{{transfer_ID}}\",\n  \"payerFsp\": \"{{payerfsp}}\",\n  \"payeeFsp\": \"{{payeefsp}}\",\n  \"amount\": {\n    \"amount\": \"10\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"expiration\": \"{{transferExpiration}}\",\n  \"ilpPacket\": \"{{ilpPacket}}\",\n  \"condition\": \"{{condition}}\"\n}"
										},
										"url": {
											"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers",
											"host": [
												"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
											],
											"path": [
												"transfers"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "reject",
							"item": [],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"description": "Author: Sridevi Miriyala",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4a716a10-2878-4c93-bce8-12113e0b301c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "df7033f7-6c48-42f0-8414-15c328c499f6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "funds_in_funds_out",
			"item": [
				{
					"name": "auto_abort",
					"item": [
						{
							"name": "Record Funds Out Prepare&Reserve- payerfsp Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a96ad88c-c5e9-4077-b060-765ccd1e86e1",
										"exec": [
											"var uuid = require('uuid');",
											"var generatedUUID = uuid.v4();",
											"pm.environment.set('fundsOutPrepareReserveTransferId', generatedUUID);",
											"",
											"const payerfspGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'SETTLEMENT') {",
											"            pm.environment.set(\"payerfspSettlementAccountId\",jsonData[i].id)",
											"            pm.environment.set(\"payerfspSettlementAccountBalanceBeforeFundsOutPrepare\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											"",
											"const hubGetStatusRequest = {",
											"  url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/hub/accounts',",
											"  method: 'GET',",
											"  header: {",
											"      \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"      \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"      \"Content-Type\": \"application/json\"",
											"  }",
											"};",
											"pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"    console.log(response.json())",
											"    var jsonData = response.json()",
											"    for(var i in jsonData) {",
											"        if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') {",
											"            pm.environment.set(\"hubReconAccountBalanceBeforeFundsOutPrepare\",jsonData[i].value)",
											"        }",
											"    }",
											"});",
											"",
											"var fundsOutPrepareReserveAmount = -1 * (Number(pm.environment.get(\"payerfspSettlementAccountBalanceBeforeFundsOutPrepare\"))-100)",
											"pm.environment.set('fundsOutPrepareReserveAmount', fundsOutPrepareReserveAmount);",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "96c26230-6092-4f78-882f-c5343b363fe1",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"setTimeout(function () {",
											"    const payerfspGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/'+pm.environment.get(\"payerfsp\")+'/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(payerfspGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var payerfspSettlementAccountBalanceAfterFundsOutPrepare",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'SETTLEMENT') {",
											"                payerfspSettlementAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
											"            }",
											"        }",
											"        var payerfspExpectedBalance = pm.environment.get('payerfspSettlementAccountBalanceBeforeFundsOutPrepare')",
											"        pm.test(\"Final Payerfsp Settlement Account Balance should not change\", function () {",
											"            pm.expect(payerfspSettlementAccountBalanceAfterFundsOutPrepare).to.eql(payerfspExpectedBalance);",
											"          });    ",
											"    ",
											"    });",
											"    ",
											"    const hubGetStatusRequest = {",
											"      url: pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+'/participants/hub/accounts',",
											"      method: 'GET',",
											"      header: {",
											"          \"Authorization\":\"Bearer \"+pm.environment.get(\"HUB_OPERATOR_BEARER_TOKEN\"),",
											"          \"FSPIOP-Source\": pm.environment.get(\"hub_operator\"),",
											"          \"Content-Type\": \"application/json\"",
											"      }",
											"    };",
											"    pm.sendRequest(hubGetStatusRequest, function (err, response) {",
											"        console.log(response.json())",
											"        var jsonData = response.json()",
											"        var hubReconAccountBalanceAfterFundsOutPrepare",
											"        for(var i in jsonData) {",
											"            if(jsonData[i].ledgerAccountType === 'HUB_RECONCILIATION') {",
											"                hubReconAccountBalanceAfterFundsOutPrepare = jsonData[i].value",
											"            }",
											"        }",
											"        var hubExpectedBalance = pm.environment.get(\"hubReconAccountBalanceBeforeFundsOutPrepare\")",
											"        pm.test(\"Final Hub Reconciliation Account Balance should increasenot change\", function () {",
											"            pm.expect(hubReconAccountBalanceAfterFundsOutPrepare).to.eql(hubExpectedBalance);",
											"          });  ",
											"    });",
											"}, 2000)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "FSPIOP-Source",
										"type": "text",
										"value": "{{hub_operator}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"transferId\": \"{{fundsOutPrepareReserveTransferId}}\",\n  \"externalReference\": \"string\",\n  \"action\": \"recordFundsOutPrepareReserve\",\n  \"reason\": \"string\",\n  \"amount\": {\n    \"amount\": {{fundsOutPrepareReserveAmount}},\n    \"currency\": \"XOF\"\n  },\n  \"extensionList\": {\n    \"extension\": [\n      {\n        \"key\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n}"
								},
								"url": {
									"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/{{payerfsp}}/accounts/{{payerfspSettlementAccountId}}",
									"host": [
										"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
									],
									"path": [
										"participants",
										"{{payerfsp}}",
										"accounts",
										"{{payerfspSettlementAccountId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Transfer status - ABORTED",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "16b4580d-74c7-44e9-952e-d40a61f9cb69",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6c54bbb2-0b33-4301-86ae-751142923a4c",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.transfers+json;version=1.0\");",
											"// });",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"fundsOutPrepareReserveTransferId\"), function (err, response) {",
											"          if(response !== null) {",
											"              var jsonData = response.json();",
											"              ",
											"              pm.test(\"Response status is ABORTED\", function () {",
											"                pm.expect(jsonData.transferState).to.eql('ABORTED');",
											"              });",
											"          } else {",
											"              pm.test(\"Transfer FAILED\", function () {",
											"                throw new Error('Did not receive response');",
											"              });",
											"              postman.setNextRequest(null)",
											"          }",
											"   });",
											"}, 3000)",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BEARER_TOKEN}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.transfers+json;version=1"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.interoperability.transfers+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{transferDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payeefsp}}",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}/transfers/{{fundsOutPrepareReserveTransferId}}",
									"host": [
										"{{HOST_SWITCH_TRANSFERS}}{{BASE_PATH_SWITCH_TRANSFERS}}"
									],
									"path": [
										"transfers",
										"{{fundsOutPrepareReserveTransferId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "monitoring",
			"item": [
				{
					"name": "health_monotor_instrumentation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d66a4555-1fbf-4079-a064-62d0e4f8bdc3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check that Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"text/html; charset=utf-8\");",
									"});",
									"",
									"pm.test(\"Check that first and last expected response values are present\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"moja_cl_process_cpu_user_seconds_total\"); // first Value",
									"    pm.expect(pm.response.text()).to.include(\"moja_cl_nodejs_version_info\"); // last Value",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/metrics?Date={{dateHeader}}",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"metrics"
							],
							"query": [
								{
									"key": "Date",
									"value": "{{dateHeader}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "quotes_negative_scenarios",
			"item": [
				{
					"name": "Fee",
					"item": [
						{
							"name": "Send Quote Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
										"exec": [
											"",
											"   var uuid = require('uuid');",
											"   var generatedUUID = uuid.v4();",
											"   pm.environment.set('quoteId', generatedUUID);",
											"",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "095c973b-3b61-453c-992c-21a78b1066dc",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
											"// });",
											"",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.environment.get(\"quoteId2\"), function (err, response) {",
											"      if(response !== null) {",
											"          console.log(response.json());",
											"       pm.test(\"Response ilpPacket is not null\", function () {",
											"           pm.expect(response.json().ilpPacket).not.equal(null);",
											"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
											"       });",
											"       ",
											"       pm.test(\"Response condition is not null\", function () {",
											"           pm.expect(response.json().condition).not.equal(null);",
											"           pm.environment.set(\"condition2\", response.json().condition);",
											"       });",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"           postman.setNextRequest(null);",
											"      }",
											"       ",
											"   });",
											"}, 3000);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/vnd.interoperability.quotes+json;version=1.0",
										"type": "text"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "{{payerfsp}}"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "noresponsepayeefsp"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{quoteId}}\",\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"{{receiverMSISDN}}\",\n      \"fspId\": \"noresponsepayeefsp\"\n    }\n  },\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"27713803905\",\n      \"fspId\": \"{{payerfsp}}\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"15\",\n    \"currency\": \"USD\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\"\n}"
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sending Quote - quote ID not matching Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
										"exec": [
											"",
											"",
											"if (pm.environment.get('CONFIG_GENERATE_NEW_PREPARE_DATE') === 'true') {",
											"   pm.environment.set('quoteDate', (new Date()).toUTCString());",
											"   ",
											"}",
											"",
											"//pm.environment.set(\"quoteExpDate\",new Date(new Date().getTime() + 120000));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "095c973b-3b61-453c-992c-21a78b1066dc",
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"// pm.test(\"Check that Content-Type is present\", function () {",
											"//     pm.response.to.have.header(\"Content-Type\");",
											"//     pm.response.to.be.header(\"Content-Type\", \"application/vnd.interoperability.quotes+json;version=1.0\");",
											"// });",
											"",
											"",
											"setTimeout(function () {",
											"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/correlationid/\"+pm.variables.get(\"quoteId2\"), function (err, response) {",
											"      if(response !== null) {",
											"          console.log(response.json());",
											"       pm.test(\"Response ilpPacket is not null\", function () {",
											"           pm.expect(response.json().ilpPacket).not.equal(null);",
											"           pm.environment.set(\"ilpPacket2\", response.json().ilpPacket);",
											"       });",
											"       ",
											"       pm.test(\"Response condition is not null\", function () {",
											"           pm.expect(response.json().condition).not.equal(null);",
											"           pm.environment.set(\"condition2\", response.json().condition);",
											"       });",
											"      } else {",
											"          pm.test(\"Quote FAILED\", function () {",
											"            throw new Error('Did not receive response');",
											"           });",
											"           postman.setNextRequest(null);",
											"      }",
											"       ",
											"   });",
											"}, 5000);",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.interoperability.quotes+json;version=1",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/vnd.interoperability.quotes+json;version=1.0"
									},
									{
										"key": "Date",
										"value": "{{quoteDate}}"
									},
									{
										"key": "FSPIOP-Source",
										"value": "noresponsepayeefsp"
									},
									{
										"key": "FSPIOP-Destination",
										"value": "{{payerfsp}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \n   \"transferAmount\": { \n   \"amount\": \"11\",   \n   \"currency\": \"USD\" },\n   \"payeeReceiveAmount\": {  \n   \"amount\": \"11\",   \n   \"currency\": \"USD\"   }, \n   \"payeeFspFee\": {\n    \"currency\": \"USD\",\n    \"amount\": \"1.0\"\n  },\n  \"payeeFspCommission\": {\n    \"currency\": \"USD\",\n    \"amount\": \"1\"\n  },\n   \"expiration\": \"{{quoteExpDate}}\",\n   \"ilpPacket\": \"{{ilpPacket}}\",\n   \"condition\": \"{{condition}}\" } "
								},
								"url": {
									"raw": "{{HOST_QUOTING_SERVICE}}/quotes/{{quoteId}}",
									"host": [
										"{{HOST_QUOTING_SERVICE}}"
									],
									"path": [
										"quotes",
										"{{quoteId}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Forex_quotes",
			"item": [
				{
					"name": "Send Quote Forex",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "887e4721-3923-41bd-bf8a-3d0cd5eed8ee",
								"exec": [
									"   var uuid = require('uuid');",
									"   var generatedUUID = uuid.v4();",
									"   pm.environment.set('quoteId', generatedUUID);",
									"   generatedUUID = uuid.v4();",
									"   pm.environment.set('transactionId', generatedUUID);",
									"",
									"   pm.variables.set('quoteDate', (new Date()).toUTCString());",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "029f9c14-13e7-4aac-ada8-572ccf2d502c",
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"//Check the request that Switch forwards to payeefsp",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payeefsp/requests/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"          if(response.responseSize !== 0) {",
									"              ",
									"              //Check the Headers",
									"              var headers = response.json().headers;",
									"              ",
									"                pm.test(\"payeefsp fspiop-source is payerfsp\", function () {",
									"                    pm.expect(headers['fspiop-source']).to.eql('payerfsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-destination is payerfsp\", function () {",
									"                    pm.expect(headers['fspiop-destination']).to.eql('payeefsp');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp fspiop-signature is same as sent in the request\", function () {",
									"                    pm.expect(headers['fspiop-signature']).to.eql(pm.environment.get(\"fspiop-signature\"));",
									"                });",
									"                ",
									"                pm.test(\"payeefsp accept is same as sent in the request\", function () {",
									"                    pm.expect(headers['accept']).to.eql('application/vnd.interoperability.quotes+json;version=1');",
									"                });",
									"                ",
									"                pm.test(\"payeefsp content-typeis same as sent in the request\", function () {",
									"                    pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
									"                });",
									"                ",
									"          } else {",
									"              pm.test(\"Quote FAILED\", function () {",
									"                throw new Error('Did not receive request on payee side');",
									"              });",
									"              postman.setNextRequest(null)",
									"          }",
									"   });",
									"}, 1100)",
									"",
									"//Check Data on payer side",
									"setTimeout(function () {",
									"  pm.sendRequest(pm.environment.get(\"HOST_SIMULATOR\")+\"/payerfsp/callbacks/\"+pm.variables.get(\"quoteId\"), function (err, response) {",
									"      if(response.responseSize !== 0) {",
									"          //Checking headers",
									"            var headers = response.json().headers;",
									"            pm.test(\"payerfsp fspiop-source is payeefsp\", function () {",
									"                pm.expect(headers['fspiop-source']).to.eql('payeefsp');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-destination is payerfsp\", function () {",
									"                pm.expect(headers['fspiop-destination']).to.eql('payerfsp');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp content-type should be application/vnd.interoperability.quotes+json;version=1.0\", function () {",
									"                pm.expect(headers['content-type']).to.eql('application/vnd.interoperability.quotes+json;version=1.0');",
									"            });",
									"            ",
									"            pm.test(\"payerfsp accept is empty\", function () {",
									"                pm.expect(headers['accept']).to.eql(undefined);",
									"            });",
									"            ",
									"            ",
									"            ",
									"            //Validate protected header inside Signature",
									"            var {signature,protectedHeader} = JSON.parse(headers['fspiop-signature'])",
									"            var decodedProtectedHeaders = JSON.parse(atob(protectedHeader))",
									"            console.log('decodedProtectedHeaders:',decodedProtectedHeaders)",
									"            ",
									"            // pm.test(\"FSPIOP-Signature signature is returned\", function () {",
									"            //     pm.expect(signature).to.eql(pm.environment.get(\"payeefsp-signature\"));",
									"            // });",
									"            ",
									"            pm.test(\"FSPIOP-Signature Protected Header alg to be RS256\", function () {",
									"                pm.expect(decodedProtectedHeaders['alg']).to.eql('RS256');",
									"            });",
									"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
									"                pm.expect(decodedProtectedHeaders['FSPIOP-URI']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
									"            });",
									"            ",
									"",
									"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-HTTP-Method to be PUT\", function () {",
									"                pm.expect(decodedProtectedHeaders['FSPIOP-HTTP-Method']).to.eql('PUT');",
									"            });",
									"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Source to be mojaloop-sdk\", function () {",
									"                pm.expect(decodedProtectedHeaders['FSPIOP-Source']).to.eql('payeefsp');",
									"            });",
									"            pm.test(\"FSPIOP-Signature Protected Header FSPIOP-Destination to be payerfsp\", function () {",
									"                pm.expect(decodedProtectedHeaders['FSPIOP-Destination']).to.eql('payerfsp');",
									"            });",
									"            pm.test(\"FSPIOP-Signature Protected Header Date is present\", function () {",
									"                pm.expect(decodedProtectedHeaders['Date']).to.not.eql(undefined);",
									"            });",
									"           ",
									"            pm.test(\"payerfsp FSPIOP-URI to be /quotes/\"+pm.environment.get(\"quoteId\"), function () {",
									"                pm.expect(headers['fspiop-uri']).to.eql('/quotes/'+pm.environment.get(\"quoteId\"));",
									"            });",
									"            ",
									"            pm.test(\"payerfsp fspiop-http-method is PUT\", function () {",
									"                pm.expect(headers['fspiop-http-method']).to.eql('PUT');",
									"            });",
									"            ",
									"            var jsonData = response.json().data;",
									"          ",
									"            pm.test(\"Response ilpPacket is not undefined\", function () {",
									"                pm.expect(jsonData.ilpPacket).not.equal(undefined);",
									"                pm.environment.set(\"ilpPacket\", jsonData.ilpPacket);",
									"            });",
									"       ",
									"           pm.test(\"Response condition is not undefined\", function () {",
									"               pm.expect(jsonData.condition).not.equal(undefined);",
									"               pm.environment.set(\"condition\", jsonData.condition);",
									"           });",
									"      } else {",
									"          pm.test(\"Quote FAILED\", function () {",
									"            throw new Error('Did not receive response');",
									"           });",
									"",
									"      }",
									"       ",
									"   });",
									"}, 1000)",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TESTFSP1_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.quotes+json"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.quotes+json;version=1.0"
							},
							{
								"key": "Date",
								"value": "{{dateHeader}}"
							},
							{
								"key": "FSPIOP-Source",
								"value": "payerfsp"
							},
							{
								"key": "FSPIOP-Destination",
								"value": "FXP"
							},
							{
								"key": "FSPIOP-Signature",
								"value": "{{fspiop-signature}}",
								"type": "text"
							},
							{
								"key": "FSPIOP-DestinationCurrency",
								"value": "EUR",
								"type": "text"
							},
							{
								"key": "FSPIOP-SourceCurrency",
								"value": "XOF",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"quoteId\": \"{{quoteId}}\",\n  \"transactionId\": \"{{transactionId}}\",\n  \"payer\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22507008181\",\n      \"fspId\": \"payerfsp\"\n    },\n    \"personalInfo\": {\n      \"complexName\": {\n        \"firstName\": \"Mats\",\n        \"lastName\": \"Hagman\"\n      },\n      \"dateOfBirth\": \"1983-10-25\"\n    }\n  },\n  \"payee\": {\n    \"partyIdInfo\": {\n      \"partyIdType\": \"MSISDN\",\n      \"partyIdentifier\": \"22556999125\",\n      \"fspId\": \"payeefsp\"\n    }\n  },\n  \"amountType\": \"SEND\",\n  \"amount\": {\n    \"amount\": \"60\",\n    \"currency\": \"{{currency}}\"\n  },\n  \"transactionType\": {\n    \"scenario\": \"TRANSFER\",\n    \"initiator\": \"PAYER\",\n    \"initiatorType\": \"CONSUMER\"\n  },\n  \"note\": \"hej\",\n  \"expiration\": \"2017-11-15T22:17:28.985-01:00\",\n    \"extensionList\": {\n        \"extension\": [{\n            \"key\": \"KYCPayerTier\", \"value\": \"1\"\n        }, {\n            \"key\": \"KYCNationality\", \"value\": \"CI\"\n        }, {\n            \"key\": \"KYCOccupation\", \"value\": \"Engineer\"\n        }, {\n            \"key\": \"KYCEmployerName\", \"value\": \"Example Corp\"\n        }, {\n            \"key\": \"KYCContactPhone\", \"value\": \"1122334455\"\n        }, {\n            \"key\": \"KYCGender\", \"value\": \"m\"\n        }, {\n            \"key\": \"KYCEmailAddress\", \"value\": \"user@mail.com\"\n        }, {\n            \"key\": \"KYCBirthCountry\", \"value\": \"CI\"\n        }, {\n            \"key\": \"KYCPayerAddress1\", \"value\": \"Immeuble Le Quartz Boulevard Valéry Giscard d’Estaing Marcory\"\n        }, {\n            \"key\": \"KYCPayerAddress2\", \"value\": \"11 BP 202 Abidjan 11\"\n        }, {\n            \"key\": \"KYCPayerAddressCity\", \"value\": \"Abidjan\"\n        }, {\n            \"key\": \"KYCPayerAddressCode\", \"value\": \"NE1 3TQ\"\n        }, {\n            \"key\": \"KYCPayerIDType\", \"value\": \"PASSPORT\"\n        }, {\n            \"key\": \"KYCPayerIDValue\", \"value\": \"770423742\"\n        }, {\n            \"key\": \"KYCPayerTransferReason\", \"value\": \"Bill payment\"\n        }]\n \n }    \n}\n\n\n"
						},
						"url": {
							"raw": "{{HOST_QUOTING_SERVICE}}/quotes",
							"host": [
								"{{HOST_QUOTING_SERVICE}}"
							],
							"path": [
								"quotes"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "3d36ae98-a04e-4311-b951-3716c2cc8e09",
				"type": "text/javascript",
				"exec": [
					"pm.environment.set('dateHeader', (new Date()).toUTCString());",
					"",
					"var url = pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+\"/participants/\"+ pm.environment.get(\"payerfsp\")+\"/accounts\";",
					"",
					"pm.sendRequest(url, function (err, response) {",
					"    var jsonData = response.json()",
					"    for(var i in jsonData) {",
					"        if(jsonData[i].ledgerAccountType === \"POSITION\") {",
					"            pm.environment.set(\"payerfspPositionAccountId\", jsonData[i].id);",
					"        }",
					"        if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
					"            pm.environment.set(\"payerfspSettlementAccountId\", jsonData[i].id);",
					"        }",
					"    }",
					"    ",
					"});",
					"",
					"url = pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+\"/participants/\"+ pm.environment.get(\"payeefsp\")+\"/accounts\";",
					"",
					"pm.sendRequest(url, function (err, response) {",
					"    var jsonData = response.json()",
					"    for(var i in jsonData) {",
					"        if(jsonData[i].ledgerAccountType === \"POSITION\") {",
					"            pm.environment.set(\"payeefspPositionAccountId\", jsonData[i].id);",
					"        }",
					"        if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
					"            pm.environment.set(\"payeefspSettlementAccountId\", jsonData[i].id);",
					"        }",
					"    }",
					"    ",
					"});",
					"",
					"url = pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+\"/participants/\"+ pm.environment.get(\"testfsp1\")+\"/accounts\";",
					"pm.sendRequest(url, function (err, response) {",
					"    var jsonData = response.json()",
					"    for(var i in jsonData) {",
					"        if(jsonData[i].ledgerAccountType === \"POSITION\") {",
					"            pm.environment.set(\"testfsp1PositionAccountId\", jsonData[i].id);",
					"        }",
					"        if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
					"            pm.environment.set(\"testfsp1SettlementAccountId\", jsonData[i].id);",
					"        }",
					"    }",
					"    ",
					"});",
					"",
					"url = pm.environment.get(\"HOST_CENTRAL_LEDGER\")+pm.environment.get(\"BASE_CENTRAL_LEDGER_ADMIN\")+\"/participants/\"+ pm.environment.get(\"testfsp2\")+\"/accounts\";",
					"pm.sendRequest(url, function (err, response) {",
					"    var jsonData = response.json()",
					"    for(var i in jsonData) {",
					"        if(jsonData[i].ledgerAccountType === \"POSITION\") {",
					"            pm.environment.set(\"testfsp2PositionAccountId\", jsonData[i].id);",
					"        }",
					"        if(jsonData[i].ledgerAccountType === \"SETTLEMENT\") {",
					"            pm.environment.set(\"testfsp2SettlementAccountId\", jsonData[i].id);",
					"        }",
					"    }",
					"    ",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "3e99b3c6-5f5b-41fa-a029-b2e924c36e02",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}