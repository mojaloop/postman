{
	"info": {
		"_postman_id": "4f49527b-33e8-4f16-95b7-1f90100104e5",
		"name": "MojaloopHub_Setup",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Hub Account",
			"item": [
				{
					"name": "Add Hub Account-HUB_MULTILATERAL_SETTLEMENT",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "FSPIOP-Source",
								"type": "text",
								"value": "hub_operator"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"HUB_MULTILATERAL_SETTLEMENT\",\n  \"currency\": \"{{currency}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/Hub/accounts",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
							],
							"path": [
								"participants",
								"Hub",
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Hub Account-HUB_RECONCILIATION",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "FSPIOP-Source",
								"value": "hub_operator",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"HUB_RECONCILIATION\",\n  \"currency\": \"{{currency}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/Hub/accounts",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
							],
							"path": [
								"participants",
								"Hub",
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Hub Set Email-SETTLEMENT_TRANSFER_POSITION_CHANGE_EMAIL",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "FSPIOP-Source",
								"value": "hub_operator",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"SETTLEMENT_TRANSFER_POSITION_CHANGE_EMAIL\",\n  \"value\": \"{{HUB_OPERATOR_EMAIL}}\"\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/Hub/endpoints",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
							],
							"path": [
								"participants",
								"Hub",
								"endpoints"
							]
						},
						"description": "Generated from a curl request: \ncurl -i -X POST     http://test-central-ledger.mojaloop.test/admin/participants/testfsp2/initialPositionAndLimits     -H 'Cache-Control: no-cache'     -H 'Content-Type: application/json'     -d '{\n    \\\"currency\\\": \\\"USD\\\",\n    \\\"limit\\\": {\n      \\\"type\\\": \\\"NET_DEBIT_CAP\\\",\n      \\\"value\\\": 1000\n    },\n    \\\"initialPosition\\\": 0\n  }'"
					},
					"response": [
						{
							"name": "2. Create Initial Position and Limits",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currency\": \"USD\",\n    \"limit\": {\n      \"type\": \"NET_DEBIT_CAP\",\n      \"value\": 1000\n    },\n    \"initialPosition\": 0\n  }"
								},
								"url": {
									"raw": "http://test-central-ledger.mojaloop.live/admin/participants/testfsp/initialPositionAndLimits",
									"protocol": "http",
									"host": [
										"test-central-ledger",
										"mojaloop",
										"live"
									],
									"path": [
										"admin",
										"participants",
										"testfsp",
										"initialPositionAndLimits"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Hub Set Email-NET_DEBIT_CAP_ADJUSTMENT_EMAIL",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "FSPIOP-Source",
								"value": "hub_operator",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"NET_DEBIT_CAP_ADJUSTMENT_EMAIL\",\n  \"value\": \"sridevi.miriyala@modusbox.com\"\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/Hub/endpoints",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
							],
							"path": [
								"participants",
								"Hub",
								"endpoints"
							]
						},
						"description": "Generated from a curl request: \ncurl -i -X POST     http://test-central-ledger.mojaloop.test/admin/participants/testfsp2/initialPositionAndLimits     -H 'Cache-Control: no-cache'     -H 'Content-Type: application/json'     -d '{\n    \\\"currency\\\": \\\"USD\\\",\n    \\\"limit\\\": {\n      \\\"type\\\": \\\"NET_DEBIT_CAP\\\",\n      \\\"value\\\": 1000\n    },\n    \\\"initialPosition\\\": 0\n  }'"
					},
					"response": [
						{
							"name": "2. Create Initial Position and Limits",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currency\": \"USD\",\n    \"limit\": {\n      \"type\": \"NET_DEBIT_CAP\",\n      \"value\": 1000\n    },\n    \"initialPosition\": 0\n  }"
								},
								"url": {
									"raw": "http://test-central-ledger.mojaloop.live/admin/participants/testfsp/initialPositionAndLimits",
									"protocol": "http",
									"host": [
										"test-central-ledger",
										"mojaloop",
										"live"
									],
									"path": [
										"admin",
										"participants",
										"testfsp",
										"initialPositionAndLimits"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Hub Set Email-NET_DEBIT_CAP_THRESHOLD_BREACH_EMAIL",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Cache-Control",
								"value": "no-cache"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "FSPIOP-Source",
								"value": "hub_operator",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"type\": \"NET_DEBIT_CAP_THRESHOLD_BREACH_EMAIL\",\n  \"value\": \"sridevi.miriyala@modusbox.com\"\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}/participants/Hub/endpoints",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}{{BASE_CENTRAL_LEDGER_ADMIN}}"
							],
							"path": [
								"participants",
								"Hub",
								"endpoints"
							]
						},
						"description": "Generated from a curl request: \ncurl -i -X POST     http://test-central-ledger.mojaloop.test/admin/participants/testfsp2/initialPositionAndLimits     -H 'Cache-Control: no-cache'     -H 'Content-Type: application/json'     -d '{\n    \\\"currency\\\": \\\"USD\\\",\n    \\\"limit\\\": {\n      \\\"type\\\": \\\"NET_DEBIT_CAP\\\",\n      \\\"value\\\": 1000\n    },\n    \\\"initialPosition\\\": 0\n  }'"
					},
					"response": [
						{
							"name": "2. Create Initial Position and Limits",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currency\": \"USD\",\n    \"limit\": {\n      \"type\": \"NET_DEBIT_CAP\",\n      \"value\": 1000\n    },\n    \"initialPosition\": 0\n  }"
								},
								"url": {
									"raw": "http://test-central-ledger.mojaloop.live/admin/participants/testfsp/initialPositionAndLimits",
									"protocol": "http",
									"host": [
										"test-central-ledger",
										"mojaloop",
										"live"
									],
									"path": [
										"admin",
										"participants",
										"testfsp",
										"initialPositionAndLimits"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Settlement Models",
			"item": [
				{
					"name": "Create settlement model DEFERREDNET",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{HUB_OPERATOR_BEARER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "FSPIOP-Source",
								"value": "{{hub_operator}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"DEFERREDNET\",\n  \"settlementGranularity\": \"NET\",\n  \"settlementInterchange\": \"MULTILATERAL\",\n  \"settlementDelay\": \"DEFERRED\",\n  \"requireLiquidityCheck\": true,\n  \"ledgerAccountType\": \"POSITION\",\n  \"autoPositionReset\": true\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/settlementModels",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"settlementModels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create settlement model DEFERRED NET USD",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"DEFERREDNETUSD\",\n  \"settlementGranularity\": \"NET\",\n  \"settlementInterchange\": \"MULTILATERAL\",\n  \"settlementDelay\": \"DEFERRED\",\n  \"currency\": \"USD\",\n  \"requireLiquidityCheck\": true,\n  \"ledgerAccountType\": \"POSITION\",\n  \"autoPositionReset\": true\n}"
						},
						"url": {
							"raw": "{{HOST_CENTRAL_LEDGER}}/settlementModels",
							"host": [
								"{{HOST_CENTRAL_LEDGER}}"
							],
							"path": [
								"settlementModels"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Oracle Onboarding",
			"item": [
				{
					"name": "Register MSISDN Oracle",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.participants+json;version=1"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.participants+json;version=1.0"
							},
							{
								"key": "Date",
								"value": ""
							},
							{
								"key": "Postman-Token",
								"value": "003d55c1-2ebc-4e25-b9da-26bf053a8a5c"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oracleIdType\": \"MSISDN\",\n  \"endpoint\": {\n    \"value\": \"{{HOST_SIMULATOR}}/oracle\",\n    \"endpointType\": \"URL\"\n  },\n  \"currency\": \"{{currency}}\",\n  \"isDefault\": true\n}"
						},
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_ADMIN}}/oracles",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_ADMIN}}"
							],
							"path": [
								"oracles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register BUSINESS Oracle",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.participants+json;version=1"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.participants+json;version=1.0"
							},
							{
								"key": "Date",
								"value": ""
							},
							{
								"key": "Postman-Token",
								"value": "003d55c1-2ebc-4e25-b9da-26bf053a8a5c"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oracleIdType\": \"BUSINESS\",\n  \"endpoint\": {\n    \"value\": \"{{HOST_SIMULATOR}}/oracle\",\n    \"endpointType\": \"URL\"\n  },\n  \"currency\": \"{{currency}}\",\n  \"isDefault\": true\n}"
						},
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_ADMIN}}/oracles",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_ADMIN}}"
							],
							"path": [
								"oracles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register ALIAS Oracle",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.interoperability.participants+json;version=1"
							},
							{
								"key": "Cache-Control",
								"value": "no-cache"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.interoperability.participants+json;version=1.0"
							},
							{
								"key": "Date",
								"value": ""
							},
							{
								"key": "Postman-Token",
								"value": "003d55c1-2ebc-4e25-b9da-26bf053a8a5c"
							},
							{
								"key": "cache-control",
								"value": "no-cache"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"oracleIdType\": \"ALIAS\",\n  \"endpoint\": {\n    \"value\": \"{{HOST_SIMULATOR}}/oracle\",\n    \"endpointType\": \"URL\"\n  },\n  \"currency\": \"{{currency}}\",\n  \"isDefault\": true\n}"
						},
						"url": {
							"raw": "{{HOST_ACCOUNT_LOOKUP_ADMIN}}/oracles",
							"host": [
								"{{HOST_ACCOUNT_LOOKUP_ADMIN}}"
							],
							"path": [
								"oracles"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "dc749716-89f0-4247-9100-14f72c14271c",
				"type": "text/javascript",
				"exec": [
					"if (pm.environment.get('WS02_OAUTH_ENABLED') === 'true') {",
					"",
					"    // Get Token for Hub Operator",
					"    let authHeader = btoa(`${pm.environment.get('HUB_OPERATOR_CONSUMER_KEY')}:${pm.environment.get('HUB_OPERATOR_CONSUMER_SECRET')}`);",
					"    let getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('HUB_OPERATOR_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"    // Get Token for Payerfsp",
					"    authHeader = btoa(`${pm.environment.get('PAYERFSP_CONSUMER_KEY')}:${pm.environment.get('PAYERFSP_CONSUMER_SECRET')}`);",
					"    getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('PAYERFSP_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"    // Get Token for Payeefsp",
					"    authHeader = btoa(`${pm.environment.get('PAYEEFSP_CONSUMER_KEY')}:${pm.environment.get('PAYEEFSP_CONSUMER_SECRET')}`);",
					"    getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('PAYEEFSP_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"    // Get Token for Testfsp1",
					"    authHeader = btoa(`${pm.environment.get('TESTFSP1_CONSUMER_KEY')}:${pm.environment.get('TESTFSP1_CONSUMER_SECRET')}`);",
					"    getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('TESTFSP1_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"    // Get Token for Testfsp2",
					"    authHeader = btoa(`${pm.environment.get('TESTFSP2_CONSUMER_KEY')}:${pm.environment.get('TESTFSP2_CONSUMER_SECRET')}`);",
					"    getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('TESTFSP2_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"    // Get Token for Testfsp3",
					"    authHeader = btoa(`${pm.environment.get('TESTFSP3_CONSUMER_KEY')}:${pm.environment.get('TESTFSP3_CONSUMER_SECRET')}`);",
					"    getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('TESTFSP3_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"      // Get Token for SIM1",
					"    authHeader = btoa(`${pm.environment.get('SIM1_CONSUMER_KEY')}:${pm.environment.get('SIM1_CONSUMER_SECRET')}`);",
					"    getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('SIM1_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"    // Get Token for SIM2",
					"    authHeader = btoa(`${pm.environment.get('SIM2_CONSUMER_KEY')}:${pm.environment.get('SIM2_CONSUMER_SECRET')}`);",
					"    getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('SIM2_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"    // Get Token for SIM3",
					"    authHeader = btoa(`${pm.environment.get('SIM3_CONSUMER_KEY')}:${pm.environment.get('SIM3_CONSUMER_SECRET')}`);",
					"    getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('SIM3_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"    // Get Token for Testfsp4",
					"    authHeader = btoa(`${pm.environment.get('TESTFSP4_CONSUMER_KEY')}:${pm.environment.get('TESTFSP4_CONSUMER_SECRET')}`);",
					"    getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('TESTFSP4_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"    // Get Token for SIM4",
					"    authHeader = btoa(`${pm.environment.get('SIM4_CONSUMER_KEY')}:${pm.environment.get('SIM4_CONSUMER_SECRET')}`);",
					"    getTokenRequest = {",
					"        url: pm.environment.get(\"HOST_SWITCH\") + '/token/',",
					"        method: 'POST',",
					"        header: {",
					"            \"Authorization\": `Basic ${authHeader}`,",
					"            'Content-Type': 'application/x-www-form-urlencoded',",
					"        },",
					"        body: {",
					"            mode: 'urlencoded',",
					"            urlencoded: [",
					"                { key: \"grant_type\", value: \"client_credentials\", disabled: false },",
					"            ]",
					"        }",
					"    };",
					"    pm.sendRequest(getTokenRequest, function (err, response) {",
					"        var jsonData = response.json();",
					"        pm.environment.set('SIM4_BEARER_TOKEN', jsonData.access_token);",
					"    });",
					"",
					"}",
					"",
					"if(!pm.environment.get('jrsassign')) {",
					"    pm.sendRequest('http://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js', function (err, response) {",
					"        pm.environment.set('jrsassign', response.text());",
					"    });",
					"}",
					"",
					"// Get Token for Gmail API",
					"let getGoogleTokenRequest = {",
					"    url: 'https://oauth2.googleapis.com/token',",
					"    method: 'POST',",
					"    header: {",
					"        'Content-Type': 'application/x-www-form-urlencoded',",
					"    },",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            { key: \"client_id\", value: pm.environment.get(\"GOOGLE_CLIENT_ID\") },",
					"            { key: \"client_secret\", value: pm.environment.get(\"GOOGLE_CLIENT_SECRET\") },",
					"            { key: \"grant_type\", value: \"refresh_token\" },",
					"            { key: \"refresh_token\", value: pm.environment.get(\"GOOGLE_REFRESH_TOKEN\") }",
					"        ]",
					"    }",
					"};",
					"pm.sendRequest(getGoogleTokenRequest, function (err, response) {",
					"    const jsonData = response.json();",
					"    pm.environment.set('googleServisesAccessToken', jsonData.access_token);",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "9768ba94-1d0d-4bad-a4c5-fac0106f1c70",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}